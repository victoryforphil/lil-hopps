var searchIndex = JSON.parse('{\
"ahash":{"doc":"AHash is a high performance keyed hash function.","t":"DCLLLLLLLLLALLLLLLLLLLLIDLLLLLLLKLLLLFLLLLLL","n":["AHasher","RandomState","borrow","borrow_mut","clone","clone_into","default","finish","fmt","from","into","random_state","to_owned","try_from","try_into","type_id","write","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","RandomSource","RandomState","borrow","borrow_mut","build_hasher","clone","clone_into","fmt","from","gen_hasher_seed","generate_with","hash_one","into","new","set_random_source","to_owned","try_from","try_into","type_id","with_seed","with_seeds"],"q":[[0,"ahash"],[23,"ahash::random_state"]],"d":["A <code>Hasher</code> for hashing an arbitrary stream of bytes.","","","","","","Constructs a new AHasher with fixed keys. If <code>std</code> is …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A supplier of Randomness used for different hashers. See …","Provides a Hasher factory. This is typically used (e.g. by …","","","Constructs a new AHasher with keys based on this …","","","","Returns the argument unchanged.","","Create a new <code>RandomState</code> <code>BuildHasher</code> based on the provided …","Calculates the hash of a single value. This provides a …","Calls <code>U::from(self)</code>.","Create a new <code>RandomState</code> <code>BuildHasher</code> using random keys.","Provides an optional way to manually supply a source of …","","","","","Build a <code>RandomState</code> from a single key. The provided key …","Allows for explicitly setting the seeds to used. All …"],"i":[0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,13,13,13,13,13,13,13,15,13,13,13,13,0,13,13,13,13,13,13],"f":[0,0,[[]],[[]],[1,1],[[]],[[],1],[1,2],[[1,3],4],[[]],[[]],0,[[]],[[],5],[[],5],[[],6],[[1,[8,[7]]]],[[1,9]],[[1,10]],[[1,11]],[[1,2]],[[1,7]],[[1,12]],0,0,[[]],[[]],[13,1],[13,13],[[]],[[13,3],4],[[]],[[],12],[[2,2,2,2],13],[[13,14],2],[[]],[[],13],[[[0,[15,16,17]]],[[5,[18]]]],[[]],[[],5],[[],5],[[],6],[12,13],[[2,2,2,2],13]],"c":[],"p":[[3,"AHasher"],[15,"u64"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[15,"u8"],[15,"slice"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"usize"],[3,"RandomState"],[8,"Hash"],[8,"RandomSource"],[8,"Send"],[8,"Sync"],[15,"bool"]]},\
"allocator_api2":{"doc":"allocator-api2 crate.","t":"IAAKLLKAODIDIDDLLFKFLLKLLLLLLLLLLLLLLLLLLLLLLLLFKKLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["SliceExt","alloc","boxed","repeat","to_vec","to_vec","to_vec_in","vec","vec","AllocError","Allocator","Global","GlobalAlloc","Layout","LayoutError","align","align_to","alloc","alloc","alloc_zeroed","alloc_zeroed","alloc_zeroed","allocate","allocate","allocate_zeroed","allocate_zeroed","allocate_zeroed","array","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_ref","by_ref","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","dangling","dealloc","dealloc","deallocate","deallocate","default","eq","eq","eq","extend","extend_packed","fmt","fmt","fmt","fmt","fmt","fmt","for_value","for_value_raw","from","from","from","from","from_size_align","from_size_align_unchecked","grow","grow","grow","grow_zeroed","grow_zeroed","grow_zeroed","handle_alloc_error","hash","into","into","into","into","new","pad_to_align","padding_needed_for","realloc","realloc","realloc","repeat","repeat_packed","shrink","shrink","shrink","size","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Box","allocator","as_mut","as_ref","assume_init","assume_init","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_from","clone_from","clone_into","cmp","default","default","default","deref","deref_mut","downcast","downcast","downcast","downcast_unchecked","downcast_unchecked","downcast_unchecked","drop","eq","finish","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_iter","from_raw","from_raw_in","ge","gt","hash","into","into_boxed_slice","into_future","into_inner","into_iter","into_non_null","into_pin","into_raw","into_raw_with_allocator","into_vec","into_vec","last","le","len","lt","ne","new","new_in","new_uninit","new_uninit_in","new_uninit_slice","new_uninit_slice_in","new_zeroed","new_zeroed_in","new_zeroed_slice","new_zeroed_slice_in","next","next_back","nth","nth_back","partial_cmp","pin","pin_in","poll","size_hint","slice","to_owned","to_string","try_from","try_from","try_into","try_new","try_new_in","try_new_uninit","try_new_uninit_in","try_new_uninit_slice","try_new_zeroed","try_new_zeroed_in","try_new_zeroed_slice","type_id","write","write","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","Drain","IntoIter","Splice","Vec","allocator","allocator","allocator","append","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_mut_slice","as_ptr","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_from","clone_into","clone_into","cmp","count","dedup","dedup_by","dedup_by_key","default","deref","deref_mut","drain","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","extend","extend","extend_from_slice","extend_from_within","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_iter","from_raw_parts","from_raw_parts_in","hash","index","index_mut","insert","into","into","into","into","into_boxed_slice","into_flattened","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_raw_parts","into_raw_parts_with_alloc","is_empty","keep_rest","leak","len","ne","ne","ne","ne","ne","ne","new","new_in","next","next","next","next_back","next_back","next_back","partial_cmp","pop","push","push_within_capacity","remove","reserve","reserve_exact","resize","resize_with","retain","retain_mut","set_len","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","spare_capacity_mut","splice","split_at_spare_mut","split_off","swap_remove","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","with_capacity","with_capacity_in"],"q":[[0,"allocator_api2"],[9,"allocator_api2::alloc"],[113,"allocator_api2::boxed"],[227,"allocator_api2::vec"]],"d":["Slice methods that use <code>Box</code> and <code>Vec</code> from this crate.","Memory allocation APIs","The <code>Box&lt;T&gt;</code> type for heap allocation.","Creates a vector by copying a slice <code>n</code> times.","Copies <code>self</code> into a new <code>Vec</code>.","Copies <code>self</code> into a new <code>Vec</code>.","Copies <code>self</code> into a new <code>Vec</code> with an allocator.","A contiguous growable array type with heap-allocated …","Creates a <code>Vec</code> containing the arguments.","The <code>AllocError</code> error indicates an allocation failure that …","An implementation of <code>Allocator</code> can allocate, grow, shrink, …","The global memory allocator.","A memory allocator that can be registered as the standard …","Layout of a block of memory.","The parameters given to <code>Layout::from_size_align</code> or some …","The minimum byte alignment for a memory block of this …","Creates a layout describing the record that can hold a …","Allocate memory with the global allocator.","Allocate memory as described by the given <code>layout</code>.","Allocate zero-initialized memory with the global allocator.","Behaves like <code>alloc</code>, but also ensures that the contents are …","Behaves like <code>alloc</code>, but also ensures that the contents are …","Attempts to allocate a block of memory.","","Behaves like <code>allocate</code>, but also ensures that the returned …","Behaves like <code>allocate</code>, but also ensures that the returned …","","Creates a layout describing the record for a <code>[T; n]</code>.","","","","","","","","","Creates a “by reference” adapter for this instance of …","Creates a “by reference” adapter for this instance of …","","","","","","","","","Creates a <code>NonNull</code> that is dangling, but well-aligned for …","Deallocate memory with the global allocator.","Deallocate the block of memory at the given <code>ptr</code> pointer …","Deallocates the memory referenced by <code>ptr</code>.","","","","","","Creates a layout describing the record for <code>self</code> followed by","Creates a layout describing the record for <code>self</code> followed by","","","","","","","Produces layout describing a record that could be used to …","Produces layout describing a record that could be used to …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a <code>Layout</code> from a given <code>size</code> and <code>align</code>, or …","Creates a layout, bypassing all checks.","Attempts to extend the memory block.","Attempts to extend the memory block.","","Behaves like <code>grow</code>, but also ensures that the new contents …","Behaves like <code>grow</code>, but also ensures that the new contents …","","Abort on memory allocation error or failure.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a <code>Layout</code> suitable for holding a value of type <code>T</code>.","Creates a layout by rounding the size of this layout up to …","Returns the amount of padding we must insert after <code>self</code> to …","Reallocate memory with the global allocator.","Shrink or grow a block of memory to the given <code>new_size</code> in …","Shrink or grow a block of memory to the given <code>new_size</code> in …","Creates a layout describing the record for <code>n</code> instances of …","Creates a layout describing the record for <code>n</code> instances of …","Attempts to shrink the memory block.","Attempts to shrink the memory block.","","The minimum size in bytes for a memory block of this …","","","","","","","","","","","","","","","","","","","A pointer type for heap allocation.","Returns a reference to the underlying allocator.","","","Converts to <code>Box&lt;T, A&gt;</code>.","Converts to <code>Box&lt;[T], A&gt;</code>.","","","","","","Returns a new box with a <code>clone()</code> of this box’s contents.","","","","Copies <code>source</code>’s contents into <code>self</code> without creating a …","","","","","Creates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.","","","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Downcasts the box to a concrete type.","Downcasts the box to a concrete type.","Downcasts the box to a concrete type.","","","","","","","Convert a vector into a boxed slice.","Converts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …","","Converts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>","Returns the argument unchanged.","Converts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>","Converts a <code>T</code> into a <code>Box&lt;T&gt;</code>","Converts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>","Converts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>","","Constructs a box from a raw pointer.","Constructs a box from a raw pointer in the given allocator.","","","","Calls <code>U::from(self)</code>.","Converts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>","","Consumes the <code>Box</code>, returning the wrapped value.","","","Converts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …","Consumes the <code>Box</code>, returning a wrapped raw pointer.","Consumes the <code>Box</code>, returning a wrapped raw pointer and the …","","","","","","","","Allocates memory on the heap and then places <code>x</code> into it.","Allocates memory in the given allocator then places <code>x</code> into …","Constructs a new box with uninitialized contents.","Constructs a new box with uninitialized contents in the …","Constructs a new boxed slice with uninitialized contents.","Constructs a new boxed slice with uninitialized contents …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new boxed slice with uninitialized contents, …","Constructs a new boxed slice with uninitialized contents …","","","","","","Constructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…","Constructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …","","","","","","Attempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.","","","Allocates memory on the heap then places <code>x</code> into it, …","Allocates memory in the given allocator then places <code>x</code> into …","Constructs a new box with uninitialized contents on the …","Constructs a new box with uninitialized contents in the …","Constructs a new boxed slice with uninitialized contents. …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new boxed slice with uninitialized contents, …","","Writes the value and converts to <code>Box&lt;T, A&gt;</code>.","","","","","","","","","","","","","","A draining iterator for <code>Vec&lt;T&gt;</code>.","An iterator that moves out of a vector.","A splicing iterator for <code>Vec</code>.","A contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","","","Returns an unsafe mutable pointer to the vector’s …","Returns the remaining items of this iterator as a mutable …","Extracts a mutable slice of the entire vector.","Returns a raw pointer to the vector’s buffer, or a …","","","","","Returns the remaining items of this iterator as a slice.","Returns the remaining items of this iterator as a slice.","Extracts a slice containing the entire vector.","","","","","","","","","Returns the total number of elements the vector can hold …","Clears the vector, removing all values.","","","","","","","","Removes consecutive repeated elements in the vector …","Removes all but the first of consecutive elements in the …","Removes all but the first of consecutive elements in the …","Creates an empty <code>Vec&lt;T&gt;</code>.","","","Removes the specified range from the vector in bulk, …","","","","","","","","","","","","","Clones and appends all elements in a slice to the <code>Vec</code>.","Copies elements from <code>src</code> range to the end of the vector.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert a boxed slice into a vector by transferring …","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Returns the argument unchanged.","Allocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.","Convert a boxed array into a vector by transferring …","Returns the argument unchanged.","","Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a capacity, and …","Creates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a capacity, a …","","","","Inserts an element at position <code>index</code> within the vector, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the vector into <code>Box&lt;[T]&gt;</code>.","Takes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.","","","","","Creates a consuming iterator, that is, one that moves each …","","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","Returns <code>true</code> if the vector contains no elements.","Keep unyielded elements in the source <code>Vec</code>.","Consumes and leaks the <code>Vec</code>, returning a mutable reference …","Returns the number of elements in the vector, also …","","","","","","","Constructs a new, empty <code>Vec&lt;T&gt;</code>.","Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.","","","","","","","","Removes the last element from a vector and returns it, or …","Appends an element to the back of a collection.","Appends an element if there is sufficient spare capacity, …","Removes and returns the element at position <code>index</code> within …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves the minimum capacity for at least <code>additional</code> more …","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate, …","Forces the length of the vector to <code>new_len</code>.","Shrinks the capacity of the vector with a lower bound.","Shrinks the capacity of the vector as much as possible.","","","","Returns the remaining spare capacity of the vector as a …","Creates a splicing iterator that replaces the specified …","Returns vector content as a slice of <code>T</code>, along with the …","Splits the collection into two at the given index.","Removes an element from the vector and returns it.","","","Shortens the vector, keeping the first <code>len</code> elements and …","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for at least …","","","","","Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …","Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …"],"i":[0,0,0,63,63,63,63,0,0,0,0,0,0,0,0,7,7,0,64,0,64,64,6,3,6,6,3,7,3,13,7,8,3,13,7,8,6,6,3,13,7,8,3,13,7,8,7,0,64,6,3,3,13,7,8,7,7,3,13,13,7,8,8,7,7,3,13,7,8,7,7,6,6,3,6,6,3,0,7,3,13,7,8,7,7,7,0,64,64,7,7,6,6,3,7,3,13,7,8,13,8,3,13,7,8,3,13,7,8,3,13,7,8,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0,0,0,57,58,4,4,4,4,4,58,4,4,57,58,4,4,57,58,4,57,58,4,61,57,58,4,61,4,4,58,4,4,58,4,4,58,4,4,4,4,4,4,4,57,58,4,61,4,4,4,4,4,4,4,4,4,4,57,58,4,61,57,58,4,4,4,4,4,4,4,61,4,4,4,4,4,4,4,57,58,4,61,4,4,57,58,4,4,4,61,4,4,4,57,4,4,4,4,4,4,4,4,4,4,57,58,61,57,58,61,4,4,4,4,4,4,4,4,4,4,4,4,4,4,57,58,61,4,4,4,4,4,58,4,4,57,58,4,61,57,58,4,61,4,4,57,58,4,61,4,4],"f":[0,0,0,[1,[[4,[2,3]]]],[[],[[4,[5,3]]]],[[],[[4,[5,3]]]],[6,[[4,[5,6]]]],0,0,0,0,0,0,0,0,[7,1],[[7,1],[[9,[7,8]]]],[7,10],[7,10],[7,10],[7,10],[7,10],[7,[[9,[[12,[[11,[10]]]],13]]]],[[3,7],[[9,[[12,[[11,[10]]]],13]]]],[7,[[9,[[12,[[11,[10]]]],13]]]],[7,[[9,[[12,[[11,[10]]]],13]]]],[[3,7],[[9,[[12,[[11,[10]]]],13]]]],[1,[[9,[7,8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[14,14],[3,3],[13,13],[7,7],[8,8],[[]],[[]],[[]],[[]],[7,[[12,[10]]]],[[10,7]],[[10,7]],[[[12,[10]],7]],[[3,[12,[10]],7]],[[],3],[[13,13],15],[[7,7],15],[[8,8],15],[[7,7],[[9,[8]]]],[[7,7],[[9,[7,8]]]],[[3,16],17],[[13,16],17],[[13,16],17],[[7,16],[[9,[18]]]],[[8,16],[[9,[18]]]],[[8,16],[[9,[18]]]],[14,7],[[],7],[[]],[[]],[[]],[[]],[[1,1],[[9,[7,8]]]],[[1,1],7],[[[12,[10]],7,7],[[9,[[12,[[11,[10]]]],13]]]],[[[12,[10]],7,7],[[9,[[12,[[11,[10]]]],13]]]],[[3,[12,[10]],7,7],[[9,[[12,[[11,[10]]]],13]]]],[[[12,[10]],7,7],[[9,[[12,[[11,[10]]]],13]]]],[[[12,[10]],7,7],[[9,[[12,[[11,[10]]]],13]]]],[[3,[12,[10]],7,7],[[9,[[12,[[11,[10]]]],13]]]],[7,19],[[7,20]],[[]],[[]],[[]],[[]],[[],7],[7,7],[[7,1],1],[[10,7,1],10],[[10,7,1],10],[[10,7,1],10],[[7,1],[[9,[8]]]],[[7,1],[[9,[7,8]]]],[[[12,[10]],7,7],[[9,[[12,[[11,[10]]]],13]]]],[[[12,[10]],7,7],[[9,[[12,[[11,[10]]]],13]]]],[[3,[12,[10]],7,7],[[9,[[12,[[11,[10]]]],13]]]],[7,1],[[]],[[]],[[]],[[]],[[],21],[[],21],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],22],[[],22],[[],22],[[],22],0,[[[23,[14,6]]],6],[[[23,[14,6]]],14],[[[23,[14,6]]],14],[[[23,[24,6]]],[[23,[6]]]],[[[23,[[11,[24]],6]]],[[23,[11,6]]]],[[[23,[14,6]]],14],[[]],[[[23,[14,6]]],14],[[]],[[[23,[25]]],[[23,[25]]]],[[[23,[5,[0,[6,5]]]]],[[23,[5,[0,[6,5]]]]]],[[[23,[[11,[5]],[0,[6,5]]]]],[[23,[[11,[5]],[0,[6,5]]]]]],[[[23,[26]]],[[23,[26]]]],[[[23,[[11,[5]],[0,[6,5]]]],[23,[[11,[5]],[0,[6,5]]]]]],[[[23,[5,[0,[6,5]]]],[23,[5,[0,[6,5]]]]]],[[]],[[[23,[[0,[14,27]],6]],[23,[[0,[14,27]],6]]],28],[[],[[23,[26,[0,[6,29]]]]]],[[],[[23,[11,[0,[6,29]]]]]],[[],[[23,[29]]]],[[[23,[14,6]]],14],[[[23,[14,6]]],14],[[[23,[30,6]]],[[9,[[23,[30,6]],[23,[30,6]]]]]],[[[23,[30,6]]],[[9,[[23,[30,6]],[23,[30,6]]]]]],[[[23,[30,6]]],[[9,[[23,[30,6]],[23,[30,6]]]]]],[[[23,[30,6]]],[[23,[30,6]]]],[[[23,[30,6]]],[[23,[30,6]]]],[[[23,[30,6]]],[[23,[30,6]]]],[[[23,[14,6]]]],[[[23,[[0,[14,31]],6]],[23,[[0,[14,31]],6]]],15],[[[23,[[0,[14,20]],6]]],32],[[[23,[14,6]],16],17],[[[23,[[0,[33,14]],6]],16],17],[[[23,[[0,[34,14]],6]],16],17],[[[4,[6]]],[[23,[11,6]]]],[25,[[23,[25]]]],[19],[26,[[23,[26,[0,[6,29]]]]]],[[]],[35,[[23,[11]]]],[[],23],[[[11,[2]]],[[23,[[11,[2]],[0,[6,29]]]]]],[[[23,[26,6]]],[[23,[[11,[10]],6]]]],[36,[[23,[11]]]],[[],[[23,[14]]]],[6,[[23,[14,6]]]],[[[23,[[0,[14,37]],6]],[23,[[0,[14,37]],6]]],15],[[[23,[[0,[14,37]],6]],[23,[[0,[14,37]],6]]],15],[[[23,[[0,[14,38]],6]],20]],[[]],[[[23,[6]]],[[23,[11,6]]]],[[]],[[[23,[6]]]],[[]],[[[23,[14,6]]]],[[[23,[14,6]]],[[39,[[23,[14,6]]]]]],[[[23,[14,6]]]],[[[23,[14,6]]]],[[[23,[11,6,6]]],[[4,[6,6]]]],[[[23,[35,6,6]]],[[4,[6,6]]]],[[[23,[[0,[40,14]],6]]],41],[[[23,[[0,[14,37]],6]],[23,[[0,[14,37]],6]]],15],[[[23,[[0,[42,14]],6]]],1],[[[23,[[0,[14,37]],6]],[23,[[0,[14,37]],6]]],15],[[[23,[[0,[14,31]],6]],[23,[[0,[14,31]],6]]],15],[[],23],[[6,6],[[23,[6,6]]]],[[],[[23,[24]]]],[[6,6],[[23,[24,6,6]]]],[1,[[23,[[11,[24]]]]]],[[1,6],[[23,[[11,[24]],6]]]],[[],[[23,[24]]]],[[6,6],[[23,[24,6,6]]]],[1,[[23,[[11,[24]]]]]],[[1,6],[[23,[[11,[24]],6]]]],[[[23,[[0,[40,14]],6]]],41],[[[23,[[0,[43,14]],6]]],41],[[[23,[[0,[40,14]],6]],1],41],[[[23,[[0,[43,14]],6]],1],41],[[[23,[[0,[14,37]],6]],[23,[[0,[14,37]],6]]],[[41,[28]]]],[[],[[39,[23]]]],[[6,6],[[39,[[23,[6,6]]]]]],[[[39,[[23,[[0,[14,44,45]],6]]]],46],47],[[[23,[[0,[40,14]],6]]]],[[[23,[35,6]]],[[23,[11,6]]]],[[]],[[],21],[[[23,[11,6]]],[[9,[[23,[35,6]]]]]],[[],9],[[],9],[[],[[9,[23,13]]]],[[6,6],[[9,[[23,[6,6]],13]]]],[[],[[9,[[23,[24]],13]]]],[[6,6],[[9,[[23,[24,6,6]],13]]]],[1,[[9,[[23,[[11,[24]]]],13]]]],[[],[[9,[[23,[24]],13]]]],[[6,6],[[9,[[23,[24,6,6]],13]]]],[1,[[9,[[23,[[11,[24]]]],13]]]],[[],22],[[[23,[24,6]]],[[23,[6]]]],[[[23,[[0,[14,20]],6]],[11,[10]]]],[[[23,[[0,[14,20]],6]],48]],[[[23,[[0,[14,20]],6]],49]],[[[23,[[0,[14,20]],6]],50]],[[[23,[[0,[14,20]],6]],51]],[[[23,[[0,[14,20]],6]],52]],[[[23,[[0,[14,20]],6]],53]],[[[23,[[0,[14,20]],6]],54]],[[[23,[[0,[14,20]],6]],55]],[[[23,[[0,[14,20]],6]],56]],[[[23,[[0,[14,20]],6]],32]],[[[23,[[0,[14,20]],6]],10]],[[[23,[[0,[14,20]],6]],1]],0,0,0,0,[[[57,[6]]],6],[[[58,[6]]],6],[[[4,[6]]],6],[[[4,[6]],[4,[6]]]],[[[4,[6]]],11],[[[4,[6]]],[[4,[6]]]],[[[4,[6]]]],[[[58,[6]]],11],[[[4,[6]]],11],[[[4,[6]]]],[[[57,[6]]],11],[[[58,[6]]],11],[[[4,[6]]],11],[[[4,[6]]],[[4,[6]]]],[[[57,[6]]],11],[[[58,[6]]],11],[[[4,[6]]],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[6]]],1],[[[4,[6]]]],[[[58,[5,[0,[6,5]]]]],[[58,[5,[0,[6,5]]]]]],[[[4,[5,[0,[6,5]]]]],[[4,[5,[0,[6,5]]]]]],[[[4,[5,[0,[6,5]]]],[4,[5,[0,[6,5]]]]]],[[]],[[]],[[[4,[27,6]],[4,[27,6]]],28],[[[58,[6]]],1],[[[4,[31,6]]]],[[[4,[6]],59]],[[[4,[6]],59]],[[],4],[[[4,[6]]],11],[[[4,[6]]],11],[[[4,[6]],[60,[1]]],[[57,[6]]]],[[[57,[6]]]],[[[58,[6]]]],[[[4,[6]]]],[[[61,[40,6]]]],[[[4,[31,6]],35],15],[[[4,[31,6]],11],15],[[[4,[31,6]],[4,[6]]],15],[[[4,[31,6]],35],15],[[[4,[31,6]],11],15],[[[4,[31,6]],11],15],[[[4,[2,6]],36]],[[[4,[6]],36]],[[[4,[5,6]],[11,[5]]]],[[[4,[5,6]],[60,[1]]]],[[[57,[33,6]],16],17],[[[58,[33,6]],16],17],[[[4,[33,6]],16],17],[[[61,[[0,[33,40]],[0,[33,6]]]],16],17],[[]],[[]],[[[23,[11,6]]],[[4,[6]]]],[[[11,[5]]],[[4,[5]]]],[35,4],[[[11,[5]]],[[4,[5]]]],[[]],[26,[[4,[10]]]],[[[23,[35,6]]],[[4,[6]]]],[[]],[36,4],[[1,1],4],[[1,1,6],[[4,[6]]]],[[[4,[38,6]],20]],[[[4,[6]],[62,[11]]]],[[[4,[6]],[62,[11]]]],[[[4,[6]],1]],[[]],[[]],[[]],[[]],[[[4,[6]]],[[23,[11,6]]]],[[[4,[35,6]]],[[4,[6]]]],[[]],[[]],[[[4,[6]]]],[[[4,[6]]]],[[[4,[6]]]],[[]],[[[4,[6]]]],[[[4,[6]]]],[[[4,[6]]],15],[[[57,[6]]]],[[[4,[6]]],11],[[[4,[6]]],1],[[[4,[31,6]],11],15],[[[4,[31,6]],35],15],[[[4,[31,6]],11],15],[[[4,[31,6]],[4,[6]]],15],[[[4,[31,6]],11],15],[[[4,[31,6]],35],15],[[],4],[6,[[4,[6]]]],[[[57,[6]]],41],[[[58,[6]]],41],[[[61,[40,6]]],41],[[[57,[6]]],41],[[[58,[6]]],41],[[[61,[40,6]]],41],[[[4,[37,6]],[4,[37,6]]],[[41,[28]]]],[[[4,[6]]],41],[[[4,[6]]]],[[[4,[6]]],9],[[[4,[6]],1]],[[[4,[6]],1]],[[[4,[6]],1]],[[[4,[5,6]],1,5]],[[[4,[6]],1,59]],[[[4,[6]],59]],[[[4,[6]],59]],[[[4,[6]],1]],[[[4,[6]],1]],[[[4,[6]]]],[[[57,[6]]]],[[[58,[6]]]],[[[61,[40,6]]]],[[[4,[6]]],[[11,[24]]]],[[[4,[6]],[60,[1]],36],[[61,[6]]]],[[[4,[6]]]],[[[4,[5,6]],1],[[4,[5,6]]]],[[[4,[6]],1]],[[]],[[]],[[[4,[6]],1]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[4,[6]],1],[[9,[0]]]],[[[4,[6]],1],[[9,[0]]]],[[],22],[[],22],[[],22],[[],22],[1,4],[[1,6],[[4,[6]]]]],"c":[],"p":[[15,"usize"],[8,"Copy"],[3,"Global"],[3,"Vec"],[8,"Clone"],[8,"Allocator"],[3,"Layout"],[3,"LayoutError"],[4,"Result"],[15,"u8"],[15,"slice"],[3,"NonNull"],[3,"AllocError"],[8,"Sized"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Error"],[15,"never"],[8,"Hasher"],[3,"String"],[3,"TypeId"],[3,"Box"],[19,"MaybeUninit"],[3,"CStr"],[15,"str"],[8,"Ord"],[4,"Ordering"],[8,"Default"],[8,"Any"],[8,"PartialEq"],[15,"u64"],[8,"Debug"],[8,"Display"],[15,"array"],[8,"IntoIterator"],[8,"PartialOrd"],[8,"Hash"],[3,"Pin"],[8,"Iterator"],[4,"Option"],[8,"ExactSizeIterator"],[8,"DoubleEndedIterator"],[8,"Future"],[8,"Unpin"],[3,"Context"],[4,"Poll"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u32"],[3,"Drain"],[3,"IntoIter"],[8,"FnMut"],[8,"RangeBounds"],[3,"Splice"],[8,"SliceIndex"],[8,"SliceExt"],[8,"GlobalAlloc"]]},\
"approx":{"doc":"A crate that provides facilities for testing the …","t":"DIQDIDIKOLLOOOOOOOLLLLLLLLLKKKLLLMMMLLLLLLLLLLMLMLLLKOLLOLLLLLLLLLKOLLO","n":["AbsDiff","AbsDiffEq","Epsilon","Relative","RelativeEq","Ulps","UlpsEq","abs_diff_eq","abs_diff_eq","abs_diff_ne","abs_diff_ne","abs_diff_ne","assert_abs_diff_eq","assert_abs_diff_ne","assert_relative_eq","assert_relative_ne","assert_ulps_eq","assert_ulps_ne","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","default","default_epsilon","default_max_relative","default_max_ulps","epsilon","epsilon","epsilon","epsilon","epsilon","epsilon","eq","eq","eq","from","from","from","into","into","into","max_relative","max_relative","max_ulps","max_ulps","ne","ne","ne","relative_eq","relative_eq","relative_ne","relative_ne","relative_ne","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ulps_eq","ulps_eq","ulps_ne","ulps_ne","ulps_ne"],"q":[[0,"approx"]],"d":["The requisite parameters for testing for approximate …","Equality that is defined using the absolute difference of …","Used for specifying relative comparisons.","The requisite parameters for testing for approximate …","Equality comparisons between two numbers using both the …","The requisite parameters for testing for approximate …","Equality comparisons between two numbers using both the …","A test for equality that uses the absolute difference to …","Approximate equality of using the absolute difference.","The inverse of <code>AbsDiffEq::abs_diff_eq</code>.","The inverse of <code>AbsDiffEq::abs_diff_eq</code>.","Approximate inequality of using the absolute difference.","An assertion that delegates to <code>abs_diff_eq!</code>, and panics …","An assertion that delegates to <code>abs_diff_ne!</code>, and panics …","An assertion that delegates to <code>relative_eq!</code>, and panics …","An assertion that delegates to <code>relative_ne!</code>, and panics …","An assertion that delegates to <code>ulps_eq!</code>, and panics with a …","An assertion that delegates to <code>ulps_ne!</code>, and panics with a …","","","","","","","","","","The default tolerance to use when testing values that are …","The default relative tolerance for testing values that are …","The default ULPs to tolerate when testing values that are …","Replace the epsilon value with the one specified.","Replace the epsilon value with the one specified.","Replace the epsilon value with the one specified.","The tolerance to use when testing values that are close …","The tolerance to use when testing values that are close …","The tolerance to use when testing values that are close …","Peform the equality comparison","Peform the equality comparison","Peform the equality comparison","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Replace the maximum relative value with the one specified.","The relative tolerance for testing values that are …","Replace the max ulps value with the one specified.","The ULPs to tolerate when testing values that are …","Peform the inequality comparison","Peform the inequality comparison","Peform the inequality comparison","A test for equality that uses a relative comparison if the …","Approximate equality using both the absolute difference …","The inverse of <code>RelativeEq::relative_eq</code>.","The inverse of <code>RelativeEq::relative_eq</code>.","Approximate inequality using both the absolute difference …","","","","","","","","","","A test for equality that uses units in the last place …","Approximate equality using both the absolute difference …","The inverse of <code>UlpsEq::ulps_eq</code>.","The inverse of <code>UlpsEq::ulps_eq</code>.","Approximate inequality using both the absolute difference …"],"i":[0,0,3,0,0,0,0,3,0,3,3,0,0,0,0,0,0,0,4,6,8,4,6,8,4,6,8,3,5,7,4,6,8,4,6,8,4,6,8,4,6,8,4,6,8,6,6,8,8,4,6,8,5,0,5,5,0,4,6,8,4,6,8,4,6,8,7,0,7,7,0],"f":[0,0,0,0,0,0,0,[[],1],0,[[],1],[[],1],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],[[4,[[0,[[3,[2]],2]],2]]]],[[],[[6,[[0,[[5,[2]],2]],2]]]],[[],[[8,[[0,[[7,[2]],2]],2]]]],[[]],[[]],[[],9],[[[4,[[0,[[3,[2]],2]],2]]],[[4,[[0,[[3,[2]],2]],2]]]],[[[6,[[0,[[5,[2]],2]],2]]],[[6,[[0,[[5,[2]],2]],2]]]],[[[8,[[0,[[7,[2]],2]],2]]],[[8,[[0,[[7,[2]],2]],2]]]],0,0,0,[[[4,[[0,[[3,[2]],2]],2]],[0,[[3,[2]],2]],2],1],[[[6,[[0,[[5,[2]],2]],2]],[0,[[5,[2]],2]],2],1],[[[8,[[0,[[7,[2]],2]],2]],[0,[[7,[2]],2]],2],1],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[[0,[[5,[2]],2]],2]]],[[6,[[0,[[5,[2]],2]],2]]]],0,[[[8,[[0,[[7,[2]],2]],2]],9],[[8,[[0,[[7,[2]],2]],2]]]],0,[[[4,[[0,[[3,[2]],2]],2]],[0,[[3,[2]],2]],2],1],[[[6,[[0,[[5,[2]],2]],2]],[0,[[5,[2]],2]],2],1],[[[8,[[0,[[7,[2]],2]],2]],[0,[[7,[2]],2]],2],1],[[],1],0,[[],1],[[],1],0,[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[9,1],0,[9,1],[9,1],0],"c":[],"p":[[15,"bool"],[8,"Sized"],[8,"AbsDiffEq"],[3,"AbsDiff"],[8,"RelativeEq"],[3,"Relative"],[8,"UlpsEq"],[3,"Ulps"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"arrayvec":{"doc":"<strong>arrayvec</strong> provides the types <code>ArrayVec</code> and <code>ArrayString</code>:  …","t":"DDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ArrayString","ArrayVec","CapacityError","Drain","IntoIter","as_mut","as_mut_ptr","as_mut_slice","as_mut_str","as_ptr","as_ref","as_ref","as_slice","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","clear","clear","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","deref","deref","deref_mut","deref_mut","drain","drop","drop","drop","element","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","extend","flush","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_byte_string","from_iter","from_str","ge","ge","ge","gt","gt","gt","hash","hash","insert","into","into","into","into","into","into_inner","into_inner_unchecked","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_full","is_full","le","le","le","len","len","lt","lt","lt","new","new","new","new_const","new_const","next","next","next_back","next_back","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pop","pop","pop_at","push","push","push_str","push_unchecked","remaining_capacity","remaining_capacity","remove","remove","retain","set_len","set_len","simplify","size_hint","size_hint","swap_pop","swap_remove","take","to_owned","to_owned","to_owned","to_owned","to_string","to_string","truncate","truncate","try_extend_from_slice","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_push","try_push","try_push_str","type_id","type_id","type_id","type_id","type_id","write","write_char","write_str","zero_filled"],"q":[[0,"arrayvec"]],"d":["A string with a fixed capacity.","A vector with a fixed capacity.","Error value indicating insufficient capacity","A draining iterator for <code>ArrayVec</code>.","By-value iterator for <code>ArrayVec</code>.","","Return a raw mutable pointer to the vector’s buffer.","Return a mutable slice containing all elements of the …","Return a mutable string slice of the whole <code>ArrayString</code>.","Return a raw pointer to the vector’s buffer.","","","Return a slice containing all elements of the vector.","Return a string slice of the whole <code>ArrayString</code>.","","","","","","","","","","","","","","","Return the capacity of the <code>ArrayVec</code>.","Return the capacity of the <code>ArrayString</code>.","Remove all elements in the vector.","Make the string empty.","","","","","","","","","","","","","","Return an empty array","Return an empty <code>ArrayString</code>","","","","","Create a draining iterator that removes the specified …","","","","Extract the overflowing element","","","","","","","","","Extend the <code>ArrayVec</code> with an iterator.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ArrayString</code> from a <code>str</code>.","Returns the argument unchanged.","Create a new <code>ArrayString</code> from a byte string literal.","Create an <code>ArrayVec</code> from an iterator.","","","","","","","","","","Insert <code>element</code> at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the inner fixed size array, if it is full to its …","Return the inner fixed size array.","","","","","","Returns whether the <code>ArrayVec</code> is empty.","Returns whether the string is empty.","Return true if the <code>ArrayVec</code> is completely filled to its …","Return if the <code>ArrayString</code> is completely filled.","","","","Return the number of elements in the <code>ArrayVec</code>.","Return the length of the string.","","","","Create a new empty <code>ArrayVec</code>.","Create a new empty <code>ArrayString</code>.","Create a new <code>CapacityError</code> from <code>element</code>.","Create a new empty <code>ArrayVec</code> (const fn).","Create a new empty <code>ArrayString</code> (const fn).","","","","","","","","","Remove the last element in the vector and return it.","Removes the last character from the string and returns it.","Remove the element at <code>index</code> and shift down the following …","Push <code>element</code> to the end of the vector.","Adds the given char to the end of the string.","Adds the given string slice to the end of the string.","Push <code>element</code> to the end of the vector without checking the …","Returns the capacity left in the <code>ArrayVec</code>.","Returns the capacity left in the <code>ArrayString</code>.","Remove the element at <code>index</code> and shift down the following …","Removes a <code>char</code> from this <code>ArrayString</code> at a byte position …","Retains only the elements specified by the predicate.","Set the vector’s length without dropping or moving out …","Set the strings’s length.","Convert into a <code>CapacityError</code> that does not carry an …","","","Remove the element at <code>index</code> and swap the last element into …","Remove the element at <code>index</code> and swap the last element into …","Returns the ArrayVec, replacing the original with a new …","","","","","","","Shortens the vector, keeping the first <code>len</code> elements and …","Shortens this <code>ArrayString</code> to the specified length.","Copy all elements from the slice and append to the <code>ArrayVec</code>…","","","","","","","","","Insert <code>element</code> at position <code>index</code>.","","","","","","Push <code>element</code> to the end of the vector.","Adds the given char to the end of the string.","Adds the given string slice to the end of the string.","","","","","","","","","Create a new <code>ArrayString</code> value fully filled with ASCII …"],"i":[0,0,0,0,0,1,1,1,3,1,1,3,1,3,1,1,7,12,3,3,8,1,1,7,12,3,3,8,1,3,1,3,1,7,3,8,1,3,1,7,3,8,1,3,8,1,3,1,3,1,3,1,1,7,12,8,1,1,3,3,8,1,3,8,1,1,1,7,3,3,8,8,1,1,7,12,3,3,8,3,1,3,1,3,3,1,3,3,1,3,1,1,7,12,3,8,1,1,1,1,1,7,12,1,3,1,3,1,3,3,1,3,1,3,3,1,3,8,1,3,7,12,7,12,1,3,3,8,1,3,1,1,3,3,1,1,3,1,3,1,1,3,8,7,12,1,1,1,1,7,3,8,3,8,1,3,1,1,1,7,12,3,3,3,8,1,1,7,12,3,8,1,3,3,1,7,12,3,8,1,3,3,3],"f":[0,0,0,0,0,[1,2],[1],[1,2],[3,4],[1],[1,2],[3,4],[1,2],[3,4],[[]],[1,2],[[]],[[]],[3,4],[[]],[[]],[[]],[1,2],[[]],[[]],[3,4],[[]],[[]],[1,5],[3,5],[1],[3],[[[1,[6]]],[[1,[6]]]],[[[7,[6]]],[[7,[6]]]],[3,3],[[[8,[6]]],[[8,[6]]]],[[[1,[6]],[1,[6]]]],[[3,3]],[[]],[[]],[[]],[[]],[[[1,[9]],[1,[9]]],10],[[3,3],10],[[[8,[9]],[8,[9]]],10],[[],1],[[],3],[1],[3,4],[1],[3,4],[[1,[11,[5]]],12],[1],[7],[12],[8],[[[1,[13]],[1,[13]]],14],[[[1,[13]],[2,[13]]],14],[[3,3],14],[[3,4],14],[[[8,[13]],[8,[13]]],14],[[],14],[[],14],[[],14],[[1,15]],[[[1,[16]]],17],[[[1,[18]],19],20],[[[7,[18]],19],20],[[3,19],20],[[3,19],20],[[8,19],20],[[8,19],20],[21,1],[[]],[[]],[[]],[[]],[4,[[22,[3,[8,[4]]]]]],[[]],[[[21,[16]]],[[22,[3,23]]]],[15,1],[4,[[22,[3]]]],[[[1,[24]],[1,[24]]],14],[[3,4],14],[[3,3],14],[[[1,[24]],[1,[24]]],14],[[3,4],14],[[3,3],14],[[[1,[25]],26]],[[3,26]],[[1,5]],[[]],[[]],[[]],[[]],[[]],[1,[[22,[21,1]]]],[1,21],[1],[1,7],[1],[[]],[[]],[1,14],[3,14],[1,14],[3,14],[[[1,[24]],[1,[24]]],14],[[3,4],14],[[3,3],14],[1,5],[3,5],[[[1,[24]],[1,[24]]],14],[[3,3],14],[[3,4],14],[[],1],[[],3],[[],8],[[],1],[[],3],[7,27],[12,27],[7,27],[12,27],[[[1,[24]],[1,[24]]],[[27,[10]]]],[[3,4],[[27,[10]]]],[[3,3],[[27,[10]]]],[[[8,[24]],[8,[24]]],[[27,[10]]]],[1,27],[3,[[27,[28]]]],[[1,5],27],[1],[[3,28]],[[3,4]],[1],[1,5],[3,5],[[1,5]],[[3,5],28],[[1,29]],[[1,5]],[[3,5]],[8,8],[7],[12],[[1,5],27],[[1,5]],[1,1],[[]],[[]],[[]],[[]],[[],30],[[],30],[[1,5]],[[3,5]],[[[1,[31]],[2,[31]]],[[22,[8]]]],[[[2,[6]]],[[22,[[1,[6]]]]]],[[],22],[[],22],[[],22],[4,[[22,[3]]]],[32,[[22,[3]]]],[[],22],[[],22],[[1,5],[[22,[8]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[1,[[22,[8]]]],[[3,28],[[22,[[8,[28]]]]]],[[3,4],[[22,[[8,[4]]]]]],[[],33],[[],33],[[],33],[[],33],[[],33],[[[1,[16]],[2,[16]]],[[17,[5]]]],[[3,28],20],[[3,4],20],[[],3]],"c":[],"p":[[3,"ArrayVec"],[15,"slice"],[3,"ArrayString"],[15,"str"],[15,"usize"],[8,"Clone"],[3,"IntoIter"],[3,"CapacityError"],[8,"Ord"],[4,"Ordering"],[8,"RangeBounds"],[3,"Drain"],[8,"PartialEq"],[15,"bool"],[8,"IntoIterator"],[15,"u8"],[6,"Result"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"array"],[4,"Result"],[3,"Utf8Error"],[8,"PartialOrd"],[8,"Hash"],[8,"Hasher"],[4,"Option"],[15,"char"],[8,"FnMut"],[3,"String"],[8,"Copy"],[3,"Arguments"],[3,"TypeId"]]},\
"bit_vec":{"doc":"Collections implemented with bit vectors.","t":"IDDDDLLLLKLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLK","n":["BitBlock","BitVec","Blocks","IntoIter","Iter","all","and","any","append","bits","blocks","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","capacity","clear","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","cmp","count_ones","default","difference","eq","eq_vec","equivalent","extend","fmt","from","from","from","from","from_byte","from_bytes","from_elem","from_fn","from_iter","get","grow","hash","index","intersect","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","len","nand","negate","new","next","next","next","next_back","next_back","next_back","none","nor","one","or","partial_cmp","pop","push","reserve","reserve_exact","set","set_all","set_len","shrink_to_fit","size_hint","size_hint","split_off","storage","storage_mut","to_bytes","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","with_capacity","xnor","xor","zero"],"q":[[0,"bit_vec"]],"d":["Abstracts over a pile of bits (basically unsigned …","The bitvector type.","An iterator over the blocks of a <code>BitVec</code>.","","An iterator for <code>BitVec</code>.","Returns <code>true</code> if all bits are 1.","Calculates the bitwise <code>and</code> of two bitvectors.","Returns <code>true</code> if any bit is 1.","Moves all bits from <code>other</code> into <code>Self</code>, leaving <code>other</code> empty.","How many bits it has","Iterator over the underlying blocks of data","","","","","","","","","How many bytes it has","Returns the capacity in bits for this bit vector. …","Clears all bits in this vector.","","","","","","","","","Count the number of 1’s in the bitwise repr","","Calculates the difference between two bitvectors.","","Compares a <code>BitVec</code> to a slice of <code>bool</code>s. Both the <code>BitVec</code> and …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert a byte into this type (lowest-order bits set)","Transforms a byte-vector into a <code>BitVec</code>. Each byte becomes …","Creates a <code>BitVec</code> that holds <code>nbits</code> elements, setting each …","Creates a <code>BitVec</code> of the specified length where the value …","","Retrieves the value at index <code>i</code>, or <code>None</code> if the index is …","Grows the <code>BitVec</code> in-place, adding <code>n</code> copies of <code>value</code> to the …","","","Calculates the intersection of two bitvectors. This acts …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns true if there are no bits in this vector","Returns an iterator over the elements of the vector in …","Returns the total number of bits in this vector","Calculates the nand of two bitvectors.","Flips all bits.","Creates an empty <code>BitVec</code>.","","","","","","","Returns <code>true</code> if all bits are 0.","Calculates the nor of two bitvectors.","Get <code>1</code>","Calculates the bitwise <code>or</code> of two bitvectors.","","Removes the last bit from the BitVec, and returns it. …","Pushes a <code>bool</code> onto the end.","Reserves capacity for at least <code>additional</code> more bits to be …","Reserves the minimum capacity for exactly <code>additional</code> more …","Sets the value of a bit at an index <code>i</code>.","Sets all bits to 1.","Sets the number of bits that this BitVec considers …","Shrinks the capacity of the underlying storage as much as …","","","Splits the <code>BitVec</code> into two at the given bit, retaining the …","Exposes the raw block storage of this BitVec","Exposes the raw block storage of this BitVec","Organises the bits into bytes, such that the first bit in …","","","","Shortens a <code>BitVec</code>, dropping excess elements.","","","","","","","","","","","","","Calculates the union of two bitvectors. This acts like the …","Constructs a new, empty <code>BitVec</code> with the specified capacity.","Calculates the xnor of two bitvectors.","Calculates the xor of two bitvectors.","Get <code>0</code>"],"i":[0,0,0,0,0,2,2,2,2,1,2,2,18,7,5,2,18,7,5,1,2,2,2,7,5,2,2,7,5,2,1,2,2,2,2,2,2,2,2,18,7,5,1,2,2,2,2,2,2,2,2,2,2,18,7,5,2,2,18,7,5,2,2,2,2,2,2,18,7,5,18,7,5,2,2,1,2,2,2,2,2,2,2,2,2,2,7,5,2,2,2,2,2,7,5,2,2,18,7,5,2,18,7,5,2,18,7,5,2,2,2,2,1],"f":[0,0,0,0,0,[[[2,[1]]],3],[[[2,[1]],[2,[1]]],3],[[[2,[1]]],3],[[[2,[1]],[2,[1]]]],[[],4],[[[2,[1]]],[[5,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[[2,[1]]],4],[[[2,[1]]]],[[[2,[1]]],[[2,[1]]]],[[[7,[6]]],[[7,[6]]]],[[[5,[6]]],[[5,[6]]]],[[[2,[1]],[2,[1]]]],[[]],[[]],[[]],[[[2,[1]],[2,[1]]],8],[[],4],[[],[[2,[1]]]],[[[2,[1]],[2,[1]]],3],[[[2,[1]],[2,[1]]],3],[[[2,[1]],[9,[3]]],3],[[],3],[[[2,[1]],10]],[[[2,[1]],11],12],[[]],[[]],[[]],[[]],[13],[[[9,[13]]],[[2,[14]]]],[[4,3],[[2,[14]]]],[[4,15],[[2,[14]]]],[10,[[2,[1]]]],[[[2,[1]],4],[[16,[3]]]],[[[2,[1]],4,3]],[[[2,[1]],17]],[[[2,[1]],4],3],[[[2,[1]],[2,[1]]],3],[[]],[[]],[[]],[[]],[[[2,[1]]],[[18,[1]]]],[[[2,[1]]],[[7,[1]]]],[[]],[[]],[[]],[[[2,[1]]],3],[[[2,[1]]],[[7,[1]]]],[[[2,[1]]],4],[[[2,[1]],[2,[1]]],3],[[[2,[1]]]],[[],[[2,[14]]]],[[[18,[1]]],[[16,[3]]]],[[[7,[1]]],[[16,[3]]]],[[[5,[1]]],[[16,[1]]]],[[[18,[1]]],[[16,[3]]]],[[[7,[1]]],[[16,[3]]]],[[[5,[1]]],[[16,[1]]]],[[[2,[1]]],3],[[[2,[1]],[2,[1]]],3],[[]],[[[2,[1]],[2,[1]]],3],[[[2,[1]],[2,[1]]],[[16,[8]]]],[[[2,[1]]],[[16,[3]]]],[[[2,[1]],3]],[[[2,[1]],4]],[[[2,[1]],4]],[[[2,[1]],4,3]],[[[2,[1]]]],[[[2,[1]],4]],[[[2,[1]]]],[[[7,[1]]]],[[[5,[1]]]],[[[2,[1]],4],[[2,[1]]]],[[[2,[1]]],[[9,[1]]]],[[[2,[1]]],[[19,[1]]]],[[[2,[1]]],[[19,[13]]]],[[]],[[]],[[]],[[[2,[1]],4]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21],[[],21],[[[2,[1]],[2,[1]]],3],[4,[[2,[14]]]],[[[2,[1]],[2,[1]]],3],[[[2,[1]],[2,[1]]],3],[[]]],"c":[51,108],"p":[[8,"BitBlock"],[3,"BitVec"],[15,"bool"],[15,"usize"],[3,"Blocks"],[8,"Clone"],[3,"Iter"],[4,"Ordering"],[15,"slice"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[15,"u8"],[15,"u32"],[8,"FnMut"],[4,"Option"],[8,"Hasher"],[3,"IntoIter"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":"O","n":["bitflags"],"q":[[0,"bitflags"]],"d":["The macro used to generate the flag structures."],"i":[0],"f":[0],"c":[],"p":[]},\
"bytemuck":{"doc":"This crate gives small utilities for casting between plain …","t":"NICIQSSINIEINNIIILLFFFFFFFALLFLLLFFLLLLLLOOLLLLLLLLLLFFFFFFFFLFFLFLLLLLLLLLLLFLLQIENNLLFFFFFLLLLLLFFLLKFFFFFFLFFLFL","n":["AlignmentMismatch","AnyBitPattern","CheckedBitPattern","Contiguous","Int","MAX_VALUE","MIN_VALUE","NoUninit","OutputSliceWouldHaveSlop","Pod","PodCastError","PodInOption","SizeMismatch","TargetAlignmentGreaterAndInputNotAligned","TransparentWrapper","Zeroable","ZeroableInOption","borrow","borrow_mut","bytes_of","bytes_of_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","checked","clone","eq","fill_zeroes","fmt","fmt","from","from_bytes","from_bytes_mut","from_integer","from_integer","hash","into","into_integer","into_integer","offset_of","offset_of","peel","peel","peel_mut","peel_mut","peel_ref","peel_ref","peel_slice","peel_slice","peel_slice_mut","peel_slice_mut","pod_align_to","pod_align_to_mut","pod_read_unaligned","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","try_pod_read_unaligned","type_id","wrap","wrap","wrap_mut","wrap_mut","wrap_ref","wrap_ref","wrap_slice","wrap_slice","wrap_slice_mut","wrap_slice_mut","write_zeroes","zeroed","zeroed","Bits","CheckedBitPattern","CheckedCastError","InvalidBitPattern","PodCastError","borrow","borrow_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","clone","eq","fmt","fmt","from","from","from_bytes","from_bytes_mut","hash","into","is_valid_bit_pattern","pod_read_unaligned","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","try_pod_read_unaligned","type_id"],"q":[[0,"bytemuck"],[80,"bytemuck::checked"]],"d":["For this type of cast the alignments must be exactly the …","Marker trait for “plain old data” types that are valid …","","A trait indicating that:","The primitive integer type with an identical …","The upper <em>inclusive</em> bound for valid instances of this type.","The lower <em>inclusive</em> bound for valid instances of this type.","Marker trait for “plain old data” types with no uninit …","If the element size changes then the output slice changes …","Marker trait for “plain old data”.","The things that can go wrong when casting between <code>Pod</code> data …","Trait for types which are Pod when wrapped in Option.","When casting a slice you can’t convert between ZST …","You tried to cast a slice to an element type with a higher …","A trait which indicates that a type is a …","Trait for types that can be safely created with <code>zeroed</code>.","Trait for types which are Zeroable when wrapped in Option.","","","Re-interprets <code>&amp;T</code> as <code>&amp;[u8]</code>.","Re-interprets <code>&amp;mut T</code> as <code>&amp;mut [u8]</code>.","Cast <code>T</code> into <code>U</code>","Cast <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Cast <code>&amp;T</code> into <code>&amp;U</code>.","Cast <code>&amp;[A]</code> into <code>&amp;[B]</code>.","Cast <code>&amp;mut [T]</code> into <code>&amp;mut [U]</code>.","Checked versions of the casting functions exposed in crate …","","","Fill all bytes of <code>slice</code> with zeroes (see <code>Zeroable</code>).","","","Returns the argument unchanged.","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","If <code>value</code> is within the range for valid instances of this …","If <code>value</code> is within the range for valid instances of this …","","Calls <code>U::from(self)</code>.","Perform the conversion from <code>C</code> into the underlying integral …","Perform the conversion from <code>C</code> into the underlying integral …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","Convert the wrapper type into the inner type.","Convert the wrapper type into the inner type.","Convert a mutable reference to the wrapper type into a …","Convert a mutable reference to the wrapper type into a …","Convert a reference to the wrapper type into a reference …","Convert a reference to the wrapper type into a reference …","Convert a slice to the wrapped type into a slice to the …","Convert a slice to the wrapped type into a slice to the …","Convert a mutable slice to the wrapped type into a mutable …","Convert a mutable slice to the wrapped type into a mutable …","As <code>align_to</code>, but safe because of the <code>Pod</code> bound.","As <code>align_to_mut</code>, but safe because of the <code>Pod</code> bound.","Reads the slice into a <code>T</code> value.","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Try to convert a <code>&amp;T</code> into <code>&amp;U</code>.","Try to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in …","Try to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a …","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Reads from the bytes as if they were a <code>T</code>.","","Convert the inner type into the wrapper type.","Convert the inner type into the wrapper type.","Convert a mutable reference to the inner type into a …","Convert a mutable reference to the inner type into a …","Convert a reference to the inner type into a reference to …","Convert a reference to the inner type into a reference to …","Convert a slice to the inner type into a slice to the …","Convert a slice to the inner type into a slice to the …","Convert a mutable slice to the inner type into a mutable …","Convert a mutable slice to the inner type into a mutable …","Fill all bytes of <code>target</code> with zeroes (see <code>Zeroable</code>).","Calls <code>zeroed</code>.","Calls <code>zeroed</code>.","<code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> …","A marker trait that allows types that have some invalid …","The things that can go wrong when casting between …","When casting to a <code>CheckedBitPattern</code> type, it is possible …","An error occurred during a true-<code>Pod</code> cast","","","Cast <code>T</code> into <code>U</code>","Cast <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Cast <code>&amp;T</code> into <code>&amp;U</code>.","Cast <code>&amp;[A]</code> into <code>&amp;[B]</code>.","Cast <code>&amp;mut [T]</code> into <code>&amp;mut [U]</code>.","","","","","","Returns the argument unchanged.","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Calls <code>U::from(self)</code>.","If this function returns true, then it must be valid to …","Reads the slice into a <code>T</code> value.","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Try to convert a <code>&amp;T</code> into <code>&amp;U</code>.","Try to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in …","Try to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a …","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Reads from the bytes as if they were a <code>T</code>.",""],"i":[5,0,0,0,17,17,17,0,5,0,0,0,5,5,0,0,0,5,5,0,0,0,0,0,0,0,0,5,5,0,5,5,5,0,0,17,17,5,5,17,17,0,0,18,18,18,18,18,18,18,18,18,18,0,0,0,0,0,0,0,0,5,0,0,5,0,5,18,18,18,18,18,18,18,18,18,18,0,7,7,15,0,0,16,16,16,16,0,0,0,0,0,16,16,16,16,16,16,0,0,16,16,15,0,0,0,0,0,0,16,0,0,16,0,16],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,[[3,[2]]]],[[[0,[1,4]]],[[3,[2]]]],[1,4],[[[0,[1,4]]],[[0,[1,4]]]],[1,4],[[[3,[1]]],[[3,[4]]]],[[[3,[[0,[1,4]]]]],[[3,[[0,[1,4]]]]]],0,[5,5],[[5,5],6],[[[3,[7]]]],[[5,8],9],[[5,8],9],[[]],[[[3,[2]]],4],[[[3,[2]]],[[0,[1,4]]]],[[],10],[[],10],[[5,11]],[[]],[[]],[[]],0,0,[12,12],[12,12],[[]],[[]],[[]],[[]],[[[3,[12]]],[[3,[12]]]],[[[3,[12]]],[[3,[12]]]],[[[3,[12]]],[[3,[12]]]],[[[3,[12]]],[[3,[12]]]],[[[3,[1]]]],[[[3,[[0,[1,4]]]]]],[[[3,[2]]],4],[1,[[13,[4,5]]]],[[[0,[1,4]]],[[13,[[0,[1,4]],5]]]],[1,[[13,[4,5]]]],[[[3,[1]]],[[13,[[3,[4]],5]]]],[[[3,[[0,[1,4]]]]],[[13,[[3,[[0,[1,4]]]],5]]]],[[],13],[[[3,[2]]],[[13,[4,5]]]],[[[3,[2]]],[[13,[[0,[1,4]],5]]]],[[],13],[[[3,[2]]],[[13,[4,5]]]],[[],14],[12,12],[12,12],[[]],[[]],[[]],[[]],[[[3,[12]]],[[3,[12]]]],[[[3,[12]]],[[3,[12]]]],[[[3,[12]]],[[3,[12]]]],[[[3,[12]]],[[3,[12]]]],[7],[[]],[[]],0,0,0,0,0,[[]],[[]],[1,15],[[[0,[1,4]]],[[0,[1,15]]]],[1,15],[[[3,[1]]],[[3,[15]]]],[[[3,[[0,[1,4]]]]],[[3,[[0,[1,15]]]]]],[16,16],[[16,16],6],[[16,8],9],[[16,8],9],[5,16],[[]],[[[3,[2]]],15],[[[3,[2]]],[[0,[1,15]]]],[[16,11]],[[]],[[],6],[[[3,[2]]],15],[1,[[13,[15,16]]]],[[[0,[1,4]]],[[13,[[0,[15,1]],16]]]],[1,[[13,[15,16]]]],[[[3,[1]]],[[13,[[3,[15]],16]]]],[[[3,[[0,[1,4]]]]],[[13,[[3,[[0,[15,1]]]],16]]]],[[],13],[[[3,[2]]],[[13,[15,16]]]],[[[3,[2]]],[[13,[[0,[15,1]],16]]]],[[],13],[[[3,[2]]],[[13,[15,16]]]],[[],14]],"c":[],"p":[[8,"NoUninit"],[15,"u8"],[15,"slice"],[8,"AnyBitPattern"],[4,"PodCastError"],[15,"bool"],[8,"Zeroable"],[3,"Formatter"],[6,"Result"],[4,"Option"],[8,"Hasher"],[8,"Sized"],[4,"Result"],[3,"TypeId"],[8,"CheckedBitPattern"],[4,"CheckedCastError"],[8,"Contiguous"],[8,"TransparentWrapper"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"O","n":["cfg_if"],"q":[[0,"cfg_if"]],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"c":[],"p":[]},\
"crossbeam":{"doc":"Tools for concurrent programming.","t":"AFOAAADIQLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLNNNNNNDDDDDEDDDDEDNNDDEDEFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLOLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFNDNEDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSDDGIDDQDDIIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLFLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLKLLLFLLLLLLMLLLFLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["atomic","scope","select","sync","thread","utils","AtomicCell","AtomicConsume","Val","as_ptr","borrow","borrow_mut","compare_and_swap","compare_exchange","default","deref","deref_mut","drop","drop","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_update","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fmt","from","from","from","init","into","into_inner","is_lock_free","load","load_consume","new","store","swap","take","try_from","try_into","type_id","Disconnected","Disconnected","Disconnected","Disconnected","Empty","Full","IntoIter","Iter","ReadyTimeoutError","Receiver","RecvError","RecvTimeoutError","Select","SelectTimeoutError","SelectedOperation","SendError","SendTimeoutError","Sender","Timeout","Timeout","TryIter","TryReadyError","TryRecvError","TrySelectError","TrySendError","after","at","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded","capacity","capacity","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","index","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","is_disconnected","is_disconnected","is_disconnected","is_disconnected","is_empty","is_empty","is_empty","is_full","is_full","is_full","is_timeout","is_timeout","iter","len","len","never","new","next","next","next","ready","ready_deadline","ready_timeout","recv","recv","recv","recv_deadline","recv_timeout","remove","same_channel","same_channel","select","select","select_deadline","select_timeout","send","send","send","send_deadline","send_timeout","tick","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_iter","try_ready","try_recv","try_select","try_send","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbounded","Empty","Injector","Retry","Steal","Stealer","Success","Worker","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from_iter","init","init","init","init","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_retry","is_success","len","len","len","new","new_fifo","new_lifo","or_else","pop","push","push","steal","steal","steal_batch","steal_batch","steal_batch_and_pop","steal_batch_and_pop","steal_batch_with_limit","steal_batch_with_limit","steal_batch_with_limit_and_pop","steal_batch_with_limit_and_pop","stealer","success","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","ALIGN","Atomic","Collector","CompareAndSetError","CompareAndSetOrdering","CompareExchangeError","Guard","Init","LocalHandle","Owned","Pointable","Pointer","Shared","as_mut","as_raw","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","collector","collector","compare_and_set","compare_and_set_weak","compare_exchange","compare_exchange_weak","current","default","default","default","default_collector","defer","defer_destroy","defer_unchecked","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","failure","fetch_and","fetch_or","fetch_update","fetch_xor","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw","from_usize","from_usize","from_usize","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_box","into_owned","into_owned","into_shared","into_usize","into_usize","into_usize","is_null","is_pinned","is_pinned","load","load_consume","new","new","new","new","null","null","partial_cmp","pin","pin","register","repin","repin_after","store","success","swap","tag","tag","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_owned","try_into_owned","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unprotected","with_tag","with_tag","ArrayQueue","SegQueue","borrow","borrow","borrow_mut","borrow_mut","capacity","default","deref","deref","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","force_push","from","from","init","init","into","into","into_iter","into_iter","is_empty","is_empty","is_full","len","len","new","new","pop","pop","push","push","try_from","try_from","try_into","try_into","type_id","type_id","Parker","ShardedLock","ShardedLockReadGuard","ShardedLockWriteGuard","Unparker","WaitGroup","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_raw","from_raw","get_mut","init","init","init","init","init","init","into","into","into","into","into","into","into_inner","into_raw","into_raw","is_poisoned","new","new","new","park","park_deadline","park_timeout","read","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_read","try_write","type_id","type_id","type_id","type_id","type_id","type_id","unpark","unparker","wait","write","Scope","ScopedJoinHandle","ScopedThreadBuilder","as_pthread_t","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_pthread_t","join","name","scope","spawn","spawn","stack_size","thread","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Backoff","CachePadded","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","eq","equivalent","fmt","fmt","from","from","from","from","hash","init","init","into","into","into_inner","is_completed","new","new","reset","snooze","spin","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"crossbeam"],[6,"crossbeam::atomic"],[137,"crossbeam::channel"],[510,"crossbeam::deque"],[604,"crossbeam::epoch"],[807,"crossbeam::queue"],[851,"crossbeam::sync"],[969,"crossbeam::thread"],[1018,"crossbeam::utils"]],"d":["Atomic types.","Creates a new scope for spawning threads.","Selects from a set of channel operations.","Thread synchronization primitives.","Threads that can borrow variables from the stack.","Miscellaneous utilities.","A thread-safe mutable memory location.","Trait which allows reading from primitive atomic types …","Type returned by <code>load_consume</code>.","Returns a raw pointer to the underlying data in this …","","","If the current value equals <code>current</code>, stores <code>new</code> into the …","If the current value equals <code>current</code>, stores <code>new</code> into the …","","","","","","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies logical “and” to the current value and returns …","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies logical “nand” to the current value and …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies logical “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Fetches the value, and applies a function to it that …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies logical “xor” to the current value and returns …","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Consumes the atomic and returns the contained value.","Returns <code>true</code> if operations on values of this type are …","Loads a value from the atomic cell.","Loads a value from the atomic using a “consume” memory …","Creates a new atomic cell initialized with <code>val</code>.","Stores <code>val</code> into the atomic cell.","Stores <code>val</code> into the atomic cell and returns the previous …","Takes the value of the atomic cell, leaving …","","","","The message could not be sent because the channel is …","The message could not be sent because the channel is …","The message could not be received because the channel is …","The message could not be received because the channel is …","A message could not be received because the channel is …","The message could not be sent because the channel is full.","A blocking iterator over messages in a channel.","A blocking iterator over messages in a channel.","An error returned from the <code>ready_timeout</code> method.","The receiving side of a channel.","An error returned from the <code>recv</code> method.","An error returned from the <code>recv_timeout</code> method.","Selects from a set of channel operations.","An error returned from the <code>select_timeout</code> method.","A selected operation that needs to be completed.","An error returned from the <code>send</code> method.","An error returned from the <code>send_timeout</code> method.","The sending side of a channel.","The message could not be sent because the channel is full …","A message could not be received because the channel is …","A non-blocking iterator over messages in a channel.","An error returned from the <code>try_ready</code> method.","An error returned from the <code>try_recv</code> method.","An error returned from the <code>try_select</code> method.","An error returned from the <code>try_send</code> method.","Creates a receiver that delivers a message after a certain …","Creates a receiver that delivers a message at a certain …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a channel of bounded capacity.","If the channel is bounded, returns its capacity.","If the channel is bounded, returns its capacity.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the index of the selected operation.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwraps the message.","Unwraps the message.","Unwraps the message.","","","","","","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the channel is empty.","Returns <code>true</code> if the channel is empty.","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the channel is full.","Returns <code>true</code> if the channel is full.","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the send operation timed out.","Returns <code>true</code> if the receive operation timed out.","A blocking iterator over messages in the channel.","Returns the number of messages in the channel.","Returns the number of messages in the channel.","Creates a receiver that never delivers messages.","Creates an empty list of channel operations for selection.","","","","Blocks until one of the operations becomes ready.","Blocks until a given deadline, or until one of the …","Blocks for a limited time until one of the operations …","Blocks the current thread until a message is received or …","Adds a receive operation.","Completes the receive operation.","Waits for a message to be received from the channel, but …","Waits for a message to be received from the channel, but …","Removes a previously added operation.","Returns <code>true</code> if senders belong to the same channel.","Returns <code>true</code> if receivers belong to the same channel.","Blocks until one of the operations becomes ready and …","Selects from a set of channel operations.","Blocks until a given deadline, or until one of the …","Blocks for a limited time until one of the operations …","Blocks the current thread until a message is sent or the …","Adds a send operation.","Completes the send operation.","Waits for a message to be sent into the channel, but only …","Waits for a message to be sent into the channel, but only …","Creates a receiver that delivers messages periodically.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A non-blocking iterator over messages in the channel.","Attempts to find a ready operation without blocking.","Attempts to receive a message from the channel without …","Attempts to select one of the operations without blocking.","Attempts to send a message into the channel without …","","","","","","","","","","","","","","","","","","Creates a channel of unbounded capacity.","The queue was empty at the time of stealing.","An injector queue.","The steal operation needs to be retried.","Possible outcomes of a steal operation.","A stealer handle of a worker queue.","At least one task was successfully stolen.","A worker queue.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Consumes items until a <code>Success</code> is found and returns it.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue was empty at the time of …","Returns <code>true</code> if the steal operation needs to be retried.","Returns <code>true</code> if at least one task was stolen.","Returns the number of tasks in the deque.","Returns the number of tasks in the deque.","Returns the number of tasks in the queue.","Creates a new injector queue.","Creates a FIFO worker queue.","Creates a LIFO worker queue.","If no task was stolen, attempts another steal operation.","Pops a task from the queue.","Pushes a task into the queue.","Pushes a task into the queue.","Steals a task from the queue.","Steals a task from the queue.","Steals a batch of tasks and pushes them into another …","Steals a batch of tasks and pushes them into a worker.","Steals a batch of tasks, pushes them into another worker, …","Steals a batch of tasks, pushes them into a worker, and …","Steals no more than <code>limit</code> of tasks and pushes them into …","Steals no more than of tasks and pushes them into a worker.","Steals no more than <code>limit</code> of tasks, pushes them into …","Steals no more than <code>limit</code> of tasks, pushes them into a …","Creates a stealer for this queue.","Returns the result of the operation, if successful.","","","","","","","","","","","","","","","The alignment of pointer.","An atomic pointer that can be safely shared between …","An epoch-based garbage collector.","The error returned on failed compare-and-set operation.","Memory orderings for compare-and-set operations.","The error returned on failed compare-and-swap operation.","A guard that keeps the current thread pinned.","The type for initializers.","A handle to a garbage collector.","An owned heap-allocated object.","Types that are pointed to by a single word.","A trait for either <code>Owned</code> or <code>Shared</code> pointers.","A pointer to an object protected by the epoch GC.","","Converts the pointer to a raw pointer (without the tag).","","Converts the pointer to a reference.","","","","","","","","","","","","","","","","","Returns a copy of the atomic value.","","","Creates another reference to the same garbage collector.","","","","","","Returns the <code>Collector</code> associated with this handle.","Returns the <code>Collector</code> associated with this guard.","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","The value in the atomic pointer at the time of the failed …","","","","Returns the default global collector.","Stores a function so that it can be executed at some point …","Stores a destructor for an object so that it can be …","Stores a function so that it can be executed at some point …","Dereferences the given pointer.","","","","","","Dereferences the pointer.","","","","Mutably dereferences the given pointer.","","","","","Dereferences the pointer.","","","","","Drops the object pointed to by the given pointer.","","","","","","","","","","","","Checks if both handles point to the same collector.","","","The ordering of the operation when it fails.","Bitwise “and” with the current tag.","Bitwise “or” with the current tag.","Fetches the pointer, and then applies a function to it …","Bitwise “xor” with the current tag.","Clears up the thread-local cache of deferred functions by …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a new atomic pointer pointing to <code>owned</code>.","Returns a new atomic pointer pointing to <code>ptr</code>.","Returns a new atomic pointer pointing to <code>raw</code>.","","","","Returns the argument unchanged.","","Returns a new owned pointer pointing to <code>b</code>.","","Returns the argument unchanged.","Returns a new pointer pointing to <code>raw</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a new owned pointer pointing to <code>raw</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","","Initializes a with the given initializer.","","","Allocates <code>value</code> on the heap and returns a new atomic …","","Allocates <code>value</code> on the heap and returns a new owned …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the owned pointer into a <code>Box</code>.","Takes ownership of the pointee.","Takes ownership of the pointee.","Converts the owned pointer into a <code>Shared</code>.","Returns the machine representation of the pointer.","","","Returns <code>true</code> if the pointer is null.","Returns <code>true</code> if the current thread is pinned.","Returns <code>true</code> if the handle is pinned.","Loads a <code>Shared</code> from the atomic pointer.","Loads a <code>Shared</code> from the atomic pointer using a “consume…","Allocates <code>value</code> on the heap and returns a new atomic …","Allocates <code>value</code> on the heap and returns a new owned …","Creates a new collector.","The new value, which the operation failed to store.","Returns a new null atomic pointer.","Returns a new null pointer.","","Pins the current thread.","Pins the handle.","Registers a new handle for the collector.","Unpins and then immediately re-pins the thread.","Temporarily unpins the thread, executes the given function …","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer.","The ordering of the operation when it succeeds.","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer, …","Returns the tag stored within the pointer.","Returns the tag stored within the pointer.","","","","","","","","","","","","","","","","","","","Takes ownership of the pointee if it is non-null.","Takes ownership of the pointee if it is not null.","","","","","","","","Returns a reference to a dummy guard that allows …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …","A bounded multi-producer multi-consumer queue.","An unbounded multi-producer multi-consumer queue.","","","","","Returns the capacity of the queue.","","","","","","","","","","","","Pushes an element into the queue, replacing the oldest …","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is full.","Returns the number of elements in the queue.","Returns the number of elements in the queue.","Creates a new bounded queue with the given capacity.","Creates a new unbounded queue.","Attempts to pop an element from the queue.","Pops an element from the queue.","Attempts to push an element into the queue.","Pushes an element into the queue.","","","","","","","A thread parking primitive.","A sharded reader-writer lock.","A guard used to release the shared read access of a …","A guard used to release the exclusive write access of a …","Unparks a thread parked by the associated <code>Parker</code>.","Enables threads to synchronize the beginning or end of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a raw pointer into a <code>Parker</code>.","Converts a raw pointer into an <code>Unparker</code>.","Returns a mutable reference to the underlying data.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this lock, returning the underlying data.","Converts a <code>Parker</code> into a raw pointer.","Converts an <code>Unparker</code> into a raw pointer.","Returns <code>true</code> if the lock is poisoned.","Creates a new <code>Parker</code>.","Creates a new sharded reader-writer lock.","Creates a new wait group and returns the single reference …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Locks with shared read access, blocking the current thread …","","","","","","","","","","","","","","","","","Attempts to acquire this lock with shared read access.","Attempts to acquire this lock with exclusive write access.","","","","","","","Atomically makes the token available if it is not already.","Returns a reference to an associated <code>Unparker</code>.","Drops this reference and waits until all other references …","Locks with exclusive write access, blocking the current …","A scope for spawning threads.","A handle that can be used to join its scoped thread.","Configures the properties of a new thread.","","","","","","","","Creates a builder that can configure a thread before …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Waits for the thread to finish and returns its result.","Sets the name for the new thread.","Creates a new scope for spawning threads.","Spawns a scoped thread.","Spawns a scoped thread with this configuration.","Sets the size of the stack for the new thread.","Returns a handle to the underlying thread.","","","","","","","","","","Performs exponential backoff in spin loops.","Pads and aligns a value to the length of a cache line.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner value.","Returns <code>true</code> if exponential backoff has completed and …","Creates a new <code>Backoff</code>.","Pads and aligns a value to the length of a cache line.","Resets the <code>Backoff</code>.","Backs off in a blocking loop.","Backs off in a lock-free loop.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,91,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,91,6,6,6,6,6,6,6,37,38,40,41,40,37,0,0,0,0,0,0,0,0,0,0,0,0,38,41,0,0,0,0,0,0,0,32,31,48,49,50,34,46,36,37,38,39,40,41,42,43,44,45,32,31,48,49,50,34,46,36,37,38,39,40,41,42,43,44,45,0,32,31,32,31,34,36,37,38,39,40,41,42,43,44,45,32,31,34,36,37,38,39,40,41,42,43,44,45,34,32,31,48,49,50,34,46,36,37,38,39,40,41,42,43,44,45,32,31,48,49,50,34,46,36,37,38,39,40,41,42,43,44,45,32,32,31,31,48,49,50,34,46,46,36,37,38,39,40,41,42,43,44,45,36,37,38,39,40,41,42,43,44,45,36,37,38,39,40,41,42,43,44,45,32,31,48,49,50,34,46,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,45,32,31,48,49,50,34,46,36,37,37,38,38,39,40,40,41,41,42,43,44,45,46,32,31,48,49,50,34,46,36,37,38,39,40,41,42,43,44,45,32,31,48,49,50,34,46,36,37,38,39,40,41,42,43,44,45,36,37,38,31,31,48,49,50,37,38,40,41,32,31,40,32,31,37,38,41,31,32,31,0,34,48,49,50,34,34,34,31,34,46,31,31,34,32,31,34,0,34,34,32,34,46,32,32,0,32,31,34,36,37,38,39,40,41,42,43,44,45,36,37,38,39,40,41,42,43,32,31,48,49,50,34,46,36,37,38,39,40,41,42,43,44,45,32,31,48,49,50,34,46,36,37,38,39,40,41,42,43,44,45,31,34,31,34,32,32,31,48,49,50,34,46,36,37,38,39,40,41,42,43,44,45,0,53,0,53,0,0,53,0,55,52,54,53,55,52,54,53,52,53,52,53,54,55,52,54,53,55,52,54,53,55,52,54,54,53,53,53,55,52,54,53,55,52,54,53,53,55,52,54,53,55,52,54,53,55,52,54,53,53,53,55,52,54,54,55,55,53,55,55,54,52,54,52,54,52,54,52,54,52,54,55,53,52,53,55,52,54,53,55,52,54,53,55,52,54,53,57,0,0,0,0,0,0,57,0,0,0,0,0,59,60,59,60,68,61,59,59,60,62,64,65,68,61,59,59,60,62,64,65,61,59,60,62,61,59,60,62,60,64,65,61,61,61,61,68,61,60,62,0,65,65,65,57,68,61,59,59,60,60,62,64,65,57,68,61,59,59,60,60,62,64,65,57,68,61,59,59,60,62,64,64,65,65,60,62,60,62,67,61,61,61,61,65,68,61,61,59,60,60,62,64,65,68,61,61,61,61,61,61,61,59,59,59,59,60,60,62,64,65,59,66,59,60,57,68,61,61,59,59,60,62,64,65,68,61,59,60,62,64,65,59,61,60,59,66,59,60,60,0,64,61,61,61,59,62,68,61,60,60,0,64,62,65,65,61,67,61,59,60,61,59,60,62,68,61,59,60,62,64,65,68,61,59,60,62,64,65,61,60,68,61,59,60,62,64,65,0,59,60,0,0,71,72,71,72,71,72,71,72,71,72,71,71,72,72,71,72,71,71,72,71,72,71,72,71,72,71,72,71,71,72,71,72,71,72,71,72,71,72,71,72,71,72,0,0,0,0,0,0,75,73,76,74,77,78,75,73,76,74,77,78,73,74,73,74,75,76,74,75,73,76,74,77,77,78,78,75,73,76,74,77,78,78,75,73,76,74,74,77,78,78,75,73,76,74,77,77,78,78,75,73,76,76,76,74,77,78,75,73,76,75,73,76,74,77,78,75,73,76,74,77,78,76,75,73,76,75,76,74,75,75,75,76,73,74,77,78,75,73,76,74,77,78,75,73,76,74,77,78,76,76,75,73,76,74,77,78,73,75,74,76,0,0,0,82,83,82,84,83,82,84,83,83,82,84,83,82,84,83,82,84,83,82,84,83,82,84,83,82,84,83,82,84,82,82,84,0,83,84,84,82,83,82,84,83,82,84,83,82,84,0,0,88,87,88,87,87,87,88,87,88,87,87,88,87,87,88,87,87,87,88,87,88,87,87,87,87,88,87,88,87,87,88,88,87,88,88,88,87,88,87,88,87,88,87],"f":[0,[1,[[5,[[4,[2,3]]]]]],0,0,0,0,0,0,0,[6],[[]],[[]],[[[6,[[0,[7,8]]]],[0,[7,8]],[0,[7,8]]],[[0,[7,8]]]],[[[6,[[0,[7,8]]]],[0,[7,8]],[0,[7,8]]],[[5,[[0,[7,8]],[0,[7,8]]]]]],[[],[[6,[9]]]],[10],[10],[10],[6],[[[6,[11]],11],11],[[[6,[12]],12],12],[[[6,[13]],13],13],[[[6,[14]],14],14],[[[6,[15]],15],15],[[[6,[16]],16],16],[[[6,[17]],17],17],[[[6,[10]],10],10],[[[6,[18]],18],18],[[[6,[19]],19],19],[[[6,[20]],20],20],[[[6,[21]],21],21],[[[6,[20]],20],20],[[[6,[19]],19],19],[[[6,[11]],11],11],[[[6,[21]],21],21],[[[6,[15]],15],15],[[[6,[13]],13],13],[[[6,[14]],14],14],[[[6,[17]],17],17],[[[6,[10]],10],10],[[[6,[16]],16],16],[[[6,[18]],18],18],[[[6,[12]],12],12],[[[6,[22]],22],22],[[[6,[20]],20],20],[[[6,[18]],18],18],[[[6,[17]],17],17],[[[6,[21]],21],21],[[[6,[16]],16],16],[[[6,[12]],12],12],[[[6,[11]],11],11],[[[6,[15]],15],15],[[[6,[19]],19],19],[[[6,[13]],13],13],[[[6,[14]],14],14],[[[6,[10]],10],10],[[[6,[13]],13],13],[[[6,[19]],19],19],[[[6,[12]],12],12],[[[6,[10]],10],10],[[[6,[17]],17],17],[[[6,[18]],18],18],[[[6,[16]],16],16],[[[6,[15]],15],15],[[[6,[21]],21],21],[[[6,[20]],20],20],[[[6,[11]],11],11],[[[6,[14]],14],14],[[[6,[14]],14],14],[[[6,[17]],17],17],[[[6,[19]],19],19],[[[6,[12]],12],12],[[[6,[13]],13],13],[[[6,[20]],20],20],[[[6,[15]],15],15],[[[6,[16]],16],16],[[[6,[18]],18],18],[[[6,[10]],10],10],[[[6,[21]],21],21],[[[6,[11]],11],11],[[[6,[22]],22],22],[[[6,[21]],21],21],[[[6,[16]],16],16],[[[6,[20]],20],20],[[[6,[13]],13],13],[[[6,[11]],11],11],[[[6,[10]],10],10],[[[6,[12]],12],12],[[[6,[15]],15],15],[[[6,[19]],19],19],[[[6,[17]],17],17],[[[6,[18]],18],18],[[[6,[22]],22],22],[[[6,[14]],14],14],[[[6,[20]],20],20],[[[6,[14]],14],14],[[[6,[17]],17],17],[[[6,[16]],16],16],[[[6,[18]],18],18],[[[6,[10]],10],10],[[[6,[21]],21],21],[[[6,[11]],11],11],[[[6,[19]],19],19],[[[6,[15]],15],15],[[[6,[12]],12],12],[[[6,[13]],13],13],[[[6,[[0,[7,8]]]],23],[[5,[[0,[7,8]],[0,[7,8]]]]]],[[[6,[21]],21],21],[[[6,[15]],15],15],[[[6,[10]],10],10],[[[6,[11]],11],11],[[[6,[16]],16],16],[[[6,[20]],20],20],[[[6,[12]],12],12],[[[6,[14]],14],14],[[[6,[19]],19],19],[[[6,[17]],17],17],[[[6,[13]],13],13],[[[6,[18]],18],18],[[[6,[22]],22],22],[[[6,[[0,[7,24]]]],25],[[5,[26]]]],[[]],[27],[[],6],[[],10],[[]],[6],[[],22],[[[6,[7]]],7],[[]],[[],6],[6],[6],[[[6,[9]]],9],[[],5],[[],5],[[],28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[29,[[31,[30]]]],[30,[[31,[30]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10],[32,[[33,[10]]]],[31,[[33,[10]]]],[32,32],[31,31],[34,34],[[[36,[35]]],[[36,[35]]]],[[[37,[35]]],[[37,[35]]]],[[[38,[35]]],[[38,[35]]]],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],34],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[32],[31],[10],[10],[10],[10],[10],[10],[46],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[[[36,[[47,[[47,[[47,[47]]]]]]]],[36,[[47,[[47,[[47,[47]]]]]]]]],22],[[[37,[[47,[[47,[[47,[47]]]]]]]],[37,[[47,[[47,[[47,[47]]]]]]]]],22],[[[38,[[47,[[47,[[47,[47]]]]]]]],[38,[[47,[[47,[[47,[47]]]]]]]]],22],[[39,39],22],[[40,40],22],[[41,41],22],[[42,42],22],[[43,43],22],[[44,44],22],[[45,45],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[32,25],[[5,[26]]]],[[31,25],[[5,[26]]]],[[48,25],[[5,[26]]]],[[49,25],[[5,[26]]]],[[50,25],[[5,[26]]]],[[34,25],[[5,[26]]]],[[46,25],[[5,[26]]]],[[36,25],[[5,[26]]]],[[36,25],[[5,[26]]]],[[37,25],[[5,[26]]]],[[37,25],[[5,[26]]]],[[38,25],[[5,[26]]]],[[38,25],[[5,[26]]]],[[39,25],[[5,[26]]]],[[39,25],[[5,[26]]]],[[40,25],[[5,[26]]]],[[40,25],[[5,[26]]]],[[41,25],[[5,[26]]]],[[41,25],[[5,[26]]]],[[42,25],[[5,[26]]]],[[42,25],[[5,[26]]]],[[43,25],[[5,[26]]]],[[43,25],[[5,[26]]]],[[44,25],[[5,[26]]]],[[45,25],[[5,[26]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[36,37],[[]],[36,38],[[]],[39,40],[[]],[[]],[39,41],[[]],[[]],[[]],[[]],[46,10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[36],[37],[38],[31],[31],[[]],[[]],[[]],[37,22],[38,22],[40,22],[41,22],[32,22],[31,22],[40,22],[32,22],[31,22],[37,22],[38,22],[41,22],[31,48],[32,10],[31,10],[[],31],[[],34],[48,33],[49,33],[50,33],[34,10],[[34,30],[[5,[10,45]]]],[[34,29],[[5,[10,45]]]],[31,[[5,[39]]]],[[34,31],10],[[46,31],[[5,[39]]]],[[31,30],[[5,[41]]]],[[31,29],[[5,[41]]]],[[34,10]],[[32,32],22],[[31,31],22],[34,46],0,[[34,30],[[5,[46,43]]]],[[34,29],[[5,[46,43]]]],[32,[[5,[36]]]],[[34,32],10],[[46,32],[[5,[36]]]],[[32,30],[[5,[38]]]],[[32,29],[[5,[38]]]],[29,[[31,[30]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[31,49],[34,[[5,[10,44]]]],[31,[[5,[40]]]],[34,[[5,[46,42]]]],[32,[[5,[37]]]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[52,52],[[[53,[35]]],[[53,[35]]]],[[]],[[]],[[],54],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[54],[10],[10],[[[53,[[47,[[47,[[47,[47]]]]]]]],[53,[[47,[[47,[[47,[47]]]]]]]]],22],[[],22],[[55,25],[[5,[26]]]],[[52,25],[[5,[26]]]],[[54,25],[[5,[26]]]],[[53,25],[[5,[26]]]],[[]],[[]],[[]],[[]],[56,53],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[55,22],[52,22],[54,22],[53,22],[53,22],[53,22],[55,10],[52,10],[54,10],[[],54],[[],55],[[],55],[[53,1],53],[55,33],[55],[54],[52,53],[54,53],[[52,55],53],[[54,55],53],[[52,55],53],[[54,55],53],[[52,55,10],53],[[54,55,10],53],[[52,55,10],53],[[54,55,10],53],[55,52],[53,33],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],28],[[],28],[[],28],[[],28],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[59,[[0,[57,58]]]]],[[0,[57,58]]]],[60],[[[59,[[0,[57,58]]]]],[[0,[57,58]]]],[[[60,[[0,[57,58]]]]],[[33,[[0,[57,58]]]]]],[[]],[[]],[[]],[[[59,[[0,[57,58]]]]],[[0,[57,58]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[59,[[0,[57,58]]]]],[[0,[57,58]]]],[[]],[[]],[[]],[[]],[[[61,[[0,[57,58]]]]],[[61,[[0,[57,58]]]]]],[[[59,[35]]],[[59,[35]]]],[[[60,[[0,[57,58]]]]],[[60,[[0,[57,58]]]]]],[62,62],[[]],[[]],[[]],[[]],[[[60,[[0,[57,58]]]],[60,[[0,[57,58]]]]],63],[64,62],[65,[[33,[62]]]],[[[61,[[0,[57,58]]]],[60,[[0,[57,58]]]],[66,[[0,[57,58]]]],67,65],[[5,[[60,[[0,[57,58]]]],[68,[[0,[57,58]],[66,[[0,[57,58]]]]]]]]]],[[[61,[[0,[57,58]]]],[60,[[0,[57,58]]]],[66,[[0,[57,58]]]],67,65],[[5,[[60,[[0,[57,58]]]],[68,[[0,[57,58]],[66,[[0,[57,58]]]]]]]]]],[[[61,[[0,[57,58]]]],[60,[[0,[57,58]]]],[66,[[0,[57,58]]]],69,69,65],[[5,[[60,[[0,[57,58]]]],[68,[[0,[57,58]],[66,[[0,[57,58]]]]]]]]]],[[[61,[[0,[57,58]]]],[60,[[0,[57,58]]]],[66,[[0,[57,58]]]],69,69,65],[[5,[[60,[[0,[57,58]]]],[68,[[0,[57,58]],[66,[[0,[57,58]]]]]]]]]],0,[[],[[61,[[0,[57,58]]]]]],[[],[[60,[[0,[57,58]]]]]],[[],62],[[],62],[[65,[0,[1,70]]]],[[65,60]],[[65,1]],[10],[10],[10],[10],[[[59,[[0,[57,58]]]]],[[0,[57,58]]]],[10],[[[60,[[0,[57,58]]]]],[[0,[57,58]]]],[10],[10],[10],[10],[10],[10],[10],[[[59,[[0,[57,58]]]]],[[0,[57,58]]]],[[[60,[[0,[57,58]]]]],[[0,[57,58]]]],[10],[10],[10],[10],[10],[10],[10],[[[59,[[0,[57,58]]]]]],[10],[10],[10],[10],[64],[10],[65],[[[60,[[0,[57,58]]]],[60,[[0,[57,58]]]]],22],[[62,62],22],[[],22],[[],22],[[],69],[[[61,[[0,[57,58]]]],10,69,65],[[60,[[0,[57,58]]]]]],[[[61,[[0,[57,58]]]],10,69,65],[[60,[[0,[57,58]]]]]],[[[61,[[0,[57,58]]]],69,69,65,23],[[5,[[60,[[0,[57,58]]]],[60,[[0,[57,58]]]]]]]],[[[61,[[0,[57,58]]]],10,69,65],[[60,[[0,[57,58]]]]]],[65],[[[68,[[0,[66,24]]]],25],[[5,[26]]]],[[[61,[[0,[57,58]]]],25],[[5,[26]]]],[[[61,[[0,[57,58]]]],25],[[5,[26]]]],[[[59,[[0,[57,58]]]],25],[[5,[26]]]],[[[60,[[0,[57,58]]]],25],[[5,[26]]]],[[[60,[[0,[57,58]]]],25],[[5,[26]]]],[[62,25],[[5,[26]]]],[[64,25],[[5,[26]]]],[[65,25],[[5,[26]]]],[[]],[[]],[[[59,[[0,[57,58]]]]],[[61,[[0,[57,58]]]]]],[[[60,[[0,[57,58]]]]],[[61,[[0,[57,58]]]]]],[[],61],[[[4,[3]]],61],[27],[[],61],[[]],[[],59],[[[4,[3]]],59],[27],[[]],[[],60],[[]],[[]],[[]],[[],59],[10],[10,[[59,[[0,[57,58]]]]]],[10,[[60,[[0,[57,58]]]]]],[[],10],[[],10],[[],10],[[],[[61,[[0,[57,58]]]]]],[[],10],[[],[[59,[[0,[57,58]]]]]],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[59,[[4,[3]]]],[[[61,[[0,[57,58]]]]],[[59,[[0,[57,58]]]]]],[[[60,[[0,[57,58]]]]],[[59,[[0,[57,58]]]]]],[[[59,[[0,[57,58]]]],65],[[60,[[0,[57,58]]]]]],[[],10],[[[59,[[0,[57,58]]]]],10],[[[60,[[0,[57,58]]]]],10],[[[60,[[0,[57,58]]]]],22],[[],22],[64,22],[[[61,[[0,[57,58]]]],69,65],[[60,[[0,[57,58]]]]]],[[[61,[[0,[57,58]]]],65],[[60,[[0,[57,58]]]]]],[[],61],[[],59],[[],62],0,[[],[[61,[[0,[57,58]]]]]],[[],[[60,[[0,[57,58]]]]]],[[[60,[[0,[57,58]]]],[60,[[0,[57,58]]]]],[[33,[63]]]],[[],65],[64,65],[62,64],[65],[[65,1]],[[[61,[[0,[57,58]]]],[66,[[0,[57,58]]]],69]],[[],69],[[[61,[[0,[57,58]]]],[66,[[0,[57,58]]]],69,65],[[60,[[0,[57,58]]]]]],[[[59,[[0,[57,58]]]]],10],[[[60,[[0,[57,58]]]]],10],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[61,[[0,[57,58]]]]],[[33,[[59,[[0,[57,58]]]]]]]],[[[60,[[0,[57,58]]]]],[[33,[[59,[[0,[57,58]]]]]]]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],65],[[[59,[[0,[57,58]]]],10],[[59,[[0,[57,58]]]]]],[[[60,[[0,[57,58]]]],10],[[60,[[0,[57,58]]]]]],0,0,[[]],[[]],[[]],[[]],[71,10],[[],72],[10],[10],[10],[10],[71],[10],[72],[10],[[71,25],[[5,[26]]]],[[72,25],[[5,[26]]]],[71,33],[[]],[[]],[[],10],[[],10],[[]],[[]],[71],[72],[71,22],[72,22],[71,22],[71,10],[72,10],[10,71],[[],72],[71,33],[72,33],[71,5],[72],[[],5],[[],5],[[],5],[[],5],[[],28],[[],28],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[73,73],[74,74],[[]],[[]],[[],75],[[],[[76,[9]]]],[[],74],[10],[10],[10],[10],[10],[[[77,[58]]],58],[10],[[[78,[58]]],58],[10],[10],[10],[10],[10],[10],[[[78,[58]]],58],[10],[10],[10],[10],[74],[10],[[[78,[58]]]],[10],[[75,25],[[5,[26]]]],[[73,25],[[5,[26]]]],[[[76,[[0,[24,58]]]],25],[[5,[26]]]],[[74,25],[[5,[26]]]],[[[77,[24]],25],[[5,[26]]]],[[[77,[[0,[79,58]]]],25],[[5,[26]]]],[[[78,[[0,[79,58]]]],25],[[5,[26]]]],[[[78,[24]],25],[[5,[26]]]],[[]],[[]],[[]],[[],76],[27],[[]],[[]],[[]],[[],75],[[],73],[[[76,[58]]],[[5,[58,[80,[58]]]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[]],[[]],[76,[[5,[80]]]],[75],[73],[[[76,[58]]],22],[[],75],[[],76],[[],74],[75],[[75,30]],[[75,29]],[[[76,[58]]],[[5,[[77,[58]],[80,[[77,[58]]]]]]]],[[]],[[]],[[],51],[[],51],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[76,[58]]],[[5,[[77,[58]],[81,[[77,[58]]]]]]]],[[[76,[58]]],[[5,[[78,[58]],[81,[[78,[58]]]]]]]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[73],[75,73],[74],[[[76,[58]]],[[5,[[78,[58]],[80,[[78,[58]]]]]]]],0,0,0,[82,13],[[]],[[]],[[]],[[]],[[]],[[]],[83,84],[10],[10],[10],[10],[10],[10],[10],[10],[10],[[83,25],[[5,[26]]]],[[82,25],[[5,[26]]]],[[84,25],[[5,[26]]]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[]],[[]],[[]],[82,13],[82,[[5,[[4,[2,3]]]]]],[[84,51],84],[1,[[5,[[4,[2,3]]]]]],[[83,[0,[1,70]]],[[82,[70]]]],[[84,[0,[1,70]]],[[5,[[82,[70]],85]]]],[[84,10],84],[82,86],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],28],[[],28],[[],28],0,0,[[]],[[]],[[]],[[]],[[[87,[35]]],[[87,[35]]]],[[]],[[],88],[[],[[87,[9]]]],[10],[10],[87],[10],[87],[10],[10],[10],[[[87,[[47,[[47,[[47,[47]]]]]]]],[87,[[47,[[47,[[47,[47]]]]]]]]],22],[[],22],[[88,25],[[5,[26]]]],[[[87,[24]],25],[[5,[26]]]],[[]],[27],[[]],[[],87],[[[87,[89]],90]],[[],10],[[],10],[[]],[[]],[87],[88,22],[[],88],[[],87],[88],[88],[88],[[]],[[],5],[[],5],[[],5],[[],5],[[],28],[[],28]],"c":[12,607,608,648,649,695,773],"p":[[8,"FnOnce"],[8,"Any"],[3,"Global"],[3,"Box"],[4,"Result"],[3,"AtomicCell"],[8,"Copy"],[8,"Eq"],[8,"Default"],[15,"usize"],[15,"i64"],[15,"isize"],[15,"u64"],[15,"u8"],[15,"i128"],[15,"u128"],[15,"i32"],[15,"u32"],[15,"i16"],[15,"u16"],[15,"i8"],[15,"bool"],[8,"FnMut"],[8,"Debug"],[3,"Formatter"],[3,"Error"],[15,"never"],[3,"TypeId"],[3,"Duration"],[3,"Instant"],[3,"Receiver"],[3,"Sender"],[4,"Option"],[3,"Select"],[8,"Clone"],[3,"SendError"],[4,"TrySendError"],[4,"SendTimeoutError"],[3,"RecvError"],[4,"TryRecvError"],[4,"RecvTimeoutError"],[3,"TrySelectError"],[3,"SelectTimeoutError"],[3,"TryReadyError"],[3,"ReadyTimeoutError"],[3,"SelectedOperation"],[8,"PartialEq"],[3,"Iter"],[3,"TryIter"],[3,"IntoIter"],[3,"String"],[3,"Stealer"],[4,"Steal"],[3,"Injector"],[3,"Worker"],[8,"IntoIterator"],[8,"Pointable"],[8,"Sized"],[3,"Owned"],[3,"Shared"],[3,"Atomic"],[3,"Collector"],[4,"Ordering"],[3,"LocalHandle"],[3,"Guard"],[8,"Pointer"],[8,"CompareAndSetOrdering"],[3,"CompareExchangeError"],[4,"Ordering"],[8,"Send"],[3,"ArrayQueue"],[3,"SegQueue"],[3,"Unparker"],[3,"WaitGroup"],[3,"Parker"],[3,"ShardedLock"],[3,"ShardedLockReadGuard"],[3,"ShardedLockWriteGuard"],[8,"Display"],[3,"PoisonError"],[4,"TryLockError"],[3,"ScopedJoinHandle"],[3,"Scope"],[3,"ScopedThreadBuilder"],[3,"Error"],[3,"Thread"],[3,"CachePadded"],[3,"Backoff"],[8,"Hash"],[8,"Hasher"],[8,"AtomicConsume"]]},\
"crossbeam_channel":{"doc":"Multi-producer multi-consumer channels for message passing.","t":"NNNNNNDDDDDEDDDDEDNNDDEDEFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLOLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLF","n":["Disconnected","Disconnected","Disconnected","Disconnected","Empty","Full","IntoIter","Iter","ReadyTimeoutError","Receiver","RecvError","RecvTimeoutError","Select","SelectTimeoutError","SelectedOperation","SendError","SendTimeoutError","Sender","Timeout","Timeout","TryIter","TryReadyError","TryRecvError","TrySelectError","TrySendError","after","at","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded","capacity","capacity","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","is_disconnected","is_disconnected","is_disconnected","is_disconnected","is_empty","is_empty","is_empty","is_full","is_full","is_full","is_timeout","is_timeout","iter","len","len","never","new","next","next","next","ready","ready_deadline","ready_timeout","recv","recv","recv","recv_deadline","recv_timeout","remove","same_channel","same_channel","select","select","select_deadline","select_timeout","send","send","send","send_deadline","send_timeout","tick","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_iter","try_ready","try_recv","try_select","try_send","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbounded"],"q":[[0,"crossbeam_channel"]],"d":["The message could not be sent because the channel is …","The message could not be sent because the channel is …","The message could not be received because the channel is …","The message could not be received because the channel is …","A message could not be received because the channel is …","The message could not be sent because the channel is full.","A blocking iterator over messages in a channel.","A blocking iterator over messages in a channel.","An error returned from the <code>ready_timeout</code> method.","The receiving side of a channel.","An error returned from the <code>recv</code> method.","An error returned from the <code>recv_timeout</code> method.","Selects from a set of channel operations.","An error returned from the <code>select_timeout</code> method.","A selected operation that needs to be completed.","An error returned from the <code>send</code> method.","An error returned from the <code>send_timeout</code> method.","The sending side of a channel.","The message could not be sent because the channel is full …","A message could not be received because the channel is …","A non-blocking iterator over messages in a channel.","An error returned from the <code>try_ready</code> method.","An error returned from the <code>try_recv</code> method.","An error returned from the <code>try_select</code> method.","An error returned from the <code>try_send</code> method.","Creates a receiver that delivers a message after a certain …","Creates a receiver that delivers a message at a certain …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a channel of bounded capacity.","If the channel is bounded, returns its capacity.","If the channel is bounded, returns its capacity.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the index of the selected operation.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwraps the message.","Unwraps the message.","Unwraps the message.","","","","","","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the channel is empty.","Returns <code>true</code> if the channel is empty.","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the channel is full.","Returns <code>true</code> if the channel is full.","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the send operation timed out.","Returns <code>true</code> if the receive operation timed out.","A blocking iterator over messages in the channel.","Returns the number of messages in the channel.","Returns the number of messages in the channel.","Creates a receiver that never delivers messages.","Creates an empty list of channel operations for selection.","","","","Blocks until one of the operations becomes ready.","Blocks until a given deadline, or until one of the …","Blocks for a limited time until one of the operations …","Blocks the current thread until a message is received or …","Adds a receive operation.","Completes the receive operation.","Waits for a message to be received from the channel, but …","Waits for a message to be received from the channel, but …","Removes a previously added operation.","Returns <code>true</code> if senders belong to the same channel.","Returns <code>true</code> if receivers belong to the same channel.","Blocks until one of the operations becomes ready and …","Selects from a set of channel operations.","Blocks until a given deadline, or until one of the …","Blocks for a limited time until one of the operations …","Blocks the current thread until a message is sent or the …","Adds a send operation.","Completes the send operation.","Waits for a message to be sent into the channel, but only …","Waits for a message to be sent into the channel, but only …","Creates a receiver that delivers messages periodically.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A non-blocking iterator over messages in the channel.","Attempts to find a ready operation without blocking.","Attempts to receive a message from the channel without …","Attempts to select one of the operations without blocking.","Attempts to send a message into the channel without …","","","","","","","","","","","","","","","","","","Creates a channel of unbounded capacity."],"i":[10,11,13,14,13,10,0,0,0,0,0,0,0,0,0,0,0,0,11,14,0,0,0,0,0,0,0,5,3,24,25,26,7,19,9,10,11,12,13,14,15,16,17,18,5,3,24,25,26,7,19,9,10,11,12,13,14,15,16,17,18,0,5,3,5,3,7,9,10,11,12,13,14,15,16,17,18,5,3,7,9,10,11,12,13,14,15,16,17,18,7,5,3,19,9,10,11,12,13,14,15,16,17,18,9,10,11,12,13,14,15,16,17,18,5,3,24,25,26,7,19,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,18,5,3,24,25,26,7,19,9,10,10,11,11,12,13,13,14,14,15,16,17,18,19,5,3,24,25,26,7,19,9,10,11,12,13,14,15,16,17,18,9,10,11,3,3,24,25,26,10,11,13,14,5,3,13,5,3,10,11,14,3,5,3,0,7,24,25,26,7,7,7,3,7,19,3,3,7,5,3,7,0,7,7,5,7,19,5,5,0,5,3,7,9,10,11,12,13,14,15,16,17,18,9,10,11,12,13,14,15,16,5,3,24,25,26,7,19,9,10,11,12,13,14,15,16,17,18,5,3,24,25,26,7,19,9,10,11,12,13,14,15,16,17,18,3,7,3,7,5,5,3,24,25,26,7,19,9,10,11,12,13,14,15,16,17,18,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[2,[[3,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4],[5,[[6,[4]]]],[3,[[6,[4]]]],[5,5],[3,3],[7,7],[[[9,[8]]],[[9,[8]]]],[[[10,[8]]],[[10,[8]]]],[[[11,[8]]],[[11,[8]]]],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[5],[3],[19],[[[9,[20]],[9,[20]]],21],[[[10,[20]],[10,[20]]],21],[[[11,[20]],[11,[20]]],21],[[12,12],21],[[13,13],21],[[14,14],21],[[15,15],21],[[16,16],21],[[17,17],21],[[18,18],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[5,22],23],[[3,22],23],[[24,22],23],[[25,22],23],[[26,22],23],[[7,22],23],[[19,22],23],[[9,22],23],[[9,22],23],[[10,22],23],[[10,22],23],[[11,22],23],[[11,22],23],[[12,22],23],[[12,22],23],[[13,22],23],[[13,22],23],[[14,22],23],[[14,22],23],[[15,22],23],[[15,22],23],[[16,22],23],[[16,22],23],[[17,22],23],[[18,22],23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,10],[[]],[9,11],[[]],[[]],[12,13],[[]],[12,14],[[]],[[]],[[]],[[]],[[]],[19,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[10],[11],[3],[3],[[]],[[]],[[]],[10,21],[11,21],[13,21],[14,21],[5,21],[3,21],[13,21],[5,21],[3,21],[10,21],[11,21],[14,21],[3,24],[5,4],[3,4],[[],3],[[],7],[24,6],[25,6],[26,6],[7,4],[[7,2],[[27,[4,18]]]],[[7,1],[[27,[4,18]]]],[3,[[27,[12]]]],[[7,3],4],[[19,3],[[27,[12]]]],[[3,2],[[27,[14]]]],[[3,1],[[27,[14]]]],[[7,4]],[[5,5],21],[[3,3],21],[7,19],0,[[7,2],[[27,[19,16]]]],[[7,1],[[27,[19,16]]]],[5,[[27,[9]]]],[[7,5],4],[[19,5],[[27,[9]]]],[[5,2],[[27,[11]]]],[[5,1],[[27,[11]]]],[1,[[3,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[3,25],[7,[[27,[4,17]]]],[3,[[27,[13]]]],[7,[[27,[19,15]]]],[5,[[27,[10]]]],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[]]],"c":[],"p":[[3,"Duration"],[3,"Instant"],[3,"Receiver"],[15,"usize"],[3,"Sender"],[4,"Option"],[3,"Select"],[8,"Clone"],[3,"SendError"],[4,"TrySendError"],[4,"SendTimeoutError"],[3,"RecvError"],[4,"TryRecvError"],[4,"RecvTimeoutError"],[3,"TrySelectError"],[3,"SelectTimeoutError"],[3,"TryReadyError"],[3,"ReadyTimeoutError"],[3,"SelectedOperation"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Iter"],[3,"TryIter"],[3,"IntoIter"],[4,"Result"],[3,"String"],[3,"TypeId"]]},\
"crossbeam_deque":{"doc":"Concurrent work-stealing deques.","t":"NDNEDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Empty","Injector","Retry","Steal","Stealer","Success","Worker","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from_iter","init","init","init","init","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_retry","is_success","len","len","len","new","new_fifo","new_lifo","or_else","pop","push","push","steal","steal","steal_batch","steal_batch","steal_batch_and_pop","steal_batch_and_pop","steal_batch_with_limit","steal_batch_with_limit","steal_batch_with_limit_and_pop","steal_batch_with_limit_and_pop","stealer","success","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"crossbeam_deque"]],"d":["The queue was empty at the time of stealing.","An injector queue.","The steal operation needs to be retried.","Possible outcomes of a steal operation.","A stealer handle of a worker queue.","At least one task was successfully stolen.","A worker queue.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Consumes items until a <code>Success</code> is found and returns it.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue was empty at the time of …","Returns <code>true</code> if the steal operation needs to be retried.","Returns <code>true</code> if at least one task was stolen.","Returns the number of tasks in the deque.","Returns the number of tasks in the deque.","Returns the number of tasks in the queue.","Creates a new injector queue.","Creates a FIFO worker queue.","Creates a LIFO worker queue.","If no task was stolen, attempts another steal operation.","Pops a task from the queue.","Pushes a task into the queue.","Pushes a task into the queue.","Steals a task from the queue.","Steals a task from the queue.","Steals a batch of tasks and pushes them into another …","Steals a batch of tasks and pushes them into a worker.","Steals a batch of tasks, pushes them into another worker, …","Steals a batch of tasks, pushes them into a worker, and …","Steals no more than <code>limit</code> of tasks and pushes them into …","Steals no more than of tasks and pushes them into a worker.","Steals no more than <code>limit</code> of tasks, pushes them into …","Steals no more than <code>limit</code> of tasks, pushes them into a …","Creates a stealer for this queue.","Returns the result of the operation, if successful.","","","","","","","","","","","","","",""],"i":[3,0,3,0,0,3,0,8,1,4,3,8,1,4,3,1,3,1,3,4,8,1,4,3,8,1,4,3,8,1,4,4,3,3,3,8,1,4,3,8,1,4,3,3,8,1,4,3,8,1,4,3,8,1,4,3,3,3,8,1,4,4,8,8,3,8,8,4,1,4,1,4,1,4,1,4,1,4,8,3,1,3,8,1,4,3,8,1,4,3,8,1,4,3],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[[3,[2]]],[[3,[2]]]],[[]],[[]],[[],4],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[4],[5],[[[3,[6]],[3,[6]]],7],[[],7],[[8,9],10],[[1,9],10],[[4,9],10],[[3,9],10],[[]],[[]],[[]],[[]],[11,3],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[8,7],[1,7],[4,7],[3,7],[3,7],[3,7],[8,5],[1,5],[4,5],[[],4],[[],8],[[],8],[[3,12],3],[8,13],[8],[4],[1,3],[4,3],[[1,8],3],[[4,8],3],[[1,8],3],[[4,8],3],[[1,8,5],3],[[4,8,5],3],[[1,8,5],3],[[4,8,5],3],[8,1],[3,13],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15]],"c":[],"p":[[3,"Stealer"],[8,"Clone"],[4,"Steal"],[3,"Injector"],[15,"usize"],[8,"PartialEq"],[15,"bool"],[3,"Worker"],[3,"Formatter"],[6,"Result"],[8,"IntoIterator"],[8,"FnOnce"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"crossbeam_epoch":{"doc":"Epoch-based memory reclamation.","t":"SDDGIDDQDDIIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLFLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLKLLLFLLLLLLMLLLFLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLL","n":["ALIGN","Atomic","Collector","CompareAndSetError","CompareAndSetOrdering","CompareExchangeError","Guard","Init","LocalHandle","Owned","Pointable","Pointer","Shared","as_mut","as_raw","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","collector","collector","compare_and_set","compare_and_set_weak","compare_exchange","compare_exchange_weak","current","default","default","default","default_collector","defer","defer_destroy","defer_unchecked","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","failure","fetch_and","fetch_or","fetch_update","fetch_xor","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw","from_usize","from_usize","from_usize","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_box","into_owned","into_owned","into_shared","into_usize","into_usize","into_usize","is_null","is_pinned","is_pinned","load","load_consume","new","new","new","new","null","null","partial_cmp","pin","pin","register","repin","repin_after","store","success","swap","tag","tag","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_owned","try_into_owned","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unprotected","with_tag","with_tag"],"q":[[0,"crossbeam_epoch"]],"d":["The alignment of pointer.","An atomic pointer that can be safely shared between …","An epoch-based garbage collector.","The error returned on failed compare-and-set operation.","Memory orderings for compare-and-set operations.","The error returned on failed compare-and-swap operation.","A guard that keeps the current thread pinned.","The type for initializers.","A handle to a garbage collector.","An owned heap-allocated object.","Types that are pointed to by a single word.","A trait for either <code>Owned</code> or <code>Shared</code> pointers.","A pointer to an object protected by the epoch GC.","","Converts the pointer to a raw pointer (without the tag).","","Converts the pointer to a reference.","","","","","","","","","","","","","","","","","Returns a copy of the atomic value.","","","Creates another reference to the same garbage collector.","","","","","","Returns the <code>Collector</code> associated with this handle.","Returns the <code>Collector</code> associated with this guard.","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","The value in the atomic pointer at the time of the failed …","","","","Returns the default global collector.","Stores a function so that it can be executed at some point …","Stores a destructor for an object so that it can be …","Stores a function so that it can be executed at some point …","Dereferences the given pointer.","","","","","Dereferences the pointer.","","","","","Mutably dereferences the given pointer.","","","","","","Dereferences the pointer.","","","","Drops the object pointed to by the given pointer.","","","","","","","","","","","","Checks if both handles point to the same collector.","","","The ordering of the operation when it fails.","Bitwise “and” with the current tag.","Bitwise “or” with the current tag.","Fetches the pointer, and then applies a function to it …","Bitwise “xor” with the current tag.","Clears up the thread-local cache of deferred functions by …","","","","","","","","","","Returns the argument unchanged.","Returns a new atomic pointer pointing to <code>owned</code>.","","Returns the argument unchanged.","","Returns a new atomic pointer pointing to <code>raw</code>.","Returns a new atomic pointer pointing to <code>ptr</code>.","","","Returns the argument unchanged.","","Returns a new owned pointer pointing to <code>b</code>.","Returns a new pointer pointing to <code>raw</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a new owned pointer pointing to <code>raw</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","","Initializes a with the given initializer.","","Allocates <code>value</code> on the heap and returns a new atomic …","","Allocates <code>value</code> on the heap and returns a new owned …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the owned pointer into a <code>Box</code>.","Takes ownership of the pointee.","Takes ownership of the pointee.","Converts the owned pointer into a <code>Shared</code>.","Returns the machine representation of the pointer.","","","Returns <code>true</code> if the pointer is null.","Returns <code>true</code> if the current thread is pinned.","Returns <code>true</code> if the handle is pinned.","Loads a <code>Shared</code> from the atomic pointer.","Loads a <code>Shared</code> from the atomic pointer using a “consume…","Allocates <code>value</code> on the heap and returns a new atomic …","Allocates <code>value</code> on the heap and returns a new owned …","Creates a new collector.","The new value, which the operation failed to store.","Returns a new null atomic pointer.","Returns a new null pointer.","","Pins the current thread.","Pins the handle.","Registers a new handle for the collector.","Unpins and then immediately re-pins the thread.","Temporarily unpins the thread, executes the given function …","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer.","The ordering of the operation when it succeeds.","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer, …","Returns the tag stored within the pointer.","Returns the tag stored within the pointer.","","","","","","","","","","","","","","","","","","","Takes ownership of the pointee if it is non-null.","Takes ownership of the pointee if it is not null.","","","","","","","","Returns a reference to a dummy guard that allows …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …"],"i":[2,0,0,0,0,0,0,2,0,0,0,0,0,3,4,3,4,17,6,3,3,4,8,10,11,17,6,3,3,4,8,10,11,6,3,4,8,6,3,4,8,4,10,11,6,6,6,6,17,6,4,8,0,11,11,11,2,17,6,3,3,4,4,8,10,11,2,17,6,3,3,4,4,8,10,11,2,17,6,3,3,4,8,10,10,11,11,4,8,4,8,13,6,6,6,6,11,17,6,6,3,4,4,8,10,11,17,6,6,6,6,6,6,6,3,3,3,3,4,4,8,10,11,3,12,3,4,2,17,6,6,3,3,4,8,10,11,17,6,3,4,8,10,11,3,6,4,3,12,3,4,4,0,10,6,6,6,3,8,17,6,4,4,0,10,8,11,11,6,13,6,3,4,6,3,4,8,17,6,3,4,8,10,11,17,6,3,4,8,10,11,6,4,17,6,3,4,8,10,11,0,3,4],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[[3,[[0,[1,2]]]]],[[0,[1,2]]]],[4],[[[3,[[0,[1,2]]]]],[[0,[1,2]]]],[[[4,[[0,[1,2]]]]],[[5,[[0,[1,2]]]]]],[[]],[[]],[[[3,[[0,[1,2]]]]],[[0,[1,2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[[0,[1,2]]]]],[[0,[1,2]]]],[[]],[[]],[[]],[[]],[[[6,[[0,[1,2]]]]],[[6,[[0,[1,2]]]]]],[[[3,[7]]],[[3,[7]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[8,8],[[]],[[]],[[]],[[]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],9],[10,8],[11,[[5,[8]]]],[[[6,[[0,[1,2]]]],[4,[[0,[1,2]]]],[12,[[0,[1,2]]]],13,11],[[15,[[4,[[0,[1,2]]]],[14,[[0,[1,2]],[12,[[0,[1,2]]]]]]]]]],[[[6,[[0,[1,2]]]],[4,[[0,[1,2]]]],[12,[[0,[1,2]]]],13,11],[[15,[[4,[[0,[1,2]]]],[14,[[0,[1,2]],[12,[[0,[1,2]]]]]]]]]],[[[6,[[0,[1,2]]]],[4,[[0,[1,2]]]],[12,[[0,[1,2]]]],16,16,11],[[15,[[4,[[0,[1,2]]]],[17,[[0,[1,2]],[12,[[0,[1,2]]]]]]]]]],[[[6,[[0,[1,2]]]],[4,[[0,[1,2]]]],[12,[[0,[1,2]]]],16,16,11],[[15,[[4,[[0,[1,2]]]],[17,[[0,[1,2]],[12,[[0,[1,2]]]]]]]]]],0,[[],[[6,[[0,[1,2]]]]]],[[],[[4,[[0,[1,2]]]]]],[[],8],[[],8],[[11,[0,[18,19]]]],[[11,4]],[[11,18]],[20],[20],[20],[20],[[[3,[[0,[1,2]]]]],[[0,[1,2]]]],[[[4,[[0,[1,2]]]]],[[0,[1,2]]]],[20],[20],[20],[20],[20],[20],[20],[[[3,[[0,[1,2]]]]],[[0,[1,2]]]],[20],[20],[[[4,[[0,[1,2]]]]],[[0,[1,2]]]],[20],[20],[20],[20],[20],[20],[20],[[[3,[[0,[1,2]]]]]],[20],[20],[10],[20],[11],[20],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],21],[[8,8],21],[[],21],[[],21],[[],16],[[[6,[[0,[1,2]]]],20,16,11],[[4,[[0,[1,2]]]]]],[[[6,[[0,[1,2]]]],20,16,11],[[4,[[0,[1,2]]]]]],[[[6,[[0,[1,2]]]],16,16,11,22],[[15,[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]]]]],[[[6,[[0,[1,2]]]],20,16,11],[[4,[[0,[1,2]]]]]],[11],[[[17,[[0,[12,23]]]],24],25],[[[6,[[0,[1,2]]]],24],25],[[[6,[[0,[1,2]]]],24],25],[[[3,[[0,[1,2]]]],24],25],[[[4,[[0,[1,2]]]],24],25],[[[4,[[0,[1,2]]]],24],25],[[8,24],25],[[10,24],25],[[11,24],25],[[]],[[[3,[[0,[1,2]]]]],[[6,[[0,[1,2]]]]]],[26],[[]],[[],6],[[],6],[[[4,[[0,[1,2]]]]],[[6,[[0,[1,2]]]]]],[27,6],[26],[[]],[[],3],[27,3],[[],4],[[]],[[]],[[]],[[]],[[],3],[20],[20,[[3,[[0,[1,2]]]]]],[20,[[4,[[0,[1,2]]]]]],[[],20],[[],20],[[],[[6,[[0,[1,2]]]]]],[[],20],[[],[[3,[[0,[1,2]]]]]],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,27],[[[6,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],11],[[4,[[0,[1,2]]]]]],[[],20],[[[3,[[0,[1,2]]]]],20],[[[4,[[0,[1,2]]]]],20],[[[4,[[0,[1,2]]]]],21],[[],21],[10,21],[[[6,[[0,[1,2]]]],16,11],[[4,[[0,[1,2]]]]]],[[[6,[[0,[1,2]]]],11],[[4,[[0,[1,2]]]]]],[[],6],[[],3],[[],8],0,[[],[[6,[[0,[1,2]]]]]],[[],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[5,[9]]]],[[],11],[10,11],[8,10],[11],[[11,18]],[[[6,[[0,[1,2]]]],[12,[[0,[1,2]]]],16]],[[],16],[[[6,[[0,[1,2]]]],[12,[[0,[1,2]]]],16,11],[[4,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],20],[[[4,[[0,[1,2]]]]],20],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[[6,[[0,[1,2]]]]],[[5,[[3,[[0,[1,2]]]]]]]],[[[4,[[0,[1,2]]]]],[[5,[[3,[[0,[1,2]]]]]]]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],11],[[[3,[[0,[1,2]]]],20],[[3,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],20],[[4,[[0,[1,2]]]]]]],"c":[3,4,44,45,91,169],"p":[[8,"Sized"],[8,"Pointable"],[3,"Owned"],[3,"Shared"],[4,"Option"],[3,"Atomic"],[8,"Clone"],[3,"Collector"],[4,"Ordering"],[3,"LocalHandle"],[3,"Guard"],[8,"Pointer"],[8,"CompareAndSetOrdering"],[6,"CompareAndSetError"],[4,"Result"],[4,"Ordering"],[3,"CompareExchangeError"],[8,"FnOnce"],[8,"Send"],[15,"usize"],[15,"bool"],[8,"FnMut"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"never"],[3,"Box"],[3,"TypeId"]]},\
"crossbeam_queue":{"doc":"Concurrent queues.","t":"DDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ArrayQueue","SegQueue","borrow","borrow","borrow_mut","borrow_mut","capacity","default","drop","drop","fmt","fmt","force_push","from","from","into","into","into_iter","into_iter","is_empty","is_empty","is_full","len","len","new","new","pop","pop","push","push","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"crossbeam_queue"]],"d":["A bounded multi-producer multi-consumer queue.","An unbounded multi-producer multi-consumer queue.","","","","","Returns the capacity of the queue.","","","","","","Pushes an element into the queue, replacing the oldest …","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is full.","Returns the number of elements in the queue.","Returns the number of elements in the queue.","Creates a new bounded queue with the given capacity.","Creates a new unbounded queue.","Attempts to pop an element from the queue.","Pops an element from the queue.","Attempts to push an element into the queue.","Pushes an element into the queue.","","","","","",""],"i":[0,0,1,3,1,3,1,3,1,3,1,3,1,1,3,1,3,1,3,1,3,1,1,3,1,3,1,3,1,3,1,3,1,3,1,3],"f":[0,0,[[]],[[]],[[]],[[]],[1,2],[[],3],[1],[3],[[1,4],5],[[3,4],5],[1,6],[[]],[[]],[[]],[[]],[1],[3],[1,7],[3,7],[1,7],[1,2],[3,2],[2,1],[[],3],[1,6],[3,6],[1,8],[3],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9]],"c":[],"p":[[3,"ArrayQueue"],[15,"usize"],[3,"SegQueue"],[3,"Formatter"],[6,"Result"],[4,"Option"],[15,"bool"],[4,"Result"],[3,"TypeId"]]},\
"crossbeam_utils":{"doc":"Miscellaneous tools for concurrent programming.","t":"DDALLLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLDIQLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLL","n":["Backoff","CachePadded","atomic","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","deref","deref_mut","eq","equivalent","fmt","fmt","from","from","from","from","hash","into","into","into_inner","is_completed","new","new","reset","snooze","spin","sync","thread","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","AtomicCell","AtomicConsume","Val","as_ptr","borrow","borrow_mut","compare_and_swap","compare_exchange","default","drop","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_update","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fmt","from","from","from","into","into_inner","is_lock_free","load","load_consume","new","store","swap","take","try_from","try_into","type_id","Parker","ShardedLock","ShardedLockReadGuard","ShardedLockWriteGuard","Unparker","WaitGroup","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","default","deref","deref","deref_mut","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_raw","from_raw","get_mut","into","into","into","into","into","into","into_inner","into_raw","into_raw","is_poisoned","new","new","new","park","park_deadline","park_timeout","read","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_read","try_write","type_id","type_id","type_id","type_id","type_id","type_id","unpark","unparker","wait","write","Scope","ScopedJoinHandle","ScopedThreadBuilder","as_pthread_t","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","fmt","fmt","fmt","from","from","from","into","into","into","into_pthread_t","join","name","scope","spawn","spawn","stack_size","thread","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"crossbeam_utils"],[40,"crossbeam_utils::atomic"],[167,"crossbeam_utils::sync"],[261,"crossbeam_utils::thread"]],"d":["Performs exponential backoff in spin loops.","Pads and aligns a value to the length of a cache line.","Atomic types.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner value.","Returns <code>true</code> if exponential backoff has completed and …","Creates a new <code>Backoff</code>.","Pads and aligns a value to the length of a cache line.","Resets the <code>Backoff</code>.","Backs off in a blocking loop.","Backs off in a lock-free loop.","Thread synchronization primitives.","Threads that can borrow variables from the stack.","","","","","","","","A thread-safe mutable memory location.","Trait which allows reading from primitive atomic types …","Type returned by <code>load_consume</code>.","Returns a raw pointer to the underlying data in this …","","","If the current value equals <code>current</code>, stores <code>new</code> into the …","If the current value equals <code>current</code>, stores <code>new</code> into the …","","","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies logical “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the maximum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Compares and sets the minimum of the current value and <code>val</code>,","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies logical “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “nand” to the current value and …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies logical “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Fetches the value, and applies a function to it that …","Applies bitwise “xor” to the current value and returns …","Applies logical “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Consumes the atomic and returns the contained value.","Returns <code>true</code> if operations on values of this type are …","Loads a value from the atomic cell.","Loads a value from the atomic using a “consume” memory …","Creates a new atomic cell initialized with <code>val</code>.","Stores <code>val</code> into the atomic cell.","Stores <code>val</code> into the atomic cell and returns the previous …","Takes the value of the atomic cell, leaving …","","","","A thread parking primitive.","A sharded reader-writer lock.","A guard used to release the shared read access of a …","A guard used to release the exclusive write access of a …","Unparks a thread parked by the associated <code>Parker</code>.","Enables threads to synchronize the beginning or end of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a raw pointer into a <code>Parker</code>.","Converts a raw pointer into an <code>Unparker</code>.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this lock, returning the underlying data.","Converts a <code>Parker</code> into a raw pointer.","Converts an <code>Unparker</code> into a raw pointer.","Returns <code>true</code> if the lock is poisoned.","Creates a new <code>Parker</code>.","Creates a new sharded reader-writer lock.","Creates a new wait group and returns the single reference …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Locks with shared read access, blocking the current thread …","","","","","","","","","","","","","","","","","Attempts to acquire this lock with shared read access.","Attempts to acquire this lock with exclusive write access.","","","","","","","Atomically makes the token available if it is not already.","Returns a reference to an associated <code>Unparker</code>.","Drops this reference and waits until all other references …","Locks with exclusive write access, blocking the current …","A scope for spawning threads.","A handle that can be used to join its scoped thread.","Configures the properties of a new thread.","","","","","","","","Creates a builder that can configure a thread before …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Waits for the thread to finish and returns its result.","Sets the name for the new thread.","Creates a new scope for spawning threads.","Spawns a scoped thread.","Spawns a scoped thread with this configuration.","Sets the size of the stack for the new thread.","Returns a handle to the underlying thread.","","","","","","","","",""],"i":[0,0,0,3,2,3,2,2,2,3,2,2,2,2,2,3,2,3,2,2,2,2,3,2,2,3,3,2,3,3,3,0,0,2,3,2,3,2,3,2,0,0,53,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,53,15,15,15,15,15,15,15,0,0,0,0,0,0,33,31,34,32,36,37,33,31,34,32,36,37,31,32,31,32,33,34,32,36,37,37,32,37,33,31,34,32,36,36,37,37,33,31,34,34,34,32,36,37,33,31,34,33,31,34,32,36,37,34,33,31,34,33,34,32,33,33,33,34,31,32,36,37,33,31,34,32,36,37,33,31,34,32,36,37,34,34,33,31,34,32,36,37,31,33,32,34,0,0,0,44,46,44,47,46,44,47,46,46,44,47,46,44,47,46,44,47,44,44,47,0,46,47,47,44,46,44,47,46,44,47,46,44,47],"f":[0,0,0,[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],[[],3],[[],[[2,[4]]]],[2],[2],[[[2,[5]],[2,[5]]],6],[[],6],[[3,7],8],[[[2,[9]],7],8],[[]],[[]],[[],2],[10],[[[2,[11]],12]],[[]],[[]],[2],[3,6],[[],3],[[],2],[3],[3],[3],0,0,[[]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,0,0,[15],[[]],[[]],[[[15,[[0,[16,17]]]],[0,[16,17]],[0,[16,17]]],[[0,[16,17]]]],[[[15,[[0,[16,17]]]],[0,[16,17]],[0,[16,17]]],[[13,[[0,[16,17]],[0,[16,17]]]]]],[[],[[15,[4]]]],[15],[[[15,[18]],18],18],[[[15,[19]],19],19],[[[15,[20]],20],20],[[[15,[21]],21],21],[[[15,[22]],22],22],[[[15,[23]],23],23],[[[15,[24]],24],24],[[[15,[25]],25],25],[[[15,[26]],26],26],[[[15,[27]],27],27],[[[15,[28]],28],28],[[[15,[29]],29],29],[[[15,[27]],27],27],[[[15,[25]],25],25],[[[15,[29]],29],29],[[[15,[28]],28],28],[[[15,[21]],21],21],[[[15,[26]],26],26],[[[15,[24]],24],24],[[[15,[6]],6],6],[[[15,[18]],18],18],[[[15,[19]],19],19],[[[15,[22]],22],22],[[[15,[20]],20],20],[[[15,[23]],23],23],[[[15,[27]],27],27],[[[15,[26]],26],26],[[[15,[25]],25],25],[[[15,[22]],22],22],[[[15,[18]],18],18],[[[15,[20]],20],20],[[[15,[29]],29],29],[[[15,[21]],21],21],[[[15,[24]],24],24],[[[15,[19]],19],19],[[[15,[23]],23],23],[[[15,[28]],28],28],[[[15,[27]],27],27],[[[15,[18]],18],18],[[[15,[24]],24],24],[[[15,[25]],25],25],[[[15,[19]],19],19],[[[15,[21]],21],21],[[[15,[22]],22],22],[[[15,[28]],28],28],[[[15,[20]],20],20],[[[15,[23]],23],23],[[[15,[26]],26],26],[[[15,[29]],29],29],[[[15,[26]],26],26],[[[15,[23]],23],23],[[[15,[6]],6],6],[[[15,[18]],18],18],[[[15,[24]],24],24],[[[15,[22]],22],22],[[[15,[29]],29],29],[[[15,[21]],21],21],[[[15,[28]],28],28],[[[15,[20]],20],20],[[[15,[19]],19],19],[[[15,[27]],27],27],[[[15,[25]],25],25],[[[15,[18]],18],18],[[[15,[29]],29],29],[[[15,[23]],23],23],[[[15,[6]],6],6],[[[15,[27]],27],27],[[[15,[22]],22],22],[[[15,[26]],26],26],[[[15,[19]],19],19],[[[15,[20]],20],20],[[[15,[25]],25],25],[[[15,[21]],21],21],[[[15,[24]],24],24],[[[15,[28]],28],28],[[[15,[20]],20],20],[[[15,[23]],23],23],[[[15,[27]],27],27],[[[15,[21]],21],21],[[[15,[28]],28],28],[[[15,[26]],26],26],[[[15,[25]],25],25],[[[15,[19]],19],19],[[[15,[24]],24],24],[[[15,[22]],22],22],[[[15,[18]],18],18],[[[15,[29]],29],29],[[[15,[[0,[16,17]]]],30],[[13,[[0,[16,17]],[0,[16,17]]]]]],[[[15,[20]],20],20],[[[15,[6]],6],6],[[[15,[22]],22],22],[[[15,[26]],26],26],[[[15,[27]],27],27],[[[15,[18]],18],18],[[[15,[24]],24],24],[[[15,[28]],28],28],[[[15,[25]],25],25],[[[15,[29]],29],29],[[[15,[19]],19],19],[[[15,[23]],23],23],[[[15,[21]],21],21],[[[15,[[0,[16,9]]]],7],8],[10],[[],15],[[]],[[]],[15],[[],6],[[[15,[16]]],16],[[]],[[],15],[15],[15],[[[15,[4]]],4],[[],13],[[],13],[[],14],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,31],[32,32],[[]],[[]],[[],33],[[],[[34,[4]]]],[[],32],[[[36,[35]]],35],[[[37,[35]]],35],[[[37,[35]]],35],[32],[[[37,[35]]]],[[33,7],8],[[31,7],8],[[[34,[[0,[35,9]]]],7],8],[[32,7],8],[[[36,[9]],7],8],[[[36,[[0,[35,38]]]],7],8],[[[37,[[0,[35,38]]]],7],8],[[[37,[9]],7],8],[[]],[[]],[[]],[[],34],[10],[[]],[[]],[[]],[[],33],[[],31],[[[34,[35]]],[[39,[35]]]],[[]],[[]],[[]],[[]],[[]],[[]],[34,39],[33],[31],[[[34,[35]]],6],[[],33],[[],34],[[],32],[33],[[33,40]],[[33,41]],[[[34,[35]]],[[39,[[36,[35]]]]]],[[]],[[]],[[],42],[[],42],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[[34,[35]]],[[43,[[36,[35]]]]]],[[[34,[35]]],[[43,[[37,[35]]]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[31],[33,31],[32],[[[34,[35]]],[[39,[[37,[35]]]]]],0,0,0,[44,45],[[]],[[]],[[]],[[]],[[]],[[]],[46,47],[[46,7],8],[[44,7],8],[[47,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[44,45],[44,48],[[47,42],47],[49,48],[[46,[0,[49,50]]],[[44,[50]]]],[[47,[0,[49,50]]],[[51,[[44,[50]]]]]],[[47,22],47],[44,52],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14]],"c":[46],"p":[[8,"Clone"],[3,"CachePadded"],[3,"Backoff"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"never"],[8,"Hash"],[8,"Hasher"],[4,"Result"],[3,"TypeId"],[3,"AtomicCell"],[8,"Copy"],[8,"Eq"],[15,"u8"],[15,"i32"],[15,"u64"],[15,"i8"],[15,"usize"],[15,"i64"],[15,"u128"],[15,"isize"],[15,"u32"],[15,"u16"],[15,"i16"],[15,"i128"],[8,"FnMut"],[3,"Unparker"],[3,"WaitGroup"],[3,"Parker"],[3,"ShardedLock"],[8,"Sized"],[3,"ShardedLockReadGuard"],[3,"ShardedLockWriteGuard"],[8,"Display"],[6,"LockResult"],[3,"Instant"],[3,"Duration"],[3,"String"],[6,"TryLockResult"],[3,"ScopedJoinHandle"],[6,"RawPthread"],[3,"Scope"],[3,"ScopedThreadBuilder"],[6,"Result"],[8,"FnOnce"],[8,"Send"],[6,"Result"],[3,"Thread"],[8,"AtomicConsume"]]},\
"deranged":{"doc":"","tn":["MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","None","None","None","None","None","None","None","None","None","None","None","None","OptionRangedI128","OptionRangedI16","OptionRangedI32","OptionRangedI64","OptionRangedI8","OptionRangedIsize","OptionRangedU128","OptionRangedU16","OptionRangedU32","OptionRangedU64","OptionRangedU8","OptionRangedUsize","ParseIntError","RangedI128","RangedI16","RangedI32","RangedI64","RangedI8","RangedIsize","RangedU128","RangedU16","RangedU32","RangedU64","RangedU8","RangedUsize","Some","Some","Some","Some","Some","Some","Some","Some","Some","Some","Some","Some","TryFromIntError","abs","abs","abs","abs","abs","abs","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_abs","checked_abs","checked_abs","checked_abs","checked_abs","checked_abs","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","expand","expand","expand","expand","expand","expand","expand","expand","expand","expand","expand","expand","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get_primitive","get_primitive","get_primitive","get_primitive","get_primitive","get_primitive","get_primitive","get_primitive","get_primitive","get_primitive","get_primitive","get_primitive","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_none","is_none","is_none","is_none","is_none","is_none","is_none","is_none","is_none","is_none","is_none","is_none","is_some","is_some","is_some","is_some","is_some","is_some","is_some","is_some","is_some","is_some","is_some","is_some","kind","metadata","metadata","metadata","metadata","metadata","metadata","metadata","metadata","metadata","metadata","metadata","metadata","narrow","narrow","narrow","narrow","narrow","narrow","narrow","narrow","narrow","narrow","narrow","narrow","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new_static","new_static","new_static","new_static","new_static","new_static","new_static","new_static","new_static","new_static","new_static","new_static","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","some_unchecked","some_unchecked","some_unchecked","some_unchecked","some_unchecked","some_unchecked","some_unchecked","some_unchecked","some_unchecked","some_unchecked","some_unchecked","some_unchecked","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_abs","unchecked_abs","unchecked_abs","unchecked_abs","unchecked_abs","unchecked_abs","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_div","unchecked_div","unchecked_div","unchecked_div","unchecked_div","unchecked_div","unchecked_div","unchecked_div","unchecked_div","unchecked_div","unchecked_div","unchecked_div","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add"],"q":[[0,"deranged"]],"d":["The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","A <code>RangedI128</code> that is optional. Equivalent to …","A <code>RangedI16</code> that is optional. Equivalent to …","A <code>RangedI32</code> that is optional. Equivalent to …","A <code>RangedI64</code> that is optional. Equivalent to …","A <code>RangedI8</code> that is optional. Equivalent to <code>Option&lt;RangedI8&gt;</code>…","A <code>RangedIsize</code> that is optional. Equivalent to …","A <code>RangedU128</code> that is optional. Equivalent to …","A <code>RangedU16</code> that is optional. Equivalent to …","A <code>RangedU32</code> that is optional. Equivalent to …","A <code>RangedU64</code> that is optional. Equivalent to …","A <code>RangedU8</code> that is optional. Equivalent to <code>Option&lt;RangedU8&gt;</code>…","A <code>RangedUsize</code> that is optional. Equivalent to …","","An <code>i128</code> that is known to be in the range <code>MIN..=MAX</code>.","An <code>i16</code> that is known to be in the range <code>MIN..=MAX</code>.","An <code>i32</code> that is known to be in the range <code>MIN..=MAX</code>.","An <code>i64</code> that is known to be in the range <code>MIN..=MAX</code>.","An <code>i8</code> that is known to be in the range <code>MIN..=MAX</code>.","An <code>isize</code> that is known to be in the range <code>MIN..=MAX</code>.","A <code>u128</code> that is known to be in the range <code>MIN..=MAX</code>.","A <code>u16</code> that is known to be in the range <code>MIN..=MAX</code>.","A <code>u32</code> that is known to be in the range <code>MIN..=MAX</code>.","A <code>u64</code> that is known to be in the range <code>MIN..=MAX</code>.","A <code>u8</code> that is known to be in the range <code>MIN..=MAX</code>.","A <code>usize</code> that is known to be in the range <code>MIN..=MAX</code>.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","","Absolute value. Computes <code>self.abs()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.abs()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.abs()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.abs()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.abs()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.abs()</code>, <strong>failing to compile</strong> if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Outputs the detailed cause of parsing an integer failing.","","","","","","","","","","","","","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Absolute value. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if …","Creates a ranged integer if the given value is in the range","Creates a ranged integer if the given value is in the range","Creates a ranged integer if the given value is in the range","Creates a ranged integer if the given value is in the range","Creates a ranged integer if the given value is in the range","Creates a ranged integer if the given value is in the range","Creates a ranged integer if the given value is in the range","Creates a ranged integer if the given value is in the range","Creates a ranged integer if the given value is in the range","Creates a ranged integer if the given value is in the range","Creates a ranged integer if the given value is in the range","Creates a ranged integer if the given value is in the range","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","","","","","","","","","","","","","","","","","","","","","","","","","Saturating absolute value. Computes <code>self.abs()</code>, saturating …","Saturating absolute value. Computes <code>self.abs()</code>, saturating …","Saturating absolute value. Computes <code>self.abs()</code>, saturating …","Saturating absolute value. Computes <code>self.abs()</code>, saturating …","Saturating absolute value. Computes <code>self.abs()</code>, saturating …","Saturating absolute value. Computes <code>self.abs()</code>, saturating …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer negation. Computes <code>self - rhs</code>, …","Saturating integer negation. Computes <code>self - rhs</code>, …","Saturating integer negation. Computes <code>self - rhs</code>, …","Saturating integer negation. Computes <code>self - rhs</code>, …","Saturating integer negation. Computes <code>self - rhs</code>, …","Saturating integer negation. Computes <code>self - rhs</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unchecked absolute value. Computes <code>self.abs()</code>, assuming …","Unchecked absolute value. Computes <code>self.abs()</code>, assuming …","Unchecked absolute value. Computes <code>self.abs()</code>, assuming …","Unchecked absolute value. Computes <code>self.abs()</code>, assuming …","Unchecked absolute value. Computes <code>self.abs()</code>, assuming …","Unchecked absolute value. Computes <code>self.abs()</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …"],"i":[1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,2,4,6,8,10,12,14,16,18,20,22,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,6,8,10,12,14,16,18,20,22,24,0,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,38,39,1,1,2,3,3,4,5,5,6,7,7,8,9,9,10,11,11,12,13,13,14,15,15,16,17,17,18,19,19,20,21,21,22,23,23,24,38,39,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,38,39,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,38,39,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,2,4,6,8,10,12,14,16,18,20,22,24,38,39,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,38,39,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,1,3,5,7,9,11,13,15,17,19,21,23,38,38,39,39,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,4,5,5,5,5,5,5,5,5,6,7,7,7,7,7,7,7,7,8,9,9,9,9,9,9,9,9,10,11,11,11,11,11,11,11,11,12,13,13,13,13,13,13,13,13,14,15,15,15,15,15,15,15,15,16,17,17,17,17,17,17,17,17,18,19,19,19,19,19,19,19,19,20,21,21,21,21,21,21,21,21,22,23,23,23,23,23,23,23,23,24,1,3,5,7,9,11,13,15,17,19,21,23,38,39,1,2,2,2,3,4,4,4,5,6,6,6,7,8,8,8,9,10,10,10,11,12,12,12,13,14,14,14,15,16,16,16,17,18,18,18,19,20,20,20,21,22,22,22,23,24,24,24,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,2,4,6,8,10,12,14,16,18,20,22,24,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,38,39,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,2,4,6,8,10,12,14,16,18,20,22,24,2,4,6,8,10,12,14,16,18,20,22,24,39,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,2,4,6,8,10,12,14,16,18,20,22,24,38,39,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,38,39,1,3,5,7,9,11,13,15,17,19,21,23,38,39,1,1,2,3,3,4,5,5,6,7,7,8,9,9,10,11,11,12,13,13,14,15,15,16,17,17,18,19,19,20,21,21,22,23,23,24,38,39,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,38,39,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],0,[13,13],[15,15],[17,17],[19,19],[21,21],[23,23],[1,25],[3,26],[5,27],[7,28],[9,29],[11,30],[13,31],[15,32],[17,33],[19,34],[21,35],[23,36],[[]],[[]],[[]],[1,25],[[]],[3,26],[[]],[[]],[[]],[5,27],[[]],[7,28],[[]],[[]],[9,29],[[]],[[]],[[]],[11,30],[[]],[[]],[13,31],[[]],[15,32],[[]],[[]],[17,33],[[]],[[]],[19,34],[[]],[[]],[21,35],[[]],[[]],[23,36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,[[37,[13]]]],[15,[[37,[15]]]],[17,[[37,[17]]]],[19,[[37,[19]]]],[21,[[37,[21]]]],[23,[[37,[23]]]],[[1,25],[[37,[1]]]],[[3,26],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,28],[[37,[7]]]],[[9,29],[[37,[9]]]],[[11,30],[[37,[11]]]],[[13,31],[[37,[13]]]],[[15,32],[[37,[15]]]],[[17,33],[[37,[17]]]],[[19,34],[[37,[19]]]],[[21,35],[[37,[21]]]],[[23,36],[[37,[23]]]],[[1,25],[[37,[1]]]],[[3,26],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,28],[[37,[7]]]],[[9,29],[[37,[9]]]],[[11,30],[[37,[11]]]],[[13,31],[[37,[13]]]],[[15,32],[[37,[15]]]],[[17,33],[[37,[17]]]],[[19,34],[[37,[19]]]],[[21,35],[[37,[21]]]],[[23,36],[[37,[23]]]],[[1,25],[[37,[1]]]],[[3,26],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,28],[[37,[7]]]],[[9,29],[[37,[9]]]],[[11,30],[[37,[11]]]],[[13,31],[[37,[13]]]],[[15,32],[[37,[15]]]],[[17,33],[[37,[17]]]],[[19,34],[[37,[19]]]],[[21,35],[[37,[21]]]],[[23,36],[[37,[23]]]],[[1,25],[[37,[1]]]],[[3,26],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,28],[[37,[7]]]],[[9,29],[[37,[9]]]],[[11,30],[[37,[11]]]],[[13,31],[[37,[13]]]],[[15,32],[[37,[15]]]],[[17,33],[[37,[17]]]],[[19,34],[[37,[19]]]],[[21,35],[[37,[21]]]],[[23,36],[[37,[23]]]],[1,[[37,[1]]]],[3,[[37,[3]]]],[5,[[37,[5]]]],[7,[[37,[7]]]],[9,[[37,[9]]]],[11,[[37,[11]]]],[13,[[37,[13]]]],[15,[[37,[15]]]],[17,[[37,[17]]]],[19,[[37,[19]]]],[21,[[37,[21]]]],[23,[[37,[23]]]],[[1,27],[[37,[1]]]],[[3,27],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,27],[[37,[7]]]],[[9,27],[[37,[9]]]],[[11,27],[[37,[11]]]],[[13,27],[[37,[13]]]],[[15,27],[[37,[15]]]],[[17,27],[[37,[17]]]],[[19,27],[[37,[19]]]],[[21,27],[[37,[21]]]],[[23,27],[[37,[23]]]],[[1,25],[[37,[1]]]],[[3,26],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,28],[[37,[7]]]],[[9,29],[[37,[9]]]],[[11,30],[[37,[11]]]],[[13,31],[[37,[13]]]],[[15,32],[[37,[15]]]],[[17,33],[[37,[17]]]],[[19,34],[[37,[19]]]],[[21,35],[[37,[21]]]],[[23,36],[[37,[23]]]],[[1,25],[[37,[1]]]],[[3,26],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,28],[[37,[7]]]],[[9,29],[[37,[9]]]],[[11,30],[[37,[11]]]],[[13,31],[[37,[13]]]],[[15,32],[[37,[15]]]],[[17,33],[[37,[17]]]],[[19,34],[[37,[19]]]],[[21,35],[[37,[21]]]],[[23,36],[[37,[23]]]],[[1,27],[[37,[1]]]],[[3,27],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,27],[[37,[7]]]],[[9,27],[[37,[9]]]],[[11,27],[[37,[11]]]],[[13,27],[[37,[13]]]],[[15,27],[[37,[15]]]],[[17,27],[[37,[17]]]],[[19,27],[[37,[19]]]],[[21,27],[[37,[21]]]],[[23,27],[[37,[23]]]],[[1,27],[[37,[1]]]],[[3,27],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,27],[[37,[7]]]],[[9,27],[[37,[9]]]],[[11,27],[[37,[11]]]],[[13,27],[[37,[13]]]],[[15,27],[[37,[15]]]],[[17,27],[[37,[17]]]],[[19,27],[[37,[19]]]],[[21,27],[[37,[21]]]],[[23,27],[[37,[23]]]],[[1,25],[[37,[1]]]],[[3,26],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,28],[[37,[7]]]],[[9,29],[[37,[9]]]],[[11,30],[[37,[11]]]],[[13,31],[[37,[13]]]],[[15,32],[[37,[15]]]],[[17,33],[[37,[17]]]],[[19,34],[[37,[19]]]],[[21,35],[[37,[21]]]],[[23,36],[[37,[23]]]],[38,38],[39,39],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],40],[[2,2],40],[[3,3],40],[[4,4],40],[[5,5],40],[[6,6],40],[[7,7],40],[[8,8],40],[[9,9],40],[[10,10],40],[[11,11],40],[[12,12],40],[[13,13],40],[[14,14],40],[[15,15],40],[[16,16],40],[[17,17],40],[[18,18],40],[[19,19],40],[[20,20],40],[[21,21],40],[[22,22],40],[[23,23],40],[[24,24],40],[[],2],[[],4],[[],6],[[],8],[[],10],[[],12],[[],14],[[],16],[[],18],[[],20],[[],22],[[],24],[[38,38],41],[[39,39],41],[[1,1],41],[[2,2],41],[[3,3],41],[[4,4],41],[[5,5],41],[[6,6],41],[[7,7],41],[[8,8],41],[[9,9],41],[[10,10],41],[[11,11],41],[[12,12],41],[[13,13],41],[[14,14],41],[[15,15],41],[[16,16],41],[[17,17],41],[[18,18],41],[[19,19],41],[[20,20],41],[[21,21],41],[[22,22],41],[[23,23],41],[[24,24],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[1,1],[3,3],[5,5],[7,7],[9,9],[11,11],[13,13],[15,15],[17,17],[19,19],[21,21],[23,23],[[38,42],43],[[38,42],43],[[39,42],43],[[39,42],43],[[1,42],43],[[1,42],43],[[1,42],43],[[1,42],43],[[1,42],43],[[1,42],43],[[1,42],43],[[1,42],43],[[2,42],43],[[3,42],43],[[3,42],43],[[3,42],43],[[3,42],43],[[3,42],43],[[3,42],43],[[3,42],43],[[3,42],43],[[4,42],43],[[5,42],43],[[5,42],43],[[5,42],43],[[5,42],43],[[5,42],43],[[5,42],43],[[5,42],43],[[5,42],43],[[6,42],43],[[7,42],43],[[7,42],43],[[7,42],43],[[7,42],43],[[7,42],43],[[7,42],43],[[7,42],43],[[7,42],43],[[8,42],43],[[9,42],43],[[9,42],43],[[9,42],43],[[9,42],43],[[9,42],43],[[9,42],43],[[9,42],43],[[9,42],43],[[10,42],43],[[11,42],43],[[11,42],43],[[11,42],43],[[11,42],43],[[11,42],43],[[11,42],43],[[11,42],43],[[11,42],43],[[12,42],43],[[13,42],43],[[13,42],43],[[13,42],43],[[13,42],43],[[13,42],43],[[13,42],43],[[13,42],43],[[13,42],43],[[14,42],43],[[15,42],43],[[15,42],43],[[15,42],43],[[15,42],43],[[15,42],43],[[15,42],43],[[15,42],43],[[15,42],43],[[16,42],43],[[17,42],43],[[17,42],43],[[17,42],43],[[17,42],43],[[17,42],43],[[17,42],43],[[17,42],43],[[17,42],43],[[18,42],43],[[19,42],43],[[19,42],43],[[19,42],43],[[19,42],43],[[19,42],43],[[19,42],43],[[19,42],43],[[19,42],43],[[20,42],43],[[21,42],43],[[21,42],43],[[21,42],43],[[21,42],43],[[21,42],43],[[21,42],43],[[21,42],43],[[21,42],43],[[22,42],43],[[23,42],43],[[23,42],43],[[23,42],43],[[23,42],43],[[23,42],43],[[23,42],43],[[23,42],43],[[23,42],43],[[24,42],43],[[1,42,[44,[1]]],43],[[3,42,[44,[3]]],43],[[5,42,[44,[5]]],43],[[7,42,[44,[7]]],43],[[9,42,[44,[9]]],43],[[11,42,[44,[11]]],43],[[13,42,[44,[13]]],43],[[15,42,[44,[15]]],43],[[17,42,[44,[17]]],43],[[19,42,[44,[19]]],43],[[21,42,[44,[21]]],43],[[23,42,[44,[23]]],43],[[]],[[]],[[]],[1,2],[[[37,[1]]],2],[[]],[[]],[[[37,[3]]],4],[[]],[3,4],[[]],[[]],[5,6],[[[37,[5]]],6],[[]],[[]],[[[37,[7]]],8],[7,8],[[]],[[[37,[9]]],10],[[]],[9,10],[[]],[11,12],[[]],[[[37,[11]]],12],[[]],[[]],[[[37,[13]]],14],[13,14],[[]],[[[37,[15]]],16],[15,16],[[]],[[]],[[]],[[[37,[17]]],18],[17,18],[[]],[19,20],[[]],[[[37,[19]]],20],[[]],[21,22],[[]],[[[37,[21]]],22],[[]],[23,24],[[]],[[[37,[23]]],24],[45,[[46,[1]]]],[45,[[46,[3]]]],[45,[[46,[5]]]],[45,[[46,[7]]]],[45,[[46,[9]]]],[45,[[46,[11]]]],[45,[[46,[13]]]],[45,[[46,[15]]]],[45,[[46,[17]]]],[45,[[46,[19]]]],[45,[[46,[21]]]],[45,[[46,[23]]]],[[45,27],[[46,[1,39]]]],[[45,27],[[46,[3,39]]]],[[45,27],[[46,[5,39]]]],[[45,27],[[46,[7,39]]]],[[45,27],[[46,[9,39]]]],[[45,27],[[46,[11,39]]]],[[45,27],[[46,[13,39]]]],[[45,27],[[46,[15,39]]]],[[45,27],[[46,[17,39]]]],[[45,27],[[46,[19,39]]]],[[45,27],[[46,[21,39]]]],[[45,27],[[46,[23,39]]]],[1,25],[2,[[37,[1]]]],[3,26],[4,[[37,[3]]]],[5,27],[6,[[37,[5]]]],[7,28],[8,[[37,[7]]]],[9,29],[10,[[37,[9]]]],[11,30],[12,[[37,[11]]]],[13,31],[14,[[37,[13]]]],[15,32],[16,[[37,[15]]]],[17,33],[18,[[37,[17]]]],[19,34],[20,[[37,[19]]]],[21,35],[22,[[37,[21]]]],[23,36],[24,[[37,[23]]]],[2,[[37,[25]]]],[4,[[37,[26]]]],[6,[[37,[27]]]],[8,[[37,[28]]]],[10,[[37,[29]]]],[12,[[37,[30]]]],[14,[[37,[31]]]],[16,[[37,[32]]]],[18,[[37,[33]]]],[20,[[37,[34]]]],[22,[[37,[35]]]],[24,[[37,[36]]]],[[1,47]],[[2,47]],[[3,47]],[[4,47]],[[5,47]],[[6,47]],[[7,47]],[[8,47]],[[9,47]],[[10,47]],[[11,47]],[[12,47]],[[13,47]],[[14,47]],[[15,47]],[[16,47]],[[17,47]],[[18,47]],[[19,47]],[[20,47]],[[21,47]],[[22,47]],[[23,47]],[[24,47]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,41],[4,41],[6,41],[8,41],[10,41],[12,41],[14,41],[16,41],[18,41],[20,41],[22,41],[24,41],[2,41],[4,41],[6,41],[8,41],[10,41],[12,41],[14,41],[16,41],[18,41],[20,41],[22,41],[24,41],[39,48],[[1,49],[[44,[1]]]],[[3,49],[[44,[3]]]],[[5,49],[[44,[5]]]],[[7,49],[[44,[7]]]],[[9,49],[[44,[9]]]],[[11,49],[[44,[11]]]],[[13,49],[[44,[13]]]],[[15,49],[[44,[15]]]],[[17,49],[[44,[17]]]],[[19,49],[[44,[19]]]],[[21,49],[[44,[21]]]],[[23,49],[[44,[23]]]],[1,[[37,[1]]]],[3,[[37,[3]]]],[5,[[37,[5]]]],[7,[[37,[7]]]],[9,[[37,[9]]]],[11,[[37,[11]]]],[13,[[37,[13]]]],[15,[[37,[15]]]],[17,[[37,[17]]]],[19,[[37,[19]]]],[21,[[37,[21]]]],[23,[[37,[23]]]],[1,1],[3,3],[5,5],[7,7],[9,9],[11,11],[13,13],[15,15],[17,17],[19,19],[21,21],[23,23],[25,[[37,[1]]]],[26,[[37,[3]]]],[27,[[37,[5]]]],[28,[[37,[7]]]],[29,[[37,[9]]]],[30,[[37,[11]]]],[31,[[37,[13]]]],[32,[[37,[15]]]],[33,[[37,[17]]]],[34,[[37,[19]]]],[35,[[37,[21]]]],[36,[[37,[23]]]],[[],1],[[],3],[[],5],[[],7],[[],9],[[],11],[[],13],[[],15],[[],17],[[],19],[[],21],[[],23],[25,1],[26,3],[27,5],[28,7],[29,9],[30,11],[31,13],[32,15],[33,17],[34,19],[35,21],[36,23],[[1,1],[[37,[40]]]],[[2,2],[[37,[40]]]],[[3,3],[[37,[40]]]],[[4,4],[[37,[40]]]],[[5,5],[[37,[40]]]],[[6,6],[[37,[40]]]],[[7,7],[[37,[40]]]],[[8,8],[[37,[40]]]],[[9,9],[[37,[40]]]],[[10,10],[[37,[40]]]],[[11,11],[[37,[40]]]],[[12,12],[[37,[40]]]],[[13,13],[[37,[40]]]],[[14,14],[[37,[40]]]],[[15,15],[[37,[40]]]],[[16,16],[[37,[40]]]],[[17,17],[[37,[40]]]],[[18,18],[[37,[40]]]],[[19,19],[[37,[40]]]],[[20,20],[[37,[40]]]],[[21,21],[[37,[40]]]],[[22,22],[[37,[40]]]],[[23,23],[[37,[40]]]],[[24,24],[[37,[40]]]],[13,13],[15,15],[17,17],[19,19],[21,21],[23,23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[13,13],[15,15],[17,17],[19,19],[21,21],[23,23],[[1,27],1],[[3,27],3],[[5,27],5],[[7,27],7],[[9,27],9],[[11,27],11],[[13,27],13],[[15,27],15],[[17,27],17],[[19,27],19],[[21,27],21],[[23,27],23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[25,2],[26,4],[27,6],[28,8],[29,10],[30,12],[31,14],[32,16],[33,18],[34,20],[35,22],[36,24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],46],[[],46],[[],46],[25,[[46,[1]]]],[[],46],[[],46],[26,[[46,[3]]]],[[],46],[[],46],[27,[[46,[5]]]],[[],46],[[],46],[28,[[46,[7]]]],[[],46],[29,[[46,[9]]]],[[],46],[[],46],[[],46],[30,[[46,[11]]]],[[],46],[31,[[46,[13]]]],[[],46],[[],46],[[],46],[32,[[46,[15]]]],[[],46],[[],46],[33,[[46,[17]]]],[[],46],[34,[[46,[19]]]],[[],46],[[],46],[[],46],[35,[[46,[21]]]],[[],46],[36,[[46,[23]]]],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[13,13],[15,15],[17,17],[19,19],[21,21],[23,23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[1,1],[3,3],[5,5],[7,7],[9,9],[11,11],[13,13],[15,15],[17,17],[19,19],[21,21],[23,23],[[1,27],1],[[3,27],3],[[5,27],5],[[7,27],7],[[9,27],9],[[11,27],11],[[13,27],13],[[15,27],15],[[17,27],17],[[19,27],19],[[21,27],21],[[23,27],23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[[1,27],1],[[3,27],3],[[5,27],5],[[7,27],7],[[9,27],9],[[11,27],11],[[13,27],13],[[15,27],15],[[17,27],17],[[19,27],19],[[21,27],21],[[23,27],23],[[1,27],1],[[3,27],3],[[5,27],5],[[7,27],7],[[9,27],9],[[11,27],11],[[13,27],13],[[15,27],15],[[17,27],17],[[19,27],19],[[21,27],21],[[23,27],23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23]],"c":[],"p":[[3,"RangedU8"],[3,"OptionRangedU8"],[3,"RangedU16"],[3,"OptionRangedU16"],[3,"RangedU32"],[3,"OptionRangedU32"],[3,"RangedU64"],[3,"OptionRangedU64"],[3,"RangedU128"],[3,"OptionRangedU128"],[3,"RangedUsize"],[3,"OptionRangedUsize"],[3,"RangedI8"],[3,"OptionRangedI8"],[3,"RangedI16"],[3,"OptionRangedI16"],[3,"RangedI32"],[3,"OptionRangedI32"],[3,"RangedI64"],[3,"OptionRangedI64"],[3,"RangedI128"],[3,"OptionRangedI128"],[3,"RangedIsize"],[3,"OptionRangedIsize"],[15,"u8"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u128"],[15,"usize"],[15,"i8"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i128"],[15,"isize"],[4,"Option"],[3,"TryFromIntError"],[3,"ParseIntError"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Metadata"],[15,"str"],[4,"Result"],[8,"Hasher"],[4,"IntErrorKind"],[3,"FormatterOptions"],[3,"String"],[3,"TypeId"]]},\
"downcast_rs":{"doc":"Build status Latest version Documentation","t":"IIKKOKKK","n":["Downcast","DowncastSync","as_any","as_any_mut","impl_downcast","into_any","into_any_arc","into_any_rc"],"q":[[0,"downcast_rs"]],"d":["Supports conversion to <code>Any</code>. Traits to be extended by …","Extends <code>Downcast</code> to support <code>Sync</code> traits that thus support …","Convert <code>&amp;Trait</code> (where <code>Trait: Downcast</code>) to <code>&amp;Any</code>. This is …","Convert <code>&amp;mut Trait</code> (where <code>Trait: Downcast</code>) to <code>&amp;Any</code>. This …","Adds downcasting support to traits that extend …","Convert <code>Box&lt;dyn Trait&gt;</code> (where <code>Trait: Downcast</code>) to …","Convert <code>Arc&lt;Trait&gt;</code> (where <code>Trait: Downcast</code>) to <code>Arc&lt;Any&gt;</code>. …","Convert <code>Rc&lt;Trait&gt;</code> (where <code>Trait: Downcast</code>) to <code>Rc&lt;Any&gt;</code>. …"],"i":[0,0,5,5,0,5,6,5],"f":[0,0,[[],1],[[],1],0,[2,[[2,[1]]]],[3,[[3,[1]]]],[4,[[4,[1]]]]],"c":[],"p":[[8,"Any"],[3,"Box"],[3,"Arc"],[3,"Rc"],[8,"Downcast"],[8,"DowncastSync"]]},\
"either":{"doc":"The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","t":"ECNCNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOLLL","n":["Either","Left","Left","Right","Right","all","any","as_mut","as_mut","as_mut","as_mut","as_pin_mut","as_pin_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow_mut","clone","clone_from","cmp","collect","count","deref","deref_mut","either","either_into","either_with","eq","expect_left","expect_right","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","find","find_map","flip","fmt","fmt","fold","for_both","for_each","from","from","hash","into","into","into_future","into_inner","into_iter","into_iter","is_left","is_right","last","left","left_and_then","left_or","left_or_default","left_or_else","len","map","map_either","map_either_with","map_left","map_right","next","next_back","nth","partial_cmp","partition","poll","position","rfind","rfold","right","right_and_then","right_or","right_or_default","right_or_else","size_hint","try_from","try_into","try_left","try_right","type_id","unwrap_left","unwrap_right"],"q":[[0,"either"]],"d":["The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","","A value of type <code>L</code>.","","A value of type <code>R</code>.","","","","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","","","","","","","","","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","","","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","","","","Evaluate the provided expression for both <code>Either::Left</code> and …","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Extract the value of an either over two equivalent types.","","Convert the inner value to an iterator.","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Map <code>f</code> over the contained value and return the result in the","Apply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …","Similar to [<code>map_either</code>], with an added context <code>ctx</code> …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","","","","","","","","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","","","Macro for unwrapping the left side of an <code>Either</code>, which …","Dual to <code>try_left!</code>, see its documentation for more …","","Returns the left value","Returns the right value"],"i":[0,0,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2],"f":[0,0,0,0,0,[[[2,[1,1]],3],4],[[[2,[1,1]],3],4],[[[2,[[6,[5]],[6,[5]]]]],5],[[[2,[6,6]]]],[[[2,[[6,[7]],[6,[7]]]]],7],[2,2],[[[8,[2]]],[[2,[8,8]]]],[[[8,[2]]],[[2,[8,8]]]],[[[2,[[9,[5]],[9,[5]]]]],5],[2,2],[[[2,[9,9]]]],[[[2,[[9,[7]],[9,[7]]]]],7],[[]],[[]],[[[2,[10,10]]],[[2,[10,10]]]],[[[2,[10,10]],[2,[10,10]]]],[[[2,[11,11]],[2,[11,11]]],12],[[[2,[1,1]]],13],[[[2,[1,1]]],14],[[[2,[15,15]]]],[[[2,[16,16]]]],[[2,17,17]],[[[2,[18,18]]]],[[2,17,17]],[[[2,[19,19]],[2,[19,19]]],4],[[[2,[20]],7]],[[[2,[20]],7]],[[[2,[21,21]],22]],[[[2,[23,23]]],[[23,[2]]]],[2],[[[2,[24,24]]],[[24,[2]]]],[[[2,[23,23]]],[[23,[2]]]],[2],[[[2,[1,1]],3],24],[[[2,[1,1]],3],24],[2,2],[[[2,[20,20]],25],26],[[[2,[27,27]],25],26],[[[2,[1,1]],3]],0,[[[2,[1,1]],3]],[[]],[23,2],[[[2,[28,28]],29]],[[]],[2,23],[[]],[2],[[]],[[[2,[22,22]]],2],[2,4],[2,4],[[[2,[1,1]]],24],[2,24],[[2,17],2],[2],[[[2,[30]]],30],[[2,17]],[[[2,[31,31]]],14],[[2,17],2],[[2,17,17],2],[[2,17,17],2],[[2,17],2],[[2,17],2],[[[2,[1,1]]],24],[[[2,[32,32]]],24],[[[2,[1,1]],14],24],[[[2,[33,33]],[2,[33,33]]],[[24,[12]]]],[[[2,[1,1]],3]],[[[8,[[2,[34,34]]]],35],36],[[[2,[1,1]],3],[[24,[14]]]],[[[2,[32,32]],3],24],[[[2,[32,32]],3]],[2,24],[[2,17],2],[2],[[[2,[30]]],30],[[2,17]],[[[2,[1,1]]]],[[],23],[[],23],0,0,[[],37],[[[2,[20]]]],[[[2,[20]]]]],"c":[],"p":[[8,"Iterator"],[4,"Either"],[8,"FnMut"],[15,"bool"],[15,"slice"],[8,"AsMut"],[15,"str"],[3,"Pin"],[8,"AsRef"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[8,"FromIterator"],[15,"usize"],[8,"Deref"],[8,"DerefMut"],[8,"FnOnce"],[8,"Into"],[8,"PartialEq"],[8,"Debug"],[8,"Extend"],[8,"IntoIterator"],[4,"Result"],[4,"Option"],[3,"Formatter"],[6,"Result"],[8,"Display"],[8,"Hash"],[8,"Hasher"],[8,"Default"],[8,"ExactSizeIterator"],[8,"DoubleEndedIterator"],[8,"PartialOrd"],[8,"Future"],[3,"Context"],[4,"Poll"],[3,"TypeId"]]},\
"hashbrown":{"doc":"This crate is a Rust port of Google’s high-performance …","t":"NNIDDDELLLLLKLLLAAALLLLLMGDEEDDDDDDDDNNNDDDDDEDDNNNDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLDDEDDDDDNDDDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDEDDDDDNDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AllocError","CapacityOverflow","Equivalent","HashMap","HashSet","HashTable","TryReserveError","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","fmt","from","hash_map","hash_set","hash_table","into","to_owned","try_from","try_into","type_id","layout","DefaultHashBuilder","Drain","Entry","EntryRef","ExtractIf","HashMap","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Keys","Occupied","Occupied","Occupied","OccupiedEntry","OccupiedEntryRef","OccupiedError","RawEntryBuilder","RawEntryBuilderMut","RawEntryMut","RawOccupiedEntryMut","RawVacantEntryMut","Vacant","Vacant","Vacant","VacantEntry","VacantEntryRef","Values","ValuesMut","allocator","and_modify","and_modify","and_modify","and_replace_entry_with","and_replace_entry_with","and_replace_entry_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","contains_key","default","drain","entry","entry","entry_ref","eq","equivalent","extend","extend","extend","extract_if","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hash","from_hash","from_iter","from_key","from_key","from_key_hashed_nocheck","from_key_hashed_nocheck","get","get","get","get","get_key_value","get_key_value","get_key_value_mut","get_key_value_mut","get_many_key_value_mut","get_many_key_value_unchecked_mut","get_many_mut","get_many_unchecked_mut","get_mut","get_mut","get_mut","get_mut","hasher","index","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert_hashed_nocheck","insert_key","insert_unique_unchecked","insert_with_hasher","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_key","into_key","into_key_value","into_keys","into_mut","into_mut","into_mut","into_values","is_empty","iter","iter_mut","key","key","key","key","key","key","key","key_mut","keys","len","len","len","len","len","len","len","len","len","len","new","new_in","next","next","next","next","next","next","next","next","next","next","or_default","or_default","or_insert","or_insert","or_insert","or_insert_with","or_insert_with","or_insert_with","or_insert_with_key","or_insert_with_key","raw_entry","raw_entry_mut","remove","remove","remove","remove","remove_entry","remove_entry","remove_entry","remove_entry","replace_entry","replace_entry","replace_entry_with","replace_entry_with","replace_entry_with","replace_key","replace_key","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","values_mut","with_capacity","with_capacity_and_hasher","with_capacity_and_hasher_in","with_capacity_in","with_hasher","with_hasher_in","Difference","Drain","Entry","ExtractIf","HashSet","Intersection","IntoIter","Iter","Occupied","OccupiedEntry","SymmetricDifference","Union","Vacant","VacantEntry","allocator","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","default","difference","drain","entry","eq","equivalent","extend","extend","extract_if","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get","get","get_or_insert","get_or_insert_owned","get_or_insert_with","hasher","insert","insert","insert","insert_unique_unchecked","intersection","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_value","is_disjoint","is_empty","is_subset","is_superset","iter","len","len","len","len","new","new_in","next","next","next","next","next","next","next","next","or_insert","remove","remove","replace","replace","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sub","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity","with_capacity_and_hasher","with_capacity_and_hasher_in","with_capacity_in","with_hasher","with_hasher_in","AbsentEntry","Drain","Entry","ExtractIf","HashTable","IntoIter","Iter","IterMut","Occupied","OccupiedEntry","Vacant","VacantEntry","allocator","and_modify","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone_into","default","drain","entry","extract_if","find","find_entry","find_mut","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get","get_many_mut","get_many_unchecked_mut","get_mut","insert","insert","insert_unique","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","into_table","into_table","into_table","is_empty","iter","iter_mut","len","len","len","len","len","new","new_in","next","next","next","next","next","or_insert","or_insert_with","remove","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","with_capacity_in"],"q":[[0,"hashbrown"],[24,"hashbrown::TryReserveError"],[25,"hashbrown::hash_map"],[422,"hashbrown::hash_set"],[640,"hashbrown::hash_table"]],"d":["The memory allocator returned an error","Error due to the computed capacity exceeding the collection…","Key equivalence trait.","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","Low-level hash table with explicit hashing.","The error type for <code>try_reserve</code> methods.","","","","","","Checks if this value is equivalent to the given key.","","","Returns the argument unchanged.","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A hash table implemented with quadratic probing and SIMD …","Calls <code>U::from(self)</code>.","","","","","The layout of the allocation request that failed.","Default hasher for <code>HashMap</code>.","A draining iterator over the entries of a <code>HashMap</code> in …","A view into a single entry in a map, which may either be …","A view into a single entry in a map, which may either be …","A draining iterator over entries of a <code>HashMap</code> which don’…","A hash map implemented with quadratic probing and SIMD …","An owning iterator over the entries of a <code>HashMap</code> in …","An owning iterator over the keys of a <code>HashMap</code> in arbitrary …","An owning iterator over the values of a <code>HashMap</code> in …","An iterator over the entries of a <code>HashMap</code> in arbitrary …","A mutable iterator over the entries of a <code>HashMap</code> in …","An iterator over the keys of a <code>HashMap</code> in arbitrary order. …","An occupied entry.","An occupied entry.","An occupied entry.","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","The error returned by <code>try_insert</code> when the key already …","A builder for computing where in a <code>HashMap</code> a key-value …","A builder for computing where in a <code>HashMap</code> a key-value …","A view into a single entry in a map, which may either be …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A vacant entry.","A vacant entry.","A vacant entry.","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","An iterator over the values of a <code>HashMap</code> in arbitrary …","A mutable iterator over the values of a <code>HashMap</code> in …","Returns a reference to the underlying allocator.","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the map can hold without …","Clears the map, removing all key-value pairs. Keeps the …","","","","","","","","","","Returns <code>true</code> if the map contains a value for the specified …","Creates an empty <code>HashMap&lt;K, V, S, A&gt;</code>, with the <code>Default</code> …","Clears the map, returning all key-value pairs as an …","Gets the given key’s corresponding entry in the map for …","The entry in the map that was already occupied.","Gets the given key’s corresponding entry by reference in …","","","Inserts all new key-values from the iterator to existing …","Inserts all new key-values from the iterator to existing …","Inserts all new key-values from the iterator to existing …","Drains elements which are true under the given predicate, …","","","","","","","","","","","","","","","","","","","","","","","","Examples","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>RawEntryMut</code> from the given hash and matching …","Access an immutable entry by hash and matching function.","","Creates a <code>RawEntryMut</code> from the given key.","Access an immutable entry by key.","Creates a <code>RawEntryMut</code> from the given key and its hash.","Access an immutable entry by a key and its hash.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a reference to the key and value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a mutable reference to the key and value in the entry.","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Returns a reference to the map’s <code>BuildHasher</code>.","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Sets the value of the entry, and returns a …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntryRef’s …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns the entry’s old …","Insert a key-value pair into the map without checking if …","Set the value of an entry with a custom hasher function.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a consuming iterator, that is, one that moves each …","Creates an iterator over the entries of a <code>HashMap</code> in …","Creates an iterator over the entries of a <code>HashMap</code> in …","","","","","","","","","","","Converts the entry into a mutable reference to the key in …","Take ownership of the key.","Take ownership of the key.","Converts the OccupiedEntry into a mutable reference to the …","Creates a consuming iterator visiting all the keys in …","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntryRef into a mutable reference to …","Creates a consuming iterator visiting all the values in …","Returns <code>true</code> if the map contains no elements.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","Gets a reference to the key in the entry.","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Gets a mutable reference to the key in the entry.","An iterator visiting all keys in arbitrary order. The …","Returns the number of elements in the map.","","","","","","","","","","Creates an empty <code>HashMap</code>.","Creates an empty <code>HashMap</code> using the given allocator.","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","Ensures a value is in the entry by inserting, if empty, …","Creates a raw immutable entry builder for the HashMap.","Creates a raw entry builder for the HashMap.","Removes a key from the map, returning the value at the key …","Takes the value out of the entry, and returns it.","Takes the value out of the entry, and returns it. Keeps …","Takes the value out of the entry, and returns it. Keeps …","Removes a key from the map, returning the stored key and …","Take the ownership of the key and value from the map.","Take the ownership of the key and value from the map. …","Take the ownership of the key and value from the map. …","Replaces the entry, returning the old key and value. The …","Replaces the entry, returning the old key and value. The …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Replaces the key in the hash map with the key used to …","Replaces the key in the hash map with the key used to …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate. …","Shrinks the capacity of the map with a lower limit. It …","Shrinks the capacity of the map as much as possible. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to insert a key-value pair into the map, and returns …","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","","","","","","","","","","","","The value which was not inserted, because the entry was …","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary order.","Creates an empty <code>HashMap</code> with the specified capacity.","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> with the specified capacity using …","Creates an empty <code>HashMap</code> which will use the given hash …","Creates an empty <code>HashMap</code> which will use the given hash …","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>HashSet</code>.","A view into a single entry in a set, which may either be …","A draining iterator over entries of a <code>HashSet</code> which don’…","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>HashSet</code>.","An iterator over the items of a <code>HashSet</code>.","An occupied entry.","A view into an occupied entry in a <code>HashSet</code>. It is part of …","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>HashSet</code>…","A vacant entry.","A view into a vacant entry in a <code>HashSet</code>. It is part of the …","Returns a reference to the underlying allocator.","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the set can hold without …","Clears the set, removing all values.","","","","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Creates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …","Visits the values representing the difference, i.e., the …","Clears the set, returning all elements in an iterator.","Gets the given value’s corresponding entry in the set …","","","","","Drains elements which are true under the given predicate, …","","","","","","","","","","","","Examples","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to the value in the set, if any, that …","Returns a reference to this entry’s value.","Gets a reference to the value in the entry.","Gets a reference to the value that would be used when …","Inserts the given <code>value</code> into the set if it is not present, …","Inserts an owned copy of the given <code>value</code> into the set if …","Inserts a value computed from <code>f</code> into the set if the given …","Returns a reference to the set’s <code>BuildHasher</code>.","Adds a value to the set.","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry with the VacantEntry’s value.","Insert a value the set without checking if the value …","Visits the values representing the intersection, i.e., the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a consuming iterator, that is, one that moves each …","","","","","","","","","Take ownership of the value.","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a superset of another, i.e., …","An iterator visiting all elements in arbitrary order. The …","Returns the number of elements in the set.","","","","Creates an empty <code>HashSet</code>.","Creates an empty <code>HashSet</code>.","","","","","","","","","Ensures a value is in the entry by inserting if it was …","Removes a value from the set. Returns whether the value was","Takes the value out of the entry, and returns it. Keeps …","Adds a value to the set, replacing the existing value, if …","Replaces the entry, returning the old value. The new value …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","Shrinks the capacity of the set with a lower limit. It …","Shrinks the capacity of the set as much as possible. It …","","","","","","","","","Returns the difference of <code>self</code> and <code>rhs</code> as a new …","Visits the values representing the symmetric difference, …","Removes and returns the value in the set, if any, that is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","Visits the values representing the union, i.e., all the …","Creates an empty <code>HashSet</code> with the specified capacity.","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates an empty <code>HashSet</code> with the specified capacity.","Creates a new empty hash set which will use the given …","Creates a new empty hash set which will use the given …","Type representing the absence of an entry, as returned by …","A draining iterator over the items of a <code>HashTable</code>.","A view into a single entry in a table, which may either be …","A draining iterator over entries of a <code>HashTable</code> which don…","Low-level hash table with explicit hashing.","An owning iterator over the entries of a <code>HashTable</code> in …","An iterator over the entries of a <code>HashTable</code> in arbitrary …","A mutable iterator over the entries of a <code>HashTable</code> in …","An occupied entry.","A view into an occupied entry in a <code>HashTable</code>. It is part …","A vacant entry.","A view into a vacant entry in a <code>HashTable</code>. It is part of …","Returns a reference to the underlying allocator.","Provides in-place mutable access to an occupied entry …","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the table can hold without …","Clears the table, removing all values.","","","","Clears the set, returning all elements in an iterator.","Returns an <code>Entry</code> for an entry in the table with the given …","Drains elements which are true under the given predicate, …","Returns a reference to an entry in the table with the …","Returns an <code>OccupiedEntry</code> for an entry in the table with …","Returns a mutable reference to an entry in the table with …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the value in the entry.","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Gets a mutable reference to the value in the entry.","Sets the value of the entry, replacing any existing value …","Inserts a new element into the table with the hash that …","Inserts an element into the <code>HashTable</code> with the given hash …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntry into a mutable reference to the …","Converts the VacantEntry into a mutable reference to the …","Converts the AbsentEntry into a mutable reference to the …","Returns <code>true</code> if the set contains no elements.","An iterator visiting all elements in arbitrary order. The …","An iterator visiting all elements in arbitrary order, with …","Returns the number of elements in the table.","","","","","Creates an empty <code>HashTable</code>.","Creates an empty <code>HashTable</code> using the given allocator.","","","","","","Ensures a value is in the entry by inserting if it was …","Ensures a value is in the entry by inserting the result of …","Takes the value out of the entry, and returns it along …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","Shrinks the capacity of the table with a lower limit. It …","Shrinks the capacity of the table as much as possible. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","Creates an empty <code>HashTable</code> with the specified capacity.","Creates an empty <code>HashTable</code> with the specified capacity …"],"i":[1,1,0,0,0,0,0,1,1,1,1,1,22,1,1,1,0,0,0,1,1,1,1,1,77,0,0,0,0,0,0,0,0,0,0,0,0,9,11,13,0,0,0,0,0,0,0,0,9,11,13,0,0,0,0,8,9,11,13,9,11,13,8,16,31,32,33,34,17,18,24,29,35,36,9,37,38,39,11,40,41,13,43,44,45,8,16,31,32,33,34,17,18,24,29,35,36,9,37,38,39,11,40,41,13,43,44,45,8,8,8,16,17,18,8,8,16,17,18,8,8,8,8,45,8,8,8,8,8,8,8,8,16,31,32,33,34,17,18,24,35,36,9,37,38,39,11,40,41,13,43,44,45,45,8,8,16,31,32,33,34,17,18,24,29,35,36,9,37,38,39,11,40,41,13,43,44,45,36,39,8,36,39,36,39,8,37,40,43,8,37,8,37,8,8,8,8,8,37,40,43,8,8,8,9,37,38,11,40,41,13,43,44,38,37,8,38,8,16,31,32,33,34,17,18,24,29,35,36,9,37,38,39,11,40,41,13,43,44,45,8,8,8,16,31,32,33,34,17,18,24,29,35,37,41,44,37,8,37,40,43,8,8,8,8,37,11,40,41,13,43,44,37,8,8,16,31,32,33,34,17,18,24,35,8,8,16,31,32,33,34,17,18,24,29,35,11,13,9,11,13,9,11,13,11,13,8,8,8,37,40,43,8,37,40,43,40,43,37,40,43,40,43,8,8,8,8,16,31,32,33,34,17,18,24,29,35,8,16,17,18,45,8,16,31,32,33,34,17,18,24,29,35,36,9,37,38,39,11,40,41,13,43,44,45,8,8,16,31,32,33,34,17,18,24,29,35,36,9,37,38,39,11,40,41,13,43,44,45,8,8,16,31,32,33,34,17,18,24,29,35,36,9,37,38,39,11,40,41,13,43,44,45,45,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,60,0,0,0,60,0,53,53,53,53,53,54,62,59,61,55,56,57,58,60,63,64,53,54,62,59,61,55,56,57,58,60,63,64,53,53,53,54,55,56,57,58,53,53,54,55,56,57,58,53,53,53,53,53,53,53,53,53,53,53,54,62,59,55,56,57,58,60,63,64,53,53,53,54,62,59,61,55,56,57,58,60,63,64,53,53,60,63,64,53,53,53,53,53,60,64,53,53,53,54,62,59,61,55,56,57,58,60,63,64,53,53,54,62,59,61,55,56,57,58,64,53,53,53,53,53,53,54,62,59,53,53,54,62,59,61,55,56,57,58,60,53,63,53,63,53,53,53,53,54,62,59,61,55,56,57,58,53,53,53,53,54,55,56,57,58,53,54,62,59,61,55,56,57,58,60,63,64,53,54,62,59,61,55,56,57,58,60,63,64,53,53,54,62,59,61,55,56,57,58,60,63,64,53,53,53,53,53,53,53,0,0,0,0,0,0,0,0,68,0,68,0,67,68,67,68,71,73,72,74,76,75,69,70,67,68,71,73,72,74,76,75,69,70,67,67,67,67,67,67,67,67,67,67,67,67,68,71,73,72,69,67,68,71,73,72,74,76,75,69,70,71,67,67,71,68,73,67,67,68,71,73,72,74,76,75,69,70,67,67,67,74,76,75,69,70,71,71,73,72,67,67,67,67,74,76,75,69,67,67,74,76,75,69,70,68,68,71,67,67,67,67,74,76,75,69,70,67,67,68,71,73,72,74,76,75,69,70,67,68,71,73,72,74,76,75,69,70,67,67,68,71,73,72,74,76,75,69,70,67,67],"f":[0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[[1,1],2],[[],2],[[],2],[[1,3],4],[[]],0,0,0,[[]],[[]],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[8,[7]]],7],[[[9,[7]],10],[[9,[7]]]],[[[11,[7]],10],[[11,[7]]]],[[[13,[12,7]],10],[[13,[12,7]]]],[[[9,[7]],10],[[9,[7]]]],[[[11,[7]],10],[[11,[7]]]],[[[13,[12,7]],10],[[13,[12,7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[7]]],14],[[[8,[7]]]],[[[8,[15,15,15,[0,[7,15]]]]],[[8,[15,15,15,[0,[7,15]]]]]],[16,16],[17,17],[18,18],[[[8,[15,15,15,[0,[7,15]]]],[8,[15,15,15,[0,[7,15]]]]]],[[]],[[]],[[]],[[]],[[[8,[[0,[19,20]],21,7]],[0,[20,[22,[[0,[19,20]]]],12]]],2],[[],[[8,[23,[0,[23,7]]]]]],[[[8,[7]]],[[24,[7]]]],[[[8,[[0,[19,20]],21,7]],[0,[19,20]]],[[11,[[0,[19,20]],21,7]]]],0,[[[8,[[0,[19,20]],21,7]],[0,[20,[22,[[0,[19,20]]]],12]]],[[13,[[0,[19,20]],[0,[20,[22,[[0,[19,20]]]],12]],21,7]]]],[[[8,[[0,[19,20]],25,21,7]],[8,[[0,[19,20]],25,21,7]]],2],[[],2],[[[8,[[0,[19,20,26]],26,21,7]],27]],[[[8,[[0,[19,20]],21,7]],27]],[[[8,[[0,[19,20,26]],26,21,7]],27]],[[[8,[7]],28],[[29,[28,7]]]],[[[8,[30,30,7]],3],4],[[[16,[30,30]],3],4],[[[31,[30,30]],3],4],[[[32,[30,30,7]],3],4],[[[33,[30,30,7]],3],4],[[[34,[30,7]],3],4],[[[17,[30]],3],4],[[[18,[30]],3],4],[[[24,[30,30,7]],3],4],[[[35,[30]],3],4],[[[36,[7]],3],4],[[[9,[30,30,7]],3],4],[[[37,[30,30,7]],3],4],[[[38,[7]],3],4],[[[39,[7]],3],4],[[[11,[30,30,7]],3],4],[[[40,[30,30,7]],3],4],[[[41,[30,7]],3],4],[[[13,[[42,[[0,[12,30]]]],[0,[12,30]],30,7]],3],4],[[[43,[[42,[[0,[12,30]]]],[0,[12,30]],30,7]],3],4],[[[44,[[42,[[0,[12,30]]]],[0,[12,30]],7]],3],4],[[[45,[30,30,7]],3],4],[[[45,[30,30,7]],3],4],[46,[[8,[[0,[19,20]],47,[0,[23,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[36,[7]],48,28],[[9,[7]]]],[[[39,[7]],48,28],49],[27,[[8,[[0,[19,20]],[0,[21,23]],[0,[23,7]]]]]],[[[36,[21,7]],[0,[20,22,12]]],[[9,[21,7]]]],[[[39,[21,7]],[0,[20,22,12]]],49],[[[36,[7]],48,[0,[22,12]]],[[9,[7]]]],[[[39,[7]],48,[0,[22,12]]],49],[[[8,[[0,[19,20]],21,7]],[0,[20,[22,[[0,[19,20]]]],12]]],49],[[[37,[7]]]],[[[40,[7]]]],[[[43,[12,7]]]],[[[8,[[0,[19,20]],21,7]],[0,[20,[22,[[0,[19,20]]]],12]]],49],[[[37,[7]]]],[[[8,[[0,[19,20]],21,7]],[0,[20,[22,[[0,[19,20]]]],12]]],49],[[[37,[7]]]],[[[8,[[0,[19,20]],21,7]],[46,[[0,[20,[22,[[0,[19,20]]]],12]]]]],[[49,[46]]]],[[[8,[[0,[19,20]],21,7]],[46,[[0,[20,[22,[[0,[19,20]]]],12]]]]],[[49,[46]]]],[[[8,[[0,[19,20]],21,7]],[46,[[0,[20,[22,[[0,[19,20]]]],12]]]]],[[49,[46]]]],[[[8,[[0,[19,20]],21,7]],[46,[[0,[20,[22,[[0,[19,20]]]],12]]]]],[[49,[46]]]],[[[8,[[0,[19,20]],21,7]],[0,[20,[22,[[0,[19,20]]]],12]]],49],[[[37,[7]]]],[[[40,[7]]]],[[[43,[12,7]]]],[[[8,[7]]]],[[[8,[[0,[19,20]],21,7]],[0,[20,[22,[[0,[19,20]]]],12]]]],[[[8,[[0,[19,20]],21,7]],[0,[19,20]]],49],[[[9,[20,21,7]],20],[[37,[20,21,7]]]],[[[37,[7]]]],[[[38,[20,21,7]],20]],[[[11,[20,21,7]]],[[40,[20,21,7]]]],[[[40,[7]]]],[[[41,[20,21,7]]]],[[[13,[[0,[20,[50,[12]]]],12,21,7]]],[[43,[[0,[20,[50,[12]]]],12,21,7]]]],[[[43,[12,7]]]],[[[44,[[0,[20,[50,[12]]]],12,21,7]]]],[[[38,[20,21,7]],48,20]],[[[37,[7]]]],[[[8,[[0,[19,20]],21,7]],[0,[19,20]]]],[[[38,[7]],48,51]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[7]]],[[32,[7]]]],[[[8,[7]]],31],[[[8,[7]]],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[37,[7]]]],[[[41,[7]]]],[[[44,[[50,[12]],12,7]]],[[50,[12]]]],[[[37,[7]]]],[[[8,[7]]],[[33,[7]]]],[[[37,[7]]]],[[[40,[7]]]],[[[43,[12,7]]]],[[[8,[7]]],[[34,[7]]]],[[[8,[7]]],2],[[[8,[7]]],16],[[[8,[7]]],31],[[[37,[7]]]],[[[11,[7]]]],[[[40,[7]]]],[[[41,[7]]]],[[[13,[[42,[12]],12,7]]],12],[[[43,[12,7]]]],[[[44,[[42,[12]],12,7]]],12],[[[37,[7]]]],[[[8,[7]]],17],[[[8,[7]]],14],[16,14],[31,14],[[[32,[7]]],14],[[[33,[7]]],14],[[[34,[7]]],14],[17,14],[18,14],[[[24,[7]]],14],[35,14],[[],[[8,[47]]]],[7,[[8,[47,7]]]],[16,49],[31,49],[[[32,[7]]],49],[[[33,[7]]],49],[[[34,[7]]],49],[17,49],[18,49],[[[24,[7]]],49],[[[29,[28,7]]],49],[35,49],[[[11,[20,23,21,7]]],23],[[[13,[[0,[20,[50,[12]]]],12,23,21,7]]],23],[[[9,[20,21,7]],20]],[[[11,[20,21,7]]]],[[[13,[[0,[20,[50,[12]]]],12,21,7]]]],[[[9,[20,21,7]],10]],[[[11,[20,21,7]],10]],[[[13,[[0,[20,[50,[12]]]],12,21,7]],10]],[[[11,[20,21,7]],10]],[[[13,[[0,[20,[42,[12]],[50,[12]]]],12,21,7]],10]],[[[8,[7]]],[[39,[7]]]],[[[8,[7]]],[[36,[7]]]],[[[8,[[0,[19,20]],21,7]],[0,[20,[22,[[0,[19,20]]]],12]]],49],[[[37,[7]]]],[[[40,[7]]]],[[[43,[12,7]]]],[[[8,[[0,[19,20]],21,7]],[0,[20,[22,[[0,[19,20]]]],12]]],49],[[[37,[7]]]],[[[40,[7]]]],[[[43,[12,7]]]],[[[40,[7]]]],[[[43,[[50,[12]],12,7]]]],[[[37,[7]],10],[[9,[7]]]],[[[40,[7]],10],[[11,[7]]]],[[[43,[12,7]],10],[[13,[12,7]]]],[[[40,[7]]]],[[[43,[[50,[12]],12,7]]],[[50,[12]]]],[[[8,[[0,[19,20]],21,7]],14]],[[[8,[7]],28]],[[[8,[[0,[19,20]],21,7]],14]],[[[8,[[0,[19,20]],21,7]]]],[16],[31],[[[32,[7]]]],[[[33,[7]]]],[[[34,[7]]]],[17],[18],[[[24,[7]]]],[[[29,[28,7]]]],[35],[[]],[[]],[[]],[[]],[[],52],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[8,[[0,[19,20]],21,7]],[0,[19,20]]],[[5,[[45,[[0,[19,20]],21,7]]]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[8,[[0,[19,20]],21,7]],14],[[5,[1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[[8,[7]]],18],[[[8,[7]]],35],[14,[[8,[47]]]],[14,8],[[14,7],[[8,[7]]]],[[14,7],[[8,[47,7]]]],[[],8],[7,[[8,[7]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[53,[7]]],7],[[[53,[[0,[19,20,15]],[0,[21,23]],7]],[53,[[0,[19,20,15]],[0,[21,23]],7]]],[[53,[[0,[19,20,15]],[0,[21,23]]]]]],[[[53,[[0,[19,20,15]],[0,[21,23]],7]],[53,[[0,[19,20,15]],[0,[21,23]],7]]],[[53,[[0,[19,20,15]],[0,[21,23]]]]]],[[[53,[[0,[19,20,15]],[0,[21,23]]]],[53,[[0,[19,20,15]],[0,[21,23]]]]],[[53,[[0,[19,20,15]],[0,[21,23]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[53,[7]]],14],[[[53,[7]]]],[[[53,[15,15,[0,[7,15]]]]],[[53,[15,15,[0,[7,15]]]]]],[54,54],[[[55,[7]]],[[55,[7]]]],[[[56,[7]]],[[56,[7]]]],[[[57,[7]]],[[57,[7]]]],[[[58,[7]]],[[58,[7]]]],[[[53,[15,15,[0,[7,15]]]],[53,[15,15,[0,[7,15]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[53,[[0,[19,20]],21,7]],[0,[20,[22,[[0,[19,20]]]],12]]],2],[[],[[53,[23,[0,[23,7]]]]]],[[[53,[[0,[19,20]],21,7]],[53,[[0,[19,20]],21,7]]],[[56,[[0,[19,20]],21,7]]]],[[[53,[7]]],[[59,[7]]]],[[[53,[[0,[19,20]],21,7]],[0,[19,20]]],[[60,[[0,[19,20]],21,7]]]],[[[53,[[0,[19,20]],21,7]],[53,[[0,[19,20]],21,7]]],2],[[],2],[[[53,[[0,[19,20,26]],21,7]],27]],[[[53,[[0,[19,20]],21,7]],27]],[[[53,[7]],28],[[61,[28,7]]]],[[[53,[30,7]],3],4],[[[54,[30]],3],4],[[[62,[30,7]],3],4],[[[59,[30,7]],3],4],[[[55,[[0,[30,19,20]],21,7]],3],4],[[[56,[[0,[30,19,20]],21,7]],3],4],[[[57,[[0,[30,19,20]],21,7]],3],4],[[[58,[[0,[30,19,20]],21,7]],3],4],[[[60,[30,7]],3],4],[[[63,[30,7]],3],4],[[[64,[30,7]],3],4],[[[46,[[0,[19,20]]]]],[[53,[[0,[19,20]],47,[0,[23,7]]]]]],[[]],[[[8,[7]]],[[53,[7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,[[53,[[0,[19,20]],[0,[21,23]],[0,[23,7]]]]]],[[[53,[[0,[19,20]],21,7]],[0,[20,[22,[[0,[19,20]]]],12]]],[[49,[[0,[19,20]]]]]],[[[60,[7]]]],[[[63,[7]]]],[[[64,[7]]]],[[[53,[[0,[19,20]],21,7]],[0,[19,20]]],[[0,[19,20]]]],[[[53,[[0,[19,20]],21,7]],[0,[20,[22,[[0,[19,20]]]],65,12]]],[[0,[19,20]]]],[[[53,[[0,[19,20]],21,7]],[0,[20,[22,[[0,[19,20]]]],12]],10],[[0,[19,20]]]],[[[53,[7]]]],[[[53,[[0,[19,20]],21,7]],[0,[19,20]]],2],[[[60,[20,21,7]]],[[63,[20,21,7]]]],[[[64,[20,21,7]]]],[[[53,[[0,[19,20]],21,7]],[0,[19,20]]],[[0,[19,20]]]],[[[53,[[0,[19,20]],21,7]],[53,[[0,[19,20]],21,7]]],[[55,[[0,[19,20]],21,7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[53,[7]]],54],[[[53,[7]]],[[62,[7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[64,[7]]]],[[[53,[[0,[19,20]],21,7]],[53,[[0,[19,20]],21,7]]],2],[[[53,[7]]],2],[[[53,[[0,[19,20]],21,7]],[53,[[0,[19,20]],21,7]]],2],[[[53,[[0,[19,20]],21,7]],[53,[[0,[19,20]],21,7]]],2],[[[53,[7]]],54],[[[53,[7]]],14],[54,14],[[[62,[7]]],14],[[[59,[7]]],14],[[],[[53,[47]]]],[7,[[53,[[0,[20,19]],47,7]]]],[54,49],[[[62,[7]]],49],[[[59,[7]]],49],[[[61,[28,7]]],49],[[[55,[[0,[19,20]],21,7]]],[[49,[[0,[19,20]]]]]],[[[56,[[0,[19,20]],21,7]]],[[49,[[0,[19,20]]]]]],[[[57,[[0,[19,20]],21,7]]],[[49,[[0,[19,20]]]]]],[[[58,[[0,[19,20]],21,7]]],[[49,[[0,[19,20]]]]]],[[[60,[20,21,7]]]],[[[53,[[0,[19,20]],21,7]],[0,[20,[22,[[0,[19,20]]]],12]]],2],[[[63,[7]]]],[[[53,[[0,[19,20]],21,7]],[0,[19,20]]],[[49,[[0,[19,20]]]]]],[[[63,[7]]]],[[[53,[[0,[19,20]],21,7]],14]],[[[53,[7]],28]],[[[53,[[0,[19,20]],21,7]],14]],[[[53,[[0,[19,20]],21,7]]]],[54],[[[62,[7]]]],[[[59,[7]]]],[[[61,[28,7]]]],[[[55,[[0,[19,20]],21,7]]]],[[[56,[[0,[19,20]],21,7]]]],[[[57,[[0,[19,20]],21,7]]]],[[[58,[[0,[19,20]],21,7]]]],[[[53,[[0,[19,20,15]],[0,[21,23]]]],[53,[[0,[19,20,15]],[0,[21,23]]]]],[[53,[[0,[19,20,15]],[0,[21,23]]]]]],[[[53,[[0,[19,20]],21,7]],[53,[[0,[19,20]],21,7]]],[[57,[[0,[19,20]],21,7]]]],[[[53,[[0,[19,20]],21,7]],[0,[20,[22,[[0,[19,20]]]],12]]],[[49,[[0,[19,20]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[53,[[0,[19,20]],21,7]],14],[[5,[1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[[53,[[0,[19,20]],21,7]],[53,[[0,[19,20]],21,7]]],[[58,[[0,[19,20]],21,7]]]],[14,[[53,[47]]]],[14,[[53,[66]]]],[[14,7],[[53,[7]]]],[[14,7],[[53,[[0,[20,19]],47,7]]]],[[],[[53,[66]]]],[7,[[53,[7]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[[67,[7]]],7],[[[68,[7]],10],[[68,[7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[67,[7]]],14],[[[67,[7]]]],[[[67,[15,[0,[7,15]]]]],[[67,[15,[0,[7,15]]]]]],[[]],[[],[[67,[[0,[7,23]]]]]],[[[67,[7]]],[[69,[7]]]],[[[67,[7]],48,28,51],[[68,[7]]]],[[[67,[7]],28],[[70,[28,7]]]],[[[67,[7]],48,28],49],[[[67,[7]],48,28],[[5,[[71,[7]],[72,[7]]]]]],[[[67,[7]],48,28],49],[[[67,[30,7]],3],4],[[[68,[30,7]],3],4],[[[71,[30,7]],3],4],[[[73,[30,7]],3],4],[[[72,[30,7]],3],4],[[[69,[30,7]],3],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[71,[7]]]],[[[67,[7]],[46,[48]],28],[[49,[46]]]],[[[67,[7]],[46,[48]],28],[[49,[46]]]],[[[71,[7]]]],[[[68,[7]]],[[71,[7]]]],[[[73,[7]]],[[71,[7]]]],[[[67,[7]],48,51],[[71,[7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[67,[7]]],74],[[[67,[7]]],[[75,[7]]]],[[[67,[7]]],76],[[]],[[]],[[]],[[]],[[]],[[[71,[7]]]],[[[71,[7]]],[[67,[7]]]],[[[73,[7]]],[[67,[7]]]],[[[72,[7]]],[[67,[7]]]],[[[67,[7]]],2],[[[67,[7]]],74],[[[67,[7]]],76],[[[67,[7]]],14],[74,14],[76,14],[[[75,[7]]],14],[[[69,[7]]],14],[[],[[67,[66]]]],[7,[[67,[7]]]],[74,49],[76,49],[[[75,[7]]],49],[[[69,[7]]],49],[[[70,[28,7]]],49],[[[68,[7]]],[[71,[7]]]],[[[68,[7]],10],[[71,[7]]]],[[[71,[7]]]],[[[67,[7]],14,51]],[[[67,[7]],28]],[[[67,[7]],14,51]],[[[67,[7]],51]],[74],[76],[[[75,[7]]]],[[[69,[7]]]],[[[70,[28,7]]]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[67,[7]],14,51],[[5,[1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[14,[[67,[66]]]],[[14,7],[[67,[7]]]]],"c":[],"p":[[4,"TryReserveError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[8,"Allocator"],[3,"HashMap"],[4,"RawEntryMut"],[8,"FnOnce"],[4,"Entry"],[8,"Sized"],[4,"EntryRef"],[15,"usize"],[8,"Clone"],[3,"Iter"],[3,"Keys"],[3,"Values"],[8,"Eq"],[8,"Hash"],[8,"BuildHasher"],[8,"Equivalent"],[8,"Default"],[3,"Drain"],[8,"PartialEq"],[8,"Copy"],[8,"IntoIterator"],[8,"FnMut"],[3,"ExtractIf"],[8,"Debug"],[3,"IterMut"],[3,"IntoIter"],[3,"IntoKeys"],[3,"IntoValues"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[8,"Borrow"],[3,"OccupiedEntryRef"],[3,"VacantEntryRef"],[3,"OccupiedError"],[15,"array"],[6,"DefaultHashBuilder"],[15,"u64"],[4,"Option"],[8,"From"],[8,"Fn"],[3,"String"],[3,"HashSet"],[3,"Iter"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"Drain"],[4,"Entry"],[3,"ExtractIf"],[3,"IntoIter"],[3,"OccupiedEntry"],[3,"VacantEntry"],[8,"ToOwned"],[3,"Global"],[3,"HashTable"],[4,"Entry"],[3,"Drain"],[3,"ExtractIf"],[3,"OccupiedEntry"],[3,"AbsentEntry"],[3,"VacantEntry"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[13,"AllocError"]]},\
"itoa":{"doc":"github crates-io docs-rs","t":"DILLLLLLLLLLL","n":["Buffer","Integer","borrow","borrow_mut","clone","default","format","from","into","new","try_from","try_into","type_id"],"q":[[0,"itoa"]],"d":["A correctly sized stack allocation for the formatted …","An integer that can be written into an <code>itoa::Buffer</code>.","","","","","Print an integer into this buffer and return a reference …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This is a cheap operation; you don’t need to worry about …","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,[[]],[[]],[1,1],[[],1],[[1,2],3],[[]],[[]],[[],1],[[],4],[[],4],[[],5]],"c":[],"p":[[3,"Buffer"],[8,"Integer"],[15,"str"],[4,"Result"],[3,"TypeId"]]},\
"libc":{"doc":"libc - Raw FFI bindings to platforms’ system libraries","t":"","n":["ABDAY_1","ABDAY_2","ABDAY_3","ABDAY_4","ABDAY_5","ABDAY_6","ABDAY_7","ABMON_1","ABMON_10","ABMON_11","ABMON_12","ABMON_2","ABMON_3","ABMON_4","ABMON_5","ABMON_6","ABMON_7","ABMON_8","ABMON_9","ABS_CNT","ABS_MAX","ACCOUNTING","ADDR_COMPAT_LAYOUT","ADDR_LIMIT_32BIT","ADDR_LIMIT_3GB","ADDR_NO_RANDOMIZE","ADFS_SUPER_MAGIC","ADJ_ESTERROR","ADJ_FREQUENCY","ADJ_MAXERROR","ADJ_MICRO","ADJ_NANO","ADJ_OFFSET","ADJ_OFFSET_SINGLESHOT","ADJ_OFFSET_SS_READ","ADJ_SETOFFSET","ADJ_STATUS","ADJ_TAI","ADJ_TICK","ADJ_TIMECONST","AFFS_SUPER_MAGIC","AFS_SUPER_MAGIC","AF_ALG","AF_APPLETALK","AF_ASH","AF_ATMPVC","AF_ATMSVC","AF_AX25","AF_BLUETOOTH","AF_BRIDGE","AF_CAIF","AF_CAN","AF_DECnet","AF_ECONET","AF_IB","AF_IEEE802154","AF_INET","AF_INET6","AF_IPX","AF_IRDA","AF_ISDN","AF_IUCV","AF_KEY","AF_LLC","AF_LOCAL","AF_MPLS","AF_NETBEUI","AF_NETLINK","AF_NETROM","AF_NFC","AF_PACKET","AF_PHONET","AF_PPPOX","AF_RDS","AF_ROSE","AF_ROUTE","AF_RXRPC","AF_SECURITY","AF_SNA","AF_TIPC","AF_UNIX","AF_UNSPEC","AF_VSOCK","AF_WANPIPE","AF_X25","AF_XDP","AIO_ALLDONE","AIO_CANCELED","AIO_NOTCANCELED","AI_ADDRCONFIG","AI_ALL","AI_CANONNAME","AI_NUMERICHOST","AI_NUMERICSERV","AI_PASSIVE","AI_V4MAPPED","ALG_OP_DECRYPT","ALG_OP_ENCRYPT","ALG_SET_AEAD_ASSOCLEN","ALG_SET_AEAD_AUTHSIZE","ALG_SET_DRBG_ENTROPY","ALG_SET_IV","ALG_SET_KEY","ALG_SET_KEY_BY_KEY_SERIAL","ALG_SET_OP","ALT_DIGITS","AM_STR","ARPD_FLUSH","ARPD_LOOKUP","ARPD_UPDATE","ARPHRD_ADAPT","ARPHRD_APPLETLK","ARPHRD_ARCNET","ARPHRD_ASH","ARPHRD_ATM","ARPHRD_AX25","ARPHRD_BIF","ARPHRD_CAN","ARPHRD_CHAOS","ARPHRD_CISCO","ARPHRD_CSLIP","ARPHRD_CSLIP6","ARPHRD_DDCMP","ARPHRD_DLCI","ARPHRD_ECONET","ARPHRD_EETHER","ARPHRD_ETHER","ARPHRD_EUI64","ARPHRD_FCAL","ARPHRD_FCFABRIC","ARPHRD_FCPL","ARPHRD_FCPP","ARPHRD_FDDI","ARPHRD_FRAD","ARPHRD_HDLC","ARPHRD_HIPPI","ARPHRD_HWX25","ARPHRD_IEEE1394","ARPHRD_IEEE802","ARPHRD_IEEE80211","ARPHRD_IEEE80211_PRISM","ARPHRD_IEEE80211_RADIOTAP","ARPHRD_IEEE802154","ARPHRD_IEEE802_TR","ARPHRD_INFINIBAND","ARPHRD_IPDDP","ARPHRD_IPGRE","ARPHRD_IRDA","ARPHRD_LAPB","ARPHRD_LOCALTLK","ARPHRD_LOOPBACK","ARPHRD_METRICOM","ARPHRD_NETROM","ARPHRD_NONE","ARPHRD_PIMREG","ARPHRD_PPP","ARPHRD_PRONET","ARPHRD_RAWHDLC","ARPHRD_ROSE","ARPHRD_RSRVD","ARPHRD_SIT","ARPHRD_SKIP","ARPHRD_SLIP","ARPHRD_SLIP6","ARPHRD_TUNNEL","ARPHRD_TUNNEL6","ARPHRD_VOID","ARPHRD_X25","ARPOP_InREPLY","ARPOP_InREQUEST","ARPOP_NAK","ARPOP_REPLY","ARPOP_REQUEST","ARPOP_RREPLY","ARPOP_RREQUEST","ATF_COM","ATF_DONTPUB","ATF_MAGIC","ATF_NETMASK","ATF_PERM","ATF_PUBL","ATF_USETRAILERS","AT_BASE","AT_BASE_PLATFORM","AT_CLKTCK","AT_EACCESS","AT_EGID","AT_EMPTY_PATH","AT_ENTRY","AT_EUID","AT_EXECFD","AT_EXECFN","AT_FDCWD","AT_FLAGS","AT_GID","AT_HWCAP","AT_HWCAP2","AT_IGNORE","AT_NOTELF","AT_NO_AUTOMOUNT","AT_NULL","AT_PAGESZ","AT_PHDR","AT_PHENT","AT_PHNUM","AT_PLATFORM","AT_RANDOM","AT_RECURSIVE","AT_REMOVEDIR","AT_SECURE","AT_STATX_DONT_SYNC","AT_STATX_FORCE_SYNC","AT_STATX_SYNC_AS_STAT","AT_STATX_SYNC_TYPE","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","AT_SYSINFO_EHDR","AT_UID","AUTOFS_SUPER_MAGIC","B0","B1000000","B110","B115200","B1152000","B1200","B134","B150","B1500000","B1800","B19200","B200","B2000000","B230400","B2400","B2500000","B300","B3000000","B3500000","B38400","B4000000","B460800","B4800","B50","B500000","B57600","B576000","B600","B75","B921600","B9600","BINDERFS_SUPER_MAGIC","BLKIOMIN","BLKIOOPT","BLKPBSZGET","BLKSSZGET","BOOT_TIME","BOTHER","BPF_ABS","BPF_ADD","BPF_ALU","BPF_AND","BPF_B","BPF_DIV","BPF_FS_MAGIC","BPF_H","BPF_IMM","BPF_IND","BPF_JA","BPF_JEQ","BPF_JGE","BPF_JGT","BPF_JMP","BPF_JSET","BPF_JUMP","BPF_K","BPF_LD","BPF_LDX","BPF_LEN","BPF_LL_OFF","BPF_LSH","BPF_MAXINSNS","BPF_MEM","BPF_MEMWORDS","BPF_MISC","BPF_MISCOP","BPF_MOD","BPF_MSH","BPF_MUL","BPF_NEG","BPF_NET_OFF","BPF_OR","BPF_RET","BPF_RSH","BPF_RVAL","BPF_ST","BPF_STMT","BPF_STX","BPF_SUB","BPF_W","BPF_X","BPF_XOR","BRKINT","BS0","BS1","BSDLY","BTRFS_SUPER_MAGIC","BUFSIZ","BUS_ADRALN","BUS_ADRERR","BUS_MCEERR_AO","BUS_MCEERR_AR","BUS_OBJERR","CANFD_BRS","CANFD_ESI","CANFD_MAX_DLC","CANFD_MAX_DLEN","CANFD_MTU","CANXL_HDR_SIZE","CANXL_MAX_DLC","CANXL_MAX_DLC_MASK","CANXL_MAX_DLEN","CANXL_MAX_MTU","CANXL_MIN_DLC","CANXL_MIN_DLEN","CANXL_MIN_MTU","CANXL_MTU","CANXL_PRIO_BITS","CANXL_PRIO_MASK","CANXL_SEC","CANXL_XLF","CAN_BCM","CAN_EFF_FLAG","CAN_EFF_ID_BITS","CAN_EFF_MASK","CAN_ERR_FLAG","CAN_ERR_MASK","CAN_INV_FILTER","CAN_ISOTP","CAN_J1939","CAN_MAX_DLC","CAN_MAX_DLEN","CAN_MCNET","CAN_MTU","CAN_NPROTO","CAN_RAW","CAN_RAW_ERR_FILTER","CAN_RAW_FD_FRAMES","CAN_RAW_FILTER","CAN_RAW_FILTER_MAX","CAN_RAW_JOIN_FILTERS","CAN_RAW_LOOPBACK","CAN_RAW_RECV_OWN_MSGS","CAN_RAW_XL_FRAMES","CAN_RTR_FLAG","CAN_SFF_ID_BITS","CAN_SFF_MASK","CAN_TP16","CAN_TP20","CBAUD","CBAUDEX","CGROUP2_SUPER_MAGIC","CGROUP_SUPER_MAGIC","CIBAUD","CLD_CONTINUED","CLD_DUMPED","CLD_EXITED","CLD_KILLED","CLD_STOPPED","CLD_TRAPPED","CLOCAL","CLOCK_BOOTTIME","CLOCK_BOOTTIME_ALARM","CLOCK_MONOTONIC","CLOCK_MONOTONIC_COARSE","CLOCK_MONOTONIC_RAW","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_REALTIME_ALARM","CLOCK_REALTIME_COARSE","CLOCK_TAI","CLOCK_THREAD_CPUTIME_ID","CLONE_CHILD_CLEARTID","CLONE_CHILD_SETTID","CLONE_CLEAR_SIGHAND","CLONE_DETACHED","CLONE_FILES","CLONE_FS","CLONE_INTO_CGROUP","CLONE_IO","CLONE_NEWCGROUP","CLONE_NEWIPC","CLONE_NEWNET","CLONE_NEWNS","CLONE_NEWPID","CLONE_NEWTIME","CLONE_NEWUSER","CLONE_NEWUTS","CLONE_PARENT","CLONE_PARENT_SETTID","CLONE_PIDFD","CLONE_PTRACE","CLONE_SETTLS","CLONE_SIGHAND","CLONE_SYSVSEM","CLONE_THREAD","CLONE_UNTRACED","CLONE_VFORK","CLONE_VM","CLOSE_RANGE_CLOEXEC","CLOSE_RANGE_UNSHARE","CMSG_DATA","CMSG_FIRSTHDR","CMSG_LEN","CMSG_NXTHDR","CMSG_SPACE","CMSPAR","CODA_SUPER_MAGIC","CODESET","CPU_ALLOC_SIZE","CPU_CLR","CPU_COUNT","CPU_COUNT_S","CPU_EQUAL","CPU_ISSET","CPU_SET","CPU_SETSIZE","CPU_ZERO","CR0","CR1","CR2","CR3","CRAMFS_MAGIC","CRDLY","CREAD","CRNCYSTR","CRTSCTS","CS","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","CTRL_ATTR_FAMILY_ID","CTRL_ATTR_FAMILY_NAME","CTRL_ATTR_HDRSIZE","CTRL_ATTR_MAXATTR","CTRL_ATTR_MCAST_GROUPS","CTRL_ATTR_MCAST_GRP_ID","CTRL_ATTR_MCAST_GRP_NAME","CTRL_ATTR_MCAST_GRP_UNSPEC","CTRL_ATTR_OPS","CTRL_ATTR_OP_FLAGS","CTRL_ATTR_OP_ID","CTRL_ATTR_OP_UNSPEC","CTRL_ATTR_UNSPEC","CTRL_ATTR_VERSION","CTRL_CMD_DELFAMILY","CTRL_CMD_DELMCAST_GRP","CTRL_CMD_DELOPS","CTRL_CMD_GETFAMILY","CTRL_CMD_GETMCAST_GRP","CTRL_CMD_GETOPS","CTRL_CMD_NEWFAMILY","CTRL_CMD_NEWMCAST_GRP","CTRL_CMD_NEWOPS","CTRL_CMD_UNSPEC","DAY_1","DAY_2","DAY_3","DAY_4","DAY_5","DAY_6","DAY_7","DCCP_SERVICE_LIST_MAX_LEN","DCCP_SOCKOPT_AVAILABLE_CCIDS","DCCP_SOCKOPT_CCID","DCCP_SOCKOPT_CCID_RX_INFO","DCCP_SOCKOPT_CCID_TX_INFO","DCCP_SOCKOPT_CHANGE_L","DCCP_SOCKOPT_CHANGE_R","DCCP_SOCKOPT_GET_CUR_MPS","DCCP_SOCKOPT_PACKET_SIZE","DCCP_SOCKOPT_QPOLICY_ID","DCCP_SOCKOPT_QPOLICY_TXQLEN","DCCP_SOCKOPT_RECV_CSCOV","DCCP_SOCKOPT_RX_CCID","DCCP_SOCKOPT_SEND_CSCOV","DCCP_SOCKOPT_SERVER_TIMEWAIT","DCCP_SOCKOPT_SERVICE","DCCP_SOCKOPT_TX_CCID","DEAD_PROCESS","DEBUGFS_MAGIC","DEVPTS_SUPER_MAGIC","DIR","DS","DT_BLK","DT_CHR","DT_DIR","DT_FIFO","DT_LNK","DT_REG","DT_SOCK","DT_UNKNOWN","D_FMT","D_T_FMT","Dl_info","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EADV","EAFNOSUPPORT","EAGAIN","EAI_AGAIN","EAI_BADFLAGS","EAI_FAIL","EAI_FAMILY","EAI_MEMORY","EAI_NODATA","EAI_NONAME","EAI_OVERFLOW","EAI_SERVICE","EAI_SOCKTYPE","EAI_SYSTEM","EALREADY","EBADE","EBADF","EBADFD","EBADMSG","EBADR","EBADRQC","EBADSLT","EBFONT","EBUSY","ECANCELED","ECHILD","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","ECHRNG","ECOMM","ECONNABORTED","ECONNREFUSED","ECONNRESET","ECRYPTFS_SUPER_MAGIC","EDEADLK","EDEADLOCK","EDESTADDRREQ","EDOM","EDOTDOT","EDQUOT","EEXIST","EFAULT","EFBIG","EFD_CLOEXEC","EFD_NONBLOCK","EFD_SEMAPHORE","EFLAGS","EFS_SUPER_MAGIC","EHOSTDOWN","EHOSTUNREACH","EHWPOISON","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","EISNAM","EI_ABIVERSION","EI_CLASS","EI_DATA","EI_MAG0","EI_MAG1","EI_MAG2","EI_MAG3","EI_NIDENT","EI_OSABI","EI_PAD","EI_VERSION","EKEYEXPIRED","EKEYREJECTED","EKEYREVOKED","EL2HLT","EL2NSYNC","EL3HLT","EL3RST","ELFCLASS32","ELFCLASS64","ELFCLASSNONE","ELFCLASSNUM","ELFDATA2LSB","ELFDATA2MSB","ELFDATANONE","ELFDATANUM","ELFMAG0","ELFMAG1","ELFMAG2","ELFMAG3","ELFOSABI_AIX","ELFOSABI_ARM","ELFOSABI_ARM_AEABI","ELFOSABI_FREEBSD","ELFOSABI_GNU","ELFOSABI_HPUX","ELFOSABI_IRIX","ELFOSABI_LINUX","ELFOSABI_MODESTO","ELFOSABI_NETBSD","ELFOSABI_NONE","ELFOSABI_OPENBSD","ELFOSABI_SOLARIS","ELFOSABI_STANDALONE","ELFOSABI_SYSV","ELFOSABI_TRU64","ELIBACC","ELIBBAD","ELIBEXEC","ELIBMAX","ELIBSCN","ELNRNG","ELOOP","EMEDIUMTYPE","EMFILE","EMLINK","EMPTY","EMSGSIZE","EMULTIHOP","EM_386","EM_68HC05","EM_68HC08","EM_68HC11","EM_68HC12","EM_68HC16","EM_68K","EM_860","EM_88K","EM_960","EM_AARCH64","EM_ALPHA","EM_ARC","EM_ARC_A5","EM_ARM","EM_AVR","EM_COLDFIRE","EM_CRIS","EM_D10V","EM_D30V","EM_FAKE_ALPHA","EM_FIREPATH","EM_FR20","EM_FR30","EM_FX66","EM_H8S","EM_H8_300","EM_H8_300H","EM_H8_500","EM_HUANY","EM_IA_64","EM_JAVELIN","EM_M32","EM_M32R","EM_ME16","EM_MIPS","EM_MIPS_RS3_LE","EM_MIPS_X","EM_MMA","EM_MMIX","EM_MN10200","EM_MN10300","EM_NCPU","EM_NDR1","EM_NONE","EM_OPENRISC","EM_PARISC","EM_PCP","EM_PDSP","EM_PJ","EM_PPC","EM_PPC64","EM_PRISM","EM_RCE","EM_RH32","EM_S370","EM_S390","EM_SH","EM_SPARC","EM_SPARC32PLUS","EM_SPARCV9","EM_ST100","EM_ST19","EM_ST7","EM_ST9PLUS","EM_STARCORE","EM_SVX","EM_TILEGX","EM_TILEPRO","EM_TINYJ","EM_TRICORE","EM_V800","EM_V850","EM_VAX","EM_VPP500","EM_X86_64","EM_XTENSA","EM_ZSP","ENAMETOOLONG","ENAVAIL","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOANO","ENOATTR","ENOBUFS","ENOCSI","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOKEY","ENOLCK","ENOLINK","ENOMEDIUM","ENOMEM","ENOMSG","ENONET","ENOPKG","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTNAM","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENOTUNIQ","ENXIO","EOF","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPOLLERR","EPOLLET","EPOLLEXCLUSIVE","EPOLLHUP","EPOLLIN","EPOLLMSG","EPOLLONESHOT","EPOLLOUT","EPOLLPRI","EPOLLRDBAND","EPOLLRDHUP","EPOLLRDNORM","EPOLLWAKEUP","EPOLLWRBAND","EPOLLWRNORM","EPOLL_CLOEXEC","EPOLL_CTL_ADD","EPOLL_CTL_DEL","EPOLL_CTL_MOD","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","ERA","ERANGE","ERA_D_FMT","ERA_D_T_FMT","ERA_T_FMT","EREMCHG","EREMOTE","EREMOTEIO","ERESTART","ERFKILL","EROFS","ES","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESRMNT","ESTALE","ESTRPIPE","ETH_ALEN","ETH_DATA_LEN","ETH_FCS_LEN","ETH_FRAME_LEN","ETH_HLEN","ETH_P_1588","ETH_P_8021AD","ETH_P_8021AH","ETH_P_8021Q","ETH_P_80221","ETH_P_802_2","ETH_P_802_3","ETH_P_802_3_MIN","ETH_P_802_EX1","ETH_P_AARP","ETH_P_AF_IUCV","ETH_P_ALL","ETH_P_AOE","ETH_P_ARCNET","ETH_P_ARP","ETH_P_ATALK","ETH_P_ATMFATE","ETH_P_ATMMPOA","ETH_P_AX25","ETH_P_BATMAN","ETH_P_BPQ","ETH_P_CAIF","ETH_P_CANFD","ETH_P_CONTROL","ETH_P_CUST","ETH_P_DDCMP","ETH_P_DEC","ETH_P_DIAG","ETH_P_DNA_DL","ETH_P_DNA_RC","ETH_P_DNA_RT","ETH_P_DSA","ETH_P_ECONET","ETH_P_EDSA","ETH_P_FCOE","ETH_P_FIP","ETH_P_HDLC","ETH_P_IEEE802154","ETH_P_IEEEPUP","ETH_P_IEEEPUPAT","ETH_P_IP","ETH_P_IPV6","ETH_P_IPX","ETH_P_IRDA","ETH_P_LAT","ETH_P_LINK_CTL","ETH_P_LOCALTALK","ETH_P_LOOP","ETH_P_LOOPBACK","ETH_P_MACSEC","ETH_P_MOBITEX","ETH_P_MPLS_MC","ETH_P_MPLS_UC","ETH_P_MVRP","ETH_P_PAE","ETH_P_PAUSE","ETH_P_PHONET","ETH_P_PPPTALK","ETH_P_PPP_DISC","ETH_P_PPP_MP","ETH_P_PPP_SES","ETH_P_PRP","ETH_P_PUP","ETH_P_PUPAT","ETH_P_QINQ1","ETH_P_QINQ2","ETH_P_QINQ3","ETH_P_RARP","ETH_P_SCA","ETH_P_SLOW","ETH_P_SNAP","ETH_P_TDLS","ETH_P_TEB","ETH_P_TIPC","ETH_P_TRAILER","ETH_P_TR_802_2","ETH_P_WAN_PPP","ETH_P_WCCP","ETH_P_X25","ETH_ZLEN","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","ET_CORE","ET_DYN","ET_EXEC","ET_HIOS","ET_HIPROC","ET_LOOS","ET_LOPROC","ET_NONE","ET_NUM","ET_REL","EUCLEAN","EUNATCH","EUSERS","EV_CNT","EV_CURRENT","EV_MAX","EV_NONE","EV_NUM","EWOULDBLOCK","EXDEV","EXFULL","EXIT_FAILURE","EXIT_SUCCESS","EXT2_SUPER_MAGIC","EXT3_SUPER_MAGIC","EXT4_SUPER_MAGIC","EXTA","EXTB","EXTPROC","Elf32_Addr","Elf32_Chdr","Elf32_Ehdr","Elf32_Half","Elf32_Off","Elf32_Phdr","Elf32_Section","Elf32_Shdr","Elf32_Sym","Elf32_Word","Elf64_Addr","Elf64_Chdr","Elf64_Ehdr","Elf64_Half","Elf64_Off","Elf64_Phdr","Elf64_Section","Elf64_Shdr","Elf64_Sxword","Elf64_Sym","Elf64_Word","Elf64_Xword","F2FS_SUPER_MAGIC","FALLOC_FL_COLLAPSE_RANGE","FALLOC_FL_INSERT_RANGE","FALLOC_FL_KEEP_SIZE","FALLOC_FL_PUNCH_HOLE","FALLOC_FL_UNSHARE_RANGE","FALLOC_FL_ZERO_RANGE","FANOTIFY_METADATA_VERSION","FAN_ACCESS","FAN_ACCESS_PERM","FAN_ALLOW","FAN_ATTRIB","FAN_AUDIT","FAN_CLASS_CONTENT","FAN_CLASS_NOTIF","FAN_CLASS_PRE_CONTENT","FAN_CLOEXEC","FAN_CLOSE","FAN_CLOSE_NOWRITE","FAN_CLOSE_WRITE","FAN_CREATE","FAN_DELETE","FAN_DELETE_SELF","FAN_DENY","FAN_ENABLE_AUDIT","FAN_EPIDFD","FAN_EVENT_INFO_TYPE_DFID","FAN_EVENT_INFO_TYPE_DFID_NAME","FAN_EVENT_INFO_TYPE_ERROR","FAN_EVENT_INFO_TYPE_FID","FAN_EVENT_INFO_TYPE_NEW_DFID_NAME","FAN_EVENT_INFO_TYPE_OLD_DFID_NAME","FAN_EVENT_INFO_TYPE_PIDFD","FAN_EVENT_ON_CHILD","FAN_FS_ERROR","FAN_INFO","FAN_MARK_ADD","FAN_MARK_DONT_FOLLOW","FAN_MARK_EVICTABLE","FAN_MARK_FILESYSTEM","FAN_MARK_FLUSH","FAN_MARK_IGNORE","FAN_MARK_IGNORED_MASK","FAN_MARK_IGNORED_SURV_MODIFY","FAN_MARK_IGNORE_SURV","FAN_MARK_INODE","FAN_MARK_MOUNT","FAN_MARK_ONLYDIR","FAN_MARK_REMOVE","FAN_MODIFY","FAN_MOVE","FAN_MOVED_FROM","FAN_MOVED_TO","FAN_MOVE_SELF","FAN_NOFD","FAN_NONBLOCK","FAN_NOPIDFD","FAN_ONDIR","FAN_OPEN","FAN_OPEN_EXEC","FAN_OPEN_EXEC_PERM","FAN_OPEN_PERM","FAN_Q_OVERFLOW","FAN_RENAME","FAN_REPORT_DFID_NAME","FAN_REPORT_DFID_NAME_TARGET","FAN_REPORT_DIR_FID","FAN_REPORT_FID","FAN_REPORT_NAME","FAN_REPORT_PIDFD","FAN_REPORT_TARGET_FID","FAN_REPORT_TID","FAN_RESPONSE_INFO_AUDIT_RULE","FAN_RESPONSE_INFO_NONE","FAN_UNLIMITED_MARKS","FAN_UNLIMITED_QUEUE","FDPIC_FUNCPTRS","FD_CLOEXEC","FD_CLR","FD_ISSET","FD_SET","FD_SETSIZE","FD_ZERO","FF0","FF1","FFDLY","FF_CNT","FF_MAX","FICLONE","FICLONERANGE","FILE","FILENAME_MAX","FIOASYNC","FIOCLEX","FIONBIO","FIONCLEX","FIONREAD","FIOQSIZE","FLUSHO","FOPEN_MAX","FS","FS_BASE","FUSE_SUPER_MAGIC","FUTEXFS_SUPER_MAGIC","FUTEX_BITSET_MATCH_ANY","FUTEX_CLOCK_REALTIME","FUTEX_CMD_MASK","FUTEX_CMP_REQUEUE","FUTEX_CMP_REQUEUE_PI","FUTEX_FD","FUTEX_LOCK_PI","FUTEX_LOCK_PI2","FUTEX_OP","FUTEX_OP_ADD","FUTEX_OP_ANDN","FUTEX_OP_CMP_EQ","FUTEX_OP_CMP_GE","FUTEX_OP_CMP_GT","FUTEX_OP_CMP_LE","FUTEX_OP_CMP_LT","FUTEX_OP_CMP_NE","FUTEX_OP_OPARG_SHIFT","FUTEX_OP_OR","FUTEX_OP_SET","FUTEX_OP_XOR","FUTEX_PRIVATE_FLAG","FUTEX_REQUEUE","FUTEX_TRYLOCK_PI","FUTEX_UNLOCK_PI","FUTEX_WAIT","FUTEX_WAIT_BITSET","FUTEX_WAIT_REQUEUE_PI","FUTEX_WAKE","FUTEX_WAKE_BITSET","FUTEX_WAKE_OP","F_ADD_SEALS","F_CANCELLK","F_DUPFD","F_DUPFD_CLOEXEC","F_GETFD","F_GETFL","F_GETLEASE","F_GETLK","F_GETOWN","F_GETPIPE_SZ","F_GET_SEALS","F_LOCK","F_NOTIFY","F_OFD_GETLK","F_OFD_SETLK","F_OFD_SETLKW","F_OK","F_RDLCK","F_SEAL_FUTURE_WRITE","F_SEAL_GROW","F_SEAL_SEAL","F_SEAL_SHRINK","F_SEAL_WRITE","F_SETFD","F_SETFL","F_SETLEASE","F_SETLK","F_SETLKW","F_SETOWN","F_SETPIPE_SZ","F_TEST","F_TLOCK","F_ULOCK","F_UNLCK","F_WRLCK","GENL_ADMIN_PERM","GENL_CMD_CAP_DO","GENL_CMD_CAP_DUMP","GENL_CMD_CAP_HASPOL","GENL_ID_CTRL","GENL_ID_PMCRAID","GENL_ID_VFS_DQUOT","GENL_MAX_ID","GENL_MIN_ID","GENL_NAMSIZ","GENL_UNS_ADMIN_PERM","GLOB_ABORTED","GLOB_ALTDIRFUNC","GLOB_APPEND","GLOB_BRACE","GLOB_DOOFFS","GLOB_ERR","GLOB_MARK","GLOB_NOCHECK","GLOB_NOESCAPE","GLOB_NOMAGIC","GLOB_NOMATCH","GLOB_NOSORT","GLOB_NOSPACE","GLOB_ONLYDIR","GLOB_PERIOD","GLOB_TILDE","GLOB_TILDE_CHECK","GRND_INSECURE","GRND_NONBLOCK","GRND_RANDOM","GRPQUOTA","GS","GS_BASE","HOSTFS_SUPER_MAGIC","HPFS_SUPER_MAGIC","HUGETLBFS_MAGIC","HUGETLB_FLAG_ENCODE_16GB","HUGETLB_FLAG_ENCODE_16MB","HUGETLB_FLAG_ENCODE_1GB","HUGETLB_FLAG_ENCODE_1MB","HUGETLB_FLAG_ENCODE_256MB","HUGETLB_FLAG_ENCODE_2GB","HUGETLB_FLAG_ENCODE_2MB","HUGETLB_FLAG_ENCODE_32MB","HUGETLB_FLAG_ENCODE_512KB","HUGETLB_FLAG_ENCODE_512MB","HUGETLB_FLAG_ENCODE_64KB","HUGETLB_FLAG_ENCODE_8MB","HUGETLB_FLAG_ENCODE_MASK","HUGETLB_FLAG_ENCODE_SHIFT","HUPCL","HWTSTAMP_FILTER_ALL","HWTSTAMP_FILTER_NONE","HWTSTAMP_FILTER_NTP_ALL","HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ","HWTSTAMP_FILTER_PTP_V1_L4_EVENT","HWTSTAMP_FILTER_PTP_V1_L4_SYNC","HWTSTAMP_FILTER_PTP_V2_DELAY_REQ","HWTSTAMP_FILTER_PTP_V2_EVENT","HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ","HWTSTAMP_FILTER_PTP_V2_L2_EVENT","HWTSTAMP_FILTER_PTP_V2_L2_SYNC","HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ","HWTSTAMP_FILTER_PTP_V2_L4_EVENT","HWTSTAMP_FILTER_PTP_V2_L4_SYNC","HWTSTAMP_FILTER_PTP_V2_SYNC","HWTSTAMP_FILTER_SOME","HWTSTAMP_TX_OFF","HWTSTAMP_TX_ON","HWTSTAMP_TX_ONESTEP_P2P","HWTSTAMP_TX_ONESTEP_SYNC","IBSHIFT","ICANON","ICRNL","IEXTEN","IFA_ADDRESS","IFA_ANYCAST","IFA_BROADCAST","IFA_CACHEINFO","IFA_FLAGS","IFA_F_DADFAILED","IFA_F_DEPRECATED","IFA_F_HOMEADDRESS","IFA_F_MANAGETEMPADDR","IFA_F_MCAUTOJOIN","IFA_F_NODAD","IFA_F_NOPREFIXROUTE","IFA_F_OPTIMISTIC","IFA_F_PERMANENT","IFA_F_SECONDARY","IFA_F_STABLE_PRIVACY","IFA_F_TEMPORARY","IFA_F_TENTATIVE","IFA_LABEL","IFA_LOCAL","IFA_MULTICAST","IFA_UNSPEC","IFF_ALLMULTI","IFF_ATTACH_QUEUE","IFF_AUTOMEDIA","IFF_BROADCAST","IFF_DEBUG","IFF_DETACH_QUEUE","IFF_DORMANT","IFF_DYNAMIC","IFF_ECHO","IFF_LOOPBACK","IFF_LOWER_UP","IFF_MASTER","IFF_MULTICAST","IFF_MULTI_QUEUE","IFF_NAPI","IFF_NAPI_FRAGS","IFF_NOARP","IFF_NOFILTER","IFF_NOTRAILERS","IFF_NO_PI","IFF_ONE_QUEUE","IFF_PERSIST","IFF_POINTOPOINT","IFF_PORTSEL","IFF_PROMISC","IFF_RUNNING","IFF_SLAVE","IFF_TAP","IFF_TUN","IFF_TUN_EXCL","IFF_UP","IFF_VNET_HDR","IFLA_ADDRESS","IFLA_AF_SPEC","IFLA_ALLMULTI","IFLA_ALT_IFNAME","IFLA_BROADCAST","IFLA_CARRIER","IFLA_CARRIER_CHANGES","IFLA_CARRIER_DOWN_COUNT","IFLA_CARRIER_UP_COUNT","IFLA_COST","IFLA_EVENT","IFLA_EXT_MASK","IFLA_GROUP","IFLA_GRO_MAX_SIZE","IFLA_GSO_MAX_SEGS","IFLA_GSO_MAX_SIZE","IFLA_IFALIAS","IFLA_IFNAME","IFLA_IF_NETNSID","IFLA_INFO_DATA","IFLA_INFO_KIND","IFLA_INFO_SLAVE_DATA","IFLA_INFO_SLAVE_KIND","IFLA_INFO_UNSPEC","IFLA_INFO_XSTATS","IFLA_LINK","IFLA_LINKINFO","IFLA_LINKMODE","IFLA_LINK_NETNSID","IFLA_MAP","IFLA_MASTER","IFLA_MAX_MTU","IFLA_MIN_MTU","IFLA_MTU","IFLA_NET_NS_FD","IFLA_NET_NS_PID","IFLA_NEW_IFINDEX","IFLA_NEW_NETNSID","IFLA_NUM_RX_QUEUES","IFLA_NUM_TX_QUEUES","IFLA_NUM_VF","IFLA_OPERSTATE","IFLA_PAD","IFLA_PARENT_DEV_BUS_NAME","IFLA_PARENT_DEV_NAME","IFLA_PERM_ADDRESS","IFLA_PHYS_PORT_ID","IFLA_PHYS_PORT_NAME","IFLA_PHYS_SWITCH_ID","IFLA_PORT_SELF","IFLA_PRIORITY","IFLA_PROMISCUITY","IFLA_PROP_LIST","IFLA_PROTINFO","IFLA_PROTO_DOWN","IFLA_PROTO_DOWN_REASON","IFLA_QDISC","IFLA_STATS","IFLA_STATS64","IFLA_TARGET_NETNSID","IFLA_TSO_MAX_SEGS","IFLA_TSO_MAX_SIZE","IFLA_TXQLEN","IFLA_UNSPEC","IFLA_VFINFO_LIST","IFLA_VF_PORTS","IFLA_WEIGHT","IFLA_WIRELESS","IFLA_XDP","IFNAMSIZ","IF_LINK_MODE_DEFAULT","IF_LINK_MODE_DORMANT","IF_LINK_MODE_TESTING","IF_NAMESIZE","IF_OPER_DORMANT","IF_OPER_DOWN","IF_OPER_LOWERLAYERDOWN","IF_OPER_NOTPRESENT","IF_OPER_TESTING","IF_OPER_UNKNOWN","IF_OPER_UP","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INADDR_ANY","INADDR_BROADCAST","INADDR_LOOPBACK","INADDR_NONE","INIT_PROCESS","INLCR","INPCK","INPUT_PROP_CNT","INPUT_PROP_MAX","INT_MAX","INT_MIN","IN_ACCESS","IN_ALL_EVENTS","IN_ATTRIB","IN_CLOEXEC","IN_CLOSE","IN_CLOSE_NOWRITE","IN_CLOSE_WRITE","IN_CREATE","IN_DELETE","IN_DELETE_SELF","IN_DONT_FOLLOW","IN_EXCL_UNLINK","IN_IGNORED","IN_ISDIR","IN_MASK_ADD","IN_MASK_CREATE","IN_MODIFY","IN_MOVE","IN_MOVED_FROM","IN_MOVED_TO","IN_MOVE_SELF","IN_NONBLOCK","IN_ONESHOT","IN_ONLYDIR","IN_OPEN","IN_Q_OVERFLOW","IN_UNMOUNT","IP6T_SO_ORIGINAL_DST","IPC_CREAT","IPC_EXCL","IPC_INFO","IPC_NOWAIT","IPC_PRIVATE","IPC_RMID","IPC_SET","IPC_STAT","IPDEFTTL","IPOPT_CLASS","IPOPT_CLASS_MASK","IPOPT_CONTROL","IPOPT_COPIED","IPOPT_COPY","IPOPT_END","IPOPT_EOL","IPOPT_LSRR","IPOPT_MEASUREMENT","IPOPT_MINOFF","IPOPT_NOOP","IPOPT_NOP","IPOPT_NUMBER","IPOPT_NUMBER_MASK","IPOPT_OFFSET","IPOPT_OLEN","IPOPT_OPTVAL","IPOPT_RA","IPOPT_RESERVED1","IPOPT_RESERVED2","IPOPT_RR","IPOPT_SEC","IPOPT_SID","IPOPT_SSRR","IPOPT_TIMESTAMP","IPOPT_TS","IPOPT_TS_PRESPEC","IPOPT_TS_TSANDADDR","IPOPT_TS_TSONLY","IPPROTO_AH","IPPROTO_BEETPH","IPPROTO_COMP","IPPROTO_DCCP","IPPROTO_DSTOPTS","IPPROTO_EGP","IPPROTO_ENCAP","IPPROTO_ESP","IPPROTO_ETHERNET","IPPROTO_FRAGMENT","IPPROTO_GRE","IPPROTO_HOPOPTS","IPPROTO_ICMP","IPPROTO_ICMPV6","IPPROTO_IDP","IPPROTO_IGMP","IPPROTO_IP","IPPROTO_IPIP","IPPROTO_IPV6","IPPROTO_MAX","IPPROTO_MH","IPPROTO_MPLS","IPPROTO_MPTCP","IPPROTO_MTP","IPPROTO_NONE","IPPROTO_PIM","IPPROTO_PUP","IPPROTO_RAW","IPPROTO_ROUTING","IPPROTO_RSVP","IPPROTO_SCTP","IPPROTO_TCP","IPPROTO_TP","IPPROTO_UDP","IPPROTO_UDPLITE","IPTOS_ECN","IPTOS_ECN_CE","IPTOS_ECN_ECT0","IPTOS_ECN_ECT1","IPTOS_ECN_MASK","IPTOS_ECN_NOT_ECT","IPTOS_LOWDELAY","IPTOS_MINCOST","IPTOS_PREC","IPTOS_PREC_CRITIC_ECP","IPTOS_PREC_FLASH","IPTOS_PREC_FLASHOVERRIDE","IPTOS_PREC_IMMEDIATE","IPTOS_PREC_INTERNETCONTROL","IPTOS_PREC_MASK","IPTOS_PREC_NETCONTROL","IPTOS_PREC_PRIORITY","IPTOS_PREC_ROUTINE","IPTOS_RELIABILITY","IPTOS_THROUGHPUT","IPTOS_TOS","IPTOS_TOS_MASK","IPV6_2292DSTOPTS","IPV6_2292HOPLIMIT","IPV6_2292HOPOPTS","IPV6_2292PKTINFO","IPV6_2292PKTOPTIONS","IPV6_2292RTHDR","IPV6_ADDRFORM","IPV6_ADDR_PREFERENCES","IPV6_ADD_MEMBERSHIP","IPV6_AUTHHDR","IPV6_AUTOFLOWLABEL","IPV6_CHECKSUM","IPV6_DONTFRAG","IPV6_DROP_MEMBERSHIP","IPV6_DSTOPTS","IPV6_FLOWINFO","IPV6_FLOWINFO_FLOWLABEL","IPV6_FLOWINFO_PRIORITY","IPV6_FLOWINFO_SEND","IPV6_FLOWLABEL_MGR","IPV6_FREEBIND","IPV6_HDRINCL","IPV6_HOPLIMIT","IPV6_HOPOPTS","IPV6_IPSEC_POLICY","IPV6_JOIN_ANYCAST","IPV6_LEAVE_ANYCAST","IPV6_MINHOPCOUNT","IPV6_MTU","IPV6_MTU_DISCOVER","IPV6_MULTICAST_ALL","IPV6_MULTICAST_HOPS","IPV6_MULTICAST_IF","IPV6_MULTICAST_LOOP","IPV6_NEXTHOP","IPV6_ORIGDSTADDR","IPV6_PATHMTU","IPV6_PKTINFO","IPV6_PMTUDISC_DO","IPV6_PMTUDISC_DONT","IPV6_PMTUDISC_INTERFACE","IPV6_PMTUDISC_OMIT","IPV6_PMTUDISC_PROBE","IPV6_PMTUDISC_WANT","IPV6_PREFER_SRC_CGA","IPV6_PREFER_SRC_COA","IPV6_PREFER_SRC_HOME","IPV6_PREFER_SRC_NONCGA","IPV6_PREFER_SRC_PUBLIC","IPV6_PREFER_SRC_PUBTMP_DEFAULT","IPV6_PREFER_SRC_TMP","IPV6_RECVDSTOPTS","IPV6_RECVERR","IPV6_RECVFRAGSIZE","IPV6_RECVHOPLIMIT","IPV6_RECVHOPOPTS","IPV6_RECVORIGDSTADDR","IPV6_RECVPATHMTU","IPV6_RECVPKTINFO","IPV6_RECVRTHDR","IPV6_RECVTCLASS","IPV6_ROUTER_ALERT","IPV6_ROUTER_ALERT_ISOLATE","IPV6_RTHDR","IPV6_RTHDRDSTOPTS","IPV6_RTHDR_LOOSE","IPV6_RTHDR_STRICT","IPV6_TCLASS","IPV6_TRANSPARENT","IPV6_UNICAST_HOPS","IPV6_UNICAST_IF","IPV6_V6ONLY","IPV6_XFRM_POLICY","IPVERSION","IP_ADD_MEMBERSHIP","IP_ADD_SOURCE_MEMBERSHIP","IP_BIND_ADDRESS_NO_PORT","IP_BLOCK_SOURCE","IP_CHECKSUM","IP_DEFAULT_MULTICAST_LOOP","IP_DEFAULT_MULTICAST_TTL","IP_DROP_MEMBERSHIP","IP_DROP_SOURCE_MEMBERSHIP","IP_FREEBIND","IP_HDRINCL","IP_IPSEC_POLICY","IP_MINTTL","IP_MSFILTER","IP_MTU","IP_MTU_DISCOVER","IP_MULTICAST_ALL","IP_MULTICAST_IF","IP_MULTICAST_LOOP","IP_MULTICAST_TTL","IP_NODEFRAG","IP_OPTIONS","IP_ORIGDSTADDR","IP_PASSSEC","IP_PKTINFO","IP_PKTOPTIONS","IP_PMTUDISC_DO","IP_PMTUDISC_DONT","IP_PMTUDISC_INTERFACE","IP_PMTUDISC_OMIT","IP_PMTUDISC_PROBE","IP_PMTUDISC_WANT","IP_RECVERR","IP_RECVFRAGSIZE","IP_RECVOPTS","IP_RECVORIGDSTADDR","IP_RECVTOS","IP_RECVTTL","IP_RETOPTS","IP_ROUTER_ALERT","IP_TOS","IP_TRANSPARENT","IP_TTL","IP_UNBLOCK_SOURCE","IP_UNICAST_IF","IP_XFRM_POLICY","ISIG","ISOFS_SUPER_MAGIC","ISTRIP","ITIMER_PROF","ITIMER_REAL","ITIMER_VIRTUAL","IUTF8","IXANY","IXOFF","IXON","J1939_EE_INFO_NONE","J1939_EE_INFO_RX_ABORT","J1939_EE_INFO_RX_DPO","J1939_EE_INFO_RX_RTS","J1939_EE_INFO_TX_ABORT","J1939_FILTER_MAX","J1939_IDLE_ADDR","J1939_MAX_UNICAST_ADDR","J1939_NLA_BYTES_ACKED","J1939_NLA_DEST_ADDR","J1939_NLA_DEST_NAME","J1939_NLA_PAD","J1939_NLA_PGN","J1939_NLA_SRC_ADDR","J1939_NLA_SRC_NAME","J1939_NLA_TOTAL_SIZE","J1939_NO_ADDR","J1939_NO_NAME","J1939_NO_PGN","J1939_PGN_ADDRESS_CLAIMED","J1939_PGN_ADDRESS_COMMANDED","J1939_PGN_MAX","J1939_PGN_PDU1_MAX","J1939_PGN_REQUEST","JFFS2_SUPER_MAGIC","KERNEL_VERSION","KEXEC_ARCH_MASK","KEXEC_FILE_NO_INITRAMFS","KEXEC_FILE_ON_CRASH","KEXEC_FILE_UNLOAD","KEXEC_ON_CRASH","KEXEC_PRESERVE_CONTEXT","KEYCTL_ASSUME_AUTHORITY","KEYCTL_CAPABILITIES","KEYCTL_CAPS0_BIG_KEY","KEYCTL_CAPS0_CAPABILITIES","KEYCTL_CAPS0_DIFFIE_HELLMAN","KEYCTL_CAPS0_INVALIDATE","KEYCTL_CAPS0_MOVE","KEYCTL_CAPS0_PERSISTENT_KEYRINGS","KEYCTL_CAPS0_PUBLIC_KEY","KEYCTL_CAPS0_RESTRICT_KEYRING","KEYCTL_CAPS1_NS_KEYRING_NAME","KEYCTL_CAPS1_NS_KEY_TAG","KEYCTL_CHOWN","KEYCTL_CLEAR","KEYCTL_DESCRIBE","KEYCTL_DH_COMPUTE","KEYCTL_GET_KEYRING_ID","KEYCTL_GET_PERSISTENT","KEYCTL_GET_SECURITY","KEYCTL_INSTANTIATE","KEYCTL_INSTANTIATE_IOV","KEYCTL_INVALIDATE","KEYCTL_JOIN_SESSION_KEYRING","KEYCTL_LINK","KEYCTL_MOVE","KEYCTL_NEGATE","KEYCTL_PKEY_DECRYPT","KEYCTL_PKEY_ENCRYPT","KEYCTL_PKEY_QUERY","KEYCTL_PKEY_SIGN","KEYCTL_PKEY_VERIFY","KEYCTL_READ","KEYCTL_REJECT","KEYCTL_RESTRICT_KEYRING","KEYCTL_REVOKE","KEYCTL_SEARCH","KEYCTL_SESSION_TO_PARENT","KEYCTL_SETPERM","KEYCTL_SET_REQKEY_KEYRING","KEYCTL_SET_TIMEOUT","KEYCTL_SUPPORTS_DECRYPT","KEYCTL_SUPPORTS_ENCRYPT","KEYCTL_SUPPORTS_SIGN","KEYCTL_SUPPORTS_VERIFY","KEYCTL_UNLINK","KEYCTL_UPDATE","KEY_CNT","KEY_MAX","KEY_REQKEY_DEFL_DEFAULT","KEY_REQKEY_DEFL_GROUP_KEYRING","KEY_REQKEY_DEFL_NO_CHANGE","KEY_REQKEY_DEFL_PROCESS_KEYRING","KEY_REQKEY_DEFL_REQUESTOR_KEYRING","KEY_REQKEY_DEFL_SESSION_KEYRING","KEY_REQKEY_DEFL_THREAD_KEYRING","KEY_REQKEY_DEFL_USER_KEYRING","KEY_REQKEY_DEFL_USER_SESSION_KEYRING","KEY_SPEC_GROUP_KEYRING","KEY_SPEC_PROCESS_KEYRING","KEY_SPEC_REQKEY_AUTH_KEY","KEY_SPEC_REQUESTOR_KEYRING","KEY_SPEC_SESSION_KEYRING","KEY_SPEC_THREAD_KEYRING","KEY_SPEC_USER_KEYRING","KEY_SPEC_USER_SESSION_KEYRING","LC_ADDRESS","LC_ADDRESS_MASK","LC_ALL","LC_ALL_MASK","LC_COLLATE","LC_COLLATE_MASK","LC_CTYPE","LC_CTYPE_MASK","LC_IDENTIFICATION","LC_IDENTIFICATION_MASK","LC_MEASUREMENT","LC_MEASUREMENT_MASK","LC_MESSAGES","LC_MESSAGES_MASK","LC_MONETARY","LC_MONETARY_MASK","LC_NAME","LC_NAME_MASK","LC_NUMERIC","LC_NUMERIC_MASK","LC_PAPER","LC_PAPER_MASK","LC_TELEPHONE","LC_TELEPHONE_MASK","LC_TIME","LC_TIME_MASK","LED_CNT","LED_MAX","LINUX_REBOOT_CMD_CAD_OFF","LINUX_REBOOT_CMD_CAD_ON","LINUX_REBOOT_CMD_HALT","LINUX_REBOOT_CMD_KEXEC","LINUX_REBOOT_CMD_POWER_OFF","LINUX_REBOOT_CMD_RESTART","LINUX_REBOOT_CMD_RESTART2","LINUX_REBOOT_CMD_SW_SUSPEND","LINUX_REBOOT_MAGIC1","LINUX_REBOOT_MAGIC2","LINUX_REBOOT_MAGIC2A","LINUX_REBOOT_MAGIC2B","LINUX_REBOOT_MAGIC2C","LIO_NOP","LIO_NOWAIT","LIO_READ","LIO_WAIT","LIO_WRITE","LM_ID_BASE","LM_ID_NEWLM","LOCK_EX","LOCK_NB","LOCK_SH","LOCK_UN","LOGIN_PROCESS","LOG_ALERT","LOG_AUTH","LOG_AUTHPRIV","LOG_CONS","LOG_CRIT","LOG_CRON","LOG_DAEMON","LOG_DEBUG","LOG_EMERG","LOG_ERR","LOG_FACMASK","LOG_FTP","LOG_INFO","LOG_KERN","LOG_LOCAL0","LOG_LOCAL1","LOG_LOCAL2","LOG_LOCAL3","LOG_LOCAL4","LOG_LOCAL5","LOG_LOCAL6","LOG_LOCAL7","LOG_LPR","LOG_MAIL","LOG_NDELAY","LOG_NEWS","LOG_NFACILITIES","LOG_NOTICE","LOG_NOWAIT","LOG_ODELAY","LOG_PERROR","LOG_PID","LOG_PRIMASK","LOG_SYSLOG","LOG_USER","LOG_UUCP","LOG_WARNING","L_tmpnam","Lmid_t","MADV_COLD","MADV_COLLAPSE","MADV_DODUMP","MADV_DOFORK","MADV_DONTDUMP","MADV_DONTFORK","MADV_DONTNEED","MADV_DONTNEED_LOCKED","MADV_FREE","MADV_HUGEPAGE","MADV_HWPOISON","MADV_KEEPONFORK","MADV_MERGEABLE","MADV_NOHUGEPAGE","MADV_NORMAL","MADV_PAGEOUT","MADV_POPULATE_READ","MADV_POPULATE_WRITE","MADV_RANDOM","MADV_REMOVE","MADV_SEQUENTIAL","MADV_SOFT_OFFLINE","MADV_UNMERGEABLE","MADV_WILLNEED","MADV_WIPEONFORK","MAP_32BIT","MAP_ANON","MAP_ANONYMOUS","MAP_DENYWRITE","MAP_EXECUTABLE","MAP_FAILED","MAP_FILE","MAP_FIXED","MAP_FIXED_NOREPLACE","MAP_GROWSDOWN","MAP_HUGETLB","MAP_HUGE_16GB","MAP_HUGE_16MB","MAP_HUGE_1GB","MAP_HUGE_1MB","MAP_HUGE_256MB","MAP_HUGE_2GB","MAP_HUGE_2MB","MAP_HUGE_32MB","MAP_HUGE_512KB","MAP_HUGE_512MB","MAP_HUGE_64KB","MAP_HUGE_8MB","MAP_HUGE_MASK","MAP_HUGE_SHIFT","MAP_LOCKED","MAP_NONBLOCK","MAP_NORESERVE","MAP_POPULATE","MAP_PRIVATE","MAP_SHARED","MAP_SHARED_VALIDATE","MAP_STACK","MAP_SYNC","MAP_TYPE","MAXTC","MAXTTL","MAX_ADDR_LEN","MAX_IPOPTLEN","MAX_LINKS","MCAST_BLOCK_SOURCE","MCAST_EXCLUDE","MCAST_INCLUDE","MCAST_JOIN_GROUP","MCAST_JOIN_SOURCE_GROUP","MCAST_LEAVE_GROUP","MCAST_LEAVE_SOURCE_GROUP","MCAST_MSFILTER","MCAST_UNBLOCK_SOURCE","MCL_CURRENT","MCL_FUTURE","MCL_ONFAULT","MEMBARRIER_CMD_GLOBAL","MEMBARRIER_CMD_GLOBAL_EXPEDITED","MEMBARRIER_CMD_PRIVATE_EXPEDITED","MEMBARRIER_CMD_PRIVATE_EXPEDITED_RSEQ","MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE","MEMBARRIER_CMD_QUERY","MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_RSEQ","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE","MFD_ALLOW_SEALING","MFD_CLOEXEC","MFD_HUGETLB","MFD_HUGE_16GB","MFD_HUGE_16MB","MFD_HUGE_1GB","MFD_HUGE_1MB","MFD_HUGE_256MB","MFD_HUGE_2GB","MFD_HUGE_2MB","MFD_HUGE_32MB","MFD_HUGE_512KB","MFD_HUGE_512MB","MFD_HUGE_64KB","MFD_HUGE_8MB","MFD_HUGE_MASK","MFD_HUGE_SHIFT","MINIX2_SUPER_MAGIC","MINIX2_SUPER_MAGIC2","MINIX3_SUPER_MAGIC","MINIX_SUPER_MAGIC","MINIX_SUPER_MAGIC2","MINSIGSTKSZ","MLOCK_ONFAULT","MMAP_PAGE_ZERO","MNT_DETACH","MNT_EXPIRE","MNT_FORCE","MODULE_INIT_IGNORE_MODVERSIONS","MODULE_INIT_IGNORE_VERMAGIC","MOD_CLKA","MOD_CLKB","MOD_ESTERROR","MOD_FREQUENCY","MOD_MAXERROR","MOD_MICRO","MOD_NANO","MOD_OFFSET","MOD_STATUS","MOD_TAI","MOD_TIMECONST","MON_1","MON_10","MON_11","MON_12","MON_2","MON_3","MON_4","MON_5","MON_6","MON_7","MON_8","MON_9","MOVE_MOUNT_BENEATH","MOVE_MOUNT_F_AUTOMOUNTS","MOVE_MOUNT_F_EMPTY_PATH","MOVE_MOUNT_F_SYMLINKS","MOVE_MOUNT_SET_GROUP","MOVE_MOUNT_T_AUTOMOUNTS","MOVE_MOUNT_T_EMPTY_PATH","MOVE_MOUNT_T_SYMLINKS","MPOL_BIND","MPOL_DEFAULT","MPOL_F_NUMA_BALANCING","MPOL_F_RELATIVE_NODES","MPOL_F_STATIC_NODES","MPOL_INTERLEAVE","MPOL_LOCAL","MPOL_PREFERRED","MREMAP_DONTUNMAP","MREMAP_FIXED","MREMAP_MAYMOVE","MSC_CNT","MSC_MAX","MSDOS_SUPER_MAGIC","MSG_CMSG_CLOEXEC","MSG_CONFIRM","MSG_COPY","MSG_CTRUNC","MSG_DONTROUTE","MSG_DONTWAIT","MSG_EOR","MSG_ERRQUEUE","MSG_EXCEPT","MSG_FASTOPEN","MSG_FIN","MSG_INFO","MSG_MORE","MSG_NOERROR","MSG_NOSIGNAL","MSG_NOTIFICATION","MSG_OOB","MSG_PEEK","MSG_RST","MSG_STAT","MSG_SYN","MSG_TRUNC","MSG_TRYHARD","MSG_WAITALL","MSG_WAITFORONE","MSG_ZEROCOPY","MS_ACTIVE","MS_ASYNC","MS_BIND","MS_DIRSYNC","MS_INVALIDATE","MS_I_VERSION","MS_KERNMOUNT","MS_LAZYTIME","MS_MANDLOCK","MS_MGC_MSK","MS_MGC_VAL","MS_MOVE","MS_NOATIME","MS_NODEV","MS_NODIRATIME","MS_NOEXEC","MS_NOSUID","MS_NOUSER","MS_POSIXACL","MS_PRIVATE","MS_RDONLY","MS_REC","MS_RELATIME","MS_REMOUNT","MS_RMT_MASK","MS_SHARED","MS_SILENT","MS_SLAVE","MS_STRICTATIME","MS_SYNC","MS_SYNCHRONOUS","MS_UNBINDABLE","M_ARENA_MAX","M_ARENA_TEST","M_CHECK_ACTION","M_GRAIN","M_KEEP","M_MMAP_MAX","M_MMAP_THRESHOLD","M_MXFAST","M_NLBLKS","M_PERTURB","M_TOP_PAD","M_TRIM_THRESHOLD","NCCS","NCP_SUPER_MAGIC","NDA_CACHEINFO","NDA_DST","NDA_IFINDEX","NDA_LINK_NETNSID","NDA_LLADDR","NDA_MASTER","NDA_PORT","NDA_PROBES","NDA_SRC_VNI","NDA_UNSPEC","NDA_VLAN","NDA_VNI","NETLINK_ADD_MEMBERSHIP","NETLINK_AUDIT","NETLINK_BROADCAST_ERROR","NETLINK_CAP_ACK","NETLINK_CONNECTOR","NETLINK_CRYPTO","NETLINK_DNRTMSG","NETLINK_DROP_MEMBERSHIP","NETLINK_ECRYPTFS","NETLINK_EXT_ACK","NETLINK_FIB_LOOKUP","NETLINK_FIREWALL","NETLINK_GENERIC","NETLINK_GET_STRICT_CHK","NETLINK_INET_DIAG","NETLINK_IP6_FW","NETLINK_ISCSI","NETLINK_KOBJECT_UEVENT","NETLINK_LISTEN_ALL_NSID","NETLINK_LIST_MEMBERSHIPS","NETLINK_NETFILTER","NETLINK_NFLOG","NETLINK_NO_ENOBUFS","NETLINK_PKTINFO","NETLINK_RDMA","NETLINK_ROUTE","NETLINK_RX_RING","NETLINK_SCSITRANSPORT","NETLINK_SELINUX","NETLINK_SOCK_DIAG","NETLINK_TX_RING","NETLINK_UNUSED","NETLINK_USERSOCK","NETLINK_XFRM","NEW_TIME","NFNETLINK_V0","NFNLGRP_ACCT_QUOTA","NFNLGRP_CONNTRACK_DESTROY","NFNLGRP_CONNTRACK_EXP_DESTROY","NFNLGRP_CONNTRACK_EXP_NEW","NFNLGRP_CONNTRACK_EXP_UPDATE","NFNLGRP_CONNTRACK_NEW","NFNLGRP_CONNTRACK_UPDATE","NFNLGRP_NFTABLES","NFNLGRP_NFTRACE","NFNLGRP_NONE","NFNL_BATCH_GENID","NFNL_BATCH_UNSPEC","NFNL_MSG_BATCH_BEGIN","NFNL_MSG_BATCH_END","NFNL_SUBSYS_ACCT","NFNL_SUBSYS_COUNT","NFNL_SUBSYS_CTHELPER","NFNL_SUBSYS_CTNETLINK","NFNL_SUBSYS_CTNETLINK_EXP","NFNL_SUBSYS_CTNETLINK_TIMEOUT","NFNL_SUBSYS_HOOK","NFNL_SUBSYS_IPSET","NFNL_SUBSYS_NFTABLES","NFNL_SUBSYS_NFT_COMPAT","NFNL_SUBSYS_NONE","NFNL_SUBSYS_OSF","NFNL_SUBSYS_QUEUE","NFNL_SUBSYS_ULOG","NFPROTO_ARP","NFPROTO_BRIDGE","NFPROTO_DECNET","NFPROTO_INET","NFPROTO_IPV4","NFPROTO_IPV6","NFPROTO_NETDEV","NFPROTO_NUMPROTO","NFPROTO_UNSPEC","NFQA_CAP_LEN","NFQA_CFG_CMD","NFQA_CFG_FLAGS","NFQA_CFG_F_CONNTRACK","NFQA_CFG_F_FAIL_OPEN","NFQA_CFG_F_GSO","NFQA_CFG_F_MAX","NFQA_CFG_F_SECCTX","NFQA_CFG_F_UID_GID","NFQA_CFG_MASK","NFQA_CFG_PARAMS","NFQA_CFG_QUEUE_MAXLEN","NFQA_CFG_UNSPEC","NFQA_CT","NFQA_CT_INFO","NFQA_EXP","NFQA_GID","NFQA_HWADDR","NFQA_IFINDEX_INDEV","NFQA_IFINDEX_OUTDEV","NFQA_IFINDEX_PHYSINDEV","NFQA_IFINDEX_PHYSOUTDEV","NFQA_L2HDR","NFQA_MARK","NFQA_PACKET_HDR","NFQA_PAYLOAD","NFQA_PRIORITY","NFQA_SECCTX","NFQA_SKB_CSUMNOTREADY","NFQA_SKB_CSUM_NOTVERIFIED","NFQA_SKB_GSO","NFQA_SKB_INFO","NFQA_TIMESTAMP","NFQA_UID","NFQA_UNSPEC","NFQA_VERDICT_HDR","NFQA_VLAN","NFQA_VLAN_PROTO","NFQA_VLAN_TCI","NFQA_VLAN_UNSPEC","NFQNL_CFG_CMD_BIND","NFQNL_CFG_CMD_NONE","NFQNL_CFG_CMD_PF_BIND","NFQNL_CFG_CMD_PF_UNBIND","NFQNL_CFG_CMD_UNBIND","NFQNL_COPY_META","NFQNL_COPY_NONE","NFQNL_COPY_PACKET","NFQNL_MSG_CONFIG","NFQNL_MSG_PACKET","NFQNL_MSG_VERDICT","NFQNL_MSG_VERDICT_BATCH","NFS_SUPER_MAGIC","NFT_BREAK","NFT_BYTEORDER_HTON","NFT_BYTEORDER_NTOH","NFT_CHAIN_MAXNAMELEN","NFT_CMP_EQ","NFT_CMP_GT","NFT_CMP_GTE","NFT_CMP_LT","NFT_CMP_LTE","NFT_CMP_NEQ","NFT_CONTINUE","NFT_CT_BYTES","NFT_CT_DIRECTION","NFT_CT_DST","NFT_CT_EXPIRATION","NFT_CT_HELPER","NFT_CT_L3PROTOCOL","NFT_CT_LABELS","NFT_CT_MARK","NFT_CT_PKTS","NFT_CT_PROTOCOL","NFT_CT_PROTO_DST","NFT_CT_PROTO_SRC","NFT_CT_SECMARK","NFT_CT_SRC","NFT_CT_STATE","NFT_CT_STATUS","NFT_DATA_RESERVED_MASK","NFT_DATA_VALUE","NFT_DATA_VALUE_MAXLEN","NFT_DATA_VERDICT","NFT_DYNSET_F_INV","NFT_DYNSET_OP_ADD","NFT_DYNSET_OP_UPDATE","NFT_GOTO","NFT_JUMP","NFT_LIMIT_F_INV","NFT_LIMIT_PKTS","NFT_LIMIT_PKT_BYTES","NFT_LOOKUP_F_INV","NFT_META_BRI_IIFNAME","NFT_META_BRI_OIFNAME","NFT_META_CGROUP","NFT_META_CPU","NFT_META_IIF","NFT_META_IIFGROUP","NFT_META_IIFNAME","NFT_META_IIFTYPE","NFT_META_L4PROTO","NFT_META_LEN","NFT_META_MARK","NFT_META_NFPROTO","NFT_META_NFTRACE","NFT_META_OIF","NFT_META_OIFGROUP","NFT_META_OIFNAME","NFT_META_OIFTYPE","NFT_META_PKTTYPE","NFT_META_PRANDOM","NFT_META_PRIORITY","NFT_META_PROTOCOL","NFT_META_RTCLASSID","NFT_META_SECMARK","NFT_META_SKGID","NFT_META_SKUID","NFT_MSG_DELCHAIN","NFT_MSG_DELOBJ","NFT_MSG_DELRULE","NFT_MSG_DELSET","NFT_MSG_DELSETELEM","NFT_MSG_DELTABLE","NFT_MSG_GETCHAIN","NFT_MSG_GETGEN","NFT_MSG_GETOBJ","NFT_MSG_GETOBJ_RESET","NFT_MSG_GETRULE","NFT_MSG_GETSET","NFT_MSG_GETSETELEM","NFT_MSG_GETTABLE","NFT_MSG_MAX","NFT_MSG_NEWCHAIN","NFT_MSG_NEWGEN","NFT_MSG_NEWOBJ","NFT_MSG_NEWRULE","NFT_MSG_NEWSET","NFT_MSG_NEWSETELEM","NFT_MSG_NEWTABLE","NFT_MSG_TRACE","NFT_NAT_DNAT","NFT_NAT_SNAT","NFT_NG_INCREMENTAL","NFT_NG_RANDOM","NFT_OBJ_MAXNAMELEN","NFT_PAYLOAD_CSUM_INET","NFT_PAYLOAD_CSUM_NONE","NFT_PAYLOAD_LL_HEADER","NFT_PAYLOAD_NETWORK_HEADER","NFT_PAYLOAD_TRANSPORT_HEADER","NFT_QUEUE_FLAG_BYPASS","NFT_QUEUE_FLAG_CPU_FANOUT","NFT_QUEUE_FLAG_MASK","NFT_QUOTA_F_INV","NFT_RANGE_EQ","NFT_RANGE_NEQ","NFT_REG32_00","NFT_REG32_01","NFT_REG32_02","NFT_REG32_03","NFT_REG32_04","NFT_REG32_05","NFT_REG32_06","NFT_REG32_07","NFT_REG32_08","NFT_REG32_09","NFT_REG32_10","NFT_REG32_11","NFT_REG32_12","NFT_REG32_13","NFT_REG32_14","NFT_REG32_15","NFT_REG32_SIZE","NFT_REG_1","NFT_REG_2","NFT_REG_3","NFT_REG_4","NFT_REG_SIZE","NFT_REG_VERDICT","NFT_REJECT_ICMPX_ADMIN_PROHIBITED","NFT_REJECT_ICMPX_HOST_UNREACH","NFT_REJECT_ICMPX_NO_ROUTE","NFT_REJECT_ICMPX_PORT_UNREACH","NFT_REJECT_ICMPX_UNREACH","NFT_REJECT_ICMP_UNREACH","NFT_REJECT_TCP_RST","NFT_RETURN","NFT_SET_ANONYMOUS","NFT_SET_CONSTANT","NFT_SET_ELEM_INTERVAL_END","NFT_SET_EVAL","NFT_SET_INTERVAL","NFT_SET_MAP","NFT_SET_MAXNAMELEN","NFT_SET_POL_MEMORY","NFT_SET_POL_PERFORMANCE","NFT_SET_TIMEOUT","NFT_TABLE_MAXNAMELEN","NFT_TRACETYPE_POLICY","NFT_TRACETYPE_RETURN","NFT_TRACETYPE_RULE","NFT_TRACETYPE_UNSPEC","NFT_USERDATA_MAXLEN","NFULA_CFG_CMD","NFULA_CFG_FLAGS","NFULA_CFG_MODE","NFULA_CFG_NLBUFSIZ","NFULA_CFG_QTHRESH","NFULA_CFG_TIMEOUT","NFULA_CFG_UNSPEC","NFULA_CT","NFULA_CT_INFO","NFULA_GID","NFULA_HWADDR","NFULA_HWHEADER","NFULA_HWLEN","NFULA_HWTYPE","NFULA_IFINDEX_INDEV","NFULA_IFINDEX_OUTDEV","NFULA_IFINDEX_PHYSINDEV","NFULA_IFINDEX_PHYSOUTDEV","NFULA_L2HDR","NFULA_MARK","NFULA_PACKET_HDR","NFULA_PAYLOAD","NFULA_PREFIX","NFULA_SEQ","NFULA_SEQ_GLOBAL","NFULA_TIMESTAMP","NFULA_UID","NFULA_UNSPEC","NFULA_VLAN","NFULA_VLAN_PROTO","NFULA_VLAN_TCI","NFULA_VLAN_UNSPEC","NFULNL_CFG_CMD_BIND","NFULNL_CFG_CMD_NONE","NFULNL_CFG_CMD_PF_BIND","NFULNL_CFG_CMD_PF_UNBIND","NFULNL_CFG_CMD_UNBIND","NFULNL_CFG_F_CONNTRACK","NFULNL_CFG_F_SEQ","NFULNL_CFG_F_SEQ_GLOBAL","NFULNL_COPY_META","NFULNL_COPY_NONE","NFULNL_COPY_PACKET","NFULNL_MSG_CONFIG","NFULNL_MSG_PACKET","NF_ACCEPT","NF_DROP","NF_INET_FORWARD","NF_INET_LOCAL_IN","NF_INET_LOCAL_OUT","NF_INET_NUMHOOKS","NF_INET_POST_ROUTING","NF_INET_PRE_ROUTING","NF_IP6_FORWARD","NF_IP6_LOCAL_IN","NF_IP6_LOCAL_OUT","NF_IP6_NUMHOOKS","NF_IP6_POST_ROUTING","NF_IP6_PRE_ROUTING","NF_IP6_PRI_CONNTRACK","NF_IP6_PRI_CONNTRACK_DEFRAG","NF_IP6_PRI_CONNTRACK_HELPER","NF_IP6_PRI_FILTER","NF_IP6_PRI_FIRST","NF_IP6_PRI_LAST","NF_IP6_PRI_MANGLE","NF_IP6_PRI_NAT_DST","NF_IP6_PRI_NAT_SRC","NF_IP6_PRI_RAW","NF_IP6_PRI_SECURITY","NF_IP6_PRI_SELINUX_FIRST","NF_IP6_PRI_SELINUX_LAST","NF_IP_FORWARD","NF_IP_LOCAL_IN","NF_IP_LOCAL_OUT","NF_IP_NUMHOOKS","NF_IP_POST_ROUTING","NF_IP_PRE_ROUTING","NF_IP_PRI_CONNTRACK","NF_IP_PRI_CONNTRACK_CONFIRM","NF_IP_PRI_CONNTRACK_DEFRAG","NF_IP_PRI_CONNTRACK_HELPER","NF_IP_PRI_FILTER","NF_IP_PRI_FIRST","NF_IP_PRI_LAST","NF_IP_PRI_MANGLE","NF_IP_PRI_NAT_DST","NF_IP_PRI_NAT_SRC","NF_IP_PRI_RAW","NF_IP_PRI_SECURITY","NF_IP_PRI_SELINUX_FIRST","NF_IP_PRI_SELINUX_LAST","NF_MAX_VERDICT","NF_NETDEV_INGRESS","NF_NETDEV_NUMHOOKS","NF_QUEUE","NF_REPEAT","NF_STOLEN","NF_STOP","NF_VERDICT_BITS","NF_VERDICT_FLAG_QUEUE_BYPASS","NF_VERDICT_MASK","NF_VERDICT_QBITS","NF_VERDICT_QMASK","NILFS_SUPER_MAGIC","NI_DGRAM","NI_MAXHOST","NI_NAMEREQD","NI_NOFQDN","NI_NUMERICHOST","NI_NUMERICSERV","NL0","NL1","NLA_ALIGN","NLA_ALIGNTO","NLA_F_NESTED","NLA_F_NET_BYTEORDER","NLA_TYPE_MASK","NLDLY","NLMSG_DONE","NLMSG_ERROR","NLMSG_MIN_TYPE","NLMSG_NOOP","NLMSG_OVERRUN","NLM_F_ACK","NLM_F_APPEND","NLM_F_ATOMIC","NLM_F_CREATE","NLM_F_DUMP","NLM_F_DUMP_FILTERED","NLM_F_DUMP_INTR","NLM_F_ECHO","NLM_F_EXCL","NLM_F_MATCH","NLM_F_MULTI","NLM_F_REPLACE","NLM_F_REQUEST","NLM_F_ROOT","NOEXPR","NOFLSH","NOSTR","NSFS_MAGIC","NTF_EXT_LEARNED","NTF_MASTER","NTF_OFFLOADED","NTF_PROXY","NTF_ROUTER","NTF_SELF","NTF_USE","NTP_API","NT_ASRS","NT_AUXV","NT_FPREGSET","NT_GWINDOWS","NT_LWPSINFO","NT_LWPSTATUS","NT_PLATFORM","NT_PRCRED","NT_PRFPREG","NT_PRFPXREG","NT_PRPSINFO","NT_PRSTATUS","NT_PRXREG","NT_PSINFO","NT_PSTATUS","NT_TASKSTRUCT","NT_UTSNAME","NUD_DELAY","NUD_FAILED","NUD_INCOMPLETE","NUD_NOARP","NUD_NONE","NUD_PERMANENT","NUD_PROBE","NUD_REACHABLE","NUD_STALE","OCFS2_SUPER_MAGIC","OCRNL","OFDEL","OFILL","OLCUC","OLD_TIME","ONLCR","ONLRET","ONOCR","OPENPROM_SUPER_MAGIC","OPEN_TREE_CLOEXEC","OPEN_TREE_CLONE","OPOST","ORIG_RAX","OVERLAYFS_SUPER_MAGIC","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECT","O_DIRECTORY","O_DSYNC","O_EXCL","O_FSYNC","O_LARGEFILE","O_NDELAY","O_NOATIME","O_NOCTTY","O_NOFOLLOW","O_NONBLOCK","O_PATH","O_RDONLY","O_RDWR","O_RSYNC","O_SYNC","O_TMPFILE","O_TRUNC","O_WRONLY","PACKET_ADD_MEMBERSHIP","PACKET_DROP_MEMBERSHIP","PACKET_MR_ALLMULTI","PACKET_MR_MULTICAST","PACKET_MR_PROMISC","PACKET_MR_UNICAST","PARENB","PARMRK","PARODD","PATH_MAX","PENDIN","PF_ALG","PF_APPLETALK","PF_ASH","PF_ATMPVC","PF_ATMSVC","PF_AX25","PF_BLUETOOTH","PF_BRIDGE","PF_CAIF","PF_CAN","PF_DECnet","PF_ECONET","PF_IB","PF_IEEE802154","PF_INET","PF_INET6","PF_IPX","PF_IRDA","PF_ISDN","PF_IUCV","PF_KEY","PF_LLC","PF_LOCAL","PF_MASKOS","PF_MASKPROC","PF_MPLS","PF_NETBEUI","PF_NETLINK","PF_NETROM","PF_NFC","PF_PACKET","PF_PHONET","PF_PPPOX","PF_R","PF_RDS","PF_ROSE","PF_ROUTE","PF_RXRPC","PF_SECURITY","PF_SNA","PF_TIPC","PF_UNIX","PF_UNSPEC","PF_VSOCK","PF_W","PF_WANPIPE","PF_X","PF_X25","PF_XDP","PIDFD_NONBLOCK","PIPE_BUF","PM_STR","POLLERR","POLLHUP","POLLIN","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDHUP","POLLRDNORM","POLLWRBAND","POLLWRNORM","POSIX_FADV_DONTNEED","POSIX_FADV_NOREUSE","POSIX_FADV_NORMAL","POSIX_FADV_RANDOM","POSIX_FADV_SEQUENTIAL","POSIX_FADV_WILLNEED","POSIX_MADV_DONTNEED","POSIX_MADV_NORMAL","POSIX_MADV_RANDOM","POSIX_MADV_SEQUENTIAL","POSIX_MADV_WILLNEED","POSIX_SPAWN_RESETIDS","POSIX_SPAWN_SETPGROUP","POSIX_SPAWN_SETSCHEDPARAM","POSIX_SPAWN_SETSCHEDULER","POSIX_SPAWN_SETSID","POSIX_SPAWN_SETSIGDEF","POSIX_SPAWN_SETSIGMASK","POSIX_SPAWN_USEVFORK","PRIO_MAX","PRIO_MIN","PRIO_PGRP","PRIO_PROCESS","PRIO_USER","PROC_SUPER_MAGIC","PROT_EXEC","PROT_GROWSDOWN","PROT_GROWSUP","PROT_NONE","PROT_READ","PROT_WRITE","PR_CAPBSET_DROP","PR_CAPBSET_READ","PR_CAP_AMBIENT","PR_CAP_AMBIENT_CLEAR_ALL","PR_CAP_AMBIENT_IS_SET","PR_CAP_AMBIENT_LOWER","PR_CAP_AMBIENT_RAISE","PR_ENDIAN_BIG","PR_ENDIAN_LITTLE","PR_ENDIAN_PPC_LITTLE","PR_FPEMU_NOPRINT","PR_FPEMU_SIGFPE","PR_FP_EXC_ASYNC","PR_FP_EXC_DISABLED","PR_FP_EXC_DIV","PR_FP_EXC_INV","PR_FP_EXC_NONRECOV","PR_FP_EXC_OVF","PR_FP_EXC_PRECISE","PR_FP_EXC_RES","PR_FP_EXC_SW_ENABLE","PR_FP_EXC_UND","PR_FP_MODE_FR","PR_FP_MODE_FRE","PR_GET_CHILD_SUBREAPER","PR_GET_DUMPABLE","PR_GET_ENDIAN","PR_GET_FPEMU","PR_GET_FPEXC","PR_GET_FP_MODE","PR_GET_KEEPCAPS","PR_GET_NAME","PR_GET_NO_NEW_PRIVS","PR_GET_PDEATHSIG","PR_GET_SECCOMP","PR_GET_SECUREBITS","PR_GET_SPECULATION_CTRL","PR_GET_THP_DISABLE","PR_GET_TID_ADDRESS","PR_GET_TIMERSLACK","PR_GET_TIMING","PR_GET_TSC","PR_GET_UNALIGN","PR_MCE_KILL","PR_MCE_KILL_CLEAR","PR_MCE_KILL_DEFAULT","PR_MCE_KILL_EARLY","PR_MCE_KILL_GET","PR_MCE_KILL_LATE","PR_MCE_KILL_SET","PR_MPX_DISABLE_MANAGEMENT","PR_MPX_ENABLE_MANAGEMENT","PR_SCHED_CORE","PR_SCHED_CORE_CREATE","PR_SCHED_CORE_GET","PR_SCHED_CORE_MAX","PR_SCHED_CORE_SCOPE_PROCESS_GROUP","PR_SCHED_CORE_SCOPE_THREAD","PR_SCHED_CORE_SCOPE_THREAD_GROUP","PR_SCHED_CORE_SHARE_FROM","PR_SCHED_CORE_SHARE_TO","PR_SET_CHILD_SUBREAPER","PR_SET_DUMPABLE","PR_SET_ENDIAN","PR_SET_FPEMU","PR_SET_FPEXC","PR_SET_FP_MODE","PR_SET_KEEPCAPS","PR_SET_MM","PR_SET_MM_ARG_END","PR_SET_MM_ARG_START","PR_SET_MM_AUXV","PR_SET_MM_BRK","PR_SET_MM_END_CODE","PR_SET_MM_END_DATA","PR_SET_MM_ENV_END","PR_SET_MM_ENV_START","PR_SET_MM_EXE_FILE","PR_SET_MM_MAP","PR_SET_MM_MAP_SIZE","PR_SET_MM_START_BRK","PR_SET_MM_START_CODE","PR_SET_MM_START_DATA","PR_SET_MM_START_STACK","PR_SET_NAME","PR_SET_NO_NEW_PRIVS","PR_SET_PDEATHSIG","PR_SET_PTRACER","PR_SET_PTRACER_ANY","PR_SET_SECCOMP","PR_SET_SECUREBITS","PR_SET_SPECULATION_CTRL","PR_SET_THP_DISABLE","PR_SET_TIMERSLACK","PR_SET_TIMING","PR_SET_TSC","PR_SET_UNALIGN","PR_SET_VMA","PR_SET_VMA_ANON_NAME","PR_SPEC_DISABLE","PR_SPEC_DISABLE_NOEXEC","PR_SPEC_ENABLE","PR_SPEC_FORCE_DISABLE","PR_SPEC_INDIRECT_BRANCH","PR_SPEC_NOT_AFFECTED","PR_SPEC_PRCTL","PR_SPEC_STORE_BYPASS","PR_TASK_PERF_EVENTS_DISABLE","PR_TASK_PERF_EVENTS_ENABLE","PR_TIMING_STATISTICAL","PR_TIMING_TIMESTAMP","PR_TSC_ENABLE","PR_TSC_SIGSEGV","PR_UNALIGN_NOPRINT","PR_UNALIGN_SIGBUS","PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","PTHREAD_COND_INITIALIZER","PTHREAD_CREATE_DETACHED","PTHREAD_CREATE_JOINABLE","PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","PTHREAD_MUTEX_ADAPTIVE_NP","PTHREAD_MUTEX_DEFAULT","PTHREAD_MUTEX_ERRORCHECK","PTHREAD_MUTEX_INITIALIZER","PTHREAD_MUTEX_NORMAL","PTHREAD_MUTEX_RECURSIVE","PTHREAD_MUTEX_ROBUST","PTHREAD_MUTEX_STALLED","PTHREAD_ONCE_INIT","PTHREAD_PRIO_INHERIT","PTHREAD_PRIO_NONE","PTHREAD_PRIO_PROTECT","PTHREAD_PROCESS_PRIVATE","PTHREAD_PROCESS_SHARED","PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","PTHREAD_RWLOCK_INITIALIZER","PTHREAD_STACK_MIN","PTRACE_ATTACH","PTRACE_CONT","PTRACE_DETACH","PTRACE_EVENT_CLONE","PTRACE_EVENT_EXEC","PTRACE_EVENT_EXIT","PTRACE_EVENT_FORK","PTRACE_EVENT_SECCOMP","PTRACE_EVENT_STOP","PTRACE_EVENT_VFORK","PTRACE_EVENT_VFORK_DONE","PTRACE_GETEVENTMSG","PTRACE_GETFPREGS","PTRACE_GETFPXREGS","PTRACE_GETREGS","PTRACE_GETREGSET","PTRACE_GETSIGINFO","PTRACE_GETSIGMASK","PTRACE_GET_RSEQ_CONFIGURATION","PTRACE_GET_SYSCALL_INFO","PTRACE_INTERRUPT","PTRACE_KILL","PTRACE_LISTEN","PTRACE_O_EXITKILL","PTRACE_O_MASK","PTRACE_O_SUSPEND_SECCOMP","PTRACE_O_TRACECLONE","PTRACE_O_TRACEEXEC","PTRACE_O_TRACEEXIT","PTRACE_O_TRACEFORK","PTRACE_O_TRACESECCOMP","PTRACE_O_TRACESYSGOOD","PTRACE_O_TRACEVFORK","PTRACE_O_TRACEVFORKDONE","PTRACE_PEEKDATA","PTRACE_PEEKSIGINFO","PTRACE_PEEKSIGINFO_SHARED","PTRACE_PEEKTEXT","PTRACE_PEEKUSER","PTRACE_POKEDATA","PTRACE_POKETEXT","PTRACE_POKEUSER","PTRACE_SEIZE","PTRACE_SETFPREGS","PTRACE_SETFPXREGS","PTRACE_SETOPTIONS","PTRACE_SETREGS","PTRACE_SETREGSET","PTRACE_SETSIGINFO","PTRACE_SETSIGMASK","PTRACE_SINGLESTEP","PTRACE_SYSCALL","PTRACE_SYSCALL_INFO_ENTRY","PTRACE_SYSCALL_INFO_EXIT","PTRACE_SYSCALL_INFO_NONE","PTRACE_SYSCALL_INFO_SECCOMP","PTRACE_SYSEMU","PTRACE_SYSEMU_SINGLESTEP","PTRACE_TRACEME","PT_DYNAMIC","PT_GNU_EH_FRAME","PT_GNU_RELRO","PT_GNU_STACK","PT_HIOS","PT_HIPROC","PT_HISUNW","PT_INTERP","PT_LOAD","PT_LOOS","PT_LOPROC","PT_LOSUNW","PT_NOTE","PT_NULL","PT_NUM","PT_PHDR","PT_SHLIB","PT_SUNWBSS","PT_SUNWSTACK","PT_TLS","P_ALL","P_PGID","P_PID","P_PIDFD","QCMD","QFMT_VFS_OLD","QFMT_VFS_V0","QFMT_VFS_V1","QIF_ALL","QIF_BLIMITS","QIF_BTIME","QIF_ILIMITS","QIF_INODES","QIF_ITIME","QIF_LIMITS","QIF_SPACE","QIF_TIMES","QIF_USAGE","QNX4_SUPER_MAGIC","QNX6_SUPER_MAGIC","Q_GETFMT","Q_GETINFO","Q_GETQUOTA","Q_QUOTAOFF","Q_QUOTAON","Q_SETINFO","Q_SETQUOTA","Q_SYNC","R10","R11","R12","R13","R14","R15","R8","R9","RADIXCHAR","RAND_MAX","RAX","RBP","RBX","RB_AUTOBOOT","RB_DISABLE_CAD","RB_ENABLE_CAD","RB_HALT_SYSTEM","RB_KEXEC","RB_POWER_OFF","RB_SW_SUSPEND","RCX","RDI","RDTGROUP_SUPER_MAGIC","RDX","READ_IMPLIES_EXEC","REG_BADBR","REG_BADPAT","REG_BADRPT","REG_CR2","REG_CSGSFS","REG_EBRACE","REG_EBRACK","REG_ECOLLATE","REG_ECTYPE","REG_EEND","REG_EESCAPE","REG_EFL","REG_ENOSYS","REG_EPAREN","REG_ERANGE","REG_ERPAREN","REG_ERR","REG_ESIZE","REG_ESPACE","REG_ESUBREG","REG_EXTENDED","REG_ICASE","REG_NEWLINE","REG_NOMATCH","REG_NOSUB","REG_NOTBOL","REG_NOTEOL","REG_OLDMASK","REG_R10","REG_R11","REG_R12","REG_R13","REG_R14","REG_R15","REG_R8","REG_R9","REG_RAX","REG_RBP","REG_RBX","REG_RCX","REG_RDI","REG_RDX","REG_RIP","REG_RSI","REG_RSP","REG_STARTEND","REG_TRAPNO","REISERFS_SUPER_MAGIC","REL_CNT","REL_MAX","RENAME_EXCHANGE","RENAME_NOREPLACE","RENAME_WHITEOUT","REP_CNT","REP_MAX","RESOLVE_BENEATH","RESOLVE_CACHED","RESOLVE_IN_ROOT","RESOLVE_NO_MAGICLINKS","RESOLVE_NO_SYMLINKS","RESOLVE_NO_XDEV","RIP","RLIM64_INFINITY","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_LOCKS","RLIMIT_MEMLOCK","RLIMIT_MSGQUEUE","RLIMIT_NICE","RLIMIT_NLIMITS","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_RTPRIO","RLIMIT_RTTIME","RLIMIT_SIGPENDING","RLIMIT_STACK","RLIM_INFINITY","RLIM_NLIMITS","RLIM_SAVED_CUR","RLIM_SAVED_MAX","RSI","RSP","RTA_CACHEINFO","RTA_DST","RTA_ENCAP","RTA_ENCAP_TYPE","RTA_EXPIRES","RTA_FLOW","RTA_GATEWAY","RTA_IIF","RTA_MARK","RTA_METRICS","RTA_MFC_STATS","RTA_MP_ALGO","RTA_MULTIPATH","RTA_NEWDST","RTA_OIF","RTA_PAD","RTA_PREF","RTA_PREFSRC","RTA_PRIORITY","RTA_PROTOINFO","RTA_SESSION","RTA_SRC","RTA_TABLE","RTA_TTL_PROPAGATE","RTA_UID","RTA_UNSPEC","RTA_VIA","RTCF_DIRECTSRC","RTCF_DOREDIRECT","RTCF_LOG","RTCF_MASQ","RTCF_NAT","RTCF_VALVE","RTEXT_FILTER_BRVLAN","RTEXT_FILTER_BRVLAN_COMPRESSED","RTEXT_FILTER_CFM_CONFIG","RTEXT_FILTER_CFM_STATUS","RTEXT_FILTER_MRP","RTEXT_FILTER_SKIP_STATS","RTEXT_FILTER_VF","RTF_ADDRCLASSMASK","RTF_ADDRCONF","RTF_ALLONLINK","RTF_BROADCAST","RTF_CACHE","RTF_DEFAULT","RTF_DYNAMIC","RTF_FLOW","RTF_GATEWAY","RTF_HOST","RTF_INTERFACE","RTF_IRTT","RTF_LINKRT","RTF_LOCAL","RTF_MODIFIED","RTF_MSS","RTF_MTU","RTF_MULTICAST","RTF_NAT","RTF_NOFORWARD","RTF_NONEXTHOP","RTF_NOPMTUDISC","RTF_POLICY","RTF_REINSTATE","RTF_REJECT","RTF_STATIC","RTF_THROW","RTF_UP","RTF_WINDOW","RTF_XRESOLVE","RTLD_DEEPBIND","RTLD_DEFAULT","RTLD_DI_CONFIGADDR","RTLD_DI_LINKMAP","RTLD_DI_LMID","RTLD_DI_ORIGIN","RTLD_DI_PROFILENAME","RTLD_DI_PROFILEOUT","RTLD_DI_SERINFO","RTLD_DI_SERINFOSIZE","RTLD_DI_TLS_DATA","RTLD_DI_TLS_MODID","RTLD_GLOBAL","RTLD_LAZY","RTLD_LOCAL","RTLD_NEXT","RTLD_NODELETE","RTLD_NOLOAD","RTLD_NOW","RTMGRP_DECnet_IFADDR","RTMGRP_DECnet_ROUTE","RTMGRP_IPV4_IFADDR","RTMGRP_IPV4_MROUTE","RTMGRP_IPV4_ROUTE","RTMGRP_IPV4_RULE","RTMGRP_IPV6_IFADDR","RTMGRP_IPV6_IFINFO","RTMGRP_IPV6_MROUTE","RTMGRP_IPV6_PREFIX","RTMGRP_IPV6_ROUTE","RTMGRP_LINK","RTMGRP_NEIGH","RTMGRP_NOTIFY","RTMGRP_TC","RTMSG_AR_FAILED","RTMSG_CONTROL","RTMSG_DELDEVICE","RTMSG_DELROUTE","RTMSG_DELRULE","RTMSG_NEWDEVICE","RTMSG_NEWROUTE","RTMSG_NEWRULE","RTMSG_OVERRUN","RTM_DELACTION","RTM_DELADDR","RTM_DELADDRLABEL","RTM_DELLINK","RTM_DELMDB","RTM_DELNEIGH","RTM_DELNETCONF","RTM_DELNSID","RTM_DELQDISC","RTM_DELROUTE","RTM_DELRULE","RTM_DELTCLASS","RTM_DELTFILTER","RTM_F_CLONED","RTM_F_EQUALIZE","RTM_F_FIB_MATCH","RTM_F_LOOKUP_TABLE","RTM_F_NOTIFY","RTM_F_PREFIX","RTM_GETACTION","RTM_GETADDR","RTM_GETADDRLABEL","RTM_GETANYCAST","RTM_GETDCB","RTM_GETLINK","RTM_GETMDB","RTM_GETMULTICAST","RTM_GETNEIGH","RTM_GETNEIGHTBL","RTM_GETNETCONF","RTM_GETNSID","RTM_GETQDISC","RTM_GETROUTE","RTM_GETRULE","RTM_GETSTATS","RTM_GETTCLASS","RTM_GETTFILTER","RTM_NEWACTION","RTM_NEWADDR","RTM_NEWADDRLABEL","RTM_NEWCACHEREPORT","RTM_NEWLINK","RTM_NEWMDB","RTM_NEWNDUSEROPT","RTM_NEWNEIGH","RTM_NEWNEIGHTBL","RTM_NEWNETCONF","RTM_NEWNSID","RTM_NEWPREFIX","RTM_NEWQDISC","RTM_NEWROUTE","RTM_NEWRULE","RTM_NEWSTATS","RTM_NEWTCLASS","RTM_NEWTFILTER","RTM_SETDCB","RTM_SETLINK","RTM_SETNEIGHTBL","RTNLGRP_BRVLAN","RTNLGRP_DCB","RTNLGRP_DECnet_IFADDR","RTNLGRP_DECnet_ROUTE","RTNLGRP_DECnet_RULE","RTNLGRP_IPV4_IFADDR","RTNLGRP_IPV4_MROUTE","RTNLGRP_IPV4_MROUTE_R","RTNLGRP_IPV4_NETCONF","RTNLGRP_IPV4_ROUTE","RTNLGRP_IPV4_RULE","RTNLGRP_IPV6_IFADDR","RTNLGRP_IPV6_IFINFO","RTNLGRP_IPV6_MROUTE","RTNLGRP_IPV6_MROUTE_R","RTNLGRP_IPV6_NETCONF","RTNLGRP_IPV6_PREFIX","RTNLGRP_IPV6_ROUTE","RTNLGRP_IPV6_RULE","RTNLGRP_LINK","RTNLGRP_MCTP_IFADDR","RTNLGRP_MDB","RTNLGRP_MPLS_NETCONF","RTNLGRP_MPLS_ROUTE","RTNLGRP_ND_USEROPT","RTNLGRP_NEIGH","RTNLGRP_NEXTHOP","RTNLGRP_NONE","RTNLGRP_NOP2","RTNLGRP_NOP4","RTNLGRP_NOTIFY","RTNLGRP_NSID","RTNLGRP_PHONET_IFADDR","RTNLGRP_PHONET_ROUTE","RTNLGRP_STATS","RTNLGRP_TC","RTNLGRP_TUNNEL","RTN_ANYCAST","RTN_BLACKHOLE","RTN_BROADCAST","RTN_LOCAL","RTN_MULTICAST","RTN_NAT","RTN_PROHIBIT","RTN_THROW","RTN_UNICAST","RTN_UNREACHABLE","RTN_UNSPEC","RTN_XRESOLVE","RTPROT_BOOT","RTPROT_KERNEL","RTPROT_REDIRECT","RTPROT_STATIC","RTPROT_UNSPEC","RT_ADDRCLASS","RT_CLASS_DEFAULT","RT_CLASS_LOCAL","RT_CLASS_MAIN","RT_CLASS_MAX","RT_CLASS_UNSPEC","RT_LOCALADDR","RT_SCOPE_HOST","RT_SCOPE_LINK","RT_SCOPE_NOWHERE","RT_SCOPE_SITE","RT_SCOPE_UNIVERSE","RT_TABLE_COMPAT","RT_TABLE_DEFAULT","RT_TABLE_LOCAL","RT_TABLE_MAIN","RT_TABLE_UNSPEC","RT_TOS","RUN_LVL","RUSAGE_CHILDREN","RUSAGE_SELF","RUSAGE_THREAD","RWF_APPEND","RWF_DSYNC","RWF_HIPRI","RWF_NOWAIT","RWF_SYNC","R_OK","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SCHED_BATCH","SCHED_FIFO","SCHED_IDLE","SCHED_OTHER","SCHED_RESET_ON_FORK","SCHED_RR","SCM_CREDENTIALS","SCM_J1939_DEST_ADDR","SCM_J1939_DEST_NAME","SCM_J1939_ERRQUEUE","SCM_J1939_PRIO","SCM_RIGHTS","SCM_TIMESTAMP","SCM_TIMESTAMPING","SCM_TIMESTAMPING_OPT_STATS","SCM_TIMESTAMPING_PKTINFO","SCM_TIMESTAMPNS","SCM_TXTIME","SCM_WIFI_STATUS","SCTP_ABORT","SCTP_ADAPTATION_LAYER","SCTP_ADDR_OVER","SCTP_ALL_ASSOC","SCTP_ASSOCINFO","SCTP_AUTHINFO","SCTP_AUTH_ACTIVE_KEY","SCTP_AUTH_CHUNK","SCTP_AUTH_DEACTIVATE_KEY","SCTP_AUTH_DELETE_KEY","SCTP_AUTH_KEY","SCTP_AUTOCLOSE","SCTP_AUTO_ASCONF","SCTP_CONTEXT","SCTP_CURRENT_ASSOC","SCTP_DEFAULT_SEND_PARAM","SCTP_DEFAULT_SNDINFO","SCTP_DELAYED_ACK","SCTP_DELAYED_ACK_TIME","SCTP_DELAYED_SACK","SCTP_DISABLE_FRAGMENTS","SCTP_DSTADDRV4","SCTP_DSTADDRV6","SCTP_ENABLE_CHANGE_ASSOC_REQ","SCTP_ENABLE_RESET_ASSOC_REQ","SCTP_ENABLE_RESET_STREAM_REQ","SCTP_ENABLE_STRRESET_MASK","SCTP_EOF","SCTP_EVENTS","SCTP_FRAGMENT_INTERLEAVE","SCTP_FUTURE_ASSOC","SCTP_GET_ASSOC_ID_LIST","SCTP_GET_ASSOC_NUMBER","SCTP_GET_PEER_ADDR_INFO","SCTP_HMAC_IDENT","SCTP_INIT","SCTP_INITMSG","SCTP_I_WANT_MAPPED_V4_ADDR","SCTP_LOCAL_AUTH_CHUNKS","SCTP_MAXSEG","SCTP_MAX_BURST","SCTP_NODELAY","SCTP_NOTIFICATION","SCTP_NXTINFO","SCTP_PARTIAL_DELIVERY_POINT","SCTP_PEER_ADDR_PARAMS","SCTP_PEER_ADDR_THLDS","SCTP_PEER_ADDR_THLDS_V2","SCTP_PEER_AUTH_CHUNKS","SCTP_PRIMARY_ADDR","SCTP_PRINFO","SCTP_PR_INDEX","SCTP_PR_POLICY","SCTP_PR_PRIO_ENABLED","SCTP_PR_RTX_ENABLED","SCTP_PR_SCTP_ALL","SCTP_PR_SCTP_MASK","SCTP_PR_SCTP_MAX","SCTP_PR_SCTP_NONE","SCTP_PR_SCTP_PRIO","SCTP_PR_SCTP_RTX","SCTP_PR_SCTP_TTL","SCTP_PR_SET_POLICY","SCTP_PR_TTL_ENABLED","SCTP_RCVINFO","SCTP_RECVNXTINFO","SCTP_RECVRCVINFO","SCTP_REUSE_PORT","SCTP_RTOINFO","SCTP_SACK_IMMEDIATELY","SCTP_SENDALL","SCTP_SET_PEER_PRIMARY_ADDR","SCTP_SNDINFO","SCTP_SNDRCV","SCTP_STATUS","SCTP_STREAM_RESET_INCOMING","SCTP_STREAM_RESET_OUTGOING","SCTP_UNORDERED","SECCOMP_FILTER_FLAG_LOG","SECCOMP_FILTER_FLAG_SPEC_ALLOW","SECCOMP_FILTER_FLAG_TSYNC","SECCOMP_GET_ACTION_AVAIL","SECCOMP_GET_NOTIF_SIZES","SECCOMP_MODE_DISABLED","SECCOMP_MODE_FILTER","SECCOMP_MODE_STRICT","SECCOMP_RET_ACTION","SECCOMP_RET_ACTION_FULL","SECCOMP_RET_ALLOW","SECCOMP_RET_DATA","SECCOMP_RET_ERRNO","SECCOMP_RET_KILL","SECCOMP_RET_KILL_PROCESS","SECCOMP_RET_KILL_THREAD","SECCOMP_RET_LOG","SECCOMP_RET_TRACE","SECCOMP_RET_TRAP","SECCOMP_SET_MODE_FILTER","SECCOMP_SET_MODE_STRICT","SECURITYFS_MAGIC","SEEK_CUR","SEEK_DATA","SEEK_END","SEEK_HOLE","SEEK_SET","SELFMAG","SELINUX_MAGIC","SEM_FAILED","SFD_CLOEXEC","SFD_NONBLOCK","SHM_EXEC","SHM_HUGETLB","SHM_LOCK","SHM_NORESERVE","SHM_R","SHM_RDONLY","SHM_REMAP","SHM_RND","SHM_UNLOCK","SHM_W","SHORT_INODE","SHUT_RD","SHUT_RDWR","SHUT_WR","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGEV_NONE","SIGEV_SIGNAL","SIGEV_THREAD","SIGEV_THREAD_ID","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGPIPE","SIGPOLL","SIGPROF","SIGPWR","SIGQUIT","SIGRTMAX","SIGRTMIN","SIGSEGV","SIGSTKFLT","SIGSTKSZ","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGUNUSED","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_ERR","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","SIOCADDMULTI","SIOCADDRT","SIOCDARP","SIOCDELMULTI","SIOCDELRT","SIOCDIFADDR","SIOCDRARP","SIOCETHTOOL","SIOCGARP","SIOCGHWTSTAMP","SIOCGIFADDR","SIOCGIFBR","SIOCGIFBRDADDR","SIOCGIFCONF","SIOCGIFCOUNT","SIOCGIFDSTADDR","SIOCGIFENCAP","SIOCGIFFLAGS","SIOCGIFHWADDR","SIOCGIFINDEX","SIOCGIFMAP","SIOCGIFMEM","SIOCGIFMETRIC","SIOCGIFMTU","SIOCGIFNAME","SIOCGIFNETMASK","SIOCGIFPFLAGS","SIOCGIFSLAVE","SIOCGIFTXQLEN","SIOCGMIIPHY","SIOCGMIIREG","SIOCGRARP","SIOCGSKNS","SIOCOUTQNSD","SIOCSARP","SIOCSHWTSTAMP","SIOCSIFADDR","SIOCSIFBR","SIOCSIFBRDADDR","SIOCSIFDSTADDR","SIOCSIFENCAP","SIOCSIFFLAGS","SIOCSIFHWADDR","SIOCSIFHWBROADCAST","SIOCSIFLINK","SIOCSIFMAP","SIOCSIFMEM","SIOCSIFMETRIC","SIOCSIFMTU","SIOCSIFNAME","SIOCSIFNETMASK","SIOCSIFPFLAGS","SIOCSIFSLAVE","SIOCSIFTXQLEN","SIOCSMIIREG","SIOCSRARP","SIOCWANDEV","SIOGIFINDEX","SI_LOAD_SHIFT","SKF_AD_ALU_XOR_X","SKF_AD_CPU","SKF_AD_HATYPE","SKF_AD_IFINDEX","SKF_AD_MARK","SKF_AD_MAX","SKF_AD_NLATTR","SKF_AD_NLATTR_NEST","SKF_AD_OFF","SKF_AD_PAY_OFFSET","SKF_AD_PKTTYPE","SKF_AD_PROTOCOL","SKF_AD_QUEUE","SKF_AD_RANDOM","SKF_AD_RXHASH","SKF_AD_VLAN_TAG","SKF_AD_VLAN_TAG_PRESENT","SKF_AD_VLAN_TPID","SKF_LL_OFF","SKF_NET_OFF","SK_MEMINFO_BACKLOG","SK_MEMINFO_DROPS","SK_MEMINFO_FWD_ALLOC","SK_MEMINFO_OPTMEM","SK_MEMINFO_RCVBUF","SK_MEMINFO_RMEM_ALLOC","SK_MEMINFO_SNDBUF","SK_MEMINFO_WMEM_ALLOC","SK_MEMINFO_WMEM_QUEUED","SMACK_MAGIC","SMB_SUPER_MAGIC","SND_CNT","SND_MAX","SOCK_CLOEXEC","SOCK_DCCP","SOCK_DGRAM","SOCK_NONBLOCK","SOCK_PACKET","SOCK_RAW","SOCK_RDM","SOCK_SEQPACKET","SOCK_STREAM","SOF_TIMESTAMPING_OPT_CMSG","SOF_TIMESTAMPING_OPT_ID","SOF_TIMESTAMPING_OPT_PKTINFO","SOF_TIMESTAMPING_OPT_STATS","SOF_TIMESTAMPING_OPT_TSONLY","SOF_TIMESTAMPING_OPT_TX_SWHW","SOF_TIMESTAMPING_RAW_HARDWARE","SOF_TIMESTAMPING_RX_HARDWARE","SOF_TIMESTAMPING_RX_SOFTWARE","SOF_TIMESTAMPING_SOFTWARE","SOF_TIMESTAMPING_SYS_HARDWARE","SOF_TIMESTAMPING_TX_ACK","SOF_TIMESTAMPING_TX_HARDWARE","SOF_TIMESTAMPING_TX_SCHED","SOF_TIMESTAMPING_TX_SOFTWARE","SOF_TXTIME_DEADLINE_MODE","SOF_TXTIME_REPORT_ERRORS","SOL_AAL","SOL_ALG","SOL_ATM","SOL_BLUETOOTH","SOL_CAIF","SOL_CAN_BASE","SOL_CAN_J1939","SOL_CAN_RAW","SOL_DCCP","SOL_DECNET","SOL_ICMPV6","SOL_IP","SOL_IPV6","SOL_IRDA","SOL_IUCV","SOL_LLC","SOL_NETBEUI","SOL_NETLINK","SOL_NFC","SOL_PACKET","SOL_PNPIPE","SOL_PPPOL2TP","SOL_RAW","SOL_RDS","SOL_RXRPC","SOL_SOCKET","SOL_TCP","SOL_TIPC","SOL_TLS","SOL_UDP","SOL_X25","SOL_XDP","SOMAXCONN","SO_ACCEPTCONN","SO_ATTACH_BPF","SO_ATTACH_FILTER","SO_ATTACH_REUSEPORT_CBPF","SO_ATTACH_REUSEPORT_EBPF","SO_BINDTODEVICE","SO_BINDTOIFINDEX","SO_BPF_EXTENSIONS","SO_BROADCAST","SO_BSDCOMPAT","SO_BUSY_POLL","SO_CNX_ADVICE","SO_COOKIE","SO_DEBUG","SO_DETACH_BPF","SO_DETACH_FILTER","SO_DETACH_REUSEPORT_BPF","SO_DOMAIN","SO_DONTROUTE","SO_EE_OFFENDER","SO_EE_ORIGIN_ICMP","SO_EE_ORIGIN_ICMP6","SO_EE_ORIGIN_LOCAL","SO_EE_ORIGIN_NONE","SO_EE_ORIGIN_TIMESTAMPING","SO_EE_ORIGIN_TXSTATUS","SO_ERROR","SO_GET_FILTER","SO_INCOMING_CPU","SO_INCOMING_NAPI_ID","SO_J1939_ERRQUEUE","SO_J1939_FILTER","SO_J1939_PROMISC","SO_J1939_SEND_PRIO","SO_KEEPALIVE","SO_LINGER","SO_LOCK_FILTER","SO_MARK","SO_MAX_PACING_RATE","SO_MEMINFO","SO_NOFCS","SO_NO_CHECK","SO_OOBINLINE","SO_ORIGINAL_DST","SO_PASSCRED","SO_PASSSEC","SO_PEEK_OFF","SO_PEERCRED","SO_PEERGROUPS","SO_PEERNAME","SO_PEERSEC","SO_PRIORITY","SO_PROTOCOL","SO_RCVBUF","SO_RCVBUFFORCE","SO_RCVLOWAT","SO_RCVTIMEO","SO_RCVTIMEO_NEW","SO_REUSEADDR","SO_REUSEPORT","SO_RXQ_OVFL","SO_SECURITY_AUTHENTICATION","SO_SECURITY_ENCRYPTION_NETWORK","SO_SECURITY_ENCRYPTION_TRANSPORT","SO_SELECT_ERR_QUEUE","SO_SNDBUF","SO_SNDBUFFORCE","SO_SNDLOWAT","SO_SNDTIMEO","SO_SNDTIMEO_NEW","SO_TIMESTAMP","SO_TIMESTAMPING","SO_TIMESTAMPING_NEW","SO_TIMESTAMPNS","SO_TIMESTAMPNS_NEW","SO_TIMESTAMP_NEW","SO_TXTIME","SO_TYPE","SO_WIFI_STATUS","SO_ZEROCOPY","SPLICE_F_GIFT","SPLICE_F_MORE","SPLICE_F_MOVE","SPLICE_F_NONBLOCK","SS","SS_DISABLE","SS_ONSTACK","STATX_ALL","STATX_ATIME","STATX_ATTR_APPEND","STATX_ATTR_AUTOMOUNT","STATX_ATTR_COMPRESSED","STATX_ATTR_DAX","STATX_ATTR_ENCRYPTED","STATX_ATTR_IMMUTABLE","STATX_ATTR_MOUNT_ROOT","STATX_ATTR_NODUMP","STATX_ATTR_VERITY","STATX_BASIC_STATS","STATX_BLOCKS","STATX_BTIME","STATX_CTIME","STATX_DIOALIGN","STATX_GID","STATX_INO","STATX_MNT_ID","STATX_MODE","STATX_MTIME","STATX_NLINK","STATX_SIZE","STATX_TYPE","STATX_UID","STATX__RESERVED","STA_CLK","STA_CLOCKERR","STA_DEL","STA_FLL","STA_FREQHOLD","STA_INS","STA_MODE","STA_NANO","STA_PLL","STA_PPSERROR","STA_PPSFREQ","STA_PPSJITTER","STA_PPSSIGNAL","STA_PPSTIME","STA_PPSWANDER","STA_RONLY","STA_UNSYNC","STDERR_FILENO","STDIN_FILENO","STDOUT_FILENO","STICKY_TIMEOUTS","ST_APPEND","ST_IMMUTABLE","ST_MANDLOCK","ST_NOATIME","ST_NODEV","ST_NODIRATIME","ST_NOEXEC","ST_NOSUID","ST_RDONLY","ST_RELATIME","ST_SYNCHRONOUS","ST_WRITE","SW_CNT","SW_MAX","SYNC_FILE_RANGE_WAIT_AFTER","SYNC_FILE_RANGE_WAIT_BEFORE","SYNC_FILE_RANGE_WRITE","SYN_CNT","SYN_MAX","SYSFS_MAGIC","SYS__sysctl","SYS_accept","SYS_accept4","SYS_access","SYS_acct","SYS_add_key","SYS_adjtimex","SYS_afs_syscall","SYS_alarm","SYS_arch_prctl","SYS_bind","SYS_bpf","SYS_brk","SYS_capget","SYS_capset","SYS_chdir","SYS_chmod","SYS_chown","SYS_chroot","SYS_clock_adjtime","SYS_clock_getres","SYS_clock_gettime","SYS_clock_nanosleep","SYS_clock_settime","SYS_clone","SYS_clone3","SYS_close","SYS_close_range","SYS_connect","SYS_copy_file_range","SYS_creat","SYS_create_module","SYS_delete_module","SYS_dup","SYS_dup2","SYS_dup3","SYS_epoll_create","SYS_epoll_create1","SYS_epoll_ctl","SYS_epoll_ctl_old","SYS_epoll_pwait","SYS_epoll_pwait2","SYS_epoll_wait","SYS_epoll_wait_old","SYS_eventfd","SYS_eventfd2","SYS_execve","SYS_execveat","SYS_exit","SYS_exit_group","SYS_faccessat","SYS_faccessat2","SYS_fadvise64","SYS_fallocate","SYS_fanotify_init","SYS_fanotify_mark","SYS_fchdir","SYS_fchmod","SYS_fchmodat","SYS_fchown","SYS_fchownat","SYS_fcntl","SYS_fdatasync","SYS_fgetxattr","SYS_finit_module","SYS_flistxattr","SYS_flock","SYS_fork","SYS_fremovexattr","SYS_fsconfig","SYS_fsetxattr","SYS_fsmount","SYS_fsopen","SYS_fspick","SYS_fstat","SYS_fstatfs","SYS_fsync","SYS_ftruncate","SYS_futex","SYS_futex_waitv","SYS_futimesat","SYS_get_kernel_syms","SYS_get_mempolicy","SYS_get_robust_list","SYS_get_thread_area","SYS_getcpu","SYS_getcwd","SYS_getdents","SYS_getdents64","SYS_getegid","SYS_geteuid","SYS_getgid","SYS_getgroups","SYS_getitimer","SYS_getpeername","SYS_getpgid","SYS_getpgrp","SYS_getpid","SYS_getpmsg","SYS_getppid","SYS_getpriority","SYS_getrandom","SYS_getresgid","SYS_getresuid","SYS_getrlimit","SYS_getrusage","SYS_getsid","SYS_getsockname","SYS_getsockopt","SYS_gettid","SYS_gettimeofday","SYS_getuid","SYS_getxattr","SYS_init_module","SYS_inotify_add_watch","SYS_inotify_init","SYS_inotify_init1","SYS_inotify_rm_watch","SYS_io_cancel","SYS_io_destroy","SYS_io_getevents","SYS_io_setup","SYS_io_submit","SYS_io_uring_enter","SYS_io_uring_register","SYS_io_uring_setup","SYS_ioctl","SYS_ioperm","SYS_iopl","SYS_ioprio_get","SYS_ioprio_set","SYS_kcmp","SYS_kexec_file_load","SYS_kexec_load","SYS_keyctl","SYS_kill","SYS_landlock_add_rule","SYS_landlock_create_ruleset","SYS_landlock_restrict_self","SYS_lchown","SYS_lgetxattr","SYS_link","SYS_linkat","SYS_listen","SYS_listxattr","SYS_llistxattr","SYS_lookup_dcookie","SYS_lremovexattr","SYS_lseek","SYS_lsetxattr","SYS_lstat","SYS_madvise","SYS_mbind","SYS_membarrier","SYS_memfd_create","SYS_memfd_secret","SYS_migrate_pages","SYS_mincore","SYS_mkdir","SYS_mkdirat","SYS_mknod","SYS_mknodat","SYS_mlock","SYS_mlock2","SYS_mlockall","SYS_mmap","SYS_modify_ldt","SYS_mount","SYS_mount_setattr","SYS_move_mount","SYS_move_pages","SYS_mprotect","SYS_mq_getsetattr","SYS_mq_notify","SYS_mq_open","SYS_mq_timedreceive","SYS_mq_timedsend","SYS_mq_unlink","SYS_mremap","SYS_msgctl","SYS_msgget","SYS_msgrcv","SYS_msgsnd","SYS_msync","SYS_munlock","SYS_munlockall","SYS_munmap","SYS_name_to_handle_at","SYS_nanosleep","SYS_newfstatat","SYS_nfsservctl","SYS_open","SYS_open_by_handle_at","SYS_open_tree","SYS_openat","SYS_openat2","SYS_pause","SYS_perf_event_open","SYS_personality","SYS_pidfd_getfd","SYS_pidfd_open","SYS_pidfd_send_signal","SYS_pipe","SYS_pipe2","SYS_pivot_root","SYS_pkey_alloc","SYS_pkey_free","SYS_pkey_mprotect","SYS_poll","SYS_ppoll","SYS_prctl","SYS_pread64","SYS_preadv","SYS_preadv2","SYS_prlimit64","SYS_process_madvise","SYS_process_mrelease","SYS_process_vm_readv","SYS_process_vm_writev","SYS_pselect6","SYS_ptrace","SYS_putpmsg","SYS_pwrite64","SYS_pwritev","SYS_pwritev2","SYS_query_module","SYS_quotactl","SYS_quotactl_fd","SYS_read","SYS_readahead","SYS_readlink","SYS_readlinkat","SYS_readv","SYS_reboot","SYS_recvfrom","SYS_recvmmsg","SYS_recvmsg","SYS_remap_file_pages","SYS_removexattr","SYS_rename","SYS_renameat","SYS_renameat2","SYS_request_key","SYS_restart_syscall","SYS_rmdir","SYS_rseq","SYS_rt_sigaction","SYS_rt_sigpending","SYS_rt_sigprocmask","SYS_rt_sigqueueinfo","SYS_rt_sigreturn","SYS_rt_sigsuspend","SYS_rt_sigtimedwait","SYS_rt_tgsigqueueinfo","SYS_sched_get_priority_max","SYS_sched_get_priority_min","SYS_sched_getaffinity","SYS_sched_getattr","SYS_sched_getparam","SYS_sched_getscheduler","SYS_sched_rr_get_interval","SYS_sched_setaffinity","SYS_sched_setattr","SYS_sched_setparam","SYS_sched_setscheduler","SYS_sched_yield","SYS_seccomp","SYS_security","SYS_select","SYS_semctl","SYS_semget","SYS_semop","SYS_semtimedop","SYS_sendfile","SYS_sendmmsg","SYS_sendmsg","SYS_sendto","SYS_set_mempolicy","SYS_set_mempolicy_home_node","SYS_set_robust_list","SYS_set_thread_area","SYS_set_tid_address","SYS_setdomainname","SYS_setfsgid","SYS_setfsuid","SYS_setgid","SYS_setgroups","SYS_sethostname","SYS_setitimer","SYS_setns","SYS_setpgid","SYS_setpriority","SYS_setregid","SYS_setresgid","SYS_setresuid","SYS_setreuid","SYS_setrlimit","SYS_setsid","SYS_setsockopt","SYS_settimeofday","SYS_setuid","SYS_setxattr","SYS_shmat","SYS_shmctl","SYS_shmdt","SYS_shmget","SYS_shutdown","SYS_sigaltstack","SYS_signalfd","SYS_signalfd4","SYS_socket","SYS_socketpair","SYS_splice","SYS_stat","SYS_statfs","SYS_statx","SYS_swapoff","SYS_swapon","SYS_symlink","SYS_symlinkat","SYS_sync","SYS_sync_file_range","SYS_syncfs","SYS_sysfs","SYS_sysinfo","SYS_syslog","SYS_tee","SYS_tgkill","SYS_time","SYS_timer_create","SYS_timer_delete","SYS_timer_getoverrun","SYS_timer_gettime","SYS_timer_settime","SYS_timerfd_create","SYS_timerfd_gettime","SYS_timerfd_settime","SYS_times","SYS_tkill","SYS_truncate","SYS_tuxcall","SYS_umask","SYS_umount2","SYS_uname","SYS_unlink","SYS_unlinkat","SYS_unshare","SYS_uselib","SYS_userfaultfd","SYS_ustat","SYS_utime","SYS_utimensat","SYS_utimes","SYS_vfork","SYS_vhangup","SYS_vmsplice","SYS_vserver","SYS_wait4","SYS_waitid","SYS_write","SYS_writev","S_IEXEC","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IREAD","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWRITE","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","TAB0","TAB1","TAB2","TAB3","TABDLY","TCA_CHAIN","TCA_DUMP_INVISIBLE","TCA_FCNT","TCA_HW_OFFLOAD","TCA_KIND","TCA_OPTIONS","TCA_PAD","TCA_RATE","TCA_STAB","TCA_STATS","TCA_STATS2","TCA_UNSPEC","TCA_XSTATS","TCFLSH","TCGETA","TCGETS","TCGETS2","TCGETX","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCP_CC_INFO","TCP_CM_INQ","TCP_CONGESTION","TCP_COOKIE_TRANSACTIONS","TCP_CORK","TCP_DEFER_ACCEPT","TCP_FASTOPEN","TCP_FASTOPEN_CONNECT","TCP_FASTOPEN_KEY","TCP_FASTOPEN_NO_COOKIE","TCP_INFO","TCP_INQ","TCP_KEEPCNT","TCP_KEEPIDLE","TCP_KEEPINTVL","TCP_LINGER2","TCP_MAXSEG","TCP_MD5SIG","TCP_MD5SIG_EXT","TCP_MD5SIG_MAXKEYLEN","TCP_NODELAY","TCP_NOTSENT_LOWAT","TCP_QUEUE_SEQ","TCP_QUICKACK","TCP_REPAIR","TCP_REPAIR_OPTIONS","TCP_REPAIR_QUEUE","TCP_REPAIR_WINDOW","TCP_SAVED_SYN","TCP_SAVE_SYN","TCP_SYNCNT","TCP_THIN_DUPACK","TCP_THIN_LINEAR_TIMEOUTS","TCP_TIMESTAMP","TCP_ULP","TCP_USER_TIMEOUT","TCP_WINDOW_CLAMP","TCP_ZEROCOPY_RECEIVE","TCSADRAIN","TCSAFLUSH","TCSANOW","TCSBRK","TCSBRKP","TCSETA","TCSETAF","TCSETAW","TCSETS","TCSETS2","TCSETSF","TCSETSF2","TCSETSW","TCSETSW2","TCSETX","TCSETXF","TCSETXW","TCXONC","TFD_CLOEXEC","TFD_NONBLOCK","TFD_TIMER_ABSTIME","TFD_TIMER_CANCEL_ON_SET","THOUSEP","TIMER_ABSTIME","TIME_BAD","TIME_DEL","TIME_ERROR","TIME_INS","TIME_OK","TIME_OOP","TIME_WAIT","TIOCCBRK","TIOCCONS","TIOCEXCL","TIOCGDEV","TIOCGETD","TIOCGEXCL","TIOCGICOUNT","TIOCGLCKTRMIOS","TIOCGPGRP","TIOCGPKT","TIOCGPTLCK","TIOCGPTN","TIOCGPTPEER","TIOCGRS485","TIOCGSERIAL","TIOCGSID","TIOCGSOFTCAR","TIOCGWINSZ","TIOCINQ","TIOCLINUX","TIOCMBIC","TIOCMBIS","TIOCMGET","TIOCMIWAIT","TIOCMSET","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCSBRK","TIOCSCTTY","TIOCSERCONFIG","TIOCSERGETLSR","TIOCSERGETMULTI","TIOCSERGSTRUCT","TIOCSERGWILD","TIOCSERSETMULTI","TIOCSERSWILD","TIOCSETD","TIOCSIG","TIOCSLCKTRMIOS","TIOCSPGRP","TIOCSPTLCK","TIOCSRS485","TIOCSSERIAL","TIOCSSOFTCAR","TIOCSTI","TIOCSWINSZ","TIOCVHANGUP","TLS_GET_RECORD_TYPE","TMPFS_MAGIC","TMP_MAX","TOSTOP","TRACEFS_MAGIC","TUN_FLT_ALLMULTI","TUN_F_CSUM","TUN_F_TSO4","TUN_F_TSO6","TUN_F_TSO_ECN","TUN_F_UFO","TUN_PKT_STRIP","TUN_READQ_SIZE","TUN_TAP_DEV","TUN_TUN_DEV","TUN_TX_TIMESTAMP","TUN_TYPE_MASK","T_FMT","T_FMT_AMPM","UDF_SUPER_MAGIC","UDP_CORK","UDP_ENCAP","UDP_GRO","UDP_NO_CHECK6_RX","UDP_NO_CHECK6_TX","UDP_SEGMENT","UINPUT_MAX_NAME_SIZE","UINPUT_VERSION","UIO_MAXIOV","UMOUNT_NOFOLLOW","UNAME26","USBDEVICE_SUPER_MAGIC","USER_PROCESS","USRQUOTA","UTIME_NOW","UTIME_OMIT","VDISCARD","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMADDR_CID_ANY","VMADDR_CID_HOST","VMADDR_CID_HYPERVISOR","VMADDR_CID_LOCAL","VMADDR_CID_RESERVED","VMADDR_PORT_ANY","VMIN","VQUIT","VREPRINT","VSTART","VSTOP","VSUSP","VSWTC","VT0","VT1","VTDLY","VTIME","VWERASE","WCONTINUED","WCOREDUMP","WEXITED","WEXITSTATUS","WHOLE_SECONDS","WIFCONTINUED","WIFEXITED","WIFSIGNALED","WIFSTOPPED","WNOHANG","WNOWAIT","WSTOPPED","WSTOPSIG","WTERMSIG","WUNTRACED","W_EXITCODE","W_OK","W_STOPCODE","XATTR_CREATE","XATTR_REPLACE","XENFS_SUPER_MAGIC","XFS_SUPER_MAGIC","XTABS","X_OK","YESEXPR","YESSTR","_IOFBF","_IOLBF","_IONBF","_PC_2_SYMLINKS","_PC_ALLOC_SIZE_MIN","_PC_ASYNC_IO","_PC_CHOWN_RESTRICTED","_PC_FILESIZEBITS","_PC_LINK_MAX","_PC_MAX_CANON","_PC_MAX_INPUT","_PC_NAME_MAX","_PC_NO_TRUNC","_PC_PATH_MAX","_PC_PIPE_BUF","_PC_PRIO_IO","_PC_REC_INCR_XFER_SIZE","_PC_REC_MAX_XFER_SIZE","_PC_REC_MIN_XFER_SIZE","_PC_REC_XFER_ALIGN","_PC_SOCK_MAXBUF","_PC_SYMLINK_MAX","_PC_SYNC_IO","_PC_VDISABLE","_POSIX_VDISABLE","_SC_2_CHAR_TERM","_SC_2_C_BIND","_SC_2_C_DEV","_SC_2_C_VERSION","_SC_2_FORT_DEV","_SC_2_FORT_RUN","_SC_2_LOCALEDEF","_SC_2_PBS","_SC_2_PBS_ACCOUNTING","_SC_2_PBS_CHECKPOINT","_SC_2_PBS_LOCATE","_SC_2_PBS_MESSAGE","_SC_2_PBS_TRACK","_SC_2_SW_DEV","_SC_2_UPE","_SC_2_VERSION","_SC_ADVISORY_INFO","_SC_AIO_LISTIO_MAX","_SC_AIO_MAX","_SC_AIO_PRIO_DELTA_MAX","_SC_ARG_MAX","_SC_ASYNCHRONOUS_IO","_SC_ATEXIT_MAX","_SC_AVPHYS_PAGES","_SC_BARRIERS","_SC_BASE","_SC_BC_BASE_MAX","_SC_BC_DIM_MAX","_SC_BC_SCALE_MAX","_SC_BC_STRING_MAX","_SC_CHARCLASS_NAME_MAX","_SC_CHAR_BIT","_SC_CHAR_MAX","_SC_CHAR_MIN","_SC_CHILD_MAX","_SC_CLK_TCK","_SC_CLOCK_SELECTION","_SC_COLL_WEIGHTS_MAX","_SC_CPUTIME","_SC_C_LANG_SUPPORT","_SC_C_LANG_SUPPORT_R","_SC_DELAYTIMER_MAX","_SC_DEVICE_IO","_SC_DEVICE_SPECIFIC","_SC_DEVICE_SPECIFIC_R","_SC_EQUIV_CLASS_MAX","_SC_EXPR_NEST_MAX","_SC_FD_MGMT","_SC_FIFO","_SC_FILE_ATTRIBUTES","_SC_FILE_LOCKING","_SC_FILE_SYSTEM","_SC_FSYNC","_SC_GETGR_R_SIZE_MAX","_SC_GETPW_R_SIZE_MAX","_SC_HOST_NAME_MAX","_SC_INT_MAX","_SC_INT_MIN","_SC_IOV_MAX","_SC_IPV6","_SC_JOB_CONTROL","_SC_LEVEL1_DCACHE_ASSOC","_SC_LEVEL1_DCACHE_LINESIZE","_SC_LEVEL1_DCACHE_SIZE","_SC_LEVEL1_ICACHE_ASSOC","_SC_LEVEL1_ICACHE_LINESIZE","_SC_LEVEL1_ICACHE_SIZE","_SC_LEVEL2_CACHE_ASSOC","_SC_LEVEL2_CACHE_LINESIZE","_SC_LEVEL2_CACHE_SIZE","_SC_LEVEL3_CACHE_ASSOC","_SC_LEVEL3_CACHE_LINESIZE","_SC_LEVEL3_CACHE_SIZE","_SC_LEVEL4_CACHE_ASSOC","_SC_LEVEL4_CACHE_LINESIZE","_SC_LEVEL4_CACHE_SIZE","_SC_LINE_MAX","_SC_LOGIN_NAME_MAX","_SC_LONG_BIT","_SC_MAPPED_FILES","_SC_MB_LEN_MAX","_SC_MEMLOCK","_SC_MEMLOCK_RANGE","_SC_MEMORY_PROTECTION","_SC_MESSAGE_PASSING","_SC_MONOTONIC_CLOCK","_SC_MQ_OPEN_MAX","_SC_MQ_PRIO_MAX","_SC_MULTI_PROCESS","_SC_NETWORKING","_SC_NGROUPS_MAX","_SC_NL_ARGMAX","_SC_NL_LANGMAX","_SC_NL_MSGMAX","_SC_NL_NMAX","_SC_NL_SETMAX","_SC_NL_TEXTMAX","_SC_NPROCESSORS_CONF","_SC_NPROCESSORS_ONLN","_SC_NZERO","_SC_OPEN_MAX","_SC_PAGESIZE","_SC_PAGE_SIZE","_SC_PASS_MAX","_SC_PHYS_PAGES","_SC_PII","_SC_PII_INTERNET","_SC_PII_INTERNET_DGRAM","_SC_PII_INTERNET_STREAM","_SC_PII_OSI","_SC_PII_OSI_CLTS","_SC_PII_OSI_COTS","_SC_PII_OSI_M","_SC_PII_SOCKET","_SC_PII_XTI","_SC_PIPE","_SC_POLL","_SC_PRIORITIZED_IO","_SC_PRIORITY_SCHEDULING","_SC_RAW_SOCKETS","_SC_READER_WRITER_LOCKS","_SC_REALTIME_SIGNALS","_SC_REGEXP","_SC_REGEX_VERSION","_SC_RE_DUP_MAX","_SC_RTSIG_MAX","_SC_SAVED_IDS","_SC_SCHAR_MAX","_SC_SCHAR_MIN","_SC_SELECT","_SC_SEMAPHORES","_SC_SEM_NSEMS_MAX","_SC_SEM_VALUE_MAX","_SC_SHARED_MEMORY_OBJECTS","_SC_SHELL","_SC_SHRT_MAX","_SC_SHRT_MIN","_SC_SIGNALS","_SC_SIGQUEUE_MAX","_SC_SINGLE_PROCESS","_SC_SPAWN","_SC_SPIN_LOCKS","_SC_SPORADIC_SERVER","_SC_SSIZE_MAX","_SC_SS_REPL_MAX","_SC_STREAMS","_SC_STREAM_MAX","_SC_SYMLOOP_MAX","_SC_SYNCHRONIZED_IO","_SC_SYSTEM_DATABASE","_SC_SYSTEM_DATABASE_R","_SC_THREADS","_SC_THREAD_ATTR_STACKADDR","_SC_THREAD_ATTR_STACKSIZE","_SC_THREAD_CPUTIME","_SC_THREAD_DESTRUCTOR_ITERATIONS","_SC_THREAD_KEYS_MAX","_SC_THREAD_PRIORITY_SCHEDULING","_SC_THREAD_PRIO_INHERIT","_SC_THREAD_PRIO_PROTECT","_SC_THREAD_PROCESS_SHARED","_SC_THREAD_ROBUST_PRIO_INHERIT","_SC_THREAD_ROBUST_PRIO_PROTECT","_SC_THREAD_SAFE_FUNCTIONS","_SC_THREAD_SPORADIC_SERVER","_SC_THREAD_STACK_MIN","_SC_THREAD_THREADS_MAX","_SC_TIMEOUTS","_SC_TIMERS","_SC_TIMER_MAX","_SC_TRACE","_SC_TRACE_EVENT_FILTER","_SC_TRACE_EVENT_NAME_MAX","_SC_TRACE_INHERIT","_SC_TRACE_LOG","_SC_TRACE_NAME_MAX","_SC_TRACE_SYS_MAX","_SC_TRACE_USER_EVENT_MAX","_SC_TTY_NAME_MAX","_SC_TYPED_MEMORY_OBJECTS","_SC_TZNAME_MAX","_SC_T_IOV_MAX","_SC_UCHAR_MAX","_SC_UINT_MAX","_SC_UIO_MAXIOV","_SC_ULONG_MAX","_SC_USER_GROUPS","_SC_USER_GROUPS_R","_SC_USHRT_MAX","_SC_V6_ILP32_OFF32","_SC_V6_ILP32_OFFBIG","_SC_V6_LP64_OFF64","_SC_V6_LPBIG_OFFBIG","_SC_V7_ILP32_OFF32","_SC_V7_ILP32_OFFBIG","_SC_V7_LP64_OFF64","_SC_V7_LPBIG_OFFBIG","_SC_VERSION","_SC_WORD_BIT","_SC_XBS5_ILP32_OFF32","_SC_XBS5_ILP32_OFFBIG","_SC_XBS5_LP64_OFF64","_SC_XBS5_LPBIG_OFFBIG","_SC_XOPEN_CRYPT","_SC_XOPEN_ENH_I18N","_SC_XOPEN_LEGACY","_SC_XOPEN_REALTIME","_SC_XOPEN_REALTIME_THREADS","_SC_XOPEN_SHM","_SC_XOPEN_STREAMS","_SC_XOPEN_UNIX","_SC_XOPEN_VERSION","_SC_XOPEN_XCU_VERSION","_SC_XOPEN_XPG2","_SC_XOPEN_XPG3","_SC_XOPEN_XPG4","__NFT_REG_MAX","__SIZEOF_PTHREAD_BARRIERATTR_T","__SIZEOF_PTHREAD_BARRIER_T","__SIZEOF_PTHREAD_CONDATTR_T","__SIZEOF_PTHREAD_COND_T","__SIZEOF_PTHREAD_MUTEXATTR_T","__SIZEOF_PTHREAD_MUTEX_T","__SIZEOF_PTHREAD_RWLOCKATTR_T","__SIZEOF_PTHREAD_RWLOCK_T","__UT_HOSTSIZE","__UT_LINESIZE","__UT_NAMESIZE","__WALL","__WCLONE","__WNOTHREAD","__c_anonymous_ifc_ifcu","__c_anonymous_ifr_ifru","__c_anonymous_ifru_map","__c_anonymous_ptrace_syscall_info_data","__c_anonymous_ptrace_syscall_info_entry","__c_anonymous_ptrace_syscall_info_exit","__c_anonymous_ptrace_syscall_info_seccomp","__c_anonymous_sockaddr_can_can_addr","__c_anonymous_sockaddr_can_j1939","__c_anonymous_sockaddr_can_tp","__errno_location","__exit_status","__fsword_t","__glibc_reserved1","__glibc_reserved2","__glibc_reserved3","__glibc_reserved4","__key","__priority_which_t","__rlimit_resource_t","__s16","__s32","__s64","__seq","__statx_timestamp_pad1","__syscall_ulong_t","__timeval","__u16","__u32","__u64","__u8","__unused1","__unused10","__unused11","__unused2","__unused3","__unused4","__unused5","__unused6","__unused7","__unused8","__unused9","_exit","_f","_libc_fpstate","_libc_fpxreg","_libc_xmmreg","_st","_xmm","abort","abs","absflat","absfuzz","absinfo","absmax","absmin","accept","accept4","access","acct","actime","addmntent","addr","addr","addr_mask","addrinfo","adjtime","adjtimex","af","af_alg_iv","ai_addr","ai_addrlen","ai_canonname","ai_family","ai_flags","ai_next","ai_protocol","ai_socktype","aio_buf","aio_cancel","aio_error","aio_fildes","aio_fsync","aio_lio_opcode","aio_nbytes","aio_offset","aio_read","aio_reqprio","aio_return","aio_sigevent","aio_suspend","aio_write","aiocb","alarm","ar_hln","ar_hrd","ar_op","ar_pln","ar_pro","arch","arch","arena","arena","args","args","args","arp_dev","arp_flags","arp_flags","arp_ha","arp_ha","arp_netmask","arp_netmask","arp_pa","arp_pa","arpd_request","arphdr","arpreq","arpreq_old","asctime_r","atexit","atof","atoi","atol","atoll","attack_length","attack_level","auth_keynumber","backtrace","base_addr","bind","blkcnt64_t","blkcnt_t","blksize_t","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brk","bsearch","bufferram","bustype","button","c_cc","c_cc","c_cflag","c_cflag","c_char","c_double","c_float","c_iflag","c_iflag","c_int","c_ispeed","c_ispeed","c_lflag","c_lflag","c_line","c_line","c_long","c_longlong","c_oflag","c_oflag","c_ospeed","c_ospeed","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","calcnt","calloc","can_addr","can_dlc","can_err_mask_t","can_family","can_filter","can_frame","can_id","can_id","can_id","can_ifindex","can_mask","canfd_frame","canid_t","canxl_frame","cc_t","center","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","cgid","cgroup","ch_addralign","ch_addralign","ch_reserved","ch_size","ch_size","ch_type","ch_type","chdir","child_tid","chmod","chown","chroot","clearenv","clearerr","clock_adjtime","clock_getcpuclockid","clock_getres","clock_gettime","clock_nanosleep","clock_settime","clock_t","clockid","clockid_t","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_args","close","close_range","closedir","closelog","cmd","cmsg_len","cmsg_level","cmsg_type","cmsghdr","code","code","code","codes_ptr","codes_size","connect","constant","cookie","copy_file_range","cpu_set_t","creat","creat64","cs","ctermid","ctime_r","cuid","currency_symbol","custom_data","custom_len","cwd","cwd","d_ino","d_ino","d_name","d_name","d_off","d_off","d_reclen","d_reclen","d_type","d_type","daemon","data","data","data","deadband","decimal_point","delay","dest_offset","dev","dev_t","difftime","direction","dirent","dirent64","dirfd","dirname","dl_iterate_phdr","dl_phdr_info","dladdr","dladdr1","dlclose","dlerror","dli_fbase","dli_fname","dli_saddr","dli_sname","dlinfo","dlmopen","dlopen","dlpi_addr","dlpi_adds","dlpi_name","dlpi_phdr","dlpi_phnum","dlpi_subs","dlpi_tls_data","dlpi_tls_modid","dlsym","dma","domainname","dqb_bhardlimit","dqb_bsoftlimit","dqb_btime","dqb_curinodes","dqb_curspace","dqb_ihardlimit","dqb_isoftlimit","dqb_itime","dqb_valid","dqblk","drand48","ds","dup","dup2","dup3","duplocale","e_ehsize","e_ehsize","e_entry","e_entry","e_exit","e_flags","e_flags","e_ident","e_ident","e_machine","e_machine","e_phentsize","e_phentsize","e_phnum","e_phnum","e_phoff","e_phoff","e_shentsize","e_shentsize","e_shnum","e_shnum","e_shoff","e_shoff","e_shstrndx","e_shstrndx","e_termination","e_type","e_type","e_version","e_version","eaccess","ee_code","ee_data","ee_errno","ee_info","ee_origin","ee_pad","ee_type","effect","effect_id","eflags","element","end_level","endgrent","endmntent","endpwent","endservent","endspent","endutxent","entry","envelope","envelope","envelope","epoll_create","epoll_create1","epoll_ctl","epoll_event","epoll_pwait","epoll_wait","erand48","errcnt","error","es","esterror","esterror","euidaccess","event_len","eventfd","events","events","execl","execle","execlp","execv","execve","execveat","execvp","execvpe","exit","exit","exit_signal","explicit_bzero","exponent","f_bavail","f_bavail","f_bavail","f_bavail","f_bfree","f_bfree","f_bfree","f_bfree","f_blocks","f_blocks","f_blocks","f_blocks","f_bsize","f_bsize","f_bsize","f_bsize","f_favail","f_favail","f_ffree","f_ffree","f_ffree","f_ffree","f_files","f_files","f_files","f_files","f_flag","f_flag","f_flags","f_frsize","f_frsize","f_frsize","f_frsize","f_fsid","f_fsid","f_fsid","f_fsid","f_namelen","f_namelen","f_namemax","f_namemax","f_spare","f_type","f_type","faccessat","fade_length","fade_level","fallocate","fallocate64","fanotify_event_metadata","fanotify_init","fanotify_mark","fanotify_response","fchdir","fchmod","fchmodat","fchown","fchownat","fclose","fcntl","fd","fd","fd","fd_set","fdatasync","fdopen","fdopendir","feof","ferror","fexecve","ff_condition_effect","ff_constant_effect","ff_effect","ff_effects_max","ff_effects_max","ff_envelope","ff_periodic_effect","ff_ramp_effect","ff_replay","ff_rumble_effect","ff_trigger","fflush","fgetc","fgetgrent_r","fgetpos","fgetpos64","fgetpwent_r","fgets","fgetspent_r","fgetxattr","file_clone_range","fileno","filter","flag","flags","flags","flags","flags","flags","flags","flags","flags","flags","flat","flistxattr","flock","flock","flock64","fmemopen","fmt","fop","fop","fopen","fopen64","fordblks","fordblks","fork","forkpty","fpathconf","fpos64_t","fpos_t","fpregs","fprintf","fputc","fputs","frac_digits","fread","fread_unlocked","free","freeaddrinfo","freehigh","freeifaddrs","freelocale","freeram","freeswap","fremovexattr","freopen","freopen64","freq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fs","fs_base","fsblkcnt_t","fscanf","fseek","fseeko","fseeko64","fsetpos","fsetpos64","fsetxattr","fsfilcnt_t","fsid_t","fsmblks","fsmblks","fstat","fstat64","fstatat","fstatat64","fstatfs","fstatfs64","fstatvfs","fstatvfs64","fsync","ftell","ftello","ftello64","ftok","ftruncate","ftruncate64","ftw","ftw","futimens","futimes","fuzz","fwrite","gai_strerror","genlmsghdr","getaddrinfo","getauxval","getchar","getchar_unlocked","getcontext","getcwd","getdomainname","getdtablesize","getegid","getentropy","getenv","geteuid","getgid","getgrent","getgrent_r","getgrgid","getgrgid_r","getgrnam","getgrnam_r","getgrouplist","getgroups","gethostid","gethostname","getifaddrs","getline","getloadavg","getlogin","getmntent","getmntent_r","getnameinfo","getopt","getopt_long","getpeername","getpgid","getpgrp","getpid","getppid","getpriority","getprotobyname","getprotobynumber","getpt","getpwent","getpwent_r","getpwnam","getpwnam_r","getpwuid","getpwuid_r","getrandom","getresgid","getresuid","getrlimit","getrlimit64","getrusage","getservbyname","getservbyport","getservent","getsid","getsockname","getsockopt","getspent","getspent_r","getspnam","getspnam_r","gettid","gettimeofday","getuid","getutxent","getutxid","getutxline","getxattr","gid","gid","gid_t","gl_flags","gl_flags","gl_offs","gl_offs","gl_pathc","gl_pathc","gl_pathv","gl_pathv","glob","glob64","glob64_t","glob_t","globfree","globfree64","gmtime","gmtime_r","gnu_basename","gnu_get_libc_release","gnu_get_libc_version","gr_gid","gr_mem","gr_name","gr_passwd","grantpt","greg_t","gregs","group","group","grouping","gs","gs_base","h_addr_list","h_addrtype","h_aliases","h_length","h_name","ha","has_arg","hasmntopt","hblkhd","hblkhd","hblks","hblks","hostent","hstrerror","hwtstamp_config","i387","iconv","iconv_close","iconv_open","iconv_t","id","id","id","id_t","idtype_t","if_freenameindex","if_index","if_indextoname","if_name","if_nameindex","if_nameindex","if_nametoindex","ifa_addr","ifa_data","ifa_flags","ifa_ifu","ifa_name","ifa_netmask","ifa_next","ifaddrs","ifc_ifcu","ifc_len","ifconf","ifcu_buf","ifcu_req","ifr6_addr","ifr6_ifindex","ifr6_prefixlen","ifr_ifru","ifr_name","ifreq","ifru_addr","ifru_broadaddr","ifru_data","ifru_dstaddr","ifru_flags","ifru_hwaddr","ifru_ifindex","ifru_map","ifru_metric","ifru_mtu","ifru_netmask","ifru_newname","ifru_slave","imr_address","imr_ifindex","imr_interface","imr_interface","imr_multiaddr","imr_multiaddr","imr_multiaddr","imr_sourceaddr","in6_addr","in6_ifreq","in6_pktinfo","in6_rtmsg","in_addr","in_addr_t","in_pktinfo","in_port_t","index","initgroups","ino64_t","ino_t","inotify_add_watch","inotify_event","inotify_init","inotify_init1","inotify_rm_watch","input_absinfo","input_event","input_id","input_keymap_entry","input_mask","instruction_pointer","instruction_pointer","int16_t","int32_t","int64_t","int8_t","int_curr_symbol","int_frac_digits","int_n_cs_precedes","int_n_sep_by_space","int_n_sign_posn","int_p_cs_precedes","int_p_sep_by_space","int_p_sign_posn","interval","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","intptr_t","ioctl","ioperm","iopl","iov_base","iov_len","iovec","ip","ip_mreq","ip_mreq_source","ip_mreqn","ipc_perm","ipi6_addr","ipi6_ifindex","ipi_addr","ipi_ifindex","ipi_spec_dst","ipv6_mreq","ipv6mr_interface","ipv6mr_multiaddr","irq","is_error","isalnum","isalpha","isatty","isblank","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","it_interval","it_interval","it_value","it_value","itimerspec","itimerval","iv","ivlen","j1939","j1939_filter","jf","jitcnt","jitter","jrand48","jt","k","keepcost","keepcost","key_t","keycode","kill","killpg","l_len","l_len","l_linger","l_onoff","l_pid","l_pid","l_start","l_start","l_type","l_type","l_whence","l_whence","labs","lchown","lcong48","lconv","left_coeff","left_saturation","len","len","len","len","len","length","level","lgetxattr","linger","link","linkat","lio_listio","listen","listxattr","llistxattr","loads","locale_t","localeconv","localtime","localtime_r","lockf","loff_t","login_tty","lrand48","lremovexattr","lseek","lseek64","lsetxattr","lstat","lstat64","lutimes","machine","madvise","magic","magnitude","major","makecontext","makedev","mallinfo","mallinfo","mallinfo2","mallinfo2","malloc","malloc_info","malloc_trim","malloc_usable_size","mallopt","mask","mask","max_align_t","maxerror","maxerror","maximum","mcontext_t","mem_end","mem_start","mem_unit","memalign","memchr","memcmp","memcpy","memfd_create","memmem","memmove","memrchr","memset","metadata_len","mincore","minimum","minor","mkdir","mkdirat","mkdtemp","mkfifo","mkfifoat","mknod","mknodat","mkostemp","mkostemps","mkstemp","mkstemps","mktime","mlock","mlock2","mlockall","mmap","mmap64","mmsghdr","mnt_dir","mnt_freq","mnt_fsname","mnt_opts","mnt_passno","mnt_type","mntent","mode","mode","mode_t","modes","modtime","mon_decimal_point","mon_grouping","mon_thousands_sep","mount","mprotect","mq_attr","mq_close","mq_curmsgs","mq_flags","mq_getattr","mq_maxmsg","mq_msgsize","mq_open","mq_receive","mq_send","mq_setattr","mq_timedreceive","mq_timedsend","mq_unlink","mqd_t","mr_address","mr_alen","mr_ifindex","mr_type","mrand48","mremap","msg","msg_control","msg_controllen","msg_ctime","msg_flags","msg_hdr","msg_iov","msg_iovlen","msg_len","msg_lrpid","msg_lspid","msg_name","msg_namelen","msg_perm","msg_qbytes","msg_qnum","msg_rtime","msg_stime","msgctl","msgget","msghdr","msginfo","msglen_t","msgmap","msgmax","msgmnb","msgmni","msgpool","msgqnum_t","msgrcv","msgseg","msgsnd","msgssz","msgtql","msqid_ds","msync","munlock","munlockall","munmap","mxcr_mask","mxcr_mask","mxcsr","mxcsr","n_cs_precedes","n_sep_by_space","n_sign_posn","name","name","name","name","name","name_mask","name_t","nanosleep","negative_sign","newlocale","nfds_t","nice","nl_family","nl_groups","nl_item","nl_langinfo","nl_langinfo_l","nl_mmap_hdr","nl_mmap_req","nl_pid","nl_pktinfo","nla_len","nla_type","nlattr","nlink_t","nlmsg_flags","nlmsg_len","nlmsg_pid","nlmsg_seq","nlmsg_type","nlmsgerr","nlmsghdr","nm_block_nr","nm_block_size","nm_frame_nr","nm_frame_size","nm_gid","nm_group","nm_len","nm_pid","nm_status","nm_uid","nodename","nr","nr","nr","nr","nrand48","ntp_adjtime","ntp_gettime","ntptimeval","nxt_assoc_id","nxt_flags","nxt_length","nxt_ppid","nxt_sid","off","off64_t","off_t","offset","offset","old","op","open","open64","open_how","open_memstream","open_wmemstream","openat","openat64","opendir","openlog","openpty","option","ordblks","ordblks","orig_rax","p_aliases","p_align","p_align","p_cs_precedes","p_filesz","p_filesz","p_flags","p_flags","p_memsz","p_memsz","p_name","p_offset","p_offset","p_paddr","p_paddr","p_proto","p_sep_by_space","p_sign_posn","p_type","p_type","p_vaddr","p_vaddr","packet_mreq","pad","pad","pad","parent_tid","passwd","pathconf","pause","pclose","period","perror","personality","pgn","pgn","pgn_mask","pgn_t","phase","pid","pid","pid_t","pidfd","pipe","pipe2","poll","pollfd","popen","port","positive_sign","posix_basename","posix_fadvise","posix_fadvise64","posix_fallocate","posix_fallocate64","posix_madvise","posix_memalign","posix_openpt","posix_spawn","posix_spawn_file_actions_addchdir_np","posix_spawn_file_actions_addclose","posix_spawn_file_actions_addclosefrom_np","posix_spawn_file_actions_adddup2","posix_spawn_file_actions_addfchdir_np","posix_spawn_file_actions_addopen","posix_spawn_file_actions_addtcsetpgrp_np","posix_spawn_file_actions_destroy","posix_spawn_file_actions_init","posix_spawn_file_actions_t","posix_spawnattr_destroy","posix_spawnattr_getflags","posix_spawnattr_getpgroup","posix_spawnattr_getschedparam","posix_spawnattr_getschedpolicy","posix_spawnattr_getsigdefault","posix_spawnattr_getsigmask","posix_spawnattr_init","posix_spawnattr_setflags","posix_spawnattr_setpgroup","posix_spawnattr_setschedparam","posix_spawnattr_setschedpolicy","posix_spawnattr_setsigdefault","posix_spawnattr_setsigmask","posix_spawnattr_t","posix_spawnp","ppoll","ppsfreq","pr_policy","pr_value","prctl","pread","pread64","preadv","preadv2","preadv64","preadv64v2","precision","printf","prio","priority_t","prlimit","prlimit64","process_vm_readv","process_vm_writev","procs","product","protoent","pselect","pthread_atfork","pthread_attr_destroy","pthread_attr_getaffinity_np","pthread_attr_getguardsize","pthread_attr_getstack","pthread_attr_getstacksize","pthread_attr_init","pthread_attr_setaffinity_np","pthread_attr_setdetachstate","pthread_attr_setguardsize","pthread_attr_setstacksize","pthread_attr_t","pthread_barrier_destroy","pthread_barrier_init","pthread_barrier_t","pthread_barrier_wait","pthread_barrierattr_destroy","pthread_barrierattr_getpshared","pthread_barrierattr_init","pthread_barrierattr_setpshared","pthread_barrierattr_t","pthread_cancel","pthread_cond_broadcast","pthread_cond_destroy","pthread_cond_init","pthread_cond_signal","pthread_cond_t","pthread_cond_timedwait","pthread_cond_wait","pthread_condattr_destroy","pthread_condattr_getclock","pthread_condattr_getpshared","pthread_condattr_init","pthread_condattr_setclock","pthread_condattr_setpshared","pthread_condattr_t","pthread_create","pthread_detach","pthread_exit","pthread_getaffinity_np","pthread_getattr_np","pthread_getcpuclockid","pthread_getname_np","pthread_getschedparam","pthread_getspecific","pthread_join","pthread_key_create","pthread_key_delete","pthread_key_t","pthread_kill","pthread_mutex_consistent","pthread_mutex_destroy","pthread_mutex_init","pthread_mutex_lock","pthread_mutex_t","pthread_mutex_timedlock","pthread_mutex_trylock","pthread_mutex_unlock","pthread_mutexattr_destroy","pthread_mutexattr_getprotocol","pthread_mutexattr_getpshared","pthread_mutexattr_getrobust","pthread_mutexattr_init","pthread_mutexattr_setprotocol","pthread_mutexattr_setpshared","pthread_mutexattr_setrobust","pthread_mutexattr_settype","pthread_mutexattr_t","pthread_once","pthread_once_t","pthread_rwlock_destroy","pthread_rwlock_init","pthread_rwlock_rdlock","pthread_rwlock_t","pthread_rwlock_tryrdlock","pthread_rwlock_trywrlock","pthread_rwlock_unlock","pthread_rwlock_wrlock","pthread_rwlockattr_destroy","pthread_rwlockattr_getkind_np","pthread_rwlockattr_getpshared","pthread_rwlockattr_init","pthread_rwlockattr_setkind_np","pthread_rwlockattr_setpshared","pthread_rwlockattr_t","pthread_self","pthread_setaffinity_np","pthread_setname_np","pthread_setschedparam","pthread_setschedprio","pthread_setspecific","pthread_sigmask","pthread_sigqueue","pthread_spin_destroy","pthread_spin_init","pthread_spin_lock","pthread_spin_trylock","pthread_spin_unlock","pthread_spinlock_t","pthread_t","ptrace","ptrace_peeksiginfo_args","ptrace_rseq_configuration","ptrace_syscall_info","ptrdiff_t","ptsname","ptsname_r","putchar","putchar_unlocked","putenv","putgrent","putpwent","puts","pututxline","pw_dir","pw_gecos","pw_gid","pw_name","pw_passwd","pw_shell","pw_uid","pwrite","pwrite64","pwritev","pwritev2","pwritev64","pwritev64v2","qsort","qsort_r","quotactl","r10","r11","r12","r13","r14","r15","r8","r9","raise","rand","rax","rbp","rbx","rcv_assoc_id","rcv_context","rcv_cumtsn","rcv_flags","rcv_ppid","rcv_sid","rcv_ssn","rcv_tsn","rcx","rdi","rdp","rdp","rdx","read","readahead","readdir","readdir64","readdir64_r","readdir_r","readlink","readlinkat","readv","realloc","reallocarray","realpath","reboot","recv","recvfrom","recvmmsg","recvmsg","regcomp","regerror","regex_t","regexec","regfree","regmatch_t","regoff_t","regs","release","remap_file_pages","remove","removexattr","rename","renameat","renameat2","replay","req","request_id","request_id","res_init","reserved","reserved","resolution","resolve","response","ret_data","retval","retval","revents","rewind","rewinddir","right_coeff","right_saturation","rip","rip","rip","rlim64_t","rlim_cur","rlim_cur","rlim_max","rlim_max","rlim_t","rlimit","rlimit64","rm_eo","rm_so","rmdir","rseq_abi_pointer","rseq_abi_size","rsi","rsp","rt_class","rt_dev","rt_dst","rt_flags","rt_gateway","rt_genmask","rt_irtt","rt_metric","rt_mtu","rt_pad1","rt_pad2","rt_pad3","rt_pad4","rt_tos","rt_window","rtentry","ru_idrss","ru_inblock","ru_isrss","ru_ixrss","ru_majflt","ru_maxrss","ru_minflt","ru_msgrcv","ru_msgsnd","ru_nivcsw","ru_nsignals","ru_nswap","ru_nvcsw","ru_oublock","ru_stime","ru_utime","rusage","rx_filter","rx_id","s6_addr","s_addr","s_aliases","s_name","s_port","s_proto","sa_data","sa_family","sa_family_t","sa_flags","sa_mask","sa_restorer","sa_sigaction","salg_family","salg_feat","salg_mask","salg_name","salg_type","sbrk","scancode","scanf","sched_get_priority_max","sched_get_priority_min","sched_getaffinity","sched_getcpu","sched_getparam","sched_getscheduler","sched_param","sched_priority","sched_rr_get_interval","sched_setaffinity","sched_setparam","sched_setscheduler","sched_yield","sctp_assoc_t","sctp_authinfo","sctp_initmsg","sctp_nxtinfo","sctp_prinfo","sctp_rcvinfo","sctp_sndinfo","sctp_sndrcvinfo","sdt","seccomp","seccomp_data","seccomp_data","seccomp_notif","seccomp_notif_resp","seccomp_notif_sizes","seed48","seekdir","select","sem_close","sem_ctime","sem_destroy","sem_flg","sem_getvalue","sem_init","sem_nsems","sem_num","sem_op","sem_open","sem_otime","sem_perm","sem_post","sem_t","sem_timedwait","sem_trywait","sem_unlink","sem_wait","semaem","sembuf","semctl","semget","semid_ds","seminfo","semmap","semmni","semmns","semmnu","semmsl","semop","semopm","semume","semusz","semvmx","send","sendfile","sendfile64","sendmmsg","sendmsg","sendto","servent","set_tid","set_tid_size","setbuf","setcontext","setdomainname","setegid","setenv","seteuid","setfsgid","setfsuid","setgid","setgrent","setgroups","sethostid","sethostname","setlocale","setlogmask","setmntent","setns","setpgid","setpriority","setpwent","setregid","setresgid","setresuid","setreuid","setrlimit","setrlimit64","setservent","setsid","setsockopt","setspent","settimeofday","setuid","setutxent","setvbuf","setxattr","sgetspent_r","sh_addr","sh_addr","sh_addralign","sh_addralign","sh_entsize","sh_entsize","sh_flags","sh_flags","sh_info","sh_info","sh_link","sh_link","sh_name","sh_name","sh_offset","sh_offset","sh_size","sh_size","sh_type","sh_type","sharedram","shift","shm_atime","shm_cpid","shm_ctime","shm_dtime","shm_lpid","shm_nattch","shm_open","shm_perm","shm_segsz","shm_unlink","shmat","shmatt_t","shmctl","shmdt","shmget","shmid_ds","shutdown","si_addr","si_code","si_errno","si_pid","si_signo","si_status","si_stime","si_uid","si_utime","si_value","sigaction","sigaction","sigaddset","sigaltstack","sigdelset","sigemptyset","sigev_notify","sigev_notify_thread_id","sigev_signo","sigev_value","sigevent","sigfillset","sighandler_t","siginfo_t","sigismember","signal","signal","signalfd","signalfd_siginfo","signature","significand","sigpending","sigprocmask","sigset_t","sigsuspend","sigtimedwait","sigval","sigwait","sigwaitinfo","sin6_addr","sin6_family","sin6_flowinfo","sin6_port","sin6_scope_id","sin_addr","sin_family","sin_port","sin_zero","sinfo_assoc_id","sinfo_context","sinfo_cumtsn","sinfo_flags","sinfo_ppid","sinfo_ssn","sinfo_stream","sinfo_timetolive","sinfo_tsn","sinit_max_attempts","sinit_max_init_timeo","sinit_max_instreams","sinit_num_ostreams","sival_ptr","size_t","sleep","sll_addr","sll_family","sll_halen","sll_hatype","sll_ifindex","sll_pkttype","sll_protocol","smblks","smblks","snd_assoc_id","snd_context","snd_flags","snd_ppid","snd_sid","snprintf","sock_extended_err","sock_filter","sock_fprog","sock_txtime","sockaddr","sockaddr_alg","sockaddr_can","sockaddr_in","sockaddr_in6","sockaddr_ll","sockaddr_nl","sockaddr_storage","sockaddr_un","sockaddr_vm","socket","socketpair","socklen_t","sp_expire","sp_flag","sp_inact","sp_lstchg","sp_max","sp_min","sp_namp","sp_pwdp","sp_warn","speed_t","splice","sprintf","spwd","srand","srand48","src_fd","src_length","src_offset","ss","ss_family","ss_flags","ss_size","ss_sp","sscanf","ssi_addr","ssi_addr_lsb","ssi_arch","ssi_band","ssi_call_addr","ssi_code","ssi_errno","ssi_fd","ssi_int","ssi_overrun","ssi_pid","ssi_ptr","ssi_signo","ssi_status","ssi_stime","ssi_syscall","ssi_tid","ssi_trapno","ssi_uid","ssi_utime","ssize_t","st_atime","st_atime","st_atime_nsec","st_atime_nsec","st_blksize","st_blksize","st_blocks","st_blocks","st_ctime","st_ctime","st_ctime_nsec","st_ctime_nsec","st_dev","st_dev","st_gid","st_gid","st_info","st_info","st_ino","st_ino","st_mode","st_mode","st_mtime","st_mtime","st_mtime_nsec","st_mtime_nsec","st_name","st_name","st_nlink","st_nlink","st_other","st_other","st_rdev","st_rdev","st_shndx","st_shndx","st_size","st_size","st_size","st_size","st_space","st_uid","st_uid","st_value","st_value","stabil","stack","stack_pointer","stack_size","stack_t","stamp","start_code","start_level","start_stack","stat","stat","stat64","stat64","statfs","statfs","statfs64","statfs64","status","statvfs","statvfs","statvfs64","statvfs64","statx","statx","statx_timestamp","stbcnt","stpcpy","stpncpy","strcasecmp","strcasestr","strcat","strchr","strchrnul","strcmp","strcoll","strcpy","strcspn","strdup","strerror","strerror_r","strftime","strlen","strncasecmp","strncat","strncmp","strncpy","strndup","strnlen","strong_magnitude","strpbrk","strptime","strrchr","strsignal","strspn","strstr","strtod","strtof","strtok","strtok_r","strtol","strtoll","strtoul","strtoull","strxfrm","stx_atime","stx_attributes","stx_attributes_mask","stx_blksize","stx_blocks","stx_btime","stx_ctime","stx_dev_major","stx_dev_minor","stx_dio_mem_align","stx_dio_offset_align","stx_gid","stx_ino","stx_mask","stx_mnt_id","stx_mode","stx_mtime","stx_nlink","stx_rdev_major","stx_rdev_minor","stx_size","stx_uid","sun_family","sun_path","suseconds_t","sval","svm_cid","svm_family","svm_port","svm_reserved1","svm_zero","swapcontext","swapoff","swapon","swd","swd","symlink","symlinkat","sync","sync_file_range","syncfs","syscall","sysconf","sysctl","sysinfo","sysinfo","syslog","sysname","system","tai","tai","tcdrain","tcflag_t","tcflow","tcflush","tcgetattr","tcgetpgrp","tcgetsid","tcsendbreak","tcsetattr","tcsetpgrp","tee","telldir","termios","termios2","thousands_sep","tick","time","time","time","time","time_t","timegm","timer_create","timer_delete","timer_getoverrun","timer_gettime","timer_settime","timer_t","timerfd_create","timerfd_gettime","timerfd_settime","times","timespec","timeval","timex","timezone","tls","tm","tm_gmtoff","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_sec","tm_wday","tm_yday","tm_year","tm_zone","tmpfile","tmpfile64","tmpnam","tms","tms_cstime","tms_cutime","tms_stime","tms_utime","tolerance","tolower","totalhigh","totalram","totalswap","toupper","tp","trigger","truncate","truncate64","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttyname","ttyname_r","tv_nsec","tv_nsec","tv_sec","tv_sec","tv_sec","tv_sec","tv_usec","tv_usec","tx_id","tx_type","type_","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u","u","u64","u_ar0","u_comm","u_debugreg","u_dsize","u_fpstate","u_fpvalid","u_ssize","u_tsize","uc_flags","uc_link","uc_mcontext","uc_sigmask","uc_stack","ucontext_t","ucred","uid","uid","uid_t","uinput_abs_setup","uinput_ff_erase","uinput_ff_upload","uinput_setup","uinput_user_dev","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t","umask","umount","umount2","uname","ungetc","unlink","unlinkat","unlockpt","unsetenv","unshare","uordblks","uordblks","updated","uptime","useconds_t","uselocale","user","user_fpregs_struct","user_regs_struct","usleep","usmblks","usmblks","ut_addr_v6","ut_exit","ut_host","ut_id","ut_line","ut_pid","ut_session","ut_tv","ut_type","ut_user","utimbuf","utime","utimensat","utimes","utmpname","utmpx","utmpxname","utsname","val","value","value","vendor","vers","version","version","version","vfork","vhangup","vmsplice","wait","wait4","waitid","waitpid","waveform","wchar_t","wcslen","wcstombs","wd","weak_magnitude","winsize","wmemchr","write","writev","ws_col","ws_row","ws_xpixel","ws_ypixel","xmm_space"],"q":[[0,"libc"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","maximum number of services provided on the same listening …uth Header","","IP Payload Comp. Protocol","DCCP","IP6 destination option","exterior gateway protocol","encapsulation header","IP6 Encap Sec. Payload","Ethernet-within-IPv6 encapsulation.","IP6 fragmentation header","General Routing Encap.","Hop-by-hop option header","","","xns idp","group mgmt protocol","","for compatibility","","","","","Multipath TCP","","IP6 no next header","Protocol indep. multicast","pup","raw IP packet","IP6 routing header","resource reservation","SCTP","","tp-4 w/ class negotiation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","WARNING: The <code>PartialEq</code>, <code>Eq</code> and <code>Hash</code> implementations of thisquivalent to C’s <code>void</code> type when used as a pointereturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","GNU version of <code>basename(3)</code>, defined in <code>string.h</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","interface name, e.g. “en0”","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeversion of <code>basename(3)</code>, defined in <code>libgen.h</codehe 64-bit libc on Solaris and illumos only has readdir_r. …if":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3,3],4],0,0,0,0,0,0,0,0,0,0,[2,2],0,0,0,0,0,0,0,0,[2,2],0,[[1,2],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,6],[7,5],[8,8],[[7,5],5],[8,8],0,0,0,[9,10],[[11,12]],[12,9],[[11,12],9],[[12,12],13],[[11,12],13],[[11,12]],0,[12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,14]],[[9,14],13],[[9,14]],0,[14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,9,9,9],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[15,15],0,0,[15,15],0,0,0,0,0,0,0,0,[15,15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[15,15],0,0,0,0,0,0,0,[15,15],0,0,0,0,0,0,0,0,0,0,0,[15,15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[16,16,16],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,9],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16,16],0,0,0,0,0,[16,13],0,0,0,0,0,0,0,0,0,0,[15,15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,9],[9,9],[9,13],[9,13],0,0,0,0,0,0,0,[[9,9]],[9,13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[17,18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,13],0,[9,9],0,[9,13],[9,13],[9,13],[9,13],0,0,0,[9,9],[9,9],0,[[9,9],9],0,[9,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[18,18],[44,44],[45,45],[46,46],[47,47],[14,14],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[12,12],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[101,101],[102,102],[103,103],[104,104],[105,105],[106,106],[107,107],[108,108],[109,109],[110,110],[111,111],[112,112],[17,17],[113,113],[114,114],[115,115],[116,116],[4,4],[117,117],[118,118],[119,119],[120,120],[121,121],[122,122],[123,123],[124,124],[125,125],[126,126],[127,127],[128,128],[129,129],[130,130],[131,131],[132,132],[133,133],[134,134],[135,135],[136,136],[137,137],[138,138],[139,139],[140,140],[141,141],[142,142],[143,143],[144,144],[145,145],[146,146],[147,147],[148,148],[149,149],[150,150],[151,151],[152,152],[153,153],[154,154],[155,155],[7,7],[5,5],[156,156],[157,157],[158,158],[159,159],[160,160],[161,161],[162,162],[163,163],[164,164],[165,165],[166,166],[167,167],[168,168],[169,169],[170,170],[171,171],[172,172],[173,173],[174,174],[175,175],[176,176],[177,177],[178,178],[179,179],[180,180],[181,181],[182,182],[183,183],[184,184],[185,185],[186,186],[187,187],[188,188],[189,189],[190,190],[191,191],[192,192],[193,193],[194,194],[195,195],[196,196],[197,197],[198,198],[199,199],[200,200],[201,201],[202,202],[203,203],[204,204],[205,205],[206,206],[207,207],[208,208],[209,209],[210,210],[211,211],[212,212],[213,213],[214,214],[215,215],[216,216],[217,217],[218,218],[219,219],[220,220],[221,221],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[222,223],[[225,[224]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[226,8],0,[[8,8],226],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[226,8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[184,222],0,0,[184,227],0,[184,9],[184,228],[184,229],[184,228],[184,34],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],[[],225],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],[[],230],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[720,1420,2961,2970,3411,4324,4689,6238,6239,6240,6241,6504,6505,8366,8367,8368,8369,8420],"p":[[6,"__u16"],[6,"__u32"],[6,"__u8"],[3,"sock_filter"],[3,"cmsghdr"],[6,"c_uchar"],[3,"msghdr"],[6,"c_uint"],[6,"c_int"],[6,"size_t"],[15,"usize"],[3,"cpu_set_t"],[15,"bool"],[3,"fd_set"],[15,"u8"],[15,"u32"],[3,"sock_extended_err"],[3,"sockaddr"],[4,"DIR"],[4,"FILE"],[4,"fpos_t"],[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[4,"timezone"],[3,"in_addr"],[3,"ip_mreq"],[3,"ip_mreqn"],[3,"ip_mreq_source"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"lconv"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"in6_rtmsg"],[3,"arpreq"],[3,"arpreq_old"],[3,"arphdr"],[3,"mmsghdr"],[3,"epoll_event"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"utsname"],[3,"sigevent"],[4,"fpos64_t"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"fsid_t"],[3,"packet_mreq"],[3,"if_nameindex"],[3,"msginfo"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"uinput_ff_upload"],[3,"uinput_ff_erase"],[3,"uinput_abs_setup"],[3,"dl_phdr_info"],[3,"Elf32_Ehdr"],[3,"Elf64_Ehdr"],[3,"Elf32_Sym"],[3,"Elf64_Sym"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"Elf32_Shdr"],[3,"Elf64_Shdr"],[3,"ucred"],[3,"mntent"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"arpd_request"],[3,"inotify_event"],[3,"fanotify_response"],[3,"sockaddr_vm"],[3,"regmatch_t"],[3,"__c_anonymous_sockaddr_can_tp"],[3,"__c_anonymous_sockaddr_can_j1939"],[3,"can_filter"],[3,"j1939_filter"],[3,"sock_fprog"],[3,"seccomp_data"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nlattr"],[3,"file_clone_range"],[3,"__c_anonymous_ifru_map"],[3,"in6_ifreq"],[3,"option"],[3,"sctp_initmsg"],[3,"sctp_sndrcvinfo"],[3,"sctp_sndinfo"],[3,"sctp_rcvinfo"],[3,"sctp_nxtinfo"],[3,"sctp_prinfo"],[3,"sctp_authinfo"],[3,"rlimit64"],[3,"sockaddr_nl"],[3,"dirent"],[3,"sockaddr_alg"],[3,"uinput_setup"],[3,"uinput_user_dev"],[3,"af_alg_iv"],[3,"mq_attr"],[19,"__c_anonymous_ifr_ifru"],[3,"ifreq"],[19,"__c_anonymous_ifc_ifcu"],[3,"ifconf"],[3,"hwtstamp_config"],[3,"dirent64"],[3,"sock_txtime"],[19,"__c_anonymous_sockaddr_can_can_addr"],[3,"sockaddr_can"],[3,"statx"],[3,"statx_timestamp"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"glob64_t"],[3,"termios"],[3,"mallinfo"],[3,"mallinfo2"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"rtentry"],[3,"timex"],[3,"ntptimeval"],[3,"regex_t"],[3,"Elf64_Chdr"],[3,"Elf32_Chdr"],[3,"seminfo"],[3,"ptrace_peeksiginfo_args"],[3,"__c_anonymous_ptrace_syscall_info_entry"],[3,"__c_anonymous_ptrace_syscall_info_exit"],[3,"__c_anonymous_ptrace_syscall_info_seccomp"],[3,"ptrace_syscall_info"],[19,"__c_anonymous_ptrace_syscall_info_data"],[3,"utmpx"],[3,"sigset_t"],[3,"sysinfo"],[3,"msqid_ds"],[3,"semid_ds"],[3,"sigaction"],[3,"statfs"],[3,"flock"],[3,"flock64"],[3,"siginfo_t"],[3,"stack_t"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"seccomp_notif_sizes"],[3,"ptrace_rseq_configuration"],[3,"user_fpregs_struct"],[3,"ucontext_t"],[3,"statvfs"],[3,"max_align_t"],[3,"clone_args"],[3,"sem_t"],[3,"termios2"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_condattr_t"],[3,"pthread_barrierattr_t"],[3,"fanotify_event_metadata"],[3,"pthread_cond_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_barrier_t"],[3,"can_frame"],[3,"canfd_frame"],[3,"canxl_frame"],[3,"open_how"],[3,"in6_addr"],[4,"c_void"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"dev_t"],[6,"pid_t"],[6,"c_long"],[6,"uid_t"],[3,"TypeId"]]},\
"libm":{"doc":"libm in pure Rust","t":"DFLLFFLLFFLLFFLLFFLLFLLFFFLLFLLFLLFFLLFFLLFFLLFFLLFFLLFLLFFFLLFLLFFLLFFFLLFFLLFFLLFFLLFFLLFFLLFFLLFFLLFFLLFLFLLFFLLFLFLLFFLLFFLLFFLLFFLLFLLFFFLLFLLFFLLFFLLFFFLLFFLLFFLLFFLLFFLLFFLLFFLLFFLLFFLLFLLFFFLLFFLLFFLLFFLLFFLLFFLLFLLLFLLFFLLFFLLF","n":["Libm","acos","acos","acos","acosf","acosh","acosh","acosh","acoshf","asin","asin","asin","asinf","asinh","asinh","asinh","asinhf","atan","atan","atan","atan2","atan2","atan2","atan2f","atanf","atanh","atanh","atanh","atanhf","borrow","borrow_mut","cbrt","cbrt","cbrt","cbrtf","ceil","ceil","ceil","ceilf","copysign","copysign","copysign","copysignf","cos","cos","cos","cosf","cosh","cosh","cosh","coshf","erf","erf","erf","erfc","erfc","erfc","erfcf","erff","exp","exp","exp","exp10","exp10","exp10","exp10f","exp2","exp2","exp2","exp2f","expf","expm1","expm1","expm1","expm1f","fabs","fabs","fabs","fabsf","fdim","fdim","fdim","fdimf","floor","floor","floor","floorf","fma","fma","fma","fmaf","fmax","fmax","fmax","fmaxf","fmin","fmin","fmin","fminf","fmod","fmod","fmod","fmodf","frexp","frexp","frexp","frexpf","from","hypot","hypot","hypot","hypotf","ilogb","ilogb","ilogb","ilogbf","into","j0","j0","j0","j0f","j1","j1","j1","j1f","jn","jn","jn","jnf","ldexp","ldexp","ldexp","ldexpf","lgamma","lgamma","lgamma","lgamma_r","lgamma_r","lgamma_r","lgammaf","lgammaf_r","log","log","log","log10","log10","log10","log10f","log1p","log1p","log1p","log1pf","log2","log2","log2","log2f","logf","modf","modf","modf","modff","nextafter","nextafter","nextafter","nextafterf","pow","pow","pow","powf","remainder","remainder","remainder","remainderf","remquo","remquo","remquo","remquof","rint","rint","rint","rintf","round","round","round","roundf","scalbn","scalbn","scalbn","scalbnf","sin","sin","sin","sincos","sincos","sincos","sincosf","sinf","sinh","sinh","sinh","sinhf","sqrt","sqrt","sqrt","sqrtf","tan","tan","tan","tanf","tanh","tanh","tanh","tanhf","tgamma","tgamma","tgamma","tgammaf","trunc","trunc","trunc","truncf","try_from","try_into","type_id","y0","y0","y0","y0f","y1","y1","y1","y1f","yn","yn","yn","ynf"],"q":[[0,"libm"]],"d":["Generic helper for libm functions, abstracting over f32 …","Arccosine (f64)","","","Arccosine (f32)","Inverse hyperbolic cosine (f64)","","","Inverse hyperbolic cosine (f32)","Arcsine (f64)","","","Arcsine (f32)","Inverse hyperbolic sine (f64)","","","Inverse hyperbolic sine (f32)","Arctangent (f64)","","","Arctangent of y/x (f64)","","","Arctangent of y/x (f32)","Arctangent (f32)","Inverse hyperbolic tangent (f64)","","","Inverse hyperbolic tangent (f32)","","","Computes the cube root of the argument.","","","Cube root (f32)","Ceil (f64)","","","Ceil (f32)","Sign of Y, magnitude of X (f64)","","","Sign of Y, magnitude of X (f32)","","","","","Hyperbolic cosine (f64)","","","Hyperbolic cosine (f64)","Error function (f64)","","","Complementary error function (f64)","","","Complementary error function (f32)","Error function (f32)","Exponential, base <em>e</em> (f64)","","","","","","","Exponential, base 2 (f64)","","","Exponential, base 2 (f32)","Exponential, base <em>e</em> (f32)","Exponential, base <em>e</em>, of x-1 (f64)","","","Exponential, base <em>e</em>, of x-1 (f32)","Absolute value (magnitude) (f64) Calculates the absolute …","","","Absolute value (magnitude) (f32) Calculates the absolute …","Positive difference (f64)","","","Positive difference (f32)","Floor (f64)","","","Floor (f32)","Floating multiply add (f64)","","","Floating multiply add (f32)","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,6,6,0,0,0,6,6,0,6,6,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,6,6,0,0,0,6,6,0,6,6,0,0,6,6,0,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,6,0,6,6,0,0,6,6,0,6,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,6,6,0,0,0,6,6,0,6,6,0,0,6,6,0,0,6,6,0,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,6,6,0,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,0,6,6,0,6,6,6,0,6,6,0,0,6,6,0,0,6,6,0],"f":[0,[1,1],[1,1],[2,2],[2,2],[1,1],[1,1],[2,2],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[1,1],[2,2],[2,2],[1,1],[1,1],[2,2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[2,2],[1,1],[2,2],[1,1],[2,2],[[]],[[]],[1,1],[1,1],[2,2],[2,2],[1,1],[2,2],[1,1],[2,2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[1,1],[2,2],[1,1],[2,2],[2,2],[1,1],[2,2],[1,1],[1,1],[1,1],[2,2],[2,2],[1,1],[1,1],[2,2],[2,2],[2,2],[1,1],[1,1],[2,2],[2,2],[1,1],[1,1],[2,2],[2,2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[1,1],[1,1],[2,2],[2,2],[[1,1,1],1],[[2,2,2],2],[[1,1,1],1],[[2,2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[1],[2],[1],[2],[[]],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[1,3],[2,3],[1,3],[2,3],[[]],[1,1],[2,2],[1,1],[2,2],[1,1],[1,1],[2,2],[2,2],[[3,1],1],[[3,2],2],[[3,1],1],[[3,2],2],[[1,3],1],[[2,3],2],[[1,3],1],[[2,3],2],[1,1],[1,1],[2,2],[1],[1],[2],[2,2],[2],[1,1],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[1,1],[2,2],[2,2],[2,2],[1],[2],[1],[2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[1,1],[1,1],[2,2],[2,2],[1,1],[1,1],[2,2],[2,2],[[1,3],1],[[1,3],1],[[2,3],2],[[2,3],2],[1,1],[2,2],[1,1],[1],[2],[1],[2],[2,2],[1,1],[1,1],[2,2],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[1,1],[2,2],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[1,1],[2,2],[2,2],[[],4],[[],4],[[],5],[1,1],[1,1],[2,2],[2,2],[1,1],[2,2],[1,1],[2,2],[[3,1],1],[[3,2],2],[[3,1],1],[[3,2],2]],"c":[],"p":[[15,"f64"],[15,"f32"],[15,"i32"],[4,"Result"],[3,"TypeId"],[3,"Libm"]]},\
"lil_hopps":{"doc":"","t":"AAAAAADDLLLLLLLMLLLMLLLLLLLLLMMMLMLLLLLLLMLLLLLLDLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLMMLLLLLLLLDLLAMLLLLMLLAMAMLLLLLDMLLLLLLLLLLLLMLMLLLLLLMDLLLLLLLLLLLLLDLLLLLLLLLLMMLMLLLLLLLDLLLLLLLLLLLLLL","n":["types","uav","viz","motors","movement","pose","Motor","MotorPhysics","borrow","borrow","borrow_mut","borrow_mut","calculate_offset","clone","clone_into","current_value","eq","fmt","fmt","force","from","from","from_subset","from_subset","get_physics","into","into","is_in_subset","is_in_subset","motor_force_n","motor_number","motor_offset_b","new","offset","set_input_scalar","to_owned","to_string","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","torque","try_from","try_from","try_into","try_into","type_id","type_id","Movement","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","from_subset","into","is_in_subset","new","to_owned","to_string","to_subset","to_subset_unchecked","try_from","try_into","type_id","zero","Pose","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","from_subset","into","is_in_subset","new","orientation","position","to_owned","to_string","to_subset","to_subset_unchecked","try_from","try_into","type_id","zero","UAV","borrow","borrow_mut","config","config","from","from_subset","into","is_in_subset","motors","new","process","software","software","state","state","to_subset","to_subset_unchecked","try_from","try_into","type_id","UAVConfig","arm_length_m","borrow","borrow_mut","clone","clone_into","fmt","from","from_subset","into","is_in_subset","lock_pitch","lock_roll","lock_yaw","motor_force_n","new_250mm","rotation_lock","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","weight_g","UAVSoftware","borrow","borrow_mut","from","from_subset","into","is_in_subset","new","process","to_subset","to_subset_unchecked","try_from","try_into","type_id","UAVState","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_subset","into","is_in_subset","motors","movenment","new","pose","safe_set_motors","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","Visualization","borrow","borrow_mut","from","from_subset","init","into","is_in_subset","new","render","to_subset","to_subset_unchecked","try_from","try_into","type_id"],"q":[[0,"lil_hopps"],[3,"lil_hopps::types"],[6,"lil_hopps::types::motors"],[48,"lil_hopps::types::movement"],[69,"lil_hopps::types::pose"],[92,"lil_hopps::uav"],[113,"lil_hopps::uav::config"],[137,"lil_hopps::uav::software"],[151,"lil_hopps::uav::state"],[173,"lil_hopps::viz"]],"d":["","","","","","","","","","","","","Calculate the offset of the motor from the center of the …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calculate the force vector of the motor in the body frame  …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Set the input value of the motor (0.0 - 1.0) This is the …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns a Pose with position and orientation set to zero.","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,8,4,8,4,8,4,4,8,4,4,4,4,8,4,8,4,8,8,4,8,4,8,8,8,8,4,8,4,4,8,4,8,4,4,8,4,8,4,8,4,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,18,18,0,18,18,18,18,18,18,18,18,0,18,0,18,18,18,18,18,18,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,19,19,19,19,19,19,19,19,19,19,19,19,19,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[1,2],[[3,[1]]]],[4,4],[[]],0,[[4,4],5],[[4,6],7],[[4,6],7],0,[[]],[[]],[[]],[[]],[8,4],[[]],[[]],[[],5],[[],5],0,0,0,[[2,9],8],0,[[8,1]],[[]],[[],10],[[],11],[[],11],[[]],[[]],0,[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,[[]],[[]],[14,14],[[]],[[14,14],5],[[14,6],7],[[14,6],7],[[]],[[]],[[]],[[],5],[[[3,[15]],[3,[15]],[3,[15]],[3,[15]]],14],[[]],[[],10],[[],11],[[]],[[],12],[[],12],[[],13],[[],14],0,[[]],[[]],[16,16],[[]],[[16,16],5],[[16,6],7],[[16,6],7],[[]],[[]],[[]],[[],5],[[[3,[15]],[17,[15]]],16],0,0,[[]],[[],10],[[],11],[[]],[[],12],[[],12],[[],13],[[],16],0,[[]],[[]],0,0,[[]],[[]],[[]],[[],5],0,[[],18],[[18,15,1],[[12,[10]]]],0,0,0,0,[[],11],[[]],[[],12],[[],12],[[],13],0,0,[[]],[[]],[9,9],[[]],[[9,6],7],[[]],[[]],[[]],[[],5],[9],[9],[9],0,[[],9],0,[[]],[[],11],[[]],[[],12],[[],12],[[],13],0,0,[[]],[[]],[[]],[[]],[[]],[[],5],[[],19],[[19,15,1,20],[[12,[20,10]]]],[[],11],[[]],[[],12],[[],12],[[],13],0,[[]],[[]],[20,20],[[]],[[20,20],5],[[20,6],7],[[]],[[]],[[]],[[],5],0,0,[16,20],0,[[20,[21,[1]]]],[[]],[[],11],[[]],[[],12],[[],12],[[],13],0,[[]],[[]],[[]],[[]],[22],[[]],[[],5],[[],22],[[22,1]],[[],11],[[]],[[],12],[[],12],[[],13]],"c":[],"p":[[15,"f32"],[15,"u8"],[6,"Vector3"],[3,"MotorPhysics"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Motor"],[3,"UAVConfig"],[3,"String"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"Movement"],[15,"f64"],[3,"Pose"],[6,"UnitQuaternion"],[3,"UAV"],[3,"UAVSoftware"],[3,"UAVState"],[15,"array"],[3,"Visualization"]]},\
"log":{"doc":"A lightweight logging facade.","t":"NNNNNNEEIDDNDDDRDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLKLLLLLLLLLLLLOLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLKOOFLLFLLLLLLLLLLLLLLFFFFFLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLO","n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","debug","default","default","enabled","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","iter","iter","level","level","level","level","line","line","log","log","log_enabled","logger","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_boxed_logger","set_logger","set_logger_racy","set_max_level","set_max_level_racy","target","target","target","target","to_level","to_level_filter","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":[[0,"log"]],"d":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","","","","","Logs a message at the debug level.","","","Determines if a log message with the specified metadata …","","","","","","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Logs a message at the info level.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","Iterate through all supported filtering levels.","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>Box&lt;Log&gt;</code>.","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","A thread-unsafe version of <code>set_max_level</code>.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","","","","","","","","","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[4,6,4,6,4,6,0,0,0,0,0,6,0,0,0,0,0,4,6,4,6,1,3,4,6,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,3,7,1,8,4,6,1,8,4,6,1,8,4,6,8,7,0,3,7,20,4,4,6,6,8,7,11,4,6,8,7,11,0,1,3,1,3,20,4,4,6,6,1,3,8,7,15,15,11,11,4,6,1,3,8,7,15,11,4,6,4,6,8,7,0,4,6,1,3,8,7,15,11,4,6,1,3,8,7,1,3,20,0,0,0,4,6,0,1,3,1,3,1,3,3,7,4,4,6,6,8,7,0,0,0,0,0,1,3,8,7,6,4,4,6,1,8,4,6,15,11,0,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,2],3],[4,5],[6,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,1],[7,8],[[],3],[[],7],[4,4],[6,6],[1,1],[8,8],[[]],[[]],[[]],[[]],[[4,4],9],[[6,6],9],[[8,8],9],[[7,7],9],0,[[],3],[[],7],[8,10],[[4,4],10],[[4,6],10],[[6,4],10],[[6,6],10],[[8,8],10],[[7,7],10],[[11,11],10],[[],10],[[],10],[[],10],[[],10],[[],10],0,[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[]],[[4,13],14],[[4,13],14],[[6,13],14],[[6,13],14],[[1,13],14],[[3,13],14],[[8,13],14],[[7,13],14],[[15,13],14],[[15,13],14],[[11,13],14],[[11,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,[[16,[4]]]],[5,[[16,[6]]]],[[4,17]],[[6,17]],[[8,17]],[[7,17]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[1,4],[[3,4],3],[8,4],[[7,4],7],[1,[[12,[19]]]],[[3,[12,[19]]],3],[1],0,0,[[],20],[[],4],[[],6],[[],6],[1,8],[[3,8],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[],3],[[],7],[[4,6],[[12,[9]]]],[[4,4],[[12,[9]]]],[[6,6],[[12,[9]]]],[[6,4],[[12,[9]]]],[[8,8],[[12,[9]]]],[[7,7],[[12,[9]]]],[[[21,[20]]],[[16,[15]]]],[20,[[16,[15]]]],[20,[[16,[15]]]],[6],[6],[1,5],[[3,5],3],[8,5],[[7,5],7],[6,[[12,[4]]]],[4,6],[[]],[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],0],"c":[],"p":[[3,"Record"],[3,"Arguments"],[3,"RecordBuilder"],[4,"Level"],[15,"str"],[4,"LevelFilter"],[3,"MetadataBuilder"],[3,"Metadata"],[4,"Ordering"],[15,"bool"],[3,"ParseLevelError"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"SetLoggerError"],[4,"Result"],[8,"Hasher"],[8,"Iterator"],[15,"u32"],[8,"Log"],[3,"Box"],[3,"String"],[3,"TypeId"]]},\
"matrixmultiply":{"doc":"General matrix multiplication for f32, f64, and complex …","t":"FF","n":["dgemm","sgemm"],"q":[[0,"matrixmultiply"]],"d":["General matrix multiplication (f64)","General matrix multiplication (f32)"],"i":[0,0],"f":[[[1,1,1,2,2,3,3,2,3,3,2,2,3,3]],[[1,1,1,4,4,3,3,4,3,3,4,4,3,3]]],"c":[],"p":[[15,"usize"],[15,"f64"],[15,"isize"],[15,"f32"]]},\
"memoffset":{"doc":"A crate used for calculating offsets of struct members and …","t":"OOOOOOO","n":["offset_of","offset_of_tuple","offset_of_union","raw_field","raw_field_tuple","raw_field_union","span_of"],"q":[[0,"memoffset"]],"d":["Calculates the offset of the specified field from the …","Calculates the offset of the specified field from the …","Calculates the offset of the specified union member from …","Computes a const raw pointer to the given field of the …","Computes a const raw pointer to the given field of the …","Computes a const raw pointer to the given field of the …","Produces a range instance representing the sub-slice …"],"i":[0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0],"c":[],"p":[]},\
"nalgebra":{"doc":"nalgebra","t":"IIIIDIQIIQIQIIIQIFKLKLKLLLLLLLLLLLLLKKKKLLKLKLKLKKLAKLLKLKLFFKLLLKLFFFFKCKLLKLLLFFLLLLLLLLLLLLOOKLLKLKLKLKLKLKLLLLLLLLLKKKKKKKKKLLLLLLLLLLLLLKLKLLLLLLLLLLLLLLLLLLLLLALKLLKKKMKLFFLLLLFKLLLLLLLLKKLLKLAKLKKLKKLKLKKLKLOFKKFKKKLKLLLLLLLLLKLLLLLLLLLLLLKLKLLLFLKFFFFFFFFFKOLLLLLLLLLLLLLLLLLLLLLLLLKLKLKLLLLLMKLKLLLLLLLLLLLLLKLKLKLKLLLKLLLLKLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLKKLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLKKLLLLLLLLLLLKKLLLLLLLLLLLLLKLLLLLLLLLLLLLKKKKLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLKKKKKKKKKLLLLLLLLLLLKKKKKLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLKKLLLLLLLLLLLKKLLLLLLLLLLLKKLLLLLLLLLLLKLLLLLLLLLLLKKLLLLLLLLLLLKKKKKLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLKKLLLLLLLLLLLKKLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLLLLLKLLLLLLLLLLLKKLLLLLLLLLLLKLKLLKLLLLKLKLLLLLLLLLLLLLLLFKLKLLLLLLLLLLLLLLLLLLLLLLKLFFLLKLKLKLLLOFKFLLDGGGGGGGGGGIDDDGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGIQIGGGGGGGGGGGGGGGGGGGGGGIQIGGGDGGDGGGGGGDGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLALLLLLLMLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIQQIIGGIKLKKKIIQQQQIIIDLLLLLLLLLLLLLLLDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDQIIGIIGIGIIIGIIGIGIGGIGGGIGDGIIQQQQQQQQQQQQIIQGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRSKKLLLLLLLLLLLLLKLKKLLLLLLLLLLLLLLKLLLLLLLLKKLLLLKKLLLLKKLLLLKLLKKLLLLLLLLLLLLLLLKLLLLKLLIIQQDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGQIQGGGQIIIGIIKKKLLLLLLLLKKLKKKKKLLDIDQKLLKLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLIGGDDGGGGDDDGGGGGGGGGDDGGGGGGQDGGDGGGGGGDGGGGIIEIIEEDGGDGGGGGGGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDDDLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLMFFFDLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ClosedAdd","ClosedDiv","ClosedMul","ClosedSub","Complex","ComplexField","Element","Field","RealField","RealField","SimdBool","SimdBool","SimdComplexField","SimdPartialOrd","SimdRealField","SimdRealField","SimdValue","abs","abs","abs","acos","acos","acosh","acosh","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","all","and","any","argument","argument","as_","asin","asin","asinh","asinh","atan","atan","atan2","atanh","atanh","base","bitmask","borrow","borrow_mut","cbrt","cbrt","ceil","ceil","center","clamp","clamp","clone","clone_into","conj","conjugate","conjugate","convert","convert_ref","convert_ref_unchecked","convert_unchecked","copysign","core","cos","cos","cosc","cosh","cosh","coshc","default","distance","distance_squared","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","dmatrix","dvector","e","eq","equivalent","exp","exp","exp2","exp2","exp_m1","exp_m1","extract","extract","extract_unchecked","extract_unchecked","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frac_1_pi","frac_2_pi","frac_2_sqrt_pi","frac_pi_2","frac_pi_3","frac_pi_4","frac_pi_6","frac_pi_8","fract","fract","from","from","from","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_real","from_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_str","from_str_radix","from_subset","from_superset_unchecked","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","geometry","hash","hypot","hypot","i","if_else","if_else2","if_else3","im","imaginary","imaginary","inf","inf_sup","into","inv","inv","inv","is_convertible","is_finite","is_finite","is_finite","is_in_subset","is_in_subset","is_infinite","is_nan","is_normal","is_one","is_sign_negative","is_sign_positive","is_zero","l1_norm","lanes","lanes","linalg","ln","ln","ln_10","ln_1p","ln_1p","ln_2","log","log","log10","log10","log10_e","log2","log2","log2_e","map_lanes","matrix","max","max","max_value","min","min","min_value","modulus","modulus","modulus_squared","modulus_squared","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","none","norm","norm1","norm1","norm_sqr","norm_squared","one","one","or","partial_clamp","partial_cmp","partial_ge","partial_gt","partial_le","partial_lt","partial_max","partial_min","partial_sort2","pi","point","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powc","powc","powf","powf","powi","powi","powi","powu","product","product","re","real","real","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","replace","replace","replace_unchecked","replace_unchecked","round","round","scale","scale","scale","scale_mut","select","select","set_one","set_zero","signum","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan2","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_clamp","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_copysign","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cosc","simd_cosc","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_coshc","simd_coshc","simd_default_epsilon","simd_e","simd_eq","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_frac_1_pi","simd_frac_2_pi","simd_frac_2_sqrt_pi","simd_frac_pi_2","simd_frac_pi_3","simd_frac_pi_4","simd_frac_pi_6","simd_frac_pi_8","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_ge","simd_gt","simd_horizontal_max","simd_horizontal_min","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_le","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln_10","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_2","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10_e","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2_e","simd_lt","simd_max","simd_min","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_ne","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_pi","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_signum","simd_signum","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sinc","simd_sinc","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinhc","simd_sinhc","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_to_exp","simd_to_exp","simd_to_polar","simd_to_polar","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_two_pi","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","sin","sin","sin_cos","sin_cos","sinc","sinh","sinh","sinh_cosh","sinh_cosh","sinhc","splat","splat","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sup","tan","tan","tanh","tanh","to_exp","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_polar","to_string","to_subset","to_subset_unchecked","to_superset","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","trunc","trunc","try_convert","try_convert_ref","try_from","try_into","try_sqrt","try_sqrt","two_pi","type_id","unscale","unscale","unscale","unscale_mut","vector","wrap","xor","zero","zero","zip_map_lanes","ArrayStorage","DMatrix","DMatrixSlice","DMatrixSliceMut","DMatrixView","DMatrixViewMut","DVector","DVectorSlice","DVectorSliceMut","DVectorView","DVectorViewMut","DimRange","EuclideanNorm","LpNorm","Matrix","Matrix1","Matrix1x2","Matrix1x3","Matrix1x4","Matrix1x5","Matrix1x6","Matrix1xX","Matrix2","Matrix2x1","Matrix2x3","Matrix2x4","Matrix2x5","Matrix2x6","Matrix2xX","Matrix3","Matrix3x1","Matrix3x2","Matrix3x4","Matrix3x5","Matrix3x6","Matrix3xX","Matrix4","Matrix4x1","Matrix4x2","Matrix4x3","Matrix4x5","Matrix4x6","Matrix4xX","Matrix5","Matrix5x1","Matrix5x2","Matrix5x3","Matrix5x4","Matrix5x6","Matrix5xX","Matrix6","Matrix6x1","Matrix6x2","Matrix6x3","Matrix6x4","Matrix6x5","Matrix6xX","MatrixCross","MatrixMN","MatrixN","MatrixSlice","MatrixSlice1","MatrixSlice1x2","MatrixSlice1x3","MatrixSlice1x4","MatrixSlice1x5","MatrixSlice1x6","MatrixSlice1xX","MatrixSlice2","MatrixSlice2x1","MatrixSlice2x3","MatrixSlice2x4","MatrixSlice2x5","MatrixSlice2x6","MatrixSlice2xX","MatrixSlice3","MatrixSlice3x1","MatrixSlice3x2","MatrixSlice3x4","MatrixSlice3x5","MatrixSlice3x6","MatrixSlice3xX","MatrixSlice4","MatrixSlice4x1","MatrixSlice4x2","MatrixSlice4x3","MatrixSlice4x5","MatrixSlice4x6","MatrixSlice4xX","MatrixSlice5","MatrixSlice5x1","MatrixSlice5x2","MatrixSlice5x3","MatrixSlice5x4","MatrixSlice5x6","MatrixSlice5xX","MatrixSlice6","MatrixSlice6x1","MatrixSlice6x2","MatrixSlice6x3","MatrixSlice6x4","MatrixSlice6x5","MatrixSlice6xX","MatrixSliceMut","MatrixSliceMut1","MatrixSliceMut1x2","MatrixSliceMut1x3","MatrixSliceMut1x4","MatrixSliceMut1x5","MatrixSliceMut1x6","MatrixSliceMut1xX","MatrixSliceMut2","MatrixSliceMut2x1","MatrixSliceMut2x3","MatrixSliceMut2x4","MatrixSliceMut2x5","MatrixSliceMut2x6","MatrixSliceMut2xX","MatrixSliceMut3","MatrixSliceMut3x1","MatrixSliceMut3x2","MatrixSliceMut3x4","MatrixSliceMut3x5","MatrixSliceMut3x6","MatrixSliceMut3xX","MatrixSliceMut4","MatrixSliceMut4x1","MatrixSliceMut4x2","MatrixSliceMut4x3","MatrixSliceMut4x5","MatrixSliceMut4x6","MatrixSliceMut4xX","MatrixSliceMut5","MatrixSliceMut5x1","MatrixSliceMut5x2","MatrixSliceMut5x3","MatrixSliceMut5x4","MatrixSliceMut5x6","MatrixSliceMut5xX","MatrixSliceMut6","MatrixSliceMut6x1","MatrixSliceMut6x2","MatrixSliceMut6x3","MatrixSliceMut6x4","MatrixSliceMut6x5","MatrixSliceMut6xX","MatrixSliceMutMN","MatrixSliceMutN","MatrixSliceMutXx1","MatrixSliceMutXx2","MatrixSliceMutXx3","MatrixSliceMutXx4","MatrixSliceMutXx5","MatrixSliceMutXx6","MatrixSliceXx1","MatrixSliceXx2","MatrixSliceXx3","MatrixSliceXx4","MatrixSliceXx5","MatrixSliceXx6","MatrixSum","MatrixVec","MatrixView","MatrixView1","MatrixView1x2","MatrixView1x3","MatrixView1x4","MatrixView1x5","MatrixView1x6","MatrixView1xX","MatrixView2","MatrixView2x1","MatrixView2x3","MatrixView2x4","MatrixView2x5","MatrixView2x6","MatrixView2xX","MatrixView3","MatrixView3x1","MatrixView3x2","MatrixView3x4","MatrixView3x5","MatrixView3x6","MatrixView3xX","MatrixView4","MatrixView4x1","MatrixView4x2","MatrixView4x3","MatrixView4x5","MatrixView4x6","MatrixView4xX","MatrixView5","MatrixView5x1","MatrixView5x2","MatrixView5x3","MatrixView5x4","MatrixView5x6","MatrixView5xX","MatrixView6","MatrixView6x1","MatrixView6x2","MatrixView6x3","MatrixView6x4","MatrixView6x5","MatrixView6xX","MatrixViewMut","MatrixViewMut1","MatrixViewMut1x2","MatrixViewMut1x3","MatrixViewMut1x4","MatrixViewMut1x5","MatrixViewMut1x6","MatrixViewMut1xX","MatrixViewMut2","MatrixViewMut2x1","MatrixViewMut2x3","MatrixViewMut2x4","MatrixViewMut2x5","MatrixViewMut2x6","MatrixViewMut2xX","MatrixViewMut3","MatrixViewMut3x1","MatrixViewMut3x2","MatrixViewMut3x4","MatrixViewMut3x5","MatrixViewMut3x6","MatrixViewMut3xX","MatrixViewMut4","MatrixViewMut4x1","MatrixViewMut4x2","MatrixViewMut4x3","MatrixViewMut4x5","MatrixViewMut4x6","MatrixViewMut4xX","MatrixViewMut5","MatrixViewMut5x1","MatrixViewMut5x2","MatrixViewMut5x3","MatrixViewMut5x4","MatrixViewMut5x6","MatrixViewMut5xX","MatrixViewMut6","MatrixViewMut6x1","MatrixViewMut6x2","MatrixViewMut6x3","MatrixViewMut6x4","MatrixViewMut6x5","MatrixViewMut6xX","MatrixViewMutXx1","MatrixViewMutXx2","MatrixViewMutXx3","MatrixViewMutXx4","MatrixViewMutXx5","MatrixViewMutXx6","MatrixViewXx1","MatrixViewXx2","MatrixViewXx3","MatrixViewXx4","MatrixViewXx5","MatrixViewXx6","MatrixXx1","MatrixXx2","MatrixXx3","MatrixXx4","MatrixXx5","MatrixXx6","Norm","Norm","Normed","OMatrix","OVector","RowDVector","RowOVector","RowSVector","RowVector","RowVector1","RowVector2","RowVector3","RowVector4","RowVector5","RowVector6","SMatrix","SMatrixSlice","SMatrixSliceMut","SMatrixView","SMatrixViewMut","SVector","SVectorSlice","SVectorSliceMut","SVectorView","SVectorViewMut","Scalar","Size","SliceRange","SliceStorage","SliceStorageMut","SquareMatrix","UniformNorm","UninitMatrix","UninitVector","Unit","UnitVector1","UnitVector2","UnitVector3","UnitVector4","UnitVector5","UnitVector6","VecStorage","Vector","Vector1","Vector2","Vector3","Vector4","Vector5","Vector6","VectorN","VectorSlice","VectorSlice1","VectorSlice2","VectorSlice3","VectorSlice4","VectorSlice5","VectorSlice6","VectorSliceMut","VectorSliceMut1","VectorSliceMut2","VectorSliceMut3","VectorSliceMut4","VectorSliceMut5","VectorSliceMut6","VectorSum","VectorView","VectorView1","VectorView2","VectorView3","VectorView4","VectorView5","VectorView6","VectorViewMut","VectorViewMut1","VectorViewMut2","VectorViewMut3","VectorViewMut4","VectorViewMut5","VectorViewMut6","ViewStorage","ViewStorageMut","a","a","a_axis","a_axis","abs","abs_diff_eq","abs_diff_eq","ad_mul","ad_mul_to","ad_solve_lower_triangular","ad_solve_lower_triangular","ad_solve_lower_triangular_mut","ad_solve_lower_triangular_mut","ad_solve_lower_triangular_unchecked","ad_solve_lower_triangular_unchecked","ad_solve_lower_triangular_unchecked_mut","ad_solve_lower_triangular_unchecked_mut","ad_solve_upper_triangular","ad_solve_upper_triangular","ad_solve_upper_triangular_mut","ad_solve_upper_triangular_mut","ad_solve_upper_triangular_unchecked","ad_solve_upper_triangular_unchecked","ad_solve_upper_triangular_unchecked_mut","ad_solve_upper_triangular_unchecked_mut","add","add","add","add","add_assign","add_assign","add_scalar","add_scalar_mut","add_to","adjoint","adjoint_mut","adjoint_to","allocator","amax","amin","angle","angle","angle","angle_to","angle_to","append_axisangle_linearized","append_nonuniform_scaling","append_nonuniform_scaling","append_nonuniform_scaling_mut","append_nonuniform_scaling_mut","append_scaling","append_scaling","append_scaling_mut","append_scaling_mut","append_translation","append_translation","append_translation_mut","append_translation_mut","apply","apply_into","apply_metric_distance","apply_norm","argmax","argmax","argmin","argmin","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_mut_slice","as_mut_slice","as_mut_slice_unchecked","as_mut_slice_unchecked","as_mut_slice_unchecked","as_mut_slice_unchecked","as_mut_unchecked","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_scalar","as_scalar_mut","as_slice","as_slice","as_slice","as_slice_unchecked","as_slice_unchecked","as_slice_unchecked","as_slice_unchecked","as_slice_unchecked","as_vec","as_vec_mut","as_view","as_view_mut","assume_init","assume_init","axcpy","axcpy","axis","axis_angle","axis_angle","axpy","axpy","b","b","b_axis","b_axis","begin","bidiagonalize","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","camax","camin","cap_magnitude","cast","cast","cast","cast","cast","cdpy","cholesky","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_owned","clone_owned","clone_owned","clone_owned","clone_owned","clone_owned","clone_owned_sum","cmpy","col_piv_qr","column","column_iter","column_iter_mut","column_mean","column_mut","column_part","column_part_mut","column_product","column_sum","column_variance","columns","columns_generic","columns_generic_mut","columns_generic_with_step","columns_generic_with_step_mut","columns_mut","columns_range","columns_range_mut","columns_range_pair","columns_range_pair_mut","columns_with_step","columns_with_step_mut","complex","complex_eigenvalues","complex_eigenvalues","component_div","component_div_assign","component_div_mut","component_mul","component_mul_assign","component_mul_mut","compress_columns","compress_rows","compress_rows_tr","conjugate","conjugate","conjugate","conjugate","conjugate_mut","conjugate_mut","conjugate_mut","conjugate_mut","conjugate_transform_mut","conjugate_transpose","conjugate_transpose_to","constraint","convolve_full","convolve_full","convolve_same","convolve_same","convolve_valid","convolve_valid","coordinates","copy_from","copy_from_slice","cos_angle","cross","cross_matrix","cross_matrix","data","default","default","default_allocator","default_epsilon","default_epsilon","default_max_relative","default_max_relative","default_max_ulps","default_max_ulps","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","determinant","determinant","diagonal","diagonal","dimension","div","div","div","div","div","div","div_assign","div_assign","div_assign","dot","dotc","dual_quaternion","eigenvalues","eigenvalues","end","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","euler_angles","exp","exp","exp","extend","extend","extend","extend","extend","extend","extend","extract","extract_unchecked","face_towards","face_towards","face_towards","fill","fill_column","fill_diagonal","fill_lower_triangle","fill_lower_triangle_with_upper_triangle","fill_row","fill_upper_triangle","fill_upper_triangle_with_lower_triangle","fill_with","fill_with_identity","fixed_columns","fixed_columns_mut","fixed_columns_with_step","fixed_columns_with_step_mut","fixed_resize","fixed_rows","fixed_rows_mut","fixed_rows_with_step","fixed_rows_with_step_mut","fixed_slice","fixed_slice_mut","fixed_slice_with_steps","fixed_slice_with_steps_mut","fixed_view","fixed_view_mut","fixed_view_with_steps","fixed_view_with_steps_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold_with","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_angle","from_array_storage","from_array_storage","from_axis_angle","from_axis_angle","from_axis_angle","from_basis_unchecked","from_basis_unchecked","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice_generic","from_column_slice_generic","from_columns","from_columns","from_complex","from_complex_and_get","from_cos_sin_unchecked","from_data","from_data_statically_unchecked","from_diagonal","from_diagonal","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element_generic","from_diagonal_element_generic","from_element","from_element","from_element","from_element","from_element","from_element","from_element","from_element","from_element_generic","from_element_generic","from_euler_angles","from_euler_angles","from_euler_angles","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn_generic","from_fn_generic","from_homogeneous","from_homogeneous","from_isometry","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator_generic","from_iterator_generic","from_matrix","from_matrix","from_matrix_eps","from_matrix_eps","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal_generic","from_partial_diagonal_generic","from_parts","from_quaternion","from_raw_parts","from_raw_parts","from_ref_unchecked","from_rotation","from_rotation_matrix","from_rotation_matrix","from_row_iterator","from_row_iterator","from_row_iterator","from_row_iterator","from_row_iterator","from_row_iterator","from_row_iterator","from_row_iterator","from_row_iterator_generic","from_row_iterator_generic","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice_generic","from_row_slice_generic","from_rows","from_rows","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis_eps","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice_generic","from_slice_generic","from_slice_generic","from_slice_generic","from_slice_generic_unchecked","from_slice_generic_unchecked","from_slice_generic_unchecked","from_slice_generic_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides_generic","from_slice_with_strides_generic","from_slice_with_strides_generic","from_slice_with_strides_generic","from_slice_with_strides_generic_unchecked","from_slice_with_strides_generic_unchecked","from_slice_with_strides_generic_unchecked","from_slice_with_strides_generic_unchecked","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_superset_unchecked","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec_generic","from_vec_generic","from_vec_storage","from_vec_storage","from_vec_storage","from_vec_storage","from_vec_storage","from_vec_storage","full_piv_lu","ge","gemm","gemm_ad","gemm_tr","gemv","gemv","gemv_ad","gemv_ad","gemv_tr","gemv_tr","generic_slice","generic_slice_mut","generic_slice_with_steps","generic_slice_with_steps_mut","generic_view","generic_view_mut","generic_view_with_steps","generic_view_with_steps_mut","ger","ger_symm","gerc","get","get_mut","get_unchecked","get_unchecked_mut","gt","hash","hash","hash","hegemv","hegemv","hegerc","hermitian_part","hermitian_part","hessenberg","iamax","iamax","iamax_full","iamin","iamin","icamax","icamax","icamax_full","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity_generic","identity_generic","imax","imax","imin","imin","index","index","index","index_mut","index_mut","index_mut","indexing","inf","inf_sup","insert_column","insert_columns","insert_columns_generic_uninitialized","insert_fixed_columns","insert_fixed_rows","insert_row","insert_rows","insert_rows_generic_uninitialized","into","into","into","into","into","into","into","into","into","into_inner","into_iter","into_iter","into_owned","into_owned","into_owned","into_owned","into_owned","into_owned","into_owned_sum","into_scalar","into_scalar","into_slice","into_slice","into_slice_mut","inverse","inverse","inverse","inverse_mut","inverse_mut","inverse_mut","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","is_contiguous","is_contiguous","is_contiguous","is_contiguous","is_contiguous","is_empty","is_empty","is_identity","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_invertible","is_invertible","is_orthogonal","is_special_orthogonal","is_special_orthogonal","is_square","is_zero","isometry_to","iter","iter","iter_mut","ith","ith","ith_axis","ith_axis","kronecker","lanes","le","len","len","lerp","lerp","lerp","lerp","ln","look_at_lh","look_at_lh","look_at_lh","look_at_rh","look_at_rh","look_at_rh","lower_triangle","lp_norm","lt","lu","magnitude","magnitude_squared","map","map_diagonal","map_diagonal","map_with_location","max","max_value","max_value","mean","mean_of","metric_distance","metric_distance","metric_distance","metric_distance","metric_distance","min","min_value","min_value","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_to","ncols","neg","neg","neg","neg_mut","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_and_get","new_eps","new_nonuniform_scaling","new_nonuniform_scaling","new_nonuniform_scaling_wrt_point","new_nonuniform_scaling_wrt_point","new_nonuniform_scaling_wrt_point","new_nonuniform_scaling_wrt_point","new_normalize","new_observer_frame","new_observer_frame","new_observer_frames","new_orthographic","new_orthographic","new_perspective","new_perspective","new_rotation","new_rotation","new_rotation","new_rotation","new_rotation_wrt_point","new_rotation_wrt_point","new_scaling","new_scaling","new_translation","new_translation","new_unchecked","new_unchecked","new_unchecked","new_with_strides_unchecked","new_with_strides_unchecked","nlerp","nlerp","norm","norm","norm","norm","norm","norm","norm","norm_squared","norm_squared","norm_squared","normalize","normalize_mut","nrows","one","orthonormal_subspace_basis","orthonormal_subspace_basis","orthonormalize","orthonormalize","partial_cmp","perp","polar","pow","pow_mut","powf","powf","prepend_nonuniform_scaling","prepend_nonuniform_scaling","prepend_nonuniform_scaling_mut","prepend_nonuniform_scaling_mut","prepend_scaling","prepend_scaling","prepend_scaling_mut","prepend_scaling_mut","prepend_translation","prepend_translation","prepend_translation_mut","prepend_translation_mut","product","product","product","pseudo_inverse","ptr","ptr","ptr","ptr","ptr","ptr_mut","ptr_mut","ptr_mut","ptr_mut","push","push","qr","quadform","quadform","quadform_tr","quadform_tr","quadform_tr_with_workspace","quadform_tr_with_workspace","quadform_with_workspace","quadform_with_workspace","quaternion","rank","relative_eq","relative_eq","relative_eq","remove_column","remove_columns","remove_columns_at","remove_columns_generic","remove_fixed_columns","remove_fixed_rows","remove_row","remove_rows","remove_rows_at","remove_rows_generic","renormalize","renormalize_fast","repeat","repeat","repeat","repeat","repeat","repeat","repeat","repeat","repeat_generic","repeat_generic","replace","replace_unchecked","reshape_generic","reshape_generic","reshape_generic","reshape_generic","reshape_generic","reshape_generic","reshape_generic","reshape_generic","resize","resize","resize_generic","resize_horizontally","resize_horizontally_mut","resize_horizontally_mut","resize_mut","resize_mut","resize_vertically","resize_vertically_mut","resize_vertically_mut","rotation","rotation_between","rotation_between","rotation_between_axis","rotation_between_axis","rotation_to","rotation_to","row","row_iter","row_iter_mut","row_mean","row_mean_tr","row_mut","row_part","row_part_mut","row_product","row_product_tr","row_sum","row_sum_tr","row_variance","row_variance_tr","rows","rows_generic","rows_generic_mut","rows_generic_with_step","rows_generic_with_step_mut","rows_mut","rows_range","rows_range_mut","rows_range_pair","rows_range_pair_mut","rows_with_step","rows_with_step_mut","scale","scale_mut","scale_mut","scale_mut","scaled_axis","scaled_axis","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between_axis","scaled_rotation_between_axis","schur","sclerp","select","select_columns","select_rows","set_column","set_diagonal","set_magnitude","set_partial_diagonal","set_row","shape","shape","shape","shape","shape","shape","shape_generic","simd_cap_magnitude","simd_clamp","simd_eq","simd_ge","simd_gt","simd_horizontal_max","simd_horizontal_min","simd_le","simd_lt","simd_max","simd_min","simd_ne","simd_try_normalize","simd_try_normalize_mut","sin_angle","singular_values","singular_values_unordered","size","slerp","slerp","slerp","slerp","slerp","slice","slice_mut","slice_range","slice_range_mut","slice_with_steps","slice_with_steps_mut","solve_lower_triangular","solve_lower_triangular","solve_lower_triangular_mut","solve_lower_triangular_mut","solve_lower_triangular_unchecked","solve_lower_triangular_unchecked","solve_lower_triangular_unchecked_mut","solve_lower_triangular_unchecked_mut","solve_lower_triangular_with_diag_mut","solve_lower_triangular_with_diag_mut","solve_lower_triangular_with_diag_unchecked_mut","solve_lower_triangular_with_diag_unchecked_mut","solve_upper_triangular","solve_upper_triangular","solve_upper_triangular_mut","solve_upper_triangular_mut","solve_upper_triangular_unchecked","solve_upper_triangular_unchecked","solve_upper_triangular_unchecked_mut","solve_upper_triangular_unchecked_mut","splat","storage","strides","strides","strides","strides","strides","strides","sub","sub","sub","sub","sub_assign","sub_assign","sub_to","sum","sum","sum","sum","sum","sup","svd","svd_unordered","swap","swap_columns","swap_rows","swap_unchecked","sygemv","sygemv","syger","symmetric_eigen","symmetric_eigenvalues","symmetric_eigenvalues","symmetric_part","symmetric_part","symmetric_tridiagonalize","to_euler_angles","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_isometry","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_rotation_matrix","to_rotation_matrix","to_scalar","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_superset","tr_copy_from","tr_dot","tr_mul","tr_mul_to","tr_solve_lower_triangular","tr_solve_lower_triangular","tr_solve_lower_triangular_mut","tr_solve_lower_triangular_mut","tr_solve_lower_triangular_unchecked","tr_solve_lower_triangular_unchecked","tr_solve_lower_triangular_unchecked_mut","tr_solve_lower_triangular_unchecked_mut","tr_solve_upper_triangular","tr_solve_upper_triangular","tr_solve_upper_triangular_mut","tr_solve_upper_triangular_mut","tr_solve_upper_triangular_unchecked","tr_solve_upper_triangular_unchecked","tr_solve_upper_triangular_unchecked_mut","tr_solve_upper_triangular_unchecked_mut","trace","trace","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","translation","transpose","transpose_mut","transpose_to","try_cast","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_inverse","try_inverse","try_inverse_mut","try_inverse_mut","try_new","try_new_and_get","try_normalize","try_normalize_mut","try_polar","try_schur","try_sclerp","try_set_magnitude","try_slerp","try_slerp","try_svd","try_svd_unordered","try_symmetric_eigen","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","udu","ulps_eq","ulps_eq","uninit","uninit","uninit","unscale","unscale_mut","unscale_mut","unscale_mut","unwrap","upper_triangle","variance","vector_to_matrix_index","vget_unchecked","vget_unchecked","vget_unchecked_mut","vget_unchecked_mut","view","view_mut","view_range","view_range_mut","view_with_steps","view_with_steps_mut","w","w","w_axis","w_axis","x","x","x_axis","x_axis","xx","xx","xxx","xxx","xxy","xxy","xxz","xxz","xy","xy","xyx","xyx","xyy","xyy","xyz","xyz","xz","xz","xzx","xzx","xzy","xzy","xzz","xzz","y","y","y_axis","y_axis","yx","yx","yxx","yxx","yxy","yxy","yxz","yxz","yy","yy","yyx","yyx","yyy","yyy","yyz","yyz","yz","yz","yzx","yzx","yzy","yzy","yzz","yzz","z","z","z_axis","z_axis","zero","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros_generic","zeros_generic","zip_apply","zip_fold","zip_map","zip_zip_apply","zip_zip_map","zx","zx","zxx","zxx","zxy","zxy","zxz","zxz","zy","zy","zyx","zyx","zyy","zyy","zyz","zyz","zz","zz","zzx","zzx","zzy","zzy","zzz","zzz","Allocator","Buffer","BufferUninit","Reallocator","SameShapeAllocator","SameShapeC","SameShapeR","SameShapeVectorAllocator","allocate_from_iterator","allocate_from_row_iterator","allocate_uninit","assume_init","reallocate_copy","AreMultipliable","DimEq","Representative","Representative","Representative","Representative","SameDimension","SameNumberOfColumns","SameNumberOfRows","ShapeConstraint","borrow","borrow_mut","clone","clone_into","fmt","from","from_subset","into","is_in_subset","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","IJKW","M2x2","M2x3","M2x4","M2x5","M2x6","M3x2","M3x3","M3x4","M3x5","M3x6","M4x2","M4x3","M4x4","M4x5","M4x6","M5x2","M5x3","M5x4","M5x5","M5x6","M6x2","M6x3","M6x4","M6x5","M6x6","X","XY","XYZ","XYZW","XYZWA","XYZWAB","a","a","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","i","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","j","k","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m15","m15","m15","m15","m15","m15","m15","m15","m15","m15","m16","m16","m16","m16","m16","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m25","m25","m25","m25","m25","m25","m25","m25","m25","m25","m26","m26","m26","m26","m26","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m34","m34","m34","m34","m34","m34","m34","m34","m34","m34","m34","m34","m35","m35","m35","m35","m35","m35","m35","m35","m36","m36","m36","m36","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m43","m43","m43","m43","m43","m43","m43","m43","m43","m43","m43","m43","m44","m44","m44","m44","m44","m44","m44","m44","m44","m45","m45","m45","m45","m45","m45","m46","m46","m46","m51","m51","m51","m51","m51","m51","m51","m51","m51","m51","m52","m52","m52","m52","m52","m52","m52","m52","m52","m52","m53","m53","m53","m53","m53","m53","m53","m53","m54","m54","m54","m54","m54","m54","m55","m55","m55","m55","m56","m56","m61","m61","m61","m61","m61","m62","m62","m62","m62","m62","m63","m63","m63","m63","m64","m64","m64","m65","m65","m66","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","w","w","w","w","x","x","x","x","x","x","y","y","y","y","y","z","z","z","z","DefaultAllocator","allocate_from_iterator","allocate_from_iterator","allocate_from_iterator","allocate_uninit","allocate_uninit","allocate_uninit","assume_init","assume_init","assume_init","borrow","borrow_mut","clone","clone_into","fmt","from","from_subset","into","is_in_subset","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","Const","Const","Dim","DimAdd","DimDiff","DimDiv","DimMax","DimMaximum","DimMin","DimMinimum","DimMul","DimName","DimNameAdd","DimNameDiff","DimNameDiv","DimNameMax","DimNameMaximum","DimNameMin","DimNameMinimum","DimNameMul","DimNameProd","DimNameQuot","DimNameSub","DimNameSum","DimProd","DimQuot","DimSub","DimSum","Dyn","Dynamic","IsDynamic","IsNotStaticOne","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","ToConst","ToTypenum","Typenum","U0","U0","U1","U1","U10","U10","U100","U100","U101","U101","U102","U102","U103","U103","U104","U104","U105","U105","U106","U106","U107","U107","U108","U108","U109","U109","U11","U11","U110","U110","U111","U111","U112","U112","U113","U113","U114","U114","U115","U115","U116","U116","U117","U117","U118","U118","U119","U119","U12","U12","U120","U120","U121","U121","U122","U122","U123","U123","U124","U124","U125","U125","U126","U126","U127","U127","U13","U13","U14","U14","U15","U15","U16","U16","U17","U17","U18","U18","U19","U19","U2","U2","U20","U20","U21","U21","U22","U22","U23","U23","U24","U24","U25","U25","U26","U26","U27","U27","U28","U28","U29","U29","U3","U3","U30","U30","U31","U31","U32","U32","U33","U33","U34","U34","U35","U35","U36","U36","U37","U37","U38","U38","U39","U39","U4","U4","U40","U40","U41","U41","U42","U42","U43","U43","U44","U44","U45","U45","U46","U46","U47","U47","U48","U48","U49","U49","U5","U5","U50","U50","U51","U51","U52","U52","U53","U53","U54","U54","U55","U55","U56","U56","U57","U57","U58","U58","U59","U59","U6","U6","U60","U60","U61","U61","U62","U62","U63","U63","U64","U64","U65","U65","U66","U66","U67","U67","U68","U68","U69","U69","U7","U7","U70","U70","U71","U71","U72","U72","U73","U73","U74","U74","U75","U75","U76","U76","U77","U77","U78","U78","U79","U79","U8","U8","U80","U80","U81","U81","U82","U82","U83","U83","U84","U84","U85","U85","U86","U86","U87","U87","U88","U88","U89","U89","U9","U9","U90","U90","U91","U91","U92","U92","U93","U93","U94","U94","U95","U95","U96","U96","U97","U97","U98","U98","U99","U99","USIZE","add","add","add","add","add","add","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","dim","dim","div","div","div","div","div","div","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from_subset","from_subset","from_usize","from_usize","from_usize","hash","into","into","is","is_in_subset","is_in_subset","max","max","max","max","max","max","min","min","min","min","min","min","mul","mul","mul","mul","mul","mul","name","name","new","sub","sub","sub","sub","sub","sub","sub","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","try_to_usize","try_to_usize","try_to_usize","type_id","type_id","value","value","value","MatrixIndex","MatrixIndexMut","Output","OutputMut","ColumnIter","ColumnIterMut","MatrixIter","MatrixIterMut","RowIter","RowIterMut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","count","count","count","count","count","count","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","CStride","CStride","IsContiguous","Output","Owned","OwnedUninit","RStride","RStride","RawStorage","RawStorageMut","ReshapableStorage","SameShapeStorage","Storage","StorageMut","as_mut_slice_unchecked","as_slice_unchecked","clone_owned","get_address_unchecked","get_address_unchecked_linear","get_address_unchecked_linear_mut","get_address_unchecked_mut","get_unchecked","get_unchecked_linear","get_unchecked_linear_mut","get_unchecked_mut","into_owned","is_contiguous","linear_index","ptr","ptr_mut","reshape_generic","shape","strides","swap_unchecked","swap_unchecked_linear","Init","InitStatus","Uninit","Value","assume_init_mut","assume_init_mut","assume_init_mut","assume_init_ref","assume_init_ref","assume_init_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from_subset","from_subset","init","init","init","into","into","is_in_subset","is_in_subset","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","AbstractRotation","Affine2","Affine3","DualQuaternion","Isometry","Isometry2","Isometry3","IsometryMatrix2","IsometryMatrix3","OPoint","Orthographic3","Perspective3","Point","Point1","Point2","Point3","Point4","Point5","Point6","Projective2","Projective3","Quaternion","Reflection","Reflection1","Reflection2","Reflection3","Reflection4","Reflection5","Reflection6","Representative","Rotation","Rotation2","Rotation3","Scale","Scale1","Scale2","Scale3","Scale4","Scale5","Scale6","Similarity","Similarity2","Similarity3","SimilarityMatrix2","SimilarityMatrix3","SubTCategoryOf","SuperTCategoryOf","TAffine","TCategory","TCategoryMul","TGeneral","TProjective","Transform","Transform2","Transform3","Translation","Translation1","Translation2","Translation3","Translation4","Translation5","Translation6","UnitComplex","UnitDualQuaternion","UnitQuaternion","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","acos","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","angle","angle","angle","angle","angle","angle","angle_to","angle_to","angle_to","angle_to","angle_to","angle_to","append_axisangle_linearized","append_rotation_mut","append_rotation_mut","append_rotation_wrt_center_mut","append_rotation_wrt_center_mut","append_rotation_wrt_point_mut","append_rotation_wrt_point_mut","append_scaling","append_scaling_mut","append_translation_mut","append_translation_mut","apply","as_matrix","as_matrix","as_mut","as_projective","as_projective","as_ref","as_vector","as_vector_mut","asin","asinh","aspect","atan","atanh","axis","axis","axis","axis","axis_angle","axis_angle","axis_angle","axis_angle","bias","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","check_homogeneous_invariants","check_homogeneous_invariants","check_homogeneous_invariants","check_homogeneous_invariants","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_owned","clone_owned","complex","conjugate","conjugate","conjugate","conjugate","conjugate","conjugate_mut","conjugate_mut","conjugate_mut","conjugate_mut","conjugate_mut","coords","coords","cos","cos_angle","cosh","default","default","default","default","default","default","default","default","default","default","default","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dual","dual_quaternion","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","euler_angles","euler_angles","euler_angles","euler_angles_ordered","euler_angles_ordered","exp","exp","exp_eps","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","face_towards","face_towards","face_towards","face_towards","face_towards","face_towards","face_towards","face_towards","face_towards","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fovy","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_basis_unchecked","from_basis_unchecked","from_basis_unchecked","from_basis_unchecked","from_basis_unchecked","from_basis_unchecked","from_complex","from_complex_and_get","from_coordinates","from_cos_sin_unchecked","from_euler_angles","from_euler_angles","from_euler_angles","from_fov","from_homogeneous","from_imag","from_isometry","from_isometry","from_matrix","from_matrix","from_matrix","from_matrix","from_matrix","from_matrix","from_matrix_eps","from_matrix_eps","from_matrix_eps","from_matrix_eps","from_matrix_eps","from_matrix_eps","from_matrix_unchecked","from_matrix_unchecked","from_matrix_unchecked","from_matrix_unchecked","from_parts","from_parts","from_parts","from_parts","from_polar_decomposition","from_quaternion","from_real","from_real","from_real_and_dual","from_rotation","from_rotation_matrix","from_rotation_matrix","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis_eps","from_scaling","from_slice","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_vector","from_vector","ge","get_unchecked","get_unchecked_mut","gt","half","has_normalizer","has_normalizer","has_normalizer","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","imag","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","inf","inf_sup","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_owned","inv_mul","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_unchecked","is_empty","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_pure","is_zero","is_zero","isometry","isometry_to","iter","iter_mut","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","le","left","left_div","len","lerp","lerp","lerp","lerp","lerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","ln","ln","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","lt","magnitude","magnitude_squared","map","matrix","matrix","matrix_mut","matrix_mut","matrix_mut_unchecked","matrix_mut_unchecked","max_value","max_value","mean_of","min_value","min_value","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_containing_point","new_eps","new_observer_frame","new_observer_frame","new_observer_frame","new_observer_frame","new_observer_frames","new_observer_frames","new_observer_frames","new_observer_frames","new_observer_frames","nlerp","nlerp","norm","norm","norm","norm_squared","norm_squared","norm_squared","normalize","normalize","normalize_mut","normalize_mut","one","one","one","one","one","one","one","one","one","one","one","origin","outer","partial_cmp","polar_decomposition","powf","powf","powf","powf","powf","powf","powf","prepend_scaling","prepend_scaling_mut","project","project_point","project_point","project_vector","project_vector","pseudo_inverse","pure","quaternion","real","reflect","reflect_rows","reflect_rows_with_sign","reflect_with_sign","reject","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","renormalize","renormalize","renormalize","renormalize","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","right","right_div","rotation","rotation","rotation","rotation","rotation","rotation","rotation","rotation","rotation","rotation","rotation_between","rotation_between","rotation_between","rotation_between","rotation_between","rotation_between","rotation_between_axis","rotation_between_axis","rotation_to","rotation_to","rotation_to","rotation_to","rotation_to","rotation_to","rotation_wrt_point","rotation_wrt_point","scalar","scale_mut","scale_mut","scaled_axis","scaled_axis","scaled_axis","scaled_axis","scaled_axis","scaled_axis","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between_axis","scaled_rotation_between_axis","scaling","sclerp","select","select","select","select","select","select","select","select","select","select","set_aspect","set_bottom","set_bottom_and_top","set_category","set_fovy","set_left","set_left_and_right","set_right","set_scaling","set_top","set_zfar","set_zfar","set_znear","set_znear","set_znear_and_zfar","set_znear_and_zfar","simd_clamp","simd_eq","simd_ge","simd_gt","simd_horizontal_max","simd_horizontal_min","simd_le","simd_lt","simd_max","simd_min","simd_ne","simd_try_inverse","sin","sin_angle","sinh","slerp","slerp","slerp","slerp","slerp","slerp","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","sqrt","squared","stride","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sup","swap_unchecked","tan","tanh","to_euler_angles","to_euler_angles","to_euler_angles","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_isometry","to_matrix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_projective","to_projective","to_rotation_matrix","to_rotation_matrix","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","top","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","translation","translation","translation","translation","translation","translation","translation","translation","translation","translation","transpose","transpose_mut","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_inverse","try_inverse","try_inverse","try_inverse","try_inverse_mut","try_inverse_mut","try_inverse_mut","try_inverse_mut","try_inverse_transform_point","try_lerp_slerp","try_lerp_slerp","try_lerp_slerp","try_lerp_slerp","try_sclerp","try_slerp","try_slerp","try_slerp","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","unproject_point","unproject_point","unscale_mut","unscale_mut","unwrap","unwrap","unwrap","unwrap","vector","vector","vector","vector_mut","xx","xx","xxx","xxx","xxy","xxy","xxz","xxz","xy","xy","xyx","xyx","xyy","xyy","xyz","xyz","xz","xz","xzx","xzx","xzy","xzy","xzz","xzz","yx","yx","yxx","yxx","yxy","yxy","yxz","yxz","yy","yy","yyx","yyx","yyy","yyy","yyz","yyz","yz","yz","yzx","yzx","yzy","yzy","yzz","yzz","zero","zero","zfar","zfar","znear","znear","zx","zx","zxx","zxx","zxy","zxy","zxz","zxz","zy","zy","zyx","zyx","zyy","zyy","zyz","zyz","zz","zz","zzx","zzx","zzy","zzy","zzz","zzz","Bidiagonal","Cholesky","ColPivQR","FullPivLU","Hessenberg","LU","PermutationSequence","QR","SVD","Schur","SymmetricEigen","SymmetricTridiagonal","UDU","append_permutation","balancing","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","complex_eigenvalues","d","d","d_matrix","determinant","determinant","determinant","determinant","determinant","diagonal","diagonal","eigenvalues","eigenvalues","eigenvectors","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","givens","h","householder","identity","identity","identity_generic","insert_column","into","into","into","into","into","into","into","into","into","into","into","into","into","inv_permute_columns","inv_permute_rows","inverse","is_empty","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_invertible","is_invertible","is_invertible","is_invertible","is_upper_diagonal","l","l","l","l_dirty","l_unpack","len","ln_determinant","new","new","new","new","new","new","new","new","new","new","new","new","new_unchecked","new_unordered","new_with_substitute","new_with_workspace","off_diagonal","off_diagonal","p","p","p","pack_dirty","permute_columns","permute_rows","pseudo_inverse","q","q","q","q","q","q_tr_mul","q_tr_mul","r","r","rank","rank_one_update","recompose","recompose","recompose","remove_column","singular_values","solve","solve","solve","solve","solve","solve","solve_mut","solve_mut","solve_mut","solve_mut","solve_mut","sort_by_singular_values","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_polar","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_inverse","try_inverse","try_inverse","try_inverse","try_inverse_to","try_invert_to","try_new","try_new","try_new","try_new_unordered","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u","u","u","u","u","unpack","unpack","unpack","unpack","unpack","unpack","unpack","unpack","unpack","unpack_dirty","unpack_h","unpack_r","unpack_r","unpack_tridiagonal","v_t","v_t","wilkinson_shift","balance_parlett_reinsch","unbalance","GivensRotation","borrow","borrow_mut","c","cancel_x","cancel_y","clone","clone_into","fmt","from","from_subset","identity","into","inverse","is_in_subset","new","new_unchecked","rotate","rotate_rows","s","to_owned","to_subset","to_subset_unchecked","try_from","try_into","try_new","type_id"],"q":[[0,"nalgebra"],[1013,"nalgebra::base"],[2984,"nalgebra::base::allocator"],[2997,"nalgebra::base::constraint"],[3022,"nalgebra::base::coordinates"],[4055,"nalgebra::base::default_allocator"],[4087,"nalgebra::base::dimension"],[4479,"nalgebra::base::indexing"],[4483,"nalgebra::base::iter"],[4606,"nalgebra::base::storage"],[4641,"nalgebra::base::uninit"],[4688,"nalgebra::geometry"],[6785,"nalgebra::linalg"],[7118,"nalgebra::linalg::balancing"],[7120,"nalgebra::linalg::givens"]],"d":["Trait <strong>alias</strong> for <code>Add</code> and <code>AddAssign</code> with result of type <code>Self</code>.","Trait <strong>alias</strong> for <code>Div</code> and <code>DivAssign</code> with result of type <code>Self</code>.","Trait <strong>alias</strong> for <code>Mul</code> and <code>MulAssign</code> with result of type <code>Self</code>.","Trait <strong>alias</strong> for <code>Sub</code> and <code>SubAssign</code> with result of type <code>Self</code>.","A complex number in Cartesian form.","Trait shared by all complex fields and its subfields (like …","The type of the elements of each lane of this SIMD value.","Trait implemented by fields, i.e., complex numbers and …","Trait shared by all reals.","","Lane-wise generalization of <code>bool</code> for SIMD booleans.","Type of the result of comparing two SIMD values like <code>self</code>.","Lane-wise generalisation of <code>ComplexField</code> for SIMD complex …","Lane-wise generalization of the standard <code>PartialOrd</code> for …","Lanewise generalization of <code>RealField</code> for SIMD reals.","Type of the coefficients of a complex number.","Base trait for every SIMD types.","The absolute value of <code>a</code>.","The absolute value of this complex number: …","","","Computes the principal value of the inverse cosine of <code>self</code>.","","Computes the principal value of inverse hyperbolic cosine …","","","","","","","","","","","","","Are all vector lanes true?","Lane-wise bitwise and of the vector elements.","Is any vector lane true?","The argument of this complex number.","","","","Computes the principal value of the inverse sine of <code>self</code>.","","Computes the principal value of inverse hyperbolic sine of …","","Computes the principal value of the inverse tangent of <code>self</code>…","","","Computes the principal value of inverse hyperbolic tangent …","[Reexported at the root of this crate.] Data structures …","A bit mask representing the boolean state of each lanes of …","","","","","","","The center of two points.","Returns a reference to the input value clamped to the …","","","","Returns the complex conjugate. i.e. <code>re - i im</code>","","","Converts an object from one type to an equivalent or more …","Converts an object from one type to an equivalent or more …","Use with care! Same as <code>try_convert</code> but without any …","Use with care! Same as <code>try_convert</code> but without any …","Copies the sign of <code>sign</code> to <code>self</code>.","","","Computes the cosine of <code>self</code>.","Cardinal cos","","Computes the hyperbolic cosine of <code>self</code>.","","","The distance between two points.","The squared distance between two points.","","","","","","","","","","","","","Construct a dynamic matrix directly from data.","Construct a dynamic column vector directly from data.","","","","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","","","","Extracts the i-th lane of <code>self</code>.","","Extracts the i-th lane of <code>self</code> without bound-checking.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Builds a pure-real complex number from the given value.","","Builds a pure-real complex number from the given value.","","","","","","","","","","","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","","[Reexported at the root of this crate.] Data structures …","","Computes (self.conjugate() * self + other.conjugate() * …","","Returns imaginary unit","Merges the value of <code>if_value()</code> and <code>else_value()</code> depending …","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","Imaginary portion of the complex number","The imaginary part of this complex number.","","Returns the infimum of <code>a</code> and <code>b</code>.","Returns simultaneously the infimum and supremum of <code>a</code> and <code>b</code>.","Calls <code>U::from(self)</code>.","Returns <code>1/self</code>","","","Indicates if <code>try_convert</code> will succeed without actually …","","","Checks if the given complex number is finite","","","Checks if the given complex number is infinite","Checks if the given complex number is NaN","Checks if the given complex number is normal","","Is the sign of this real number negative?","Is the sign of this real number positive?","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","The number of lanes of this SIMD value.","","[Reexported at the root of this crate.] Factorization of …","","Computes the principal value of natural logarithm of <code>self</code>.","","","","","","Returns the logarithm of <code>self</code> with respect to an arbitrary …","","","","","","","Applies a function to each lane of <code>self</code>.","Construct a fixed-size matrix directly from data.","Same as <code>cmp::max</code>.","","The largest finite positive value representable using this …","Same as <code>cmp::min</code>.","","The smallest finite positive value representable using …","The modulus of this complex number.","","The squared modulus of this complex number.","","","","","","","","","","","","","","","","","","","","","","Create a new Complex","Are all vector lanes false?","","The sum of the absolute value of this complex number’s …","","Returns the square of the norm (since <code>T</code> doesn’t …","","Gets the multiplicative identity element.","","Lane-wise bitwise or of the vector elements.","Clamp <code>value</code> between <code>min</code> and <code>max</code>. Returns <code>None</code> if <code>value</code> is …","Compare <code>a</code> and <code>b</code> using a partial ordering relation.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a &gt;= b</code>.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a &gt; b</code>.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a &lt;= b</code>.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a &lt; b</code>.","Return the maximum of <code>a</code> and <code>b</code> if they are comparable.","Return the minimum of <code>a</code> and <code>b</code> if they are comparable.","Sorts two values in increasing order using a partial …","","Construct a fixed-size point directly from data.","","","","","","","","","","","","","","","","","","","","","","","","","","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a floating point power.","","Raises <code>self</code> to a signed integer power.","","Raises <code>self</code> to an unsigned integer power.","","","Real portion of the complex number","The real part of this complex number.","","","","","","","","","","","","","","","","Replaces the i-th lane of <code>self</code> by <code>val</code>.","","Replaces the i-th lane of <code>self</code> by <code>val</code> without …","","","","Multiplies this complex number by <code>factor</code>.","Multiplies <code>self</code> by the scalar <code>t</code>.","","","Merges <code>self</code> and <code>other</code> depending on the lanes of <code>cond</code>.","","","","The exponential part of this complex number: …","The absolute value of this complex number: …","","","","","","","","","","","","","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","The argument of this complex number.","","","","","","","","","","","","","Computes the principal value of the inverse sine of <code>self</code>.","","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","","Computes the principal value of the inverse tangent of <code>self</code>…","","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","","","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","","","","","","","","","","","","","","","","","","","","","","","","","Clamps each lane of <code>self</code> between the corresponding lane of …","","","","","","","","","","","","","Copies the sign of <code>sign</code> to <code>self</code>.","","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Cardinal cos","","","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","","","","","Lanewise <em>equal</em> <code>==</code> comparison.","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>greater or equal</em> <code>&gt;=</code> comparison.","Lanewise <em>greater than</em> <code>&gt;</code> comparison.","The max value among all lanes of <code>self</code>.","The min value among all lanes of <code>self</code>.","Computes the product of all the lanes of <code>self</code>.","","","","","","","","","","","","Computes the sum of all the lanes of <code>self</code>.","","","","","","","","","","","","Computes (self.conjugate() * self + other.conjugate() * …","","","","","","","","","","","","The imaginary part of this complex number.","","","","","","","","","","","","Lanewise <em>less or equal</em> <code>&lt;=</code> comparison.","","Computes the principal value of natural logarithm of <code>self</code>.","","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","","","","","","","","","","","","","","","","","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>less than</em> <code>&lt;</code> comparison.","Lanewise max value.","Lanewise min value.","The modulus of this complex number.","","","","","","","","","","","","The squared modulus of this complex number.","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>not equal</em> <code>!=</code> comparison.","The sum of the absolute value of this complex number’s …","","","","","","","","","","","","","","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","","","","","","","","","","","","","The real part of this complex number.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multiplies this complex number by <code>factor</code>.","","","","","","","","","","","","The exponential part of this complex number: …","","","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","","","","","","","","","","","","","Cardinal sine","","","Computes the hyperbolic sine of <code>self</code>.","","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","","","","","","","","","","","","","","","","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","The exponential form of this complex number: (modulus, …","","The polar form of this complex number: (modulus, arg)","","","","","","","","","","","","","","","Divides this complex number by <code>factor</code>.","","","","","","","","","","","","","Computes the sine of <code>self</code>.","","","Cardinal sine","","Computes the hyperbolic sine of <code>self</code>.","","","","Initializes an SIMD value with each lanes set to <code>val</code>.","","","Computes the principal value of the square root of <code>self</code>.","","","","","","","","","","","","","","","Returns the supremum of <code>a</code> and <code>b</code>.","","Computes the tangent of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","The exponential form of this complex number: (modulus, …","","","","","","","","","","The polar form of this complex number: (modulus, arg)","","","","","","","","","","","","","Attempts to convert an object to a more specific one.","Attempts to convert an object to a more specific one.","","","","","","","Divides this complex number by <code>factor</code>.","","Divides <code>self</code> by the scalar <code>t</code>.","","Construct a fixed-size column vector directly from data.","Wraps <code>val</code> into the range <code>[min, max]</code> using modular …","Lane-wise bitwise xor of the vector elements.","Gets the additive identity element.","","Applies a function to each lane of <code>self</code> paired with the …","A array-based statically sized matrix data storage.","A dynamically sized column-major matrix.","A column-major matrix slice dynamic numbers of rows and …","A column-major matrix slice dynamic numbers of rows and …","A column-major matrix view dynamic numbers of rows and …","A column-major matrix view dynamic numbers of rows and …","A dynamically sized column vector.","A column vector slice dynamic numbers of rows and columns.","A column vector slice dynamic numbers of rows and columns.","A column vector view dynamic numbers of rows and columns.","A column vector view dynamic numbers of rows and columns.","A range with a size that may be known at compile-time.","Euclidean norm.","Lp norm.","The most generic column-major matrix (and vector) type.","A stack-allocated, column-major, 1x1 square matrix.","A stack-allocated, column-major, 1x2 matrix.","A stack-allocated, column-major, 1x3 matrix.","A stack-allocated, column-major, 1x4 matrix.","A stack-allocated, column-major, 1x5 matrix.","A stack-allocated, column-major, 1x6 matrix.","A heap-allocated, column-major, matrix with 1 rows and a …","A stack-allocated, column-major, 2x2 square matrix.","A stack-allocated, column-major, 2x1 matrix.","A stack-allocated, column-major, 2x3 matrix.","A stack-allocated, column-major, 2x4 matrix.","A stack-allocated, column-major, 2x5 matrix.","A stack-allocated, column-major, 2x6 matrix.","A heap-allocated, column-major, matrix with 2 rows and a …","A stack-allocated, column-major, 3x3 square matrix.","A stack-allocated, column-major, 3x1 matrix.","A stack-allocated, column-major, 3x2 matrix.","A stack-allocated, column-major, 3x4 matrix.","A stack-allocated, column-major, 3x5 matrix.","A stack-allocated, column-major, 3x6 matrix.","A heap-allocated, column-major, matrix with 3 rows and a …","A stack-allocated, column-major, 4x4 square matrix.","A stack-allocated, column-major, 4x1 matrix.","A stack-allocated, column-major, 4x2 matrix.","A stack-allocated, column-major, 4x3 matrix.","A stack-allocated, column-major, 4x5 matrix.","A stack-allocated, column-major, 4x6 matrix.","A heap-allocated, column-major, matrix with 4 rows and a …","A stack-allocated, column-major, 5x5 square matrix.","A stack-allocated, column-major, 5x1 matrix.","A stack-allocated, column-major, 5x2 matrix.","A stack-allocated, column-major, 5x3 matrix.","A stack-allocated, column-major, 5x4 matrix.","A stack-allocated, column-major, 5x6 matrix.","A heap-allocated, column-major, matrix with 5 rows and a …","A stack-allocated, column-major, 6x6 square matrix.","A stack-allocated, column-major, 6x1 matrix.","A stack-allocated, column-major, 6x2 matrix.","A stack-allocated, column-major, 6x3 matrix.","A stack-allocated, column-major, 6x4 matrix.","A stack-allocated, column-major, 6x5 matrix.","A heap-allocated, column-major, matrix with 6 rows and a …","The type of the result of a matrix cross product.","An owned matrix column-major matrix with <code>R</code> rows and <code>C</code> …","An owned matrix column-major matrix with <code>D</code> columns.","A matrix slice.","A column-major 1x1 matrix slice.","A column-major 1x2 matrix slice.","A column-major 1x3 matrix slice.","A column-major 1x4 matrix slice.","A column-major 1x5 matrix slice.","A column-major 1x6 matrix slice.","A column-major matrix slice with 1 row and a number of …","A column-major 2x2 matrix slice.","A column-major 2x1 matrix slice.","A column-major 2x3 matrix slice.","A column-major 2x4 matrix slice.","A column-major 2x5 matrix slice.","A column-major 2x6 matrix slice.","A column-major matrix slice with 2 rows and a number of …","A column-major 3x3 matrix slice.","A column-major 3x1 matrix slice.","A column-major 3x2 matrix slice.","A column-major 3x4 matrix slice.","A column-major 3x5 matrix slice.","A column-major 3x6 matrix slice.","A column-major matrix slice with 3 rows and a number of …","A column-major 4x4 matrix slice.","A column-major 4x1 matrix slice.","A column-major 4x2 matrix slice.","A column-major 4x3 matrix slice.","A column-major 4x5 matrix slice.","A column-major 4x6 matrix slice.","A column-major matrix slice with 4 rows and a number of …","A column-major 5x5 matrix slice.","A column-major 5x1 matrix slice.","A column-major 5x2 matrix slice.","A column-major 5x3 matrix slice.","A column-major 5x4 matrix slice.","A column-major 5x6 matrix slice.","A column-major matrix slice with 5 rows and a number of …","A column-major 6x6 matrix slice.","A column-major 6x1 matrix slice.","A column-major 6x2 matrix slice.","A column-major 6x3 matrix slice.","A column-major 6x4 matrix slice.","A column-major 6x5 matrix slice.","A column-major matrix slice with 6 rows and a number of …","A mutable matrix slice.","A column-major 1x1 matrix slice.","A column-major 1x2 matrix slice.","A column-major 1x3 matrix slice.","A column-major 1x4 matrix slice.","A column-major 1x5 matrix slice.","A column-major 1x6 matrix slice.","A column-major matrix slice with 1 row and a number of …","A column-major 2x2 matrix slice.","A column-major 2x1 matrix slice.","A column-major 2x3 matrix slice.","A column-major 2x4 matrix slice.","A column-major 2x5 matrix slice.","A column-major 2x6 matrix slice.","A column-major matrix slice with 2 rows and a number of …","A column-major 3x3 matrix slice.","A column-major 3x1 matrix slice.","A column-major 3x2 matrix slice.","A column-major 3x4 matrix slice.","A column-major 3x5 matrix slice.","A column-major 3x6 matrix slice.","A column-major matrix slice with 3 rows and a number of …","A column-major 4x4 matrix slice.","A column-major 4x1 matrix slice.","A column-major 4x2 matrix slice.","A column-major 4x3 matrix slice.","A column-major 4x5 matrix slice.","A column-major 4x6 matrix slice.","A column-major matrix slice with 4 rows and a number of …","A column-major 5x5 matrix slice.","A column-major 5x1 matrix slice.","A column-major 5x2 matrix slice.","A column-major 5x3 matrix slice.","A column-major 5x4 matrix slice.","A column-major 5x6 matrix slice.","A column-major matrix slice with 5 rows and a number of …","A column-major 6x6 matrix slice.","A column-major 6x1 matrix slice.","A column-major 6x2 matrix slice.","A column-major 6x3 matrix slice.","A column-major 6x4 matrix slice.","A column-major 6x5 matrix slice.","A column-major matrix slice with 6 rows and a number of …","A column-major matrix slice with <code>R</code> rows and <code>C</code> columns.","A column-major matrix slice with <code>D</code> rows and columns.","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","The type of the result of a matrix sum.","Renamed to <code>VecStorage</code>.","A matrix view.","A column-major 1x1 matrix view.","A column-major 1x2 matrix view.","A column-major 1x3 matrix view.","A column-major 1x4 matrix view.","A column-major 1x5 matrix view.","A column-major 1x6 matrix view.","A column-major matrix view with 1 row and a number of …","A column-major 2x2 matrix view.","A column-major 2x1 matrix view.","A column-major 2x3 matrix view.","A column-major 2x4 matrix view.","A column-major 2x5 matrix view.","A column-major 2x6 matrix view.","A column-major matrix view with 2 rows and a number of …","A column-major 3x3 matrix view.","A column-major 3x1 matrix view.","A column-major 3x2 matrix view.","A column-major 3x4 matrix view.","A column-major 3x5 matrix view.","A column-major 3x6 matrix view.","A column-major matrix view with 3 rows and a number of …","A column-major 4x4 matrix view.","A column-major 4x1 matrix view.","A column-major 4x2 matrix view.","A column-major 4x3 matrix view.","A column-major 4x5 matrix view.","A column-major 4x6 matrix view.","A column-major matrix view with 4 rows and a number of …","A column-major 5x5 matrix view.","A column-major 5x1 matrix view.","A column-major 5x2 matrix view.","A column-major 5x3 matrix view.","A column-major 5x4 matrix view.","A column-major 5x6 matrix view.","A column-major matrix view with 5 rows and a number of …","A column-major 6x6 matrix view.","A column-major 6x1 matrix view.","A column-major 6x2 matrix view.","A column-major 6x3 matrix view.","A column-major 6x4 matrix view.","A column-major 6x5 matrix view.","A column-major matrix view with 6 rows and a number of …","A mutable matrix view.","A column-major 1x1 matrix view.","A column-major 1x2 matrix view.","A column-major 1x3 matrix view.","A column-major 1x4 matrix view.","A column-major 1x5 matrix view.","A column-major 1x6 matrix view.","A column-major matrix view with 1 row and a number of …","A column-major 2x2 matrix view.","A column-major 2x1 matrix view.","A column-major 2x3 matrix view.","A column-major 2x4 matrix view.","A column-major 2x5 matrix view.","A column-major 2x6 matrix view.","A column-major matrix view with 2 rows and a number of …","A column-major 3x3 matrix view.","A column-major 3x1 matrix view.","A column-major 3x2 matrix view.","A column-major 3x4 matrix view.","A column-major 3x5 matrix view.","A column-major 3x6 matrix view.","A column-major matrix view with 3 rows and a number of …","A column-major 4x4 matrix view.","A column-major 4x1 matrix view.","A column-major 4x2 matrix view.","A column-major 4x3 matrix view.","A column-major 4x5 matrix view.","A column-major 4x6 matrix view.","A column-major matrix view with 4 rows and a number of …","A column-major 5x5 matrix view.","A column-major 5x1 matrix view.","A column-major 5x2 matrix view.","A column-major 5x3 matrix view.","A column-major 5x4 matrix view.","A column-major 5x6 matrix view.","A column-major matrix view with 5 rows and a number of …","A column-major 6x6 matrix view.","A column-major 6x1 matrix view.","A column-major 6x2 matrix view.","A column-major 6x3 matrix view.","A column-major 6x4 matrix view.","A column-major 6x5 matrix view.","A column-major matrix view with 6 rows and a number of …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A trait for abstract matrix norms.","The type of the norm.","Trait implemented by entities scan be be normalized and …","An owned matrix column-major matrix with <code>R</code> rows and <code>C</code> …","An owned D-dimensional column vector.","A dynamically sized row vector.","An owned D-dimensional row vector.","A statically sized D-dimensional row vector.","A matrix with one row and <code>D</code> columns .","A stack-allocated, 1-dimensional row vector.","A stack-allocated, 2-dimensional row vector.","A stack-allocated, 3-dimensional row vector.","A stack-allocated, 4-dimensional row vector.","A stack-allocated, 5-dimensional row vector.","A stack-allocated, 6-dimensional row vector.","A statically sized column-major matrix with <code>R</code> rows and <code>C</code> …","A column-major matrix slice with dimensions known at …","A column-major matrix slice with dimensions known at …","A column-major matrix view with dimensions known at …","A column-major matrix view with dimensions known at …","A statically sized D-dimensional column vector.","A column vector slice with dimensions known at …","A column vector slice with dimensions known at …","A column vector view with dimensions known at compile-time.","A column vector view with dimensions known at compile-time.","The basic scalar type for all structures of <code>nalgebra</code>.","Type of the range size. May be a type-level integer.","A range with a size that may be known at compile-time.","A matrix data storage for a matrix view. Only contains an …","A mutable matrix data storage for mutable matrix view. …","A square matrix.","L-infinite norm aka. Chebytchev norm aka. uniform norm …","An owned matrix with uninitialized data.","An owned matrix with uninitialized data.","A wrapper that ensures the underlying algebraic entity has …","A stack-allocated, 1-dimensional unit vector.","A stack-allocated, 2-dimensional unit vector.","A stack-allocated, 3-dimensional unit vector.","A stack-allocated, 4-dimensional unit vector.","A stack-allocated, 5-dimensional unit vector.","A stack-allocated, 6-dimensional unit vector.","A Vec-based matrix data storage. It may be …","A matrix with one column and <code>D</code> rows.","A stack-allocated, 1-dimensional column vector.","A stack-allocated, 2-dimensional column vector.","A stack-allocated, 3-dimensional column vector.","A stack-allocated, 4-dimensional column vector.","A stack-allocated, 5-dimensional column vector.","A stack-allocated, 6-dimensional column vector.","An owned matrix column-major matrix with <code>R</code> rows and <code>C</code> …","A column vector slice with dimensions known at …","A 1D column vector slice.","A 2D column vector slice.","A 3D column vector slice.","A 4D column vector slice.","A 5D column vector slice.","A 6D column vector slice.","A column vector slice with dimensions known at …","A 1D column vector slice.","A 2D column vector slice.","A 3D column vector slice.","A 4D column vector slice.","A 5D column vector slice.","A 6D column vector slice.","The type of the result of a matrix sum.","A column vector view with dimensions known at compile-time.","A 1D column vector view.","A 2D column vector view.","A 3D column vector view.","A 4D column vector view.","A 5D column vector view.","A 6D column vector view.","A column vector view with dimensions known at compile-time.","A 1D column vector view.","A 2D column vector view.","A 3D column vector view.","A 4D column vector view.","A 5D column vector view.","A 6D column vector view.","A matrix data storage for a matrix view. Only contains an …","A mutable matrix data storage for mutable matrix view. …","The column vector with a 1 as its fifth component, and …","The column vector with a 1 as its fifth component, and …","The unit column vector with a 1 as its fifth component, …","The unit column vector with a 1 as its fifth component, …","Computes the component-wise absolute value.","","","Equivalent to <code>self.adjoint() * rhs</code>.","Equivalent to <code>self.adjoint() * rhs</code> but stores the result …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …","","","","","","","Adds a scalar to <code>self</code>.","Adds a scalar to <code>self</code> in-place.","Equivalent to <code>self + rhs</code> but stores the result into <code>out</code> to …","The adjoint (aka. conjugate-transpose) of <code>self</code>.","Sets <code>self</code> to its adjoint (aka. conjugate-transpose).","Takes the adjoint (aka. conjugate-transpose) of <code>self</code> and …","Abstract definition of a matrix data storage allocator.","Returns the absolute value of the component with the …","Returns the absolute value of the component with the …","The smallest angle between two vectors.","The rotation angle in [0; pi] of this unit quaternion.","The rotation angle in <code>]-pi; pi]</code> of this unit complex …","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","Appends to <code>self</code> a rotation given in the axis-angle form, …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to <code>self</code> followed by a …","Computes in-place the transformation equal to <code>self</code> …","Computes in-place the transformation equal to <code>self</code> …","Computes the transformation equal to <code>self</code> followed by an …","Computes the transformation equal to <code>self</code> followed by an …","Computes in-place the transformation equal to <code>self</code> …","Computes in-place the transformation equal to <code>self</code> …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to <code>self</code> followed by a …","Applies a closure <code>f</code> to modify each component of <code>self</code>.","Returns <code>self</code> with each of its components replaced by the …","Uses the metric induced by the given <code>norm</code> to compute the …","Uses the given <code>norm</code> to compute the norm of <code>self</code>.","Computes the index and value of the vector component with …","Computes the index and value of the vector component with …","Computes the index and value of the vector component with …","Computes the index and value of the vector component with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a mutable pointer to the start of the matrix.","Converts this array storage to a mutable slice.","Extracts a mutable slice containing the entire matrix …","A mutable slice containing all the components stored in …","","","","","Returns a mutable reference to the underlying value. This …","Returns a pointer to the start of the matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the single element in this matrix.","Get a mutable reference to the single element in this …","Converts this array storage to a slice.","Extracts a slice containing the entire matrix entries …","A slice containing all the components stored in this …","","","","","","The underlying data storage.","The underlying mutable data storage.","Returns this matrix as a view.","Returns this matrix as a mutable view.","Assumes a matrix’s entries to be initialized. This …","Assumes a matrix’s entries to be initialized. This …","Computes <code>self = a * x * c + b * self</code>.","Computes <code>self = a * x * c + b * self</code>.","The rotation axis of this unit quaternion or <code>None</code> if the …","The rotation axis and angle in (0, pi] of this unit …","The rotation axis and angle in (0, pi] of this complex …","Computes <code>self = a * x + b * self</code>.","Computes <code>self = a * x + b * self</code>.","The column vector with a 1 as its sixth component, and …","The column vector with a 1 as its sixth component, and …","The unit column vector with a 1 as its sixth component, …","The unit column vector with a 1 as its sixth component, …","The start index of the range.","Computes the bidiagonalization using householder …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the the 1-norm of the complex component with the …","Returns the the 1-norm of the complex component with the …","Returns a new vector with the same magnitude as <code>self</code> …","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Computes componentwise …","Attempts to compute the Cholesky decomposition of this …","","","","","","","","","","","","","","","","","","Clones this matrix to one that owns its data.","","","","","Clones this matrix into one that owns its data. The actual …","Computes componentwise …","Computes the QR decomposition (with column pivoting) of …","Returns a view containing the i-th column of this matrix.","Iterate through the columns of this matrix.","Mutably iterates through this matrix columns.","The mean of all the columns of this matrix.","Returns a view containing the i-th column of this matrix.","Returns a view containing the <code>n</code> first elements of the i-th …","Returns a view containing the <code>n</code> first elements of the i-th …","The product of all the columns of this matrix.","The sum of all the columns of this matrix.","The variance of all the columns of this matrix.","Extracts from this matrix a set of consecutive columns.","Extracts from this matrix <code>ncols</code> columns. The number of …","Extracts from this matrix <code>ncols</code> columns. The number of …","Extracts from this matrix <code>ncols</code> columns skipping <code>step</code> …","Extracts from this matrix <code>ncols</code> columns skipping <code>step</code> …","Extracts from this matrix a set of consecutive columns.","View containing all the columns indexed by the range <code>rows</code>.","Mutable view containing all the columns indexed by the …","Splits this <code>NxM</code> matrix into two parts delimited by two …","Splits this <code>NxM</code> matrix into two parts delimited by two …","Extracts from this matrix a set of consecutive columns …","Extracts from this matrix a set of consecutive columns …","The underlying complex number.","Computes the eigenvalues of this matrix.","Computes the eigenvalues of this matrix.","Componentwise matrix or vector division.","Inplace componentwise matrix or vector division.","Inplace componentwise matrix or vector division.","Componentwise matrix or vector multiplication.","Inplace componentwise matrix or vector multiplication.","Inplace componentwise matrix or vector multiplication.","Returns a column vector resulting from the folding of <code>f</code> on …","Returns a row vector where each element is the result of …","Returns a column vector where each element is the result …","The conjugate of <code>self</code>.","Compute the conjugate of this unit complex number.","Compute the conjugate of this unit quaternion.","Compute the conjugate of this unit quaternion.","The conjugate of the complex matrix <code>self</code> computed in-place.","Compute the conjugate of this unit quaternion in-place.","Compute in-place the conjugate of this unit complex number.","Compute the conjugate of this unit quaternion in-place.","Sets <code>self</code> to its adjoint.","The conjugate transposition of <code>self</code>.","Takes the conjugate and transposes <code>self</code> and store the …","Compatibility constraints between matrix shapes, e.g., for …","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Structures to which matrices and vector can be …","Fills this matrix with the content of another one. Both …","Fills this matrix with the content of a slice. Both must …","The cosine of the rotation angle.","The 3D cross product between two vectors.","Computes the matrix <code>M</code> such that for all vector <code>v</code> we have …","Computes the matrix <code>M</code> such that for all vector <code>v</code> we have …","The data storage that contains all the matrix components. …","","","The default matrix data storage allocator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the matrix determinant.","Computes the matrix determinant.","The diagonal of this matrix.","The diagonal of this matrix.","Traits and tags for identifying the dimension of all …","","","","","","","","","","The dot product between two vectors or matrices (seen as …","The conjugate-linear dot product between two vectors or …","The underlying dual quaternion.","Computes the eigenvalues of this matrix.","Computes the eigenvalues of this matrix.","The index immediately after the last index inside of the …","","Tests whether <code>self</code> and <code>rhs</code> are exactly equal.","","","","","","","","Retrieves the euler angles corresponding to this unit …","Computes exponential of this matrix","Computes exponential of this matrix","Compute the exponential of a quaternion.","Extend the number of rows of a <code>Vector</code> with elements from …","Extend the number of columns of the <code>Matrix</code> with elements …","Extends the number of columns of a <code>Matrix</code> with <code>Vector</code>s …","Extends the number of columns of the <code>VecStorage</code> with …","Extends the number of rows of the <code>VecStorage</code> with elements …","Extends the number of columns of the <code>VecStorage</code> with …","Extends the number of columns of the <code>VecStorage</code> with …","","","Creates an isometry that corresponds to the local frame of …","Creates an isometry that corresponds to the local frame of …","Creates an unit quaternion that corresponds to the local …","Sets all the elements of this matrix to <code>val</code>.","Sets all the elements of the selected column to <code>val</code>.","Sets all the diagonal elements of this matrix to <code>val</code>.","Sets all the elements of the lower-triangular part of this …","Copies the upper-triangle of this matrix to its …","Sets all the elements of the selected row to <code>val</code>.","Sets all the elements of the lower-triangular part of this …","Copies the upper-triangle of this matrix to its …","Sets all the elements of this matrix to the value returned …","Fills <code>self</code> with the identity matrix.","Extracts a compile-time number of consecutive columns from …","Extracts a compile-time number of consecutive columns from …","Extracts from this matrix a compile-time number of columns …","Extracts from this matrix a compile-time number of columns …","Resizes this matrix so that it contains <code>R2::value()</code> rows …","Extracts a compile-time number of consecutive rows from …","Extracts a compile-time number of consecutive rows from …","Extracts from this matrix a compile-time number of rows …","Extracts from this matrix a compile-time number of rows …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices this matrix starting at its component …","Slices this matrix starting at its component …","Return a view of this matrix starting at its component …","Return a view of this matrix starting at its component …","Returns a view of this matrix starting at its component …","Returns a view of this matrix starting at its component …","","","","","","","","","","","","","","","","","","Folds a function <code>f</code> on each entry of <code>self</code>.","Similar to <code>self.iter().fold(init, f)</code> except that <code>init</code> is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Builds the unit complex number corresponding to the …","Creates a new statically-allocated matrix from the given …","Creates a new statically-allocated matrix from the given …","Builds a 3D homogeneous rotation matrix from an axis and a …","Builds a 3D homogeneous rotation matrix from an axis and a …","Creates a new quaternion from a unit vector (the rotation …","Builds an unit quaternion from a basis assumed to be …","Builds a rotation from a basis assumed to be orthonormal.","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Builds a new matrix from its columns.","Builds a new matrix from its columns.","Creates a new unit complex number from a complex number.","Creates a new unit complex number from a complex number.","Builds the unit complex number from the sinus and cosinus …","Creates a new matrix with the given data.","Creates a new matrix with the given data without …","Creates a square matrix with its diagonal set to <code>diag</code> and …","Creates a square matrix with its diagonal set to <code>diag</code> and …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a new matrix with its diagonal filled with copies …","Creates a new matrix with its diagonal filled with copies …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix with all its elements set to <code>elem</code>.","Creates a matrix with all its elements set to <code>elem</code>.","Creates a new rotation from Euler angles.","Creates a new rotation from Euler angles.","Creates a new unit quaternion from Euler angles.","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix filled with the results of a function …","Creates a matrix filled with the results of a function …","Constructs a vector from coordinates in projective space, …","Constructs a vector from coordinates in projective space, …","Return a unit dual quaternion representing the translation …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix with all its elements filled by an …","Creates a matrix with all its elements filled by an …","Builds an unit complex by extracting the rotation part of …","Builds an unit quaternion by extracting the rotation part …","Builds an unit quaternion by extracting the rotation part …","Builds an unit complex by extracting the rotation part of …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Return a dual quaternion representing the translation and …","Creates a new unit quaternion from a quaternion.","Create a new matrix view without bounds checking and from …","Create a new matrix view without bounds checking and from …","Wraps the given reference, assuming it is already …","Creates a dual quaternion from a unit quaternion rotation.","Builds the unit complex number from the corresponding 2D …","Builds an unit quaternion from a rotation matrix.","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix with all its elements filled by an …","Creates a matrix with all its elements filled by an …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Builds a new matrix from its rows.","Builds a new matrix from its rows.","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 3D homogeneous rotation matrix from an axis and …","Creates a new unit quaternion rotation from a rotation …","Builds a unit complex rotation from an angle in radian …","Creates a new unit quaternion rotation from a rotation …","Creates a new matrix view from the given data array.","Creates a new matrix view from the given data array.","Creates a new matrix view from the given data array.","Creates a new matrix view from the given data array.","Creates a new mutable matrix view from the given data …","Creates a new mutable matrix view from the given data …","Creates a new mutable matrix view from the given data …","Creates a new mutable matrix view from the given data …","Creates a new matrix view from the given data array.","Creates a new mutable matrix view from the given data …","Creates a new mutable matrix view from the given data …","Creates a new mutable matrix view from the given data …","Creates a new matrix view from the given data array.","Creates a new matrix view from the given data array.","Creates a new matrix view from the given data array.","Creates a new mutable matrix view from the given data …","Creates a matrix view from an array and with dimensions …","Creates a mutable matrix view from an array and with …","Creates a matrix view from an array and with dimensions …","Creates a mutable matrix view from an array and with …","Creates, without bound-checking, a matrix view from an …","Creates, without bound-checking, a mutable matrix view …","Creates, without bound-checking, a mutable matrix view …","Creates, without bound-checking, a matrix view from an …","Creates, without bound checking, a new matrix view from …","Creates, without bound checking, a new matrix view from …","Creates, without bound checking, a new matrix view from …","Creates, without bound checking, a new matrix view from …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new matrix view from …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new matrix view from …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new matrix view from …","Creates, without bound checking, a new matrix view from …","Creates a new matrix view with the specified strides from …","Creates a new matrix view with the specified strides from …","Creates a new matrix view with the specified strides from …","Creates a new matrix view with the specified strides from …","Creates a new matrix view with the specified strides from …","Creates a new matrix view with the specified strides from …","Creates a new matrix view with the specified strides from …","Creates a new matrix view with the specified strides from …","Creates a matrix view from an array and with dimensions …","Creates a mutable matrix view from an array and with …","Creates a matrix view from an array and with dimensions …","Creates a mutable matrix view from an array and with …","Creates, without bounds checking, a matrix view from an …","Creates, without bound-checking, a mutable matrix view …","Creates, without bound-checking, a mutable matrix view …","Creates, without bounds checking, a matrix view from an …","Creates a new mutable matrix view with the specified …","Creates a new mutable matrix view with the specified …","Creates a new mutable matrix view with the specified …","Creates a new mutable matrix view with the specified …","Creates a new mutable matrix view with the specified …","Creates a new mutable matrix view with the specified …","Creates a new mutable matrix view with the specified …","Creates a new mutable matrix view with the specified …","Creates, without bound checking, a new matrix view with …","Creates, without bound checking, a new matrix view with …","Creates, without bound checking, a new matrix view with …","Creates, without bound checking, a new matrix view with …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new matrix view with …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new matrix view with …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new matrix view with …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new matrix view with …","","","","","","","","","","","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a new heap-allocated matrix from the given …","Creates a new heap-allocated matrix from the given …","Creates a new heap-allocated matrix from the given …","Creates a new heap-allocated matrix from the given …","Creates a new heap-allocated matrix from the given …","Creates a new heap-allocated matrix from the given …","Computes the LU decomposition with full pivoting of <code>matrix</code>.","","Computes <code>self = alpha * a * b + beta * self</code>, where …","Computes <code>self = alpha * a.adjoint() * b + beta * self</code>, …","Computes <code>self = alpha * a.transpose() * b + beta * self</code>, …","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a …","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a …","Computes <code>self = alpha * a.adjoint() * x + beta * self</code>, …","Computes <code>self = alpha * a.adjoint() * x + beta * self</code>, …","Computes <code>self = alpha * a.transpose() * x + beta * self</code>, …","Computes <code>self = alpha * a.transpose() * x + beta * self</code>, …","Creates a slice that may or may not have a fixed size and …","Creates a slice that may or may not have a fixed size and …","Creates a slice that may or may not have a fixed size and …","Creates a slice that may or may not have a fixed size and …","Creates a matrix view that may or may not have a fixed …","Creates a matrix view that may or may not have a fixed …","Creates a matrix view that may or may not have a fixed …","Creates a matrix view that may or may not have a fixed …","Computes <code>self = alpha * x * y.transpose() + beta * self</code>.","Computes <code>self = alpha * x * y.transpose() + beta * self</code>, …","Computes <code>self = alpha * x * y.adjoint() + beta * self</code>.","Produces a view of the data at the given index, or <code>None</code> if …","Produces a mutable view of the data at the given index, or …","Produces a view of the data at the given index, without …","Returns a mutable view of the data at the given index, …","","","","","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is an …","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is an …","Computes <code>self = alpha * x * y.adjoint() + beta * self</code>, …","The hermitian part of <code>self</code>, i.e., …","The hermitian part of <code>self</code>, i.e., …","Computes the Hessenberg decomposition of this matrix using …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the matrix component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the matrix component with the …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","The unit dual quaternion multiplicative identity, which …","The rotation identity.","The unit complex number multiplicative identity.","Creates a new identity matrix.","Creates a new identity matrix.","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","","","Produces a view of the data at the given index, or panics …","Produces a mutable view of the data at the given index, or …","","","Indexing","Computes the infimum (aka. componentwise min) of two …","Computes the (infimum, supremum) of two matrices/vectors.","Inserts a column filled with <code>val</code> at the <code>i-th</code> position.","Inserts <code>n</code> columns filled with <code>val</code> starting at the <code>i-th</code> …","Inserts <code>ninsert.value()</code> columns starting at the <code>i-th</code> place …","Inserts <code>D</code> columns filled with <code>val</code> starting at the <code>i-th</code> …","Inserts <code>D::dim()</code> rows filled with <code>val</code> starting at the <code>i-th</code> …","Inserts a row filled with <code>val</code> at the <code>i-th</code> position.","Inserts <code>n</code> rows filled with <code>val</code> starting at the <code>i-th</code> …","Inserts <code>ninsert.value()</code> rows at the <code>i-th</code> place of this …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Retrieves the underlying value.","","","","Moves this matrix into one that owns its data.","","","","","Moves this matrix into one that owns its data. The actual …","Convert this 1x1 matrix into a scalar.","Convert this 1x1 matrix into a scalar.","Extracts the original slice from this storage.","Extracts the original slice from this storage.","Extracts the original slice from this storage","Inverts this quaternion if it is not zero.","Inverts this complex number if it is not zero.","Inverts this dual quaternion if it is not zero.","Inverts this quaternion if it is not zero.","Inverts in-place this unit complex number.","Inverts this dual quaternion in place if it is not zero.","Rotate a point by the inverse of this unit quaternion. …","Rotate the given point by the inverse of this unit complex …","Rotate and translate a point by the inverse of this unit …","Rotate the given vector by the inverse of this unit …","Rotate a vector by the inverse of this unit quaternion. …","Rotate a unit vector by the inverse of this unit …","Rotate the given vector by the inverse of this unit …","Rotate a vector by the inverse of this unit quaternion. …","Rotate a vector by the inverse of this unit quaternion, …","","","","","","Returns true if the matrix contains no elements.","Returns true if the underlying vector contains no elements.","Indicated if this is the identity matrix within a relative …","","","","","","","","","","","Returns <code>true</code> if this matrix is invertible.","Returns <code>true</code> if this matrix is invertible.","Checks that <code>Mᵀ × M = Id</code>.","Checks that this matrix is orthogonal and has a …","Checks that this matrix is orthogonal and has a …","Indicates if this is a square matrix.","","The unit dual quaternion needed to make <code>self</code> and <code>other</code> …","Matrix iterators.","Iterates through this matrix coordinates in column-major …","Mutably iterates through this matrix coordinates.","The column vector with <code>val</code> as its i-th component.","The column vector with <code>val</code> as its i-th component.","The column unit vector with <code>T::one()</code> as its i-th component.","The column unit vector with <code>T::one()</code> as its i-th component.","The kronecker product of two matrices (aka. tensor product …","","","The total number of elements of this matrix.","The number of elements on the underlying vector.","Returns <code>self * (1.0 - t) + rhs * t</code>, i.e., the linear blend …","Returns <code>self * (1.0 - t) + rhs * t</code>, i.e., the linear blend …","Linear interpolation between two unit dual quaternions.","Linear interpolation between two unit quaternions.","Compute the natural logarithm of a quaternion.","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix without …","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix without …","Extracts the lower triangular part of this matrix …","The Lp norm of this matrix.","","Computes the LU decomposition with partial (row) pivoting …","A synonym for the norm of this matrix.","A synonym for the squared norm of this matrix.","Returns a matrix containing the result of <code>f</code> applied to …","Apply the given function to this matrix’s diagonal and …","Apply the given function to this matrix’s diagonal and …","Returns a matrix containing the result of <code>f</code> applied to …","Returns the component with the largest value.","","","The mean of all the elements of this matrix.","Create the mean unit quaternion from a data structure …","Use the metric induced by this norm to compute the metric …","Compute the distance between <code>self</code> and <code>rhs</code> using the metric …","","","","Returns the component with the smallest value.","","","","","","","","","","","","","","","","","","","","","","Equivalent to <code>self * rhs</code> but stores the result into <code>out</code> to …","The number of columns of this matrix.","","","","Negates <code>self</code> in-place.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Builds the unit complex number corresponding to the …","Creates a new unit quaternion rotation from a rotation …","Creates a new dynamic matrix data storage from the given …","Normalize the given vector and return it wrapped on a <code>Unit</code> …","Creates a new unit quaternion rotation from a rotation …","Creates a new homogeneous matrix that applies a distinct …","Creates a new homogeneous matrix that applies a distinct …","Creates a new homogeneous matrix that applies a scaling …","Creates a new homogeneous matrix that applies a scaling …","Creates a new homogeneous matrix that applies a scaling …","Creates a new homogeneous matrix that applies a scaling …","Normalize the given vector and return it wrapped on a <code>Unit</code> …","Deprecated: Use <code>Matrix4::face_towards</code> instead.","Deprecated: Use <code>Matrix4::face_towards</code> instead.","Deprecated: Use <code>UnitQuaternion::face_towards</code> instead.","Creates a new homogeneous matrix for an orthographic …","Creates a new homogeneous matrix for an orthographic …","Creates a new homogeneous matrix for a perspective …","Creates a new homogeneous matrix for a perspective …","Builds a 2 dimensional homogeneous rotation matrix from an …","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 2 dimensional homogeneous rotation matrix from an …","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 3D homogeneous rotation matrix from an axis and …","Creates a new homogeneous matrix that applies the same …","Creates a new homogeneous matrix that applies the same …","Creates a new homogeneous matrix that applies a pure …","Creates a new homogeneous matrix that applies a pure …","Create a new matrix view without bounds checking.","Create a new matrix view without bounds checking.","Wraps the given value, assuming it is already normalized.","Create a new matrix view without bounds checking.","Create a new matrix view without bounds checking.","Normalized linear interpolation between two unit …","Normalized linear interpolation between two unit …","Apply this norm to the given matrix.","Computes the norm.","","The L2 norm of this matrix.","","","","Computes the squared norm.","","The squared L2 norm of this vector.","Returns a normalized version of this matrix.","Normalizes this matrix in-place and returns its norm.","The number of rows of this matrix.","","Applies the given closure to each element of the …","Applies the given closure to each element of the …","Orthonormalizes the given family of vectors. The largest …","Orthonormalizes the given family of vectors. The largest …","","The perpendicular product between two 2D column vectors, …","Computes the Polar Decomposition of  a <code>matrix</code> (indirectly …","Raise this matrix to an integral power <code>exp</code>.","Raises this matrix to an integral power <code>exp</code> in-place.","Raise the quaternion to a given floating power.","Raise this unit complex number to a given floating power.","Computes the transformation equal to a non-uniform scaling …","Computes the transformation equal to a non-uniform scaling …","Computes in-place the transformation equal to a …","Computes in-place the transformation equal to a …","Computes the transformation equal to an uniform scaling …","Computes the transformation equal to an uniform scaling …","Computes in-place the transformation equal to an uniform …","Computes in-place the transformation equal to an uniform …","Computes the transformation equal to a translation …","Computes the transformation equal to a translation …","Computes the transformation equal to a translation …","Computes the transformation equal to a translation …","","","The product of all the elements of this matrix.","Computes the pseudo-inverse of this matrix.","","","","","","","","","","Constructs a new vector of higher dimension by appending …","Constructs a new vector of higher dimension by appending …","Computes the QR decomposition of this matrix.","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","The underlying quaternion.","Computes the rank of this matrix.","Tests whether <code>self</code> and <code>rhs</code> are equal up to a given epsilon.","","","Removes the <code>i</code>-th column from this matrix.","Removes <code>n</code> consecutive columns from this matrix, starting …","Removes all columns in <code>indices</code>   ","Removes <code>nremove.value()</code> columns from this matrix, starting …","Removes <code>D::dim()</code> consecutive columns from this matrix, …","Removes <code>D::dim()</code> consecutive rows from this matrix, …","Removes the <code>i</code>-th row from this matrix.","Removes <code>n</code> consecutive rows from this matrix, starting with …","Removes all rows in <code>indices</code>   ","Removes <code>nremove.value()</code> rows from this matrix, starting …","Normalizes this vector again. This is useful when repeated …","Normalizes this vector again using a first-order Taylor …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix with all its elements set to <code>elem</code>.","Creates a matrix with all its elements set to <code>elem</code>.","","","","Reshapes <code>self</code> such that it has dimensions …","","","","","","","Resizes this matrix so that it contains <code>new_nrows</code> rows and …","Resizes the underlying mutable data storage and unwraps it.","Resizes <code>self</code> such that it has dimensions …","Resizes this matrix horizontally, i.e., so that it …","Changes the number of column of this matrix in-place.","Changes the number of column of this matrix in-place.","Resizes this matrix in-place.","Resizes this matrix in-place.","Resizes this matrix vertically, i.e., so that it contains …","Changes the number of rows of this matrix in-place.","Changes the number of rows of this matrix in-place.","Return the rotation part of this unit dual quaternion.","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The unit complex number needed to make <code>self</code> and <code>other</code> …","The unit quaternion needed to make <code>self</code> and <code>other</code> coincide.","Returns a view containing the i-th row of this matrix.","Iterate through the rows of this matrix.","Mutably iterates through this matrix rows.","The mean of all the rows of this matrix.","The mean of all the rows of this matrix. The result is …","Returns a view containing the i-th row of this matrix.","Returns a view containing the <code>n</code> first elements of the i-th …","Returns a view containing the <code>n</code> first elements of the i-th …","The product of all the rows of this matrix.","The product of all the rows of this matrix. The result is …","The sum of all the rows of this matrix.","The sum of all the rows of this matrix. The result is …","The variance of all the rows of this matrix.","The variance of all the rows of this matrix. The result is …","Extracts from this matrix a set of consecutive rows.","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Extracts from this matrix a set of consecutive rows.","View containing all the rows indexed by the range <code>rows</code>.","Mutable view containing all the rows indexed by the range …","Splits this <code>NxM</code> matrix into two parts delimited by two …","Splits this <code>NxM</code> matrix into two parts delimited by two …","Extracts from this matrix a set of consecutive rows …","Extracts from this matrix a set of consecutive rows …","Multiplies each component of the complex matrix <code>self</code> by …","Multiply <code>self</code> by n.","","Multiplies each component of the complex matrix <code>self</code> by …","The rotation axis of this unit quaternion multiplied by …","The rotation angle returned as a 1-dimensional vector.","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","Computes the Schur decomposition of a square matrix.","Screw linear interpolation between two unit quaternions. …","","Creates a new matrix by extracting the given set of …","Creates a new matrix by extracting the given set of rows …","Fills the selected column of this matrix with the content …","Fills the diagonal of this matrix with the content of the …","Sets the magnitude of this vector.","Fills the diagonal of this matrix with the content of the …","Fills the selected row of this matrix with the content of …","","The shape of this matrix returned as the tuple (number of …","","","","","The shape of this matrix wrapped into their representative …","Returns a new vector with the same magnitude as <code>self</code> …","","","","","","","","","","","","Attempts to normalize <code>self</code>.","Normalizes this matrix in-place and return its norm.","The sine of the rotation angle.","Computes the singular values of this matrix. The singular …","Computes the singular values of this matrix. The singular …","The number of elements of the range, i.e., …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","Spherical linear interpolation between two rotations …","Spherical linear interpolation between two unit …","Computes the spherical linear interpolation between two …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices a sub-matrix containing the rows indexed by the …","Slices a mutable sub-matrix containing the rows indexed by …","Slices this matrix starting at its component …","Slices this matrix starting at its component …","Computes the solution of the linear system <code>self . x = b</code> …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system <code>self . x = b</code> …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system <code>self . x = b</code> …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system <code>self . x = b</code> …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","","Abstract definition of a matrix data storage.","","The strides (row stride, column stride) of this matrix.","","","","","","","","","","","Equivalent to <code>self + rhs</code> but stores the result into <code>out</code> to …","","","Example","Example","The sum of all the elements of this matrix.","Computes the supremum (aka. componentwise max) of two …","Computes the Singular Value Decomposition using implicit …","Computes the Singular Value Decomposition using implicit …","Swaps two entries.","Swaps two columns in-place.","Swaps two rows in-place.","Swaps two entries without bound-checking.","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a …","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a …","Computes <code>self = alpha * x * y.transpose() + beta * self</code>, …","Computes the eigendecomposition of this symmetric matrix.","Computes the eigenvalues of this symmetric matrix.","Computes the eigenvalues of this symmetric matrix.","The symmetric part of <code>self</code>, i.e., …","The symmetric part of <code>self</code>, i.e., …","Computes the tridiagonalization of this symmetric matrix.","Converts this unit quaternion into its equivalent Euler …","Computes the coordinates in projective space of this …","Yields the homogeneous matrix for this matrix, i.e., …","Computes the coordinates in projective space of this …","Converts this unit dual quaternion interpreted as an …","Converts this unit complex number into its equivalent …","Converts this unit quaternion into its equivalent …","Builds an isometry from this unit dual quaternion.","","","","","","","","","Builds a rotation matrix from this unit quaternion.","Builds the rotation matrix corresponding to this unit …","Convert this 1x1 matrix by reference into a scalar.","","","","","","","","","","","","","","","","","","","","","","Fills this matrix with the content of the transpose …","The dot product between the transpose of <code>self</code> and <code>rhs</code>.","Equivalent to <code>self.transpose() * rhs</code>.","Equivalent to <code>self.transpose() * rhs</code> but stores the result …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes a trace of a square matrix, i.e., the sum of its …","Computes a trace of a square matrix, i.e., the sum of its …","Transforms the given point, assuming the matrix <code>self</code> uses …","Transforms the given point, assuming the matrix <code>self</code> uses …","Transforms the given point, assuming the matrix <code>self</code> uses …","Transforms the given point, assuming the matrix <code>self</code> uses …","Rotate and translate a point by this unit dual quaternion …","Rotate the given point by this unit complex number.","Rotate a point by this unit quaternion.","Transforms the given vector, assuming the matrix <code>self</code> uses …","Transforms the given vector, assuming the matrix <code>self</code> uses …","Rotate a vector by this unit quaternion.","Rotate a vector by this unit dual quaternion, ignoring the …","Rotate the given vector by this unit complex number.","Return the translation part of this unit dual quaternion.","Transposes <code>self</code>.","Transposes the square matrix <code>self</code> in-place.","Transposes <code>self</code> and store the result into <code>out</code>.","Attempts to cast the components of <code>self</code> to another type.","","","","","","","","","","","","","","","","","","","Attempts to invert this square matrix.","Attempts to invert this square matrix.","Attempts to invert this square matrix in-place. Returns …","Attempts to invert this square matrix in-place. Returns …","Attempts to normalize the given vector and return it …","Normalize the given vector and return it wrapped on a <code>Unit</code> …","Returns a normalized version of this matrix unless its …","Normalizes this matrix in-place or does nothing if its …","Attempts to compute the Polar Decomposition of  a <code>matrix</code> …","Attempts to compute the Schur decomposition of a square …","Computes the screw-linear interpolation between two unit …","Sets the magnitude of this vector unless it is smaller …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","Attempts to compute the Singular Value Decomposition of …","Attempts to compute the Singular Value Decomposition of …","Computes the eigendecomposition of the given symmetric …","","","","","","","","","","Attempts to compute the UDU decomposition of this matrix.","","","Mechanisms for working with values that may not be …","Builds a matrix with uninitialized elements of type …","Builds a matrix with uninitialized elements of type …","Divides each component of the complex matrix <code>self</code> by the …","Divides <code>self</code> by n.","","Divides each component of the complex matrix <code>self</code> by the …","Retrieves the underlying value. Deprecated: use …","Extracts the upper triangular part of this matrix …","The variance of all the elements of this matrix.","Computes the row and column coordinates of the i-th …","Gets a reference to the i-th element of this column vector …","Gets a reference to the i-th element of this column vector …","Gets a mutable reference to the i-th element of this …","Gets a mutable reference to the i-th element of this …","Return a view of this matrix starting at its component …","Return a view of this matrix starting at its component …","Returns a view containing the rows indexed by the range …","Return a mutable view containing the rows indexed by the …","Return a view of this matrix starting at its component …","Return a view of this matrix starting at its component …","The column vector with a 1 as its fourth component, and …","The column vector with a 1 as its fourth component, and …","The unit column vector with a 1 as its fourth component, …","The unit column vector with a 1 as its fourth component, …","The column vector with a 1 as its first component, and …","The column vector with a 1 as its first component, and …","The unit column vector with a 1 as its first component, …","The unit column vector with a 1 as its first component, …","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","The column vector with a 1 as its second component, and …","The column vector with a 1 as its second component, and …","The unit column vector with a 1 as its second component, …","The unit column vector with a 1 as its second component, …","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","The column vector with a 1 as its third component, and …","The column vector with a 1 as its third component, and …","The unit column vector with a 1 as its third component, …","The unit column vector with a 1 as its third component, …","","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix with all its elements set to 0.","Creates a matrix with all its elements set to 0.","Replaces each component of <code>self</code> by the result of a closure …","Folds a function <code>f</code> on each pairs of entries from <code>self</code> and …","Returns a matrix containing the result of <code>f</code> applied to …","Replaces each component of <code>self</code> by the result of a closure …","Returns a matrix containing the result of <code>f</code> applied to …","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","A matrix allocator of a memory buffer that may contain …","The type of buffer this allocator can instantiate.","The type of buffer with uninitialized components this …","A matrix reallocator. Changes the size of the memory …","Restricts the given number of rows and columns to be …","The number of columns of the result of a componentwise …","The number of rows of the result of a componentwise …","Restricts the given number of rows to be equal.","Allocates a buffer initialized with the content of the …","Allocates a buffer initialized with the content of the …","Allocates a buffer with the given number of rows and …","Assumes a data buffer to be initialized.","Reallocates a buffer of shape <code>(RTo, CTo)</code>, possibly reusing …","Constraints <code>C1</code> and <code>R2</code> to be equivalent.","Constraints <code>D1</code> and <code>D2</code> to be equivalent.","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","Constraints D1 and D2 to be equivalent, where they both …","Constraints <code>D1</code> and <code>D2</code> to be equivalent. They are both …","Constraints <code>D1</code> and <code>D2</code> to be equivalent. They are both …","A type used in <code>where</code> clauses for enforcing constraints.","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</coden allocator based on <code>ArrayStorage</code> and <code>VecStorage</code> for …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Trait implemented by any type that can be used as a …","","","","","","","","","Trait implemented exclusively by type-level integers.","","","","","","","","","","","","","","","","","Dim of dynamically-sized algebraic entities.","","Trait implemented by <code>Dyn</code>.","Trait implemented by <code>Dyn</code> and type-level integers different …","","","","","","","","","","","","","","","","","The constant dimension 0 .","","The constant dimension 1.","","The constant dimension 10 .","","The constant dimension 100 .","","The constant dimension 101 .","","The constant dimension 102 .","","The constant dimension 103 .","","The constant dimension 104 .","","The constant dimension 105 .","","The constant dimension 106 .","","The constant dimension 107 .","","The constant dimension 108 .","","The constant dimension 109 .","","The constant dimension 11 .","","The constant dimension 110 .","","The constant dimension 111 .","","The constant dimension 112 .","","The constant dimension 113 .","","The constant dimension 114 .","","The constant dimension 115 .","","The constant dimension 116 .","","The constant dimension 117 .","","The constant dimension 118 .","","The constant dimension 119 .","","The constant dimension 12 .","","The constant dimension 120 .","","The constant dimension 121 .","","The constant dimension 122 .","","The constant dimension 123 .","","The constant dimension 124 .","","The constant dimension 125 .","","The constant dimension 126 .","","The constant dimension 127 .","","The constant dimension 13 .","","The constant dimension 14 .","","The constant dimension 15 .","","The constant dimension 16 .","","The constant dimension 17 .","","The constant dimension 18 .","","The constant dimension 19 .","","The constant dimension 2 .","","The constant dimension 20 .","","The constant dimension 21 .","","The constant dimension 22 .","","The constant dimension 23 .","","The constant dimension 24 .","","The constant dimension 25 .","","The constant dimension 26 .","","The constant dimension 27 .","","The constant dimension 28 .","","The constant dimension 29 .","","The constant dimension 3 .","","The constant dimension 30 .","","The constant dimension 31 .","","The constant dimension 32 .","","The constant dimension 33 .","","The constant dimension 34 .","","The constant dimension 35 .","","The constant dimension 36 .","","The constant dimension 37 .","","The constant dimension 38 .","","The constant dimension 39 .","","The constant dimension 4 .","","The constant dimension 40 .","","The constant dimension 41 .","","The constant dimension 42 .","","The constant dimension 43 .","","The constant dimension 44 .","","The constant dimension 45 .","","The constant dimension 46 .","","The constant dimension 47 .","","The constant dimension 48 .","","The constant dimension 49 .","","The constant dimension 5 .","","The constant dimension 50 .","","The constant dimension 51 .","","The constant dimension 52 .","","The constant dimension 53 .","","The constant dimension 54 .","","The constant dimension 55 .","","The constant dimension 56 .","","The constant dimension 57 .","","The constant dimension 58 .","","The constant dimension 59 .","","The constant dimension 6 .","","The constant dimension 60 .","","The constant dimension 61 .","","The constant dimension 62 .","","The constant dimension 63 .","","The constant dimension 64 .","","The constant dimension 65 .","","The constant dimension 66 .","","The constant dimension 67 .","","The constant dimension 68 .","","The constant dimension 69 .","","The constant dimension 7 .","","The constant dimension 70 .","","The constant dimension 71 .","","The constant dimension 72 .","","The constant dimension 73 .","","The constant dimension 74 .","","The constant dimension 75 .","","The constant dimension 76 .","","The constant dimension 77 .","","The constant dimension 78 .","","The constant dimension 79 .","","The constant dimension 8 .","","The constant dimension 80 .","","The constant dimension 81 .","","The constant dimension 82 .","","The constant dimension 83 .","","The constant dimension 84 .","","The constant dimension 85 .","","The constant dimension 86 .","","The constant dimension 87 .","","The constant dimension 88 .","","The constant dimension 89 .","","The constant dimension 9 .","","The constant dimension 90 .","","The constant dimension 91 .","","The constant dimension 92 .","","The constant dimension 93 .","","The constant dimension 94 .","","The constant dimension 95 .","","The constant dimension 96 .","","The constant dimension 97 .","","The constant dimension 98 .","","The constant dimension 99 .","","","","","","","","","","","","","","","","","The value of this dimension.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Builds an instance of <code>Self</code> from a run-time value. Panics …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","The name of this dimension, i.e., the singleton <code>Self</code>.","","A dynamic size equal to <code>value</code>.","","","","","","","","","","","","","","","","","","Gets the compile-time value of <code>Self</code>. Returns <code>None</code> if it is …","","","","","Gets the run-time value of <code>self</code>. For type-level integers, …","","","A helper trait used for indexing operations.","A helper trait used for indexing operations.","The output type returned by methods.","The output type returned by methods.","An iterator through the columns of a matrix.","An iterator through the mutable columns of a matrix.","An iterator through a dense matrix with arbitrary strides …","An iterator through a dense matrix with arbitrary strides …","An iterator through the rows of a matrix.","An iterator through the mutable rows of a matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Creates a new iterator for the given matrix storage.","Creates a new iterator for the given matrix storage.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The column-stride of the owned data storage for a buffer …","The static stride of this storage’s columns.","Marker trait indicating that a storage is stored …","The reshaped storage type.","The owned data storage that can be allocated from <code>S</code>.","The owned data storage that can be allocated from <code>S</code>.","The row-stride of the owned data storage for a buffer of …","The static stride of this storage’s rows.","The trait shared by all matrix data storage.","Trait implemented by matrix data storage that can provide …","A matrix storage that can be reshaped in-place.","The data storage for the sum of two matrices with …","Trait shared by all matrix data storage that don’t …","Trait shared by all mutable matrix data storage that …","Retrieves the mutable data buffer as a contiguous slice.","Retrieves the data buffer as a contiguous slice.","Clones this data storage to one that does not contain any …","Gets the address of the i-th matrix component without …","Gets the address of the i-th matrix component without …","Gets the mutable address of the i-th matrix component …","Gets the mutable address of the i-th matrix component …","Retrieves a reference to the i-th element without …","Retrieves a reference to the i-th element without …","Retrieves a mutable reference to the i-th element without …","Retrieves a mutable reference to the element at …","Builds a matrix data storage that does not contain any …","Indicates whether this data buffer stores its elements …","Compute the index corresponding to the irow-th row and …","The matrix data pointer.","The matrix mutable data pointer.","Reshapes the storage into the output storage type.","The dimension of the matrix at run-time. Arr length of …","The spacing between consecutive row elements and …","Swaps two elements without bound-checking.","Swaps two elements using their linear index without …","A type implementing <code>InitStatus</code> indicating that the value …","This trait is used to write code that may work on matrices …","A type implementing <code>InitStatus</code> indicating that the value …","The type of the values with the initialization status …","Retrieve a mutable reference to the element, assuming that …","","","Retrieve a reference to the element, assuming that it is …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Initialize the given element.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Trait implemented by rotations that can be used inside of …","A 2D affine transformation. Stored as a homogeneous 3x3 …","A 3D affine transformation. Stored as a homogeneous 4x4 …","A dual quaternion.","A direct isometry, i.e., a rotation followed by a …","A 2-dimensional direct isometry using a unit complex …","A 3-dimensional direct isometry using a unit quaternion …","A 2-dimensional direct isometry using a rotation matrix …","A 3-dimensional direct isometry using a rotation matrix …","A point in an euclidean space.","A 3D orthographic projection stored as a homogeneous 4x4 …","A 3D perspective projection stored as a homogeneous 4x4 …","A point with <code>D</code> elements.","A statically sized 1-dimensional column point.","A statically sized 2-dimensional column point.","A statically sized 3-dimensional column point.","A statically sized 4-dimensional column point.","A statically sized 5-dimensional column point.","A statically sized 6-dimensional column point.","An invertible 2D general transformation. Stored as a …","An invertible 3D general transformation. Stored as a …","A quaternion. See the type alias …","A reflection wrt. a plane.","A 1-dimensional reflection.","A 2-dimensional reflection.","A 3-dimensional reflection.","A 4-dimensional reflection.","A 5-dimensional reflection.","A 6-dimensional reflection.","The transform category that results from the …","A rotation matrix.","A 2-dimensional rotation matrix.","A 3-dimensional rotation matrix.","A scale which supports non-uniform scaling.","A 1-dimensional scale.","A 2-dimensional scale.","A 3-dimensional scale.","A 4-dimensional scale.","A 5-dimensional scale.","A 6-dimensional scale.","A similarity, i.e., an uniform scaling, followed by a …","A 2-dimensional similarity.","A 3-dimensional similarity.","A 2-dimensional similarity using a rotation matrix for its …","A 3-dimensional similarity using a rotation matrix for its …","Indicates that <code>Self</code> is a more specific <code>Transform</code> category …","Indicates that <code>Self</code> is a more general <code>Transform</code> category …","Tag representing an affine <code>Transform</code>. Its bottom-row is …","Trait implemented by phantom types identifying the …","Traits that gives the <code>Transform</code> category that is …","Tag representing the most general (not necessarily …","Tag representing the most general inversible <code>Transform</code> …","A transformation matrix in homogeneous coordinates.","A 2D general transformation that may not be invertible. …","A 3D general transformation that may not be inversible. …","A translation.","A 1-dimensional translation.","A 2-dimensional translation.","A 3-dimensional translation.","A 4-dimensional translation.","A 5-dimensional translation.","A 6-dimensional translation.","A 2D rotation represented as a complex number with …","A unit dual quaternion. May be used to represent a …","A unit quaternions. May be used to represent a rotation.","","","","","","","","","","","","","Calculates the quaternionic arccosinus.","Calculates the hyperbolic quaternionic arccosinus.","","","","","","","","","","","","","","","","","","","The rotation angle.","The rotation angle in [0; pi].","The rotation angle in [0; pi] of this unit quaternion.","The rotation angle in <code>]-pi; pi]</code> of this unit complex …","The rotation angle.","The rotation angle in [0; pi].","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","Appends to <code>self</code> a rotation given in the axis-angle form, …","Appends to <code>self</code> the given rotation in-place.","Appends to <code>self</code> the given rotation in-place.","Appends in-place to <code>self</code> a rotation centered at the point …","Appends in-place to <code>self</code> a rotation centered at the point …","Appends in-place to <code>self</code> a rotation centered at the point <code>p</code>…","Appends in-place to <code>self</code> a rotation centered at the point <code>p</code>…","The similarity transformation that applies a scaling …","Sets <code>self</code> to the similarity transformation that applies a …","Appends to <code>self</code> the given translation in-place.","Appends to <code>self</code> the given translation in-place.","Replaces each component of <code>self</code> by the result of a closure …","A reference to the underlying homogeneous transformation …","A reference to the underlying homogeneous transformation …","","A reference to this transformation seen as a <code>Projective3</code>.","A reference to this transformation seen as a <code>Projective3</code>.","","Reinterprets this quaternion as a 4D vector.","Transforms this quaternion into its 4D vector form (Vector …","Calculates the quaternionic arcsinus.","Calculates the hyperbolic quaternionic arcsinus.","Gets the <code>width / height</code> aspect ratio of the view frustum.","Calculates the quaternionic arctangent.","Calculates the hyperbolic quaternionic arctangent.","The rotation axis. Returns <code>None</code> if the rotation angle is …","The rotation axis of this unit quaternion or <code>None</code> if the …","The reflection axis.","The rotation axis. Returns <code>None</code> if the rotation angle is …","The rotation axis and angle in (0, pi] of this rotation …","The rotation axis and angle in (0, pi] of this unit …","The rotation axis and angle in (0, pi] of this complex …","The rotation axis and angle in (0, pi] of this rotation …","The reflection bias.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bottom offset of the view cuboid.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Checks that the given matrix is a valid homogeneous …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clones this transform into one that owns its data.","Clones this unit quaternion into one that owns its data.","The underlying complex number.","Compute the conjugate of this unit quaternion.","Compute the conjugate of this unit quaternion.","Compute the conjugate of this unit complex number.","The conjugate of this quaternion.","The conjugate of this dual quaternion, containing the …","Compute the conjugate of this unit quaternion in-place.","Compute the conjugate of this unit quaternion in-place.","Compute in-place the conjugate of this unit complex number.","Replaces this quaternion by its conjugate.","Replaces this quaternion by its conjugate.","The coordinates of this point, i.e., the shift from the …","This quaternion as a 4D vector of coordinates in the …","Calculates the quaternionic cosinus.","The cosine of the rotation angle.","Calculates the hyperbolic quaternionic cosinushe dot product of two quaternions.","The dual component of the quaternion","The underlying dual quaternion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Euler angles corresponding to this rotation from a …","Retrieves the euler angles corresponding to this unit …","Euler angles corresponding to this rotation from a …","Represent this rotation as Euler angles.","Represent this rotation as Euler angles.","Compute the exponential of a quaternion.","Compute the exponential of a quaternion.","Compute the exponential of a quaternion. Returns the …","","","","","","","","","","","","","","","","","","","","","Creates a rotation that corresponds to the local frame of …","Creates an unit quaternion that corresponds to the local …","Creates an isometry that corresponds to the local frame of …","Creates an isometry that corresponds to the local frame of …","Creates a rotation that corresponds to the local frame of …","Creates an isometry that corresponds to the local frame of …","Creates an isometry that corresponds to the local frame of …","Creates an similarity that corresponds to a scaling factor …","Creates an similarity that corresponds to a scaling factor …","","","","","","","","","","","","","","","","","","","","","","","","","Gets the y field of view of the view frustum.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Builds the unit complex number corresponding to the …","Builds a 3D rotation matrix from an axis and a rotation …","Creates a new quaternion from a unit vector (the rotation …","Builds a 3D rotation matrix from an axis and a rotation …","Builds a rotation from a basis assumed to be orthonormal.","Builds a rotation from a basis assumed to be orthonormal.","Builds an unit quaternion from a basis assumed to be …","Builds a rotation from a basis assumed to be orthonormal.","Builds a rotation from a basis assumed to be orthonormal.","Builds a rotation from a basis assumed to be orthonormal.","Creates a new unit complex number from a complex number.","Creates a new unit complex number from a complex number.","Creates a new point with the given coordinates.","Builds the unit complex number from the sinus and cosinus …","Creates a new rotation from Euler angles.","Creates a new unit quaternion from Euler angles.","Creates a new rotation from Euler angles.","Creates a new orthographic projection matrix from an …","Creates a new point from its homogeneous vector …","Constructs a pure quaternion.","Return a unit dual quaternion representing the translation …","Creates a new similarity from its rotational and …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Builds an unit quaternion by extracting the rotation part …","Builds an unit complex by extracting the rotation part of …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Builds an unit quaternion by extracting the rotation part …","Builds an unit complex by extracting the rotation part of …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Creates a new transformation from the given homogeneous …","Creates a new rotation from the given square matrix.","Wraps the given matrix to interpret it as a 3D …","Wraps the given matrix to interpret it as a 3D perspective …","Return a dual quaternion representing the translation and …","Creates a new quaternion from its scalar and vector parts. …","Creates a new isometry from its rotational and …","Creates a new similarity from its rotational and …","Creates a new quaternion from its polar decomposition.","Creates a new unit quaternion from a quaternion.","Constructs a real quaternion.","Creates a dual quaternion from only its real part, with no …","Creates a dual quaternion from its rotation and …","Creates a dual quaternion from a unit quaternion rotation.","Builds an unit quaternion from a rotation matrix.","Builds the unit complex number from the corresponding 2D …","Builds a 2 dimensional rotation matrix from an angle in …","Builds a 3D rotation matrix from an axis scaled by the …","Creates a new unit quaternion rotation from a rotation …","Builds a unit complex rotation from an angle in radian …","Builds a 2 dimensional rotation matrix from an angle in …","Builds a 3D rotation matrix from an axis scaled by the …","Creates a new unit quaternion rotation from a rotation …","Creates a new similarity that applies only a scaling …","Creates a new point from a slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a quaternion from a 4D vector. The quaternion …","Creates a new translation from the given vector.","","Gets a reference to i-th element of this point without …","Gets a mutable reference to i-th element of this point …","","Divides quaternion into two.","Indicates whether a <code>Transform</code> with the category <code>Self</code> has a …","Indicates whether a <code>Transform</code> with the category <code>Self</code> has a …","","","","","","","","","","","","","The rotation identity.","","The rotation identity.","The unit dual quaternion multiplicative identity, which …","","The unit complex number multiplicative identity.","Creates a new identity transform.","Creates a new square identity rotation of the given …","","The quaternion multiplicative identity.","The dual quaternion multiplicative identity.","Creates a new identity translation.","Creates a new identity scale.","Creates a new identity isometry.","Creates a new identity similarity.","The imaginary part of this quaternion.","","","","","","","","","","Computes the infimum (aka. componentwise min) of two …","Computes the (infimum, supremum) of two points.","Calculates the inner product (also known as the dot …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Retrieves the underlying matrix.","Unwraps the underlying matrix.","Retrieves the underlying homogeneous matrix.","Retrieves the underlying homogeneous matrix.","Moves this unit quaternion into one that owns its data.","Computes <code>self.inverse() * rhs</code> in a more efficient way.","The rotation inverse.","","Inverts this quaternion if it is not zero.","Inverts this dual quaternion if it is not zero.","Inverts this complex number if it is not zero.","","Inverts this transformation. Use <code>.try_inverse</code> if this …","Inverts <code>self</code>.","","Inverts <code>self</code>.","Inverts <code>self</code>.","Inverts <code>self</code>.","Retrieves the inverse of the underlying homogeneous matrix.","Retrieves the inverse of the underlying homogeneous matrix.","Change <code>self</code> to its inverse.","Inverts this quaternion if it is not zero.","","Inverts this dual quaternion in place if it is not zero.","","Inverts in-place this unit complex number.","Inverts this transformation in-place. Use <code>.try_inverse_mut</code> …","","Inverts <code>self</code> in-place.","Inverts <code>self</code> in-place.","Inverts <code>self</code> in-place.","Inverts <code>self</code> in-place.","Apply the inverse rotation to the given point.","","Rotate a point by the inverse of this unit quaternion. …","Rotate and translate a point by the inverse of this unit …","Rotate the given point by the inverse of this unit complex …","","Transform the given point by the inverse of this …","","Rotate the given point by the inverse of this rotation. …","Translate the given point by the inverse of this …","Transform the given point by the inverse of this isometry. …","Transform the given point by the inverse of this …","Apply the inverse rotation to the given unit vector.","Apply the inverse rotation to the given unit vector.","Rotate a vector by the inverse of this unit quaternion. …","Rotate a unit vector by the inverse of this unit …","Rotate the given vector by the inverse of this unit …","","Rotate the given vector by the inverse of this rotation. …","Transform the given unit vector by the inverse of this …","Apply the inverse rotation to the given vector.","Rotate a vector by the inverse of this unit quaternion. …","","Rotate a vector by the inverse of this unit quaternion, …","","Rotate the given vector by the inverse of this unit …","Transform the given vector by the inverse of this …","Rotate the given vector by the inverse of this rotation. …","","Transform the given vector by the inverse of this …","Transform the given vector by the inverse of this …","Inverts <code>self</code>.","Returns true if the point contains no elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if the quaternion is pure.","","","The part of this similarity that does not include the …","The unit dual quaternion needed to make <code>self</code> and <code>other</code> …","Iterates through this point coordinates.","Mutably iterates through this point coordinates.","","","","","","","","","","","","The left offset of the view cuboid.","Left quaternionic division.","The dimension of this point.","Linear interpolation between two unit quaternions.","Linear interpolation between two unit dual quaternions.","Linear interpolation between two points.","Linear interpolation between two quaternion.","Linear interpolation between two dual quaternions.","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Compute the natural logarithm of a quaternion.","Compute the natural logarithm of a quaternion.","Builds a left-handed look-at view matrix without …","Builds a left-handed look-at view matrix without …","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix without …","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix including a …","Builds a left-handed look-at view matrix including a …","Builds a right-handed look-at view matrix without …","Builds a right-handed look-at view matrix without …","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix without …","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix including …","Builds a right-handed look-at view matrix including …","","A synonym for the norm of this quaternion.","A synonym for the squared norm of this quaternion.","Returns a point containing the result of <code>f</code> applied to each …","A reference to the underlying matrix.","A reference to the underlying matrix representation of …","A mutable reference to underlying matrix. Use …","A mutable reference to the underlying matrix …","A mutable reference to the underlying matrix.","A mutable reference to the underlying matrix …","","","Create the mean unit quaternion from a data structure …nitializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Builds a 2 dimensional rotation matrix from an angle in …","Builds a 3 dimensional rotation matrix from an axis and an …","Creates a new unit quaternion rotation from a rotation …","Builds the unit complex number corresponding to the …","Creates a new 2D isometry from a translation and a …","Creates a new isometry from a translation and a rotation …","Creates a new 2D isometry from a translation and a …","Creates a new isometry from a translation and a rotation …","Creates a new reflection wrt. the plane orthogonal to the …","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Builds a 2 dimensional rotation matrix from an angle in …","Builds a 3 dimensional rotation matrix from an axis and an …","Creates a new quaternion from its individual components. …","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this Scale from its components.","Initializes this Scale from its components.","Initializes this Scale from its components.","Initializes this Scale from its components.","Initializes this Scale from its components.","Initializes this Scale from its components.","Creates a new isometry from a translation and a rotation …","Creates a new 2D isometry from a translation and a …","Creates a new 2D isometry from a translation and a …","Creates a new isometry from a translation and a rotation …","Creates a new similarity from a translation and a rotation …","Creates a new similarity from a translation, rotation …","Creates a new similarity from a translation, a rotation, …","Creates a new similarity from a translation, rotation …","Creates a new orthographic projection matrix.","Creates a new perspective matrix from the aspect ratio, y …","Creates a new reflection wrt. the plane orthogonal to the …","Creates a new unit quaternion rotation from a rotation …","Deprecated: Use <code>Isometry::face_towards</code> instead.","Deprecated: Use <code>Isometry::face_towards</code> instead.","Deprecated: Use <code>Isometry::face_towards</code> instead.","Deprecated: Use <code>Isometry::face_towards</code> instead.","Deprecated: Use <code>Rotation3::face_towards</code> instead.","Deprecated: Use <code>UnitQuaternion::face_towards</code> instead.","Deprecated: Use <code>Rotation3::face_towards</code> instead.","Deprecated: Use <code>SimilarityMatrix3::face_towards</code> instead.","Deprecated: Use <code>SimilarityMatrix3::face_towards</code> instead.","Normalized linear interpolation between two unit …","Normalized linear interpolation between two unit …","","The norm of this quaternion.","","The squared norm of this quaternion.","","","Normalizes this quaternion.","Normalizes this quaternion.","Normalizes this quaternion.","Normalizes this quaternion.","","","","Creates a new identity transform.","","","","","","Creates a new identity isometry.","Creates a new identity similarity.","Creates a new point with all coordinates equal to zero.","Calculates the outer product (also known as the wedge …","","The polar decomposition of this quaternion.","Raise the rotation to a given floating power, i.e., …","Raise the rotation to a given floating power, i.e., …","Raise the quaternion to a given floating power.","Raise this unit complex number to a given floating power.","Raise the rotation to a given floating power, i.e., …","Raise the rotation to a given floating power, i.e., …","Raise the quaternion to a given floating power.","The similarity transformation that applies a scaling …","Sets <code>self</code> to the similarity transformation that applies a …","Calculates the projection of <code>self</code> onto <code>other</code> (also known …","Projects a point. Faster than matrix multiplication.","Projects a point. Faster than matrix multiplication.","Projects a vector. Faster than matrix multiplication.","Projects a vector. Faster than matrix multiplication.","Inverts <code>self</code>.","Convert quaternion to pure quaternion.","The underlying quaternion.","The real component of the quaternion","Applies the reflection to the columns of <code>rhs</code>.","Applies the reflection to the rows of <code>lhs</code>.","Applies the reflection to the rows of <code>lhs</code>.","Applies the reflection to the columns of <code>rhs</code>.","Calculates the rejection of <code>self</code> from <code>other</code> (also known as …","","","","","","","","","","","","","Ensure this rotation is an orthonormal rotation matrix. …","Ensure this rotation is an orthonormal rotation matrix. …","Ensure this rotation is an orthonormal rotation matrix. …","Ensure this rotation is an orthonormal rotation matrix. …","","","","","","","","","","","","","","","","","","","","","The right offset of the view cuboid.","Right quaternionic division.","Return the rotation part of this unit dual quaternion.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","The pure rotational part of this isometry.","The rotation matrix required to align <code>a</code> and <code>b</code> but with its …","The rotation matrix required to align <code>a</code> and <code>b</code> but with its …","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The rotation matrix required to align <code>a</code> and <code>b</code> but with its …","The rotation matrix required to align <code>a</code> and <code>b</code> but with its …","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The rotation matrix needed to make <code>self</code> and <code>other</code> coincide.","The rotation matrix needed to make <code>self</code> and <code>other</code> coincide.","The unit quaternion needed to make <code>self</code> and <code>other</code> coincide.","The unit complex number needed to make <code>self</code> and <code>other</code> …","The rotation matrix needed to make <code>self</code> and <code>other</code> coincide.","The rotation matrix needed to make <code>self</code> and <code>other</code> coincide.","The isometry that applies the rotation <code>r</code> with its axis …","The similarity that applies the scaling factor <code>scaling</code>, …","The scalar part <code>w</code> of this quaternion.","","","The rotation angle returned as a 1-dimensional vector.","The rotation axis multiplied by the rotation angle.","The rotation axis of this unit quaternion multiplied by …","The rotation angle returned as a 1-dimensional vector.","The rotation axis multiplied by the rotation angle.","The rotation angle returned as a 1-dimensional vector.","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The scaling factor of this similarity transformation.","Screw linear interpolation between two unit quaternions. …","","","","","","","","","","","Updates this perspective matrix with a new <code>width / height</code> …","Sets the bottom offset of the view cuboid.","Sets the view cuboid offsets along the <code>y</code> axis.","Sets the category of this transform.","Updates this perspective with a new y field of view of the …","Sets the left offset of the view cuboid.","Sets the view cuboid offsets along the <code>x</code> axis.","Sets the right offset of the view cuboid.","The scaling factor of this similarity transformation.","Sets the top offset of the view cuboid.","Sets the far plane offset of the view cuboid.","Updates this perspective matrix with a new far plane …","Sets the near plane offset of the view cuboid.","Updates this perspective matrix with a new near plane …","Sets the near and far plane offsets of the view cuboid.","Updates this perspective matrix with new near and far …","","","","","","","","","","","","Attempt to inverse this quaternion.","Calculates the quaternionic sinus.","The sine of the rotation angle.","Calculates the hyperbolic quaternionic sinus.","Spherical linear interpolation between two rotation …","Spherical linear interpolation between two rotation …","Spherical linear interpolation between two unit …","Spherical linear interpolation between two rotations …","Spherical linear interpolation between two rotation …","Spherical linear interpolation between two rotation …","","","","","","","","","","","Calculates square root.","Calculates square of a quaternion.","The stride of this point. This is the number of buffer …","","","","","","","","","","","","","","","","","","","","","","","Computes the supremum (aka. componentwise max) of two …","Swaps two entries without bound-checking.","Calculates the quaternionic tangent.","Calculates the hyperbolic quaternionic tangent.","Creates Euler angles from a rotation.","Converts this unit quaternion into its equivalent Euler …","Creates Euler angles from a rotation.","Converts this unit quaternion into its equivalent …","Converts this unit dual quaternion interpreted as an …","Converts this unit complex number into its equivalent …","Converts this transform into its equivalent homogeneous …","Converts this point into a vector in homogeneous …","Converts this rotation into its equivalent homogeneous …","Converts this translation into its equivalent homogeneous …","Converts this Scale into its equivalent homogeneous …","Converts this isometry into its equivalent homogeneous …","Converts this similarity into its equivalent homogeneous …","Computes the corresponding homogeneous matrix.","Computes the corresponding homogeneous matrix.","Builds an isometry from this unit dual quaternion.","Converts this isometry into its equivalent homogeneous …","","","","","","","","","","","","","","","This transformation seen as a <code>Projective3</code>.","This transformation seen as a <code>Projective3</code>.","Builds a rotation matrix from this unit quaternion.","Builds the rotation matrix corresponding to this unit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The top offset of the view cuboid.","Apply the rotation to the given point.","","Rotate a point by this unit quaternion.","Rotate and translate a point by this unit dual quaternion …","","Rotate the given point by this unit complex number.","Transform the given point by this transformation.","","Rotate the given point.","Translate the given point.","Translate the given point.","Transform the given point by this isometry.","Transform the given point by this similarity.","Apply the rotation to the given vector.","","Rotate a vector by this unit quaternion.","Rotate a vector by this unit dual quaternion, ignoring the …","Rotate the given vector by this unit complex number.","","Transform the given vector by this transformation, …","","Rotate the given vector.","Transform the given vector by this isometry, ignoring the …","Transform the given vector by this similarity, ignoring …","Return the translation part of this unit dual quaternion.","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","The pure translational part of this isometry.","Transposes <code>self</code>.","Transposes <code>self</code> in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to invert this transformation. You may use …","Inverts this quaternion if it is not zero.","Inverts this dual quaternion if it is not zero.","Inverts <code>self</code>.","Attempts to invert this transformation in-place. You may …","Inverts this quaternion in-place if it is not zero.","Inverts this dual quaternion in-place if it is not zero.","Inverts <code>self</code> in-place.","Translate the given point by the inverse of this Scale.","Attempts to interpolate between two isometries using a …","Attempts to interpolate between two isometries using a …","Attempts to interpolate between two isometries using a …","Attempts to interpolate between two isometries using a …","Computes the screw-linear interpolation between two unit …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Un-projects a point. Faster than multiplication by the …","Un-projects a point. Faster than multiplication by the …","","","Retrieves the underlying matrix. Deprecated: Use …","Unwraps the underlying matrix. Deprecated: Use …","Retrieves the underlying homogeneous matrix. Deprecated: …","Retrieves the underlying homogeneous matrix. Deprecated: …","The vector part <code>(i, j, k)</code> of this quaternion.","The translation coordinates, i.e., how much is added to a …","The scale coordinates, i.e., how much is multiplied to a …","The mutable vector part <code>(i, j, k)</code> of this quaternion.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","","","The far plane offset of the view cuboid.","Gets the far plane offset of the view frustum.","The near plane offset of the view cuboid.","Gets the near plane offset of the view frustum.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","The bidiagonalization of a general matrix.","The Cholesky decomposition of a …","The QR decomposition (with column pivoting) of a general …","LU decomposition with full row and column pivoting.","Hessenberg decomposition of a general matrix.","LU decomposition with partial (row) pivoting.","A sequence of row or column permutations.","The QR decomposition of a general matrix.","Singular Value Decomposition of a general matrix.","Schur decomposition of a square matrix.","Eigendecomposition of a symmetric matrix.","Tridiagonalization of a symmetric matrix.","UDU factorization.","Adds the interchange of the row (or column) <code>i</code> with the row …","Functions for balancing a matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the complex eigenvalues of the decomposed matrix.","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","The diagonal matrix resulting from the factorization","Returns the diagonal elements as a matrix","Computes the determinant of the decomposed matrix.","Computes the determinant of the decomposed matrix.","Computes the determinant of the decomposed matrix.","Computes the determinant of the decomposed matrix.","The determinant of the matrix corresponding to this …","The diagonal part of this decomposed matrix.","The diagonal components of this decomposition.","Computes the real eigenvalues of the decomposed matrix.","The unsorted eigenvalues of the decomposed matrix.","The eigenvectors of the decomposed matrix.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Construction of givens rotations.","Retrieves the upper trapezoidal submatrix <code>H</code> of this …","Construction of householder elementary reflections.","Creates a new statically-allocated sequence of <code>D</code> identity …","Creates a new dynamically-allocated sequence of <code>n</code> identity …","Creates a new sequence of D identity permutations.","Updates the decomposition such that we get the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Applies this sequence of permutations in reverse to the …","Applies this sequence of permutations in reverse to the …","Computes the inverse of the decomposed matrix.","Returns true if the permutation sequence contains no …","","","","","","","","","","","","","","Indicates if the decomposed matrix is invertible.","Indicates if the decomposed matrix is invertible.","Indicates if the decomposed matrix is invertible.","Indicates if the decomposed matrix is invertible.","Indicates whether this decomposition contains an …","Retrieves the lower-triangular factor of the Cholesky …","The lower triangular matrix of this decomposition.","The lower triangular matrix of this decomposition.","Retrieves the lower-triangular factor of the Cholesky …","The lower triangular matrix of this decomposition.","The number of non-identity permutations applied by this …","Computes the natural logarithm of determinant of the …","Computes the Bidiagonal decomposition using householder …","Attempts to compute the Cholesky decomposition of <code>matrix</code>.","Computes the <code>ColPivQR</code> decomposition using householder …","Computes the LU decomposition with full pivoting of <code>matrix</code>.","Computes the Hessenberg decomposition using householder …","Computes the LU decomposition with partial (row) pivoting …","Computes the QR decomposition using householder …","Computes the Schur decomposition of a square matrix.","Computes the Singular Value Decomposition of <code>matrix</code> using …","Computes the eigendecomposition of the given symmetric …","Computes the tridiagonalization of the symmetric matrix <code>m</code>.","Computes the UDU^T factorization.","Computes the Cholesky decomposition of <code>matrix</code> without …","Computes the Singular Value Decomposition of <code>matrix</code> using …","Attempts to approximate the Cholesky decomposition of …","Computes the Hessenberg decomposition using householder …","The off-diagonal part of this decomposed matrix.","The off-diagonal components of this decomposition.","Retrieves the column permutation of this decomposition.","The row permutations of this decomposition.","The row permutations of this decomposition.","Uses the given matrix as-is without any checks or …","Applies this sequence of permutations to the columns of <code>rhs</code>…","Applies this sequence of permutations to the rows of <code>rhs</code>.","Computes the pseudo-inverse of the decomposed matrix.","Computes the orthogonal matrix <code>Q</code> of this decomposition.","The column permutations of this decomposition.","Computes the orthogonal matrix <code>Q</code> of this decomposition.","Computes the orthogonal matrix <code>Q</code> of this decomposition.","Computes the orthogonal matrix <code>Q</code> of this decomposition.","Multiplies the provided matrix by the transpose of the <code>Q</code> …","Multiplies the provided matrix by the transpose of the <code>Q</code> …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Computes the rank of the decomposed matrix, i.e., the …","Given the Cholesky decomposition of a matrix <code>M</code>, a scalar …","Rebuild the original matrix.","Rebuild the original matrix.","Recomputes the original symmetric matrix.","Updates the decomposition such that we get the …","The singular values of this SVD.","Returns the solution of the system <code>self * x = b</code> where <code>self</code> …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the system <code>self * x = b</code> where <code>self</code> is the …","Solves the system <code>self * x = b</code> where <code>self</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Sort the estimated components of the SVD by its singular …","","","","","","","","","","","","","","converts SVD results to Polar decomposition form of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the inverse of the decomposed matrix.","Computes the inverse of the decomposed matrix.","Computes the inverse of the decomposed matrix.","Computes the inverse of the decomposed matrix.","Computes the inverse of the decomposed matrix and outputs …","Performs a LU decomposition to overwrite <code>out</code> with the …","Attempts to compute the Schur decomposition of a square …","Attempts to compute the Singular Value Decomposition of …","Computes the eigendecomposition of the given symmetric …","Attempts to compute the Singular Value Decomposition of …","","","","","","","","","","","","","","Computes the orthogonal matrix <code>U</code> of this <code>U * D * V</code> …","The upper triangular matrix of this decomposition.","The upper triangular matrix of this decomposition.","The left-singular vectors <code>U</code> of this SVD.","The upper triangular matrix resulting from the …","Unpacks this decomposition into its three matrix factors …","Retrieves the lower-triangular factor of the Cholesky …","Unpacks this decomposition into its two matrix factors.","The two matrices of this decomposition and the row and …","Retrieves <code>(q, h)</code> with <code>q</code> the orthogonal matrix of this …","The row permutations and two triangular matrices of this …","Unpacks this decomposition into its two matrix factors.","Retrieves the unitary matrix <code>Q</code> and the …","Retrieve the orthogonal transformation, diagonal, and off …","Retrieves the lower-triangular factor of the Cholesky …","Retrieves the upper trapezoidal submatrix <code>H</code> of this …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Retrieve the diagonal, and off diagonal elements of this …","Computes the orthogonal matrix <code>V_t</code> of this <code>U * D * V_t</code> …","The right-singular vectors <code>V^t</code> of this SVD.","Computes the wilkinson shift, i.e., the 2x2 symmetric …","Applies in-place a modified Parlett and Reinsch matrix …","Computes in-place <code>D * m * D.inverse()</code>, where <code>D</code> is the …","A Givens rotation.","","","The cos part of this roration.","Computes the rotation <code>R</code> required such that the <code>x</code> component …","Computes the rotation <code>R</code> required such that the <code>y</code> component …","","","","Returns the argument unchanged.","","The Givents rotation that does nothing.","Calls <code>U::from(self)</code>.","The inverse of this givens rotation.","","Initializes a Givens rotation from its non-normalized …","Initializes a Givens rotation from its components.","Performs the multiplication <code>rhs = self * rhs</code> in-place.","Performs the multiplication <code>lhs = lhs * self</code> in-place.","The sin part of this roration.","","","","","","Initializes a Givens rotation form its non-normalized …",""],"i":[0,0,0,0,0,0,19,0,0,86,0,19,0,0,0,12,0,0,86,4,86,4,86,4,4,4,4,4,4,4,4,4,4,4,4,4,275,275,275,86,4,4,86,4,86,4,86,4,2,86,4,0,275,4,4,86,4,86,4,0,0,2,4,4,4,86,4,0,0,0,0,2,0,86,4,86,86,4,86,4,0,0,4,4,4,4,4,4,4,4,4,4,4,4,0,0,2,4,4,86,4,86,4,86,4,19,4,19,4,86,4,4,4,4,4,4,4,4,4,2,2,2,2,2,2,2,2,86,4,4,4,4,4,4,4,4,4,4,4,4,4,86,4,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,86,4,4,275,275,275,4,86,4,0,0,4,4,4,4,0,86,4,4,4,4,4,4,4,4,2,2,4,4,19,4,0,86,4,2,86,4,2,86,4,86,4,2,86,4,2,19,0,0,2,2,0,2,2,86,4,86,4,4,4,4,4,4,4,4,4,86,4,4,4,4,4,4,4,4,4,4,4,4,275,4,86,4,4,4,0,4,275,0,0,0,0,0,0,0,0,0,2,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,86,4,86,4,86,4,4,4,4,4,4,86,4,86,4,4,4,4,4,4,4,4,4,4,4,4,4,19,4,19,4,86,4,86,4,4,4,19,4,4,4,86,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,66,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,58,12,4,4,4,4,4,4,4,4,4,4,4,66,12,4,4,4,4,4,4,4,4,4,4,4,12,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,66,66,58,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,66,66,66,66,66,66,66,66,12,4,4,4,4,4,4,4,4,4,4,4,58,58,58,58,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,58,12,4,4,4,4,4,4,4,4,4,4,4,66,12,4,4,4,4,4,4,4,4,4,4,4,66,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,66,12,4,4,4,4,4,4,4,4,4,4,4,66,58,58,58,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,58,12,4,4,4,4,4,4,4,4,4,4,4,66,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,4,4,4,4,12,4,12,4,12,4,4,4,4,4,4,4,4,4,4,4,66,12,4,4,4,4,4,4,4,4,4,4,4,86,4,86,4,86,86,4,86,4,86,19,4,86,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,86,4,86,4,86,4,4,4,4,4,4,4,4,4,86,4,4,4,4,4,4,4,4,4,4,86,4,0,0,4,4,86,4,2,4,86,4,4,4,0,0,275,0,4,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,79,77,79,79,79,80,79,79,87,79,87,79,87,79,87,79,87,79,87,79,87,79,87,79,79,79,79,79,79,79,79,79,79,79,79,79,0,79,79,79,80,80,80,80,80,87,79,87,79,87,79,87,79,87,79,87,79,79,79,79,79,95,79,95,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,114,79,116,114,117,116,116,80,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,80,79,79,114,79,116,114,119,117,116,116,116,116,79,79,123,79,95,79,80,80,80,95,79,77,79,77,79,144,79,114,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,119,117,135,136,137,80,116,114,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,119,117,135,136,137,80,116,79,79,79,79,80,80,80,80,79,79,114,79,119,135,136,137,80,116,114,79,119,135,136,137,80,116,114,79,119,117,116,116,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,80,87,79,79,79,79,79,79,79,79,79,79,79,80,80,80,79,80,80,80,79,79,79,0,95,79,95,79,95,79,0,79,79,80,79,95,79,79,114,79,0,79,80,79,80,79,80,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,80,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,87,79,87,79,0,79,79,79,79,79,79,152,152,79,79,79,80,87,79,144,114,79,79,80,116,114,79,80,116,80,60,79,80,79,79,79,116,116,116,116,60,60,156,79,80,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,114,79,79,79,79,79,79,79,79,79,119,117,135,136,137,80,116,79,79,60,60,60,60,60,60,60,60,60,152,170,170,172,172,172,172,156,156,156,156,156,175,77,178,179,180,181,182,121,121,121,122,114,79,79,79,79,79,79,79,119,117,135,136,137,80,80,80,80,80,116,80,152,79,156,79,80,80,80,60,60,60,60,79,79,79,79,60,79,60,79,80,80,80,79,79,60,79,60,60,60,60,79,79,79,79,60,79,60,60,60,60,79,79,79,79,60,79,156,79,80,60,60,60,60,79,79,79,79,60,79,95,79,80,60,60,60,60,79,79,79,79,60,79,80,80,80,80,60,60,60,60,79,79,79,79,60,79,80,80,119,117,80,80,80,80,60,60,60,60,79,79,79,79,60,79,60,60,60,60,79,79,79,79,60,79,60,79,156,79,80,80,80,121,121,121,121,122,122,122,122,79,79,79,79,79,79,79,79,121,122,79,79,121,122,79,79,121,121,121,121,122,122,122,122,79,79,79,79,79,79,79,79,121,121,121,121,79,79,79,79,121,122,79,79,121,122,79,79,122,122,122,122,79,79,79,79,121,121,121,121,122,122,122,122,79,79,79,79,79,79,79,79,114,79,119,117,135,136,137,80,116,60,60,60,60,60,79,79,79,79,60,79,186,175,179,79,79,79,79,79,79,79,79,95,79,95,79,95,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,114,79,80,95,79,79,87,79,79,95,79,79,95,79,95,79,79,60,60,60,60,79,79,79,79,80,80,80,60,79,95,79,95,79,79,79,79,79,79,79,0,79,79,79,79,79,79,79,79,79,79,114,79,119,117,135,136,137,80,116,80,79,79,114,79,119,117,116,116,79,191,79,119,117,117,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,114,119,117,116,116,79,116,79,60,114,79,119,117,135,136,137,80,116,87,79,79,87,79,79,60,80,0,79,79,77,79,77,79,79,60,79,79,116,95,79,80,80,80,156,79,80,156,79,80,79,79,79,79,79,79,79,87,79,79,79,60,79,79,80,97,79,135,136,137,79,60,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,152,152,79,79,79,79,79,79,79,80,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,80,80,116,80,80,60,79,172,156,79,79,80,156,79,80,156,79,156,79,172,156,79,79,156,79,60,79,60,79,119,117,80,119,117,80,80,97,201,60,79,135,136,137,201,60,79,79,79,79,60,77,79,77,79,79,79,79,79,79,80,80,87,79,87,79,87,79,87,79,87,79,87,79,60,60,79,79,114,119,117,116,116,114,117,116,116,95,79,79,87,79,87,79,87,79,87,79,80,79,79,79,80,79,79,79,79,79,79,79,79,79,79,80,80,60,60,60,60,79,79,79,79,60,79,60,60,114,79,119,117,116,116,116,116,79,116,79,79,60,79,60,79,79,60,79,80,80,80,80,80,80,80,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,201,60,79,80,80,80,80,80,80,79,80,60,79,79,79,79,79,79,79,114,79,119,117,116,116,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,80,79,79,144,95,79,80,80,80,79,79,79,79,79,79,87,79,87,79,87,79,87,79,87,79,87,79,87,79,87,79,87,79,87,79,60,0,114,79,119,117,116,116,79,79,79,79,79,79,79,60,60,60,60,79,79,79,79,79,79,79,79,95,79,79,79,87,79,87,79,79,80,95,79,79,80,80,80,80,114,79,119,135,136,137,80,116,80,80,79,79,80,114,79,119,117,135,136,137,80,116,114,79,119,117,135,136,137,80,116,60,79,79,79,79,87,79,87,79,87,79,87,79,87,79,87,79,87,79,87,79,87,79,87,87,79,79,80,80,80,87,79,80,80,80,80,79,79,79,79,114,79,119,117,135,136,137,80,116,114,79,119,117,135,136,137,80,116,87,79,87,79,80,80,79,79,79,79,80,79,80,80,79,79,79,114,79,119,117,135,136,137,80,116,79,79,80,0,123,79,79,201,60,79,80,79,79,79,95,79,95,79,79,79,79,79,79,79,77,79,77,79,77,79,77,79,95,79,95,79,95,79,95,79,95,79,95,79,95,79,95,79,95,79,95,79,95,79,95,79,77,79,77,79,95,79,95,79,95,79,95,79,95,79,95,79,95,79,95,79,95,79,95,79,95,79,95,79,77,79,77,79,60,60,60,60,60,79,79,79,79,60,79,79,79,79,79,79,95,79,95,79,95,79,95,79,95,79,95,79,95,79,95,79,95,79,95,79,95,79,95,79,0,276,276,0,0,0,0,0,276,276,276,276,277,0,0,278,279,280,281,0,0,0,0,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,222,223,223,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,224,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,224,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,226,227,228,229,231,232,233,234,236,237,238,239,241,242,243,244,246,247,248,249,227,228,229,232,233,234,237,238,239,242,243,244,247,248,249,228,229,233,234,238,239,243,244,248,249,229,234,239,244,249,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,226,227,228,229,231,232,233,234,236,237,238,239,241,242,243,244,246,247,248,249,227,228,229,232,233,234,237,238,239,242,243,244,247,248,249,228,229,233,234,238,239,243,244,248,249,229,234,239,244,249,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,231,232,233,234,236,237,238,239,241,242,243,244,246,247,248,249,232,233,234,237,238,239,242,243,244,247,248,249,233,234,238,239,243,244,248,249,234,239,244,249,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,236,237,238,239,241,242,243,244,246,247,248,249,237,238,239,242,243,244,247,248,249,238,239,243,244,248,249,239,244,249,240,241,242,243,244,245,246,247,248,249,240,241,242,243,244,245,246,247,248,249,241,242,243,244,246,247,248,249,242,243,244,247,248,249,243,244,248,249,244,249,245,246,247,248,249,245,246,247,248,249,246,247,248,249,247,248,249,248,249,249,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,221,222,223,224,218,219,220,221,222,223,219,220,221,222,223,220,221,222,223,0,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,0,282,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,176,196,283,145,93,284,285,125,286,287,288,0,0,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,147,176,118,118,78,78,78,118,78,118,78,118,78,118,78,76,78,284,285,118,78,78,78,118,78,118,78,118,78,118,78,118,78,59,118,78,78,118,78,59,118,78,287,288,118,78,78,78,125,286,118,78,78,78,196,283,118,78,78,78,76,78,118,145,93,118,118,78,78,78,118,78,118,78,118,78,118,78,118,78,59,118,78,118,78,59,118,78,0,0,188,189,0,0,0,0,0,0,194,195,204,205,141,142,194,195,204,205,141,142,194,204,141,194,204,141,194,195,204,205,141,142,194,195,204,205,141,142,194,195,204,205,141,142,194,195,204,205,141,142,194,195,204,205,141,142,194,195,204,205,141,142,194,195,204,205,141,142,194,195,204,205,141,142,194,195,194,195,204,205,141,142,194,195,141,142,194,195,204,205,141,142,194,204,141,194,195,204,205,141,142,194,195,204,205,141,142,194,195,204,205,141,142,194,195,204,205,141,142,194,195,204,205,141,142,0,83,0,203,0,0,0,83,0,0,0,0,0,0,88,83,81,83,83,88,88,83,83,88,88,81,83,83,83,88,203,83,83,88,88,0,0,0,289,289,251,252,289,251,252,251,252,251,252,251,252,251,252,251,252,251,252,251,252,251,252,251,252,289,251,252,251,252,251,252,251,252,251,252,251,252,251,252,251,252,251,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,129,127,168,177,151,90,128,166,164,163,165,90,90,177,177,177,177,90,90,90,90,128,128,128,128,177,177,90,90,128,128,169,171,130,127,151,151,169,171,130,127,151,151,130,163,165,163,165,163,165,165,165,163,165,177,173,174,128,173,174,128,90,90,90,90,174,90,90,171,130,256,151,171,130,127,151,256,168,256,177,151,90,128,166,164,163,165,260,261,262,173,174,168,256,177,151,90,128,166,164,163,165,260,261,262,173,174,173,130,129,127,257,184,258,259,177,151,90,128,166,164,163,163,163,163,165,165,165,165,167,260,261,262,168,177,151,90,128,166,164,163,165,260,261,262,173,174,168,177,151,90,128,166,164,163,165,260,261,262,173,174,168,90,127,130,129,127,90,128,130,129,127,90,128,177,90,90,127,90,130,129,127,168,177,151,90,128,166,163,165,130,129,127,168,177,151,90,128,166,164,163,165,130,129,127,168,177,151,90,128,166,164,163,165,130,129,127,168,177,151,90,128,166,164,163,165,177,177,177,177,177,177,90,166,166,166,166,166,166,164,164,164,164,164,164,177,177,177,177,177,177,90,166,166,166,166,166,166,164,164,164,164,164,164,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,127,127,127,127,127,127,127,127,185,185,185,185,184,184,184,184,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,177,177,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,90,90,128,128,128,128,128,128,166,166,166,166,166,166,166,166,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,130,130,130,130,129,129,129,129,129,129,129,129,127,127,127,127,168,168,168,168,168,168,168,168,168,168,177,151,151,151,151,90,128,128,128,166,166,163,163,163,163,163,163,163,163,165,165,165,165,165,165,165,165,165,165,90,128,129,130,129,127,168,177,151,90,128,166,164,163,165,260,261,262,173,174,168,177,151,90,128,166,164,163,165,260,261,262,171,130,151,171,151,130,90,90,13,130,127,168,151,90,166,164,163,165,13,130,127,168,151,90,166,164,163,165,171,130,184,259,151,163,163,165,165,130,129,127,168,177,177,151,151,90,90,128,166,166,164,164,163,163,165,165,260,261,262,173,174,174,13,13,13,13,13,169,171,130,130,130,130,130,129,127,127,127,127,127,184,168,256,177,177,151,151,151,151,151,90,90,90,90,90,90,90,128,166,166,166,166,166,166,166,166,164,164,164,164,164,164,164,164,163,163,163,163,163,163,163,163,163,165,165,165,165,165,260,261,262,173,174,127,171,130,151,169,171,130,127,151,151,127,127,177,127,171,130,151,173,177,90,129,165,169,171,130,127,151,151,169,171,130,127,151,151,168,151,173,174,129,90,163,165,90,130,90,128,128,129,130,127,169,171,130,127,151,151,130,165,177,168,256,177,151,90,128,166,164,163,165,260,261,262,173,174,169,171,171,130,130,130,130,130,130,130,129,129,129,129,129,127,127,127,127,127,127,185,184,168,168,177,177,151,151,151,151,151,90,128,166,166,166,166,166,164,164,164,163,163,163,163,165,165,165,90,166,177,177,177,177,90,167,167,262,168,177,151,90,166,164,163,165,260,261,262,253,130,130,129,127,127,168,151,151,90,128,166,164,163,165,90,168,177,151,90,128,168,177,90,128,177,177,90,168,256,177,151,90,128,166,164,163,165,260,261,262,173,174,168,151,173,174,90,163,253,130,130,129,127,127,168,151,151,166,163,165,173,174,253,130,130,129,127,127,168,151,151,166,163,165,253,130,130,129,127,127,168,151,151,166,163,165,253,253,130,129,127,151,151,163,253,130,130,129,127,127,168,151,151,163,165,164,177,169,171,171,130,130,130,130,130,130,130,129,129,129,129,129,127,127,127,127,127,127,185,184,168,168,168,256,177,177,177,151,151,151,151,151,151,90,90,128,128,166,166,166,166,166,166,164,164,164,164,163,163,163,163,163,165,165,165,165,260,261,262,173,174,90,90,128,165,129,177,177,13,130,127,168,151,90,166,164,163,165,177,173,90,177,130,129,177,90,128,257,184,258,259,163,163,163,163,130,90,171,130,184,259,151,163,163,165,165,171,130,184,259,151,163,163,165,165,177,90,90,177,168,151,168,151,168,151,177,177,130,177,177,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,185,185,185,185,184,184,184,184,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,177,177,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,90,90,90,90,90,90,128,128,128,128,128,128,128,128,128,128,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,164,164,164,164,164,164,164,164,164,164,164,164,164,164,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,130,130,130,130,129,129,129,129,129,129,129,129,127,127,127,127,168,168,168,168,168,168,168,168,168,168,168,168,168,168,177,151,151,151,151,90,90,90,128,128,128,128,128,166,166,164,164,164,163,163,163,163,163,163,163,163,163,163,165,165,165,165,165,165,165,165,165,165,165,165,129,129,177,177,90,90,128,128,267,192,155,268,269,270,169,171,130,127,257,184,258,259,256,177,177,177,177,177,177,151,151,90,166,166,166,166,166,166,164,164,164,164,164,164,163,163,163,163,165,165,165,165,173,174,256,130,184,259,163,163,171,130,151,165,165,130,129,90,90,128,90,90,128,90,128,90,128,130,129,127,168,151,90,128,166,164,163,165,177,90,177,90,169,171,130,127,151,151,90,165,165,90,173,174,173,174,164,90,130,128,256,256,256,256,90,130,129,127,168,177,151,90,128,166,164,163,165,169,171,151,151,13,130,127,168,151,90,166,164,163,165,13,130,127,168,151,90,166,164,163,165,173,90,129,257,184,258,259,163,163,163,163,163,169,171,130,127,151,151,130,127,169,171,130,127,151,151,163,165,90,90,128,169,171,130,127,151,151,169,171,130,127,151,151,130,127,165,129,13,130,127,168,151,90,166,164,163,165,174,173,173,168,174,173,173,173,165,173,173,174,173,174,173,174,177,177,177,177,177,177,177,177,177,177,177,90,90,127,90,169,171,130,127,151,151,13,130,127,168,151,90,166,164,163,165,90,90,177,177,177,177,177,177,177,177,177,90,90,90,90,128,128,128,128,177,177,90,90,128,128,177,177,90,90,171,130,151,130,129,127,168,177,151,166,164,163,165,173,174,129,163,168,177,151,90,128,166,164,163,165,260,261,262,173,174,173,174,130,127,177,151,90,166,164,163,165,168,256,177,151,90,128,166,164,163,165,260,261,262,173,174,168,256,177,151,90,128,166,164,163,165,260,261,262,173,174,169,171,171,130,130,130,130,130,130,130,129,129,129,129,129,127,127,127,127,127,127,185,184,168,168,177,177,151,151,151,151,151,90,128,166,166,166,166,166,164,164,164,163,163,163,163,165,165,165,173,253,130,130,129,127,127,168,151,151,166,164,163,165,253,130,130,129,127,127,168,151,151,163,165,129,257,184,258,259,163,163,163,163,163,151,151,168,256,177,151,90,128,166,164,163,165,260,261,262,173,174,168,256,177,151,90,128,166,164,163,165,260,261,262,173,174,168,90,128,164,168,90,128,164,164,184,259,163,163,129,171,130,151,168,256,177,151,90,128,166,164,163,165,260,261,262,173,174,130,129,127,168,177,151,90,128,166,164,163,165,173,174,90,128,168,151,173,174,90,166,164,90,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,90,128,173,174,173,174,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,13,177,0,0,0,0,0,0,0,0,0,0,0,0,0,273,0,126,134,140,187,190,198,273,202,207,211,212,213,215,126,134,140,187,190,198,273,202,207,211,212,213,215,126,134,140,187,190,198,273,202,207,211,212,213,215,126,134,140,187,190,198,273,202,207,211,212,213,215,207,126,215,215,134,140,187,198,273,126,213,207,212,212,126,134,140,187,190,198,273,202,207,211,212,213,215,126,134,140,187,190,198,273,202,207,211,212,213,215,126,134,140,187,190,198,273,202,207,211,212,213,215,0,190,0,273,273,273,134,126,134,140,187,190,198,273,202,207,211,212,213,215,273,273,134,273,126,134,140,187,190,198,273,202,207,211,212,213,215,140,187,198,202,126,134,187,198,134,198,273,134,126,134,140,187,190,198,202,207,211,212,213,215,134,211,134,190,126,213,140,187,198,134,273,273,211,140,187,190,202,213,140,202,140,202,211,134,211,212,213,134,211,134,140,187,198,202,211,134,140,187,198,202,211,126,134,140,187,190,198,273,202,207,211,212,213,215,211,126,134,140,187,190,198,273,202,207,211,212,213,215,126,134,140,187,190,198,273,202,207,211,212,213,215,126,134,140,187,190,198,273,202,207,211,212,213,215,126,134,140,187,190,198,273,202,207,211,212,213,215,140,187,198,202,198,0,207,211,212,211,126,134,140,187,190,198,273,202,207,211,212,213,215,126,187,198,211,215,126,134,140,187,190,198,202,207,213,134,190,140,202,213,126,211,0,0,0,0,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274],"fc":[17,72,176,177,967,1015,1016,1020,1021,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1174,1295,1296,1300,1301,1306,1307,1308,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1708,1711,1723,1724,1725,1887,1888,1889,1890,2204,2205,2206,2207,2213,2455,2456,2457,2671,2672,2673,2674,2675,2676,2733,2866,4116,4453,4915,4916,5404,5516,5583,5769,6235,6236,6237,6238,6239,6240,6241,6242,6243,6436,6463,6464,6465,6699,6700,6701,6702],"p":[[8,"Signed"],[8,"RealField"],[8,"PartialOrd"],[3,"Complex"],[8,"Clone"],[8,"Num"],[8,"NumAssign"],[15,"bool"],[8,"Copy"],[8,"AsPrimitive"],[15,"u64"],[8,"SimdComplexField"],[6,"Point"],[8,"Neg"],[8,"SupersetOf"],[8,"Default"],[8,"PartialEq"],[15,"usize"],[8,"SimdValue"],[8,"UpperExp"],[3,"Formatter"],[3,"Error"],[4,"Result"],[8,"Debug"],[8,"LowerHex"],[8,"Octal"],[8,"Binary"],[8,"Display"],[8,"UpperHex"],[8,"LowerExp"],[8,"ToPrimitive"],[8,"NumCast"],[4,"Option"],[15,"f32"],[8,"FromPrimitive"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"array"],[3,"AutoSimd"],[3,"WideF32x8"],[3,"WideF64x4"],[3,"WideF32x4"],[15,"str"],[8,"FromStr"],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u8"],[8,"Hash"],[8,"Hasher"],[8,"FnOnce"],[8,"Scalar"],[8,"SimdPartialOrd"],[8,"Dim"],[6,"OMatrix"],[8,"FloatCore"],[8,"Fn"],[8,"Ord"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"SimdRealField"],[8,"One"],[4,"Ordering"],[8,"Iterator"],[3,"String"],[3,"TypeId"],[8,"ClosedAdd"],[8,"ClosedSub"],[8,"Zero"],[8,"ToTypenum"],[8,"DimName"],[6,"OVector"],[3,"Const"],[3,"Matrix"],[3,"Unit"],[8,"Storage"],[8,"AbsDiffEq"],[8,"RawStorage"],[8,"ClosedMul"],[8,"StorageMut"],[8,"ComplexField"],[6,"SquareMatrix"],[8,"RawStorageMut"],[8,"SimdSigned"],[3,"Quaternion"],[6,"Vector3"],[6,"U1"],[8,"DimNameSub"],[6,"DimNameDiff"],[6,"Vector"],[8,"FnMut"],[8,"Norm"],[6,"U12"],[8,"IsContiguous"],[6,"U9"],[6,"U4"],[6,"U6"],[6,"U2"],[6,"U15"],[6,"U5"],[6,"U3"],[6,"U16"],[6,"U13"],[6,"U10"],[6,"U7"],[6,"U8"],[6,"U14"],[6,"U11"],[3,"ArrayStorage"],[15,"slice"],[3,"VecStorage"],[3,"ViewStorageMut"],[3,"Dyn"],[3,"ViewStorage"],[3,"Vec"],[6,"MatrixView"],[6,"MatrixViewMut"],[6,"UninitMatrix"],[19,"MaybeUninit"],[8,"DimMin"],[3,"Bidiagonal"],[6,"UnitComplex"],[3,"DualQuaternion"],[6,"UnitDualQuaternion"],[6,"UnitQuaternion"],[8,"ClosedDiv"],[8,"Mul"],[8,"Add"],[3,"Cholesky"],[3,"EuclideanNorm"],[3,"LpNorm"],[3,"UniformNorm"],[6,"Owned"],[6,"MatrixSum"],[3,"ColPivQR"],[3,"ColumnIter"],[3,"ColumnIterMut"],[8,"Field"],[8,"DimRange"],[8,"DimSub"],[6,"RowOVector"],[8,"DimAdd"],[6,"DimSum"],[6,"DimDiff"],[6,"MatrixCross"],[3,"Rotation"],[6,"SMatrix"],[8,"Extend"],[8,"IntoIterator"],[6,"Point3"],[6,"Matrix4"],[6,"Result"],[8,"Pointer"],[8,"From"],[8,"PrimitiveSimdValue"],[6,"DimNameSum"],[8,"SubsetOf"],[3,"Isometry"],[3,"Scale"],[3,"Similarity"],[3,"Translation"],[8,"TCategory"],[3,"Transform"],[6,"Rotation2"],[6,"Matrix2"],[6,"Rotation3"],[6,"Matrix3"],[3,"Orthographic3"],[3,"Perspective3"],[6,"DVector"],[8,"DimNameAdd"],[3,"OPoint"],[6,"SVector"],[6,"RowDVector"],[6,"RowSVector"],[6,"DVectorView"],[6,"DVectorViewMut"],[6,"Vector2"],[6,"Isometry3"],[6,"Translation3"],[6,"DMatrix"],[3,"FullPivLU"],[8,"MatrixIndex"],[8,"MatrixIndexMut"],[3,"Hessenberg"],[6,"Matrix1"],[6,"Point2"],[8,"RelativeEq"],[3,"MatrixIter"],[3,"MatrixIterMut"],[8,"DimMul"],[6,"DimProd"],[3,"LU"],[8,"Bounded"],[8,"ClosedNeg"],[8,"Normed"],[3,"QR"],[8,"ReshapableStorage"],[3,"RowIter"],[3,"RowIterMut"],[6,"Vector1"],[3,"Schur"],[6,"RowVector"],[3,"SimdOption"],[6,"DimMinimum"],[3,"SVD"],[3,"SymmetricEigen"],[3,"SymmetricTridiagonal"],[8,"IsNotStaticOne"],[3,"UDU"],[8,"UlpsEq"],[3,"ShapeConstraint"],[3,"X"],[3,"XY"],[3,"XYZ"],[3,"XYZW"],[3,"XYZWA"],[3,"XYZWAB"],[3,"IJKW"],[3,"M2x2"],[3,"M2x3"],[3,"M2x4"],[3,"M2x5"],[3,"M2x6"],[3,"M3x2"],[3,"M3x3"],[3,"M3x4"],[3,"M3x5"],[3,"M3x6"],[3,"M4x2"],[3,"M4x3"],[3,"M4x4"],[3,"M4x5"],[3,"M4x6"],[3,"M5x2"],[3,"M5x3"],[3,"M5x4"],[3,"M5x5"],[3,"M5x6"],[3,"M6x2"],[3,"M6x3"],[3,"M6x4"],[3,"M6x5"],[3,"M6x6"],[3,"DefaultAllocator"],[3,"Init"],[3,"Uninit"],[8,"AbstractRotation"],[6,"Projective3"],[6,"Vector4"],[3,"Reflection"],[6,"Isometry2"],[6,"IsometryMatrix2"],[6,"IsometryMatrix3"],[4,"TGeneral"],[4,"TProjective"],[4,"TAffine"],[8,"TCategoryMul"],[8,"SubTCategoryOf"],[8,"SuperTCategoryOf"],[6,"Similarity3"],[6,"Point1"],[6,"Point4"],[6,"Point5"],[6,"Point6"],[6,"RStride"],[6,"CStride"],[3,"PermutationSequence"],[3,"GivensRotation"],[8,"SimdBool"],[8,"Allocator"],[8,"Reallocator"],[8,"DimEq"],[8,"SameDimension"],[8,"SameNumberOfRows"],[8,"SameNumberOfColumns"],[8,"ToConst"],[8,"DimNameMul"],[8,"DimDiv"],[8,"DimNameDiv"],[8,"DimNameMin"],[8,"DimMax"],[8,"DimNameMax"],[8,"InitStatus"]]},\
"nalgebra_macros":{"doc":"Macros for <code>nalgebra</code>.","t":"OOOOO","n":["dmatrix","dvector","matrix","point","vector"],"q":[[0,"nalgebra_macros"]],"d":["Construct a dynamic matrix directly from data.","Construct a dynamic column vector directly from data.","Construct a fixed-size matrix directly from data.","Construct a fixed-size point directly from data.","Construct a fixed-size column vector directly from data."],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[]},\
"num_complex":{"doc":"Complex numbers.","t":"DGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Complex","Complex32","Complex64","ParseComplexError","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","as_","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","conj","default","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_str","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hash","i","im","into","into","inv","inv","inv","is_finite","is_infinite","is_nan","is_normal","is_one","is_zero","l1_norm","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","norm_sqr","one","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powi","powu","product","product","re","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","scale","set_one","set_zero","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_string","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","try_from","try_from","try_into","try_into","type_id","type_id","unscale","zero"],"q":[[0,"num_complex"]],"d":["A complex number in Cartesian form.","","","","","","","","","","","","","","","","","","","","","","","Returns the complex conjugate. i.e. <code>re - i im</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","Returns imaginary unit","Imaginary portion of the complex number","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>1/self</code>","","Checks if the given complex number is finite","Checks if the given complex number is infinite","Checks if the given complex number is NaN","Checks if the given complex number is normal","","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","","","","","","","","","","","","","","","","","","","Create a new Complex","Returns the square of the norm (since <code>T</code> doesn’t …","","","","","","","","","","","","","","","","","","","","","","","","","","Raises <code>self</code> to a signed integer power.","Raises <code>self</code> to an unsigned integer power.","","","Real portion of the complex number","","","","","","","","","","","","","Multiplies <code>self</code> by the scalar <code>t</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Divides <code>self</code> by the scalar <code>t</code>.",""],"i":[0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,3,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,3,3,3,3,3,3,3,3,3,11,11,3,3,3,3,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,3,3,3,3,3,3,3,11,3,11,3,11,3,3],"f":[0,0,0,0,[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,4]]]],[3,[[0,[1,4]]]]]],[[[3,[[0,[1,4]]]],[0,[1,4]]]],[[[3,[[0,[1,4]]]],[0,[1,4]]]],[[[3,[[0,[1,4]]]],[3,[[0,[1,4]]]]]],[[[3,[[6,[5]]]]],5],[[]],[[]],[[]],[[]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[[0,[1,2,7]]]]],[[3,[[0,[1,2,7]]]]]],[[],[[3,[8]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,4]]]],[0,[1,4]]]],[[[3,[[0,[1,4]]]],[0,[1,4]]]],[[[3,[[0,[1,4]]]],[3,[[0,[1,4]]]]]],[[[3,[[0,[1,4]]]],[3,[[0,[1,4]]]]]],[[[3,[9]],[3,[9]]],10],[[[11,[9]],[11,[9]]],10],[[],10],[[[3,[[0,[12,2,13,1]]]],14],15],[[[3,[[0,[16,2,13,1]]]],14],15],[[[3,[[0,[17,2,13,1]]]],14],15],[[[3,[[0,[18,2,13,1]]]],14],15],[[[3,[[0,[19,2,13,1]]]],14],15],[[[3,[20]],14],15],[[[3,[[0,[21,2,13,1]]]],14],15],[[[3,[[0,[22,2,13,1]]]],14],15],[[[11,[20]],14],15],[[[11,[22]],14],15],[23,[[25,[[3,[[0,[24,2]]]]]]]],[[]],[[[0,[1,2]]],[[3,[[0,[1,2]]]]]],[[[0,[1,2]]],[[3,[[0,[1,2]]]]]],[[]],[26,[[25,[[3,[[0,[27,2]]]]]]]],[28,[[25,[[3,[[0,[27,2]]]]]]]],[29,[[25,[[3,[[0,[27,2]]]]]]]],[30,[[25,[[3,[[0,[27,2]]]]]]]],[31,[[25,[[3,[[0,[27,2]]]]]]]],[32,[[25,[[3,[[0,[27,2]]]]]]]],[33,[[25,[[3,[[0,[27,2]]]]]]]],[34,[[25,[[3,[[0,[27,2]]]]]]]],[35,[[37,[[3,[[0,[36,2,1]]]]]]]],[[35,38],[[37,[[3,[[0,[2,1]]]]]]]],[39,[[25,[[3,[[0,[27,2]]]]]]]],[40,[[25,[[3,[[0,[27,2]]]]]]]],[38,[[25,[[3,[[0,[27,2]]]]]]]],[41,[[25,[[3,[[0,[27,2]]]]]]]],[42,[[25,[[3,[[0,[27,2]]]]]]]],[43,[[25,[[3,[[0,[27,2]]]]]]]],[[[3,[44]],45]],[[],[[3,[[0,[1,2]]]]]],0,[[]],[[]],[[[3,[[0,[1,2,7]]]]]],[[[3,[[0,[1,2,7]]]]],[[3,[[0,[1,2,7]]]]]],[[[3,[[0,[1,2,7]]]]]],[[[3,[46]]],10],[[[3,[46]]],10],[[[3,[46]]],10],[[[3,[46]]],10],[[[3,[[0,[1,2]]]]],10],[[[3,[[0,[1,2]]]]],10],[[[3,[[0,[1,47]]]]],[[0,[1,47]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,2,48]]]],[3,[[0,[1,2,48]]]],[3,[[0,[1,2,48]]]]],[[3,[[0,[1,2,48]]]]]],[[[3,[[0,[1,2,48]]]],[3,[[0,[1,2,48]]]],[3,[[0,[1,2,48]]]]],[[3,[[0,[1,2,48]]]]]],[[[3,[[0,[1,4,49]]]],[3,[[0,[1,4,49]]]],[3,[[0,[1,4,49]]]]]],[[[3,[[0,[1,4,49]]]],[3,[[0,[1,4,49]]]],[3,[[0,[1,4,49]]]]]],[[[3,[[0,[1,4]]]],[0,[1,4]]]],[[[3,[[0,[1,4]]]],[3,[[0,[1,4]]]]]],[[[3,[[0,[1,4]]]],[3,[[0,[1,4]]]]]],[[[3,[[0,[1,4]]]],[0,[1,4]]]],[[[3,[[0,[1,2,7]]]]]],[[[3,[[0,[1,2,7]]]]]],[[],3],[[[3,[[0,[1,2]]]]],[[0,[1,2]]]],[[],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2,7]]]],34]],[[[3,[[0,[1,2,7]]]],32]],[[[3,[[0,[1,2]]]],41]],[[[3,[[0,[1,2,7]]]],31]],[[[3,[[0,[1,2,7]]]],32]],[[[3,[[0,[1,2,7]]]],31]],[[[3,[[0,[1,2]]]],38]],[[[3,[[0,[1,2]]]],43]],[[[3,[[0,[1,2]]]],39]],[[[3,[[0,[1,2,7]]]],33]],[[[3,[[0,[1,2]]]],42]],[[[3,[[0,[1,2,7]]]],33]],[[[3,[[0,[1,2]]]],38]],[[[3,[[0,[1,2]]]],40]],[[[3,[[0,[1,2,7]]]],30]],[[[3,[[0,[1,2]]]],40]],[[[3,[[0,[1,2,7]]]],29]],[[[3,[[0,[1,2]]]],39]],[[[3,[[0,[1,2,7]]]],34]],[[[3,[[0,[1,2]]]],43]],[[[3,[[0,[1,2,7]]]],29]],[[[3,[[0,[1,2]]]],42]],[[[3,[[0,[1,2,7]]]],30]],[[[3,[[0,[1,2]]]],41]],[[[3,[[0,[1,2,7]]]],31],[[3,[[0,[1,2,7]]]]]],[[[3,[[0,[1,2]]]],38],[[3,[[0,[1,2]]]]]],[50,[[3,[[0,[2,1]]]]]],[50,[[3,[[0,[2,1]]]]]],0,[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,4]]]],[3,[[0,[1,4]]]]]],[[[3,[[0,[1,4]]]],[0,[1,4]]]],[[[3,[[0,[1,4]]]],[0,[1,4]]]],[[[3,[[0,[1,4]]]],[3,[[0,[1,4]]]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[0,[1,2]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[[[3,[[0,[1,4]]]],[3,[[0,[1,4]]]]]],[[[3,[[0,[1,4]]]],[0,[1,4]]]],[[[3,[[0,[1,4]]]],[0,[1,4]]]],[[[3,[[0,[1,4]]]],[3,[[0,[1,4]]]]]],[50,[[3,[[0,[2,1]]]]]],[50,[[3,[[0,[2,1]]]]]],[[[3,[[0,[23,2]]]]],[[25,[26]]]],[[[3,[[0,[23,2]]]]],[[25,[28]]]],[[[3,[[0,[23,2]]]]],[[25,[29]]]],[[[3,[[0,[23,2]]]]],[[25,[30]]]],[[[3,[[0,[23,2]]]]],[[25,[31]]]],[[[3,[[0,[23,2]]]]],[[25,[32]]]],[[[3,[[0,[23,2]]]]],[[25,[33]]]],[[[3,[[0,[23,2]]]]],[[25,[34]]]],[[]],[[],51],[[],51],[[[3,[[0,[23,2]]]]],[[25,[39]]]],[[[3,[[0,[23,2]]]]],[[25,[40]]]],[[[3,[[0,[23,2]]]]],[[25,[38]]]],[[[3,[[0,[23,2]]]]],[[25,[41]]]],[[[3,[[0,[23,2]]]]],[[25,[42]]]],[[[3,[[0,[23,2]]]]],[[25,[43]]]],[[],37],[[],37],[[],37],[[],37],[[],52],[[],52],[[[3,[[0,[1,2]]]],[0,[1,2]]],[[3,[[0,[1,2]]]]]],[[],[[3,[[0,[1,2]]]]]]],"c":[],"p":[[8,"Clone"],[8,"Num"],[3,"Complex"],[8,"NumAssign"],[8,"Copy"],[8,"AsPrimitive"],[8,"Neg"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[3,"ParseComplexError"],[8,"Binary"],[8,"PartialOrd"],[3,"Formatter"],[6,"Result"],[8,"LowerExp"],[8,"Octal"],[8,"UpperExp"],[8,"LowerHex"],[8,"Debug"],[8,"UpperHex"],[8,"Display"],[8,"ToPrimitive"],[8,"NumCast"],[4,"Option"],[15,"f32"],[8,"FromPrimitive"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"str"],[8,"FromStr"],[4,"Result"],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Hash"],[8,"Hasher"],[8,"FloatCore"],[8,"Signed"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Iterator"],[3,"String"],[3,"TypeId"]]},\
"num_derive":{"doc":"Procedural macros to derive numeric traits in Rust.","t":"YYYYYYYY","n":["Float","FromPrimitive","Num","NumCast","NumOps","One","ToPrimitive","Zero"],"q":[[0,"num_derive"]],"d":["Derives <code>num_traits::Float</code> for newtypes.  The inner type …","Derives <code>num_traits::FromPrimitive</code> for simple enums and …","Derives <code>num_traits::Num</code> for newtypes.  The inner type must …","Derives <code>num_traits::NumCast</code> for newtypes.  The inner type …","Derives <code>num_traits::NumOps</code> for newtypes.  The inner type …","Derives <code>num_traits::One</code> for newtypes.  The inner type must …","Derives <code>num_traits::ToPrimitive</code> for simple enums and …","Derives <code>num_traits::Zero</code> for newtypes.  The inner type …"],"i":[0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0],"c":[],"p":[]},\
"num_integer":{"doc":"Integer trait and functions.","t":"IDIDIFKFKFLLLLFLLLLFLFKFLFKKLLLLLLLFKMFLLLLKKKFKFKFLLLFKLFLLLLLLLLLMM","n":["Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","clone","clone_into","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","equivalent","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y"],"q":[[0,"num_integer"]],"d":["Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. Returns …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","Returns the argument unchanged.","Returns the argument unchanged.","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer – …","Returns the truncated principal <code>n</code>th root of an integer – …","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,1,0,14,5,14,5,0,4,4,5,5,0,2,0,2,0,2,0,2,2,5,5,2,2,5,14,5,0,2,5,0,2,14,5,14,2,2,2,0,2,0,2,0,14,14,2,0,4,2,0,4,4,5,14,5,14,5,14,5,5,5],"f":[0,0,0,0,0,[[1,1],1],[[]],[[1,1],1],[[]],[[[0,[2,3]],[0,[2,3]]],[[0,[2,3]]]],[[]],[[]],[[]],[[]],[4,4],[[]],[[]],[[[5,[3]]],[[5,[3]]]],[[]],[[2,2],2],[[]],[[2,2],2],[[]],[[2,2]],[[]],[[2,2]],[[]],[[],6],[[[5,[7]],[5,[7]]],6],[[],6],[[3,3],[[5,[3]]]],[[[0,[3,8]],[0,[3,8]]]],[[[5,[9]],10],11],[[]],[[]],[[2,2],2],[[]],0,[[2,2]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[2,2],2],[[]],[[2,2],2],[[]],[[[13,[[0,[[12,[[0,[[12,[[0,[[12,[[0,[12,2,3]]]],2,3]]]],2,3]]]],2,3]]]]],[[0,[[12,[[0,[[12,[[0,[[12,[[0,[[12,[[0,[12,2,3]]]],2,3]]]],2,3]]]],2,3]]]],2,3]]]],[2,[[14,[2]]]],[[[14,[[0,[2,3]]]]],[[15,[[0,[2,3]]]]]],[[3,3],3],[[4,16],4],[16],[[3,3],3],[4,4],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],0,0],"c":[],"p":[[8,"Average"],[8,"Integer"],[8,"Clone"],[8,"Roots"],[3,"ExtendedGcd"],[15,"bool"],[8,"PartialEq"],[8,"Signed"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Add"],[15,"slice"],[3,"IterBinomial"],[4,"Option"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"num_rational":{"doc":"Rational numbers","t":"DDGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ParseRatioError","Ratio","Rational","Rational32","Rational64","abs","abs_sub","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","default","denom","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","equivalent","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into","inv","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","recip","reduced","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_integer","to_owned","to_owned","to_string","to_string","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero"],"q":[[0,"num_rational"]],"d":["","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","","","","","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","","","Returns zero","Gets an immutable reference to the denominator.","","","","","","","","","","","","","","","","Rounds towards minus infinity.","","","","","","","","","","","Returns the fractional part of a number, with division …","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","","","","","","","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","","","","","","","","","","","","","","","","","","","","","Rounds towards zero.","","","","","","",""],"i":[0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,13,4,4,4,4,4,4,13,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,13,13,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,13,4,13,4],"f":[0,0,0,0,0,[[[4,[[0,[1,2,3]]]]],[[4,[[0,[1,2,3]]]]]],[[[4,[[0,[1,2,3]]]],[4,[[0,[1,2,3]]]]],[[4,[[0,[1,2,3]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[0,[6,7]]],[[9,[[4,[[0,[2,3,8,7,1]]]]]]]],[[]],[[]],[[]],[[]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,10,11]]]],[4,[[0,[1,2,10,11]]]]],[[9,[[4,[[0,[1,2,10,11]]]]]]]],[[[4,[[0,[1,2,10]]]],[4,[[0,[1,2,10]]]]],[[9,[[4,[[0,[1,2,10]]]]]]]],[[[4,[[0,[1,2,10]]]],[4,[[0,[1,2,10]]]]],[[9,[[4,[[0,[1,2,10]]]]]]]],[[[4,[[0,[1,2,10,12]]]],[4,[[0,[1,2,10,12]]]]],[[9,[[4,[[0,[1,2,10,12]]]]]]]],[[[4,[1]]],[[4,[1]]]],[13,13],[[]],[[]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],14],[[],[[4,[[0,[1,2]]]]]],[4],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],15],[[13,13],15],[[],15],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[16]],17],18],[[[4,[[0,[19,1,2]]]],17],18],[[[4,[[0,[20,1,2]]]],17],18],[[[4,[[0,[21,1,2]]]],17],18],[[[4,[[0,[22,1,2]]]],17],18],[[[4,[[0,[23,1,2]]]],17],18],[[[4,[[0,[24,1,2]]]],17],18],[[[4,[[0,[25,1,2]]]],17],18],[[13,17],18],[[13,17],18],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[]],[[[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[],[[4,[[0,[1,2]]]]]],[[]],[26,[[9,[[4,[27]]]]]],[26,[[9,[[4,[28]]]]]],[26,[[9,[[4,[29]]]]]],[26,[[9,[[4,[30]]]]]],[26,[[9,[[4,[31]]]]]],[26,[[9,[[4,[32]]]]]],[26,[[9,[[4,[33]]]]]],[26,[[9,[[4,[34]]]]]],[26,[[9,[[4,[35]]]]]],[26,[[9,[[4,[36]]]]]],[26,[[9,[[4,[37]]]]]],[26,[[9,[[4,[38]]]]]],[39,[[9,[[4,[35]]]]]],[39,[[9,[[4,[33]]]]]],[39,[[9,[[4,[29]]]]]],[39,[[9,[[4,[28]]]]]],[39,[[9,[[4,[34]]]]]],[39,[[9,[[4,[37]]]]]],[39,[[9,[[4,[30]]]]]],[39,[[9,[[4,[36]]]]]],[39,[[9,[[4,[27]]]]]],[39,[[9,[[4,[32]]]]]],[39,[[9,[[4,[31]]]]]],[39,[[9,[[4,[38]]]]]],[36,[[9,[[4,[36]]]]]],[36,[[9,[[4,[29]]]]]],[36,[[9,[[4,[38]]]]]],[36,[[9,[[4,[30]]]]]],[36,[[9,[[4,[28]]]]]],[36,[[9,[[4,[32]]]]]],[36,[[9,[[4,[27]]]]]],[36,[[9,[[4,[35]]]]]],[36,[[9,[[4,[33]]]]]],[36,[[9,[[4,[34]]]]]],[36,[[9,[[4,[37]]]]]],[36,[[9,[[4,[31]]]]]],[38,[[9,[[4,[29]]]]]],[38,[[9,[[4,[28]]]]]],[38,[[9,[[4,[36]]]]]],[38,[[9,[[4,[37]]]]]],[38,[[9,[[4,[33]]]]]],[38,[[9,[[4,[27]]]]]],[38,[[9,[[4,[38]]]]]],[38,[[9,[[4,[30]]]]]],[38,[[9,[[4,[31]]]]]],[38,[[9,[[4,[35]]]]]],[38,[[9,[[4,[34]]]]]],[38,[[9,[[4,[32]]]]]],[[[0,[1,2]]],[[4,[[0,[1,2]]]]]],[40,[[42,[[4,[[0,[41,1,2]]]],13]]]],[[40,33],[[42,[[4,[[0,[1,2]]]],13]]]],[37,[[9,[[4,[38]]]]]],[37,[[9,[[4,[34]]]]]],[37,[[9,[[4,[36]]]]]],[37,[[9,[[4,[33]]]]]],[37,[[9,[[4,[28]]]]]],[37,[[9,[[4,[30]]]]]],[37,[[9,[[4,[32]]]]]],[37,[[9,[[4,[29]]]]]],[37,[[9,[[4,[31]]]]]],[37,[[9,[[4,[27]]]]]],[37,[[9,[[4,[37]]]]]],[37,[[9,[[4,[35]]]]]],[28,[[9,[[4,[36]]]]]],[28,[[9,[[4,[29]]]]]],[28,[[9,[[4,[37]]]]]],[28,[[9,[[4,[34]]]]]],[28,[[9,[[4,[31]]]]]],[28,[[9,[[4,[38]]]]]],[28,[[9,[[4,[30]]]]]],[28,[[9,[[4,[28]]]]]],[28,[[9,[[4,[27]]]]]],[28,[[9,[[4,[35]]]]]],[28,[[9,[[4,[33]]]]]],[28,[[9,[[4,[32]]]]]],[[[4,[[0,[1,2,43]]]],44]],[[]],[4],[[]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]],15],[[[4,[[0,[1,2,3]]]]],15],[[[4,[[0,[1,2]]]]],15],[[[4,[[0,[1,2,3]]]]],15],[[[4,[[0,[1,2]]]]],15],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,45]]]]],[[4,[[0,[1,2,45]]]]]],[[[4,[[0,[1,2,45]]]]],[[4,[[0,[1,2,45]]]]]],[[[0,[1,2]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[],4],[4],[[],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[9,[14]]]],[[[4,[[0,[1,2]]]],36],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],35],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],32],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],34],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[37]]]]]],37],[[4,[[0,[1,2,[46,[37]]]]]]]],[[[4,[[0,[1,2,[46,[32]]]]]],32],[[4,[[0,[1,2,[46,[32]]]]]]]],[[[4,[[0,[1,2]]]],30],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[33]]]]]],30],[[4,[[0,[1,2,[46,[33]]]]]]]],[[[4,[[0,[1,2,[46,[28]]]]]],28],[[4,[[0,[1,2,[46,[28]]]]]]]],[[[4,[[0,[1,2,[46,[33]]]]]],33],[[4,[[0,[1,2,[46,[33]]]]]]]],[[[4,[[0,[1,2,[46,[32]]]]]],32],[[4,[[0,[1,2,[46,[32]]]]]]]],[[[4,[[0,[1,2,[46,[33]]]]]],30],[[4,[[0,[1,2,[46,[33]]]]]]]],[[[4,[[0,[1,2]]]],30],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],31],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[34]]]]]],27],[[4,[[0,[1,2,[46,[34]]]]]]]],[[[4,[[0,[1,2]]]],27],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],38],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[28]]]]]],38],[[4,[[0,[1,2,[46,[28]]]]]]]],[[[4,[[0,[1,2]]]],29],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[29]]]]]],29],[[4,[[0,[1,2,[46,[29]]]]]]]],[[[4,[[0,[1,2]]]],37],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[34]]]]]],34],[[4,[[0,[1,2,[46,[34]]]]]]]],[[[4,[[0,[1,2]]]],34],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[37]]]]]],36],[[4,[[0,[1,2,[46,[37]]]]]]]],[[[4,[[0,[1,2,[46,[32]]]]]],35],[[4,[[0,[1,2,[46,[32]]]]]]]],[[[4,[[0,[1,2]]]],28],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],27],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[29]]]]]],29],[[4,[[0,[1,2,[46,[29]]]]]]]],[[[4,[[0,[1,2,[46,[37]]]]]],36],[[4,[[0,[1,2,[46,[37]]]]]]]],[[[4,[[0,[1,2,[46,[29]]]]]],31],[[4,[[0,[1,2,[46,[29]]]]]]]],[[[4,[[0,[1,2,[46,[37]]]]]],37],[[4,[[0,[1,2,[46,[37]]]]]]]],[[[4,[[0,[1,2]]]],35],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],36],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[28]]]]]],28],[[4,[[0,[1,2,[46,[28]]]]]]]],[[[4,[[0,[1,2]]]],33],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],37],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[33]]]]]],33],[[4,[[0,[1,2,[46,[33]]]]]]]],[[[4,[[0,[1,2,[46,[29]]]]]],31],[[4,[[0,[1,2,[46,[29]]]]]]]],[[[4,[[0,[1,2,[46,[34]]]]]],27],[[4,[[0,[1,2,[46,[34]]]]]]]],[[[4,[[0,[1,2]]]],33],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],30],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],32],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],29],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[32]]]]]],35],[[4,[[0,[1,2,[46,[32]]]]]]]],[[[4,[[0,[1,2]]]],38],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],31],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],28],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[46,[28]]]]]],38],[[4,[[0,[1,2,[46,[28]]]]]]]],[[[4,[[0,[1,2,[46,[34]]]]]],34],[[4,[[0,[1,2,[46,[34]]]]]]]],[47,[[4,[[0,[2,1]]]]]],[47,[[4,[[0,[2,1]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,3]]]]],[[4,[[0,[1,2,3]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[47,[[4,[[0,[2,1]]]]]],[47,[[4,[[0,[2,1]]]]]],[[[4,[27]]],[[9,[39]]]],[[[4,[38]]],[[9,[39]]]],[[[4,[34]]],[[9,[39]]]],[[[4,[32]]],[[9,[39]]]],[[[4,[30]]],[[9,[39]]]],[[[4,[31]]],[[9,[39]]]],[[[4,[29]]],[[9,[39]]]],[[[4,[33]]],[[9,[39]]]],[[[4,[35]]],[[9,[39]]]],[[[4,[28]]],[[9,[39]]]],[[[4,[31]]],[[9,[36]]]],[[[4,[27]]],[[9,[36]]]],[[[4,[38]]],[[9,[36]]]],[[[4,[28]]],[[9,[36]]]],[[[4,[33]]],[[9,[36]]]],[[[4,[35]]],[[9,[36]]]],[[[4,[29]]],[[9,[36]]]],[[[4,[32]]],[[9,[36]]]],[[[4,[30]]],[[9,[36]]]],[[[4,[34]]],[[9,[36]]]],[[[4,[28]]],[[9,[38]]]],[[[4,[27]]],[[9,[38]]]],[[[4,[31]]],[[9,[38]]]],[[[4,[30]]],[[9,[38]]]],[[[4,[32]]],[[9,[38]]]],[[[4,[29]]],[[9,[38]]]],[[[4,[38]]],[[9,[38]]]],[[[4,[35]]],[[9,[38]]]],[[[4,[34]]],[[9,[38]]]],[[[4,[33]]],[[9,[38]]]],[[[4,[[0,[1,2]]]]],[[0,[1,2]]]],[[]],[[]],[[],48],[[],48],[[[4,[27]]],[[9,[37]]]],[[[4,[30]]],[[9,[37]]]],[[[4,[34]]],[[9,[37]]]],[[[4,[38]]],[[9,[37]]]],[[[4,[31]]],[[9,[37]]]],[[[4,[33]]],[[9,[37]]]],[[[4,[28]]],[[9,[37]]]],[[[4,[35]]],[[9,[37]]]],[[[4,[29]]],[[9,[37]]]],[[[4,[32]]],[[9,[37]]]],[[[4,[27]]],[[9,[28]]]],[[[4,[33]]],[[9,[28]]]],[[[4,[28]]],[[9,[28]]]],[[[4,[35]]],[[9,[28]]]],[[[4,[29]]],[[9,[28]]]],[[[4,[30]]],[[9,[28]]]],[[[4,[31]]],[[9,[28]]]],[[[4,[34]]],[[9,[28]]]],[[[4,[38]]],[[9,[28]]]],[[[4,[32]]],[[9,[28]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[],42],[[],42],[[],42],[[],42],[[],49],[[],49],[[],[[4,[[0,[1,2]]]]]]],"c":[2],"p":[[8,"Clone"],[8,"Integer"],[8,"Signed"],[3,"Ratio"],[8,"NumAssign"],[8,"FloatCore"],[8,"NumCast"],[8,"Bounded"],[4,"Option"],[8,"CheckedMul"],[8,"CheckedAdd"],[8,"CheckedSub"],[3,"ParseRatioError"],[4,"Ordering"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Display"],[8,"LowerExp"],[8,"UpperExp"],[8,"Binary"],[8,"UpperHex"],[8,"LowerHex"],[8,"Octal"],[15,"f32"],[15,"i8"],[15,"u64"],[15,"usize"],[15,"i32"],[15,"isize"],[15,"u16"],[15,"u32"],[15,"u8"],[15,"i16"],[15,"i128"],[15,"u128"],[15,"i64"],[15,"f64"],[15,"str"],[8,"FromStr"],[4,"Result"],[8,"Hash"],[8,"Hasher"],[8,"Neg"],[8,"Pow"],[8,"Iterator"],[3,"String"],[3,"TypeId"]]},\
"num_threads":{"doc":"Minimum supported Rust version: 1.28","t":"FF","n":["is_single_threaded","num_threads"],"q":[[0,"num_threads"]],"d":["Determine if the current process is single-threaded. …","Obtain the number of threads currently part of the active …"],"i":[0,0],"f":[[[],[[2,[1]]]],[[],[[2,[3]]]]],"c":[],"p":[[15,"bool"],[4,"Option"],[3,"NonZeroUsize"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":"CCCCCCCCCCCNCCCECCQCNCCIIIICIICDCCICCCCCCCCCCCCCCCCCLLLLAACCFFFALLLLLKAALLMCAACAACLLLLLLLCIIIKKKKIIIIKFKLLLLLKLLLLLKLLLLLLLKLLLLLKLLKKKKKKKKKKIIIKKLKLKKKLKLKKKKKKKKKKLKKLKKKLKKKKLKLKKKKKKLKLKLKLKLKLLLKKKKKKLKKKLKKKKKKKKKKKKKLKLKLKLKKKKKKKLKLKLIILKFKLLFKIKKKKLKKLKKKKKKKLKKKAAAAAAAAQQIIIKKLKKLIIIIIIIIKKKKKKKKIIKKKKIQKIIQKKIIIKKKIIIIKKKKKIIIIIIKKKKKKQIFFKIKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKIIFKFKKKFK","n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","Euclid","Float","FloatConst","FloatErrorKind","FromBytes","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToBytes","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","real","sign","signum","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_subnormal","is_subnormal","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","bytes","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","Bytes","Bytes","FromBytes","NumBytes","ToBytes","from_be_bytes","from_le_bytes","from_ne_bytes","to_be_bytes","to_le_bytes","to_ne_bytes","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":[[0,"num_traits"],[90,"num_traits::bounds"],[97,"num_traits::cast"],[132,"num_traits::float"],[243,"num_traits::identities"],[253,"num_traits::int"],[273,"num_traits::ops"],[281,"num_traits::ops::bytes"],[292,"num_traits::ops::checked"],[308,"num_traits::ops::euclid"],[314,"num_traits::ops::inv"],[317,"num_traits::ops::mul_add"],[322,"num_traits::ops::overflowing"],[328,"num_traits::ops::saturating"],[337,"num_traits::ops::wrapping"],[349,"num_traits::pow"],[354,"num_traits::real"],[402,"num_traits::sign"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns <code>true</code> if the number is subnormal.","Returns <code>true</code> if the number is subnormal.","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","","","","","","","Create a number from its representation as a byte array in …","Create a number from its representation as a byte array in …","Create a number from its memory representation as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation <code>(self * a) + b</code>","Performs the fused multiply-add assignment operation …","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,39,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,39,0,0,2,5,5,0,0,0,0,0,0,0,5,2,5,2,5,2,5,0,0,0,0,40,41,40,42,0,0,0,0,43,0,11,44,44,44,44,44,44,44,44,44,44,44,44,44,44,13,13,13,13,13,13,13,13,13,13,13,13,13,13,45,45,45,45,45,45,45,45,45,45,0,0,0,45,45,45,45,45,45,45,45,45,46,47,46,46,46,46,46,46,46,46,46,46,47,47,46,46,46,46,47,46,46,46,46,46,47,46,47,46,47,46,47,46,46,47,46,47,46,47,46,47,46,47,46,47,47,46,46,46,46,46,46,46,47,47,46,46,47,47,46,47,46,46,47,46,47,46,47,46,46,46,47,46,47,46,47,46,47,46,46,46,46,46,46,47,46,47,46,46,47,0,0,33,34,0,33,33,34,0,34,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,0,0,0,0,0,0,49,50,0,0,0,50,50,50,49,49,49,0,0,0,0,0,0,0,0,51,52,36,53,54,55,56,57,0,0,58,58,59,59,0,60,60,0,0,61,61,62,0,0,0,63,64,65,0,0,0,0,66,67,68,66,69,0,0,0,0,0,0,70,71,72,73,74,75,76,0,0,0,76,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,0,0,0,38,0,38,38,38,0,38],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[1,1,1],1],[[1,1],1],[[1,1],1],0,[[2,3],4],[[5,3],4],[[5,3],4],[[]],[[]],[[6,7],8],0,0,[[]],[[]],0,0,0,0,0,0,0,0,[[],9],[[],8],[[],8],[[],8],[[],8],[[],10],[[],10],0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[11,[[12,[11]]]],[13,12],[14,12],[15,12],[16,12],[17,12],[18,12],[19,12],[20,12],[21,12],[22,12],[23,12],[7,12],[24,12],[25,12],[26,12],[[],[[12,[14]]]],[[],[[12,[15]]]],[[],[[12,[16]]]],[[],[[12,[17]]]],[[],[[12,[18]]]],[[],[[12,[19]]]],[[],[[12,[20]]]],[[],[[12,[21]]]],[[],[[12,[22]]]],[[],[[12,[23]]]],[[],[[12,[7]]]],[[],[[12,[24]]]],[[],[[12,[25]]]],[[],[[12,[26]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[],[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,28]]]]]]]]]]]]]]]]]]]],[[]],[[],[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,[28,[[0,[27,28]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[]],[[],[[0,[27,[29,[[0,[27,[29,[[0,[27,[29,[[0,[27,[29,[[0,[27,29]]]]]]]]]]]]]]]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[32,31],[[],31],[[],33],[[]],[[]],[[]],[[],34],[[]],0,[[],7],[[],7],[[]],[[]],[[],7],[[],7],[7],[[]],[7],[7],[7],[7],[[]],[[]],[[]],[[],7],[[],7],[7],[7],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[7,12],[7,12],[[],12],0,0,[[],12],[[],12],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[7],[7],[[]],0,0,[[[0,[35,33,36]],26],[[12,[[0,[35,33,36]]]]]],[[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,37]]]]]]]]]]]]]]]]]],26],[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,[37,[[0,[35,33,37]]]]]]]]]]]]]]]]]]]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],31],[[],31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[38,38],[[]],[[38,38],38],[[]],[[],31],[[],31],[38,38],[[]]],"c":[],"p":[[8,"PartialOrd"],[4,"FloatErrorKind"],[3,"Formatter"],[6,"Result"],[3,"ParseFloatError"],[15,"str"],[15,"u32"],[4,"Result"],[3,"String"],[3,"TypeId"],[8,"NumCast"],[4,"Option"],[8,"ToPrimitive"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Sized"],[8,"Div"],[8,"Add"],[4,"FpCategory"],[15,"bool"],[8,"PartialEq"],[8,"One"],[8,"Zero"],[8,"Clone"],[8,"CheckedMul"],[8,"Mul"],[8,"Signed"],[8,"Num"],[8,"Bounded"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"FloatConst"],[8,"Float"],[8,"FloatCore"],[8,"PrimInt"],[8,"ToBytes"],[8,"FromBytes"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"CheckedEuclid"],[8,"Euclid"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Real"]]},\
"once_cell":{"doc":"Overview","t":"AADDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["race","unsync","OnceBool","OnceBox","OnceNonZeroUsize","OnceRef","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","drop","fmt","fmt","fmt","fmt","from","from","from","from","get","get","get","get","get_or_init","get_or_init","get_or_init","get_or_init","get_or_try_init","get_or_try_init","get_or_try_init","get_or_try_init","into","into","into","into","new","new","new","new","set","set","set","set","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","with_value"],"q":[[0,"once_cell"],[2,"once_cell::race"],[63,"once_cell::unsync"]],"d":["Thread-safe, non-blocking, “first one wins” flavor of …","Single-threaded version of <code>OnceCell</code>.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets a reference to the underlying value.","Gets the underlying value.","Gets the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","","","","","","","","","","","","","A value which is initialized on the first access.","A cell which can be written to only once. It is not thread …","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","Returns the argument unchanged.","","","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets a mutable reference to the underlying value.","Gets the mutable reference to the result of this lazy …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value.","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Creates a new initialized cell."],"i":[0,0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,2,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,0,15,17,15,17,15,15,15,15,17,17,17,15,15,17,17,17,15,15,15,17,15,17,15,17,15,15,15,17,15,17,15,17,15,15,15,15,17,15,15,17,15,17,15],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[],4],[2],[[1,5],6],[[2,5],6],[[3,5],6],[[4,5],6],[[]],[[]],[[]],[[]],[1,7],[2,7],[3,[[7,[8]]]],[4,[[7,[9]]]],[[1,10]],[[2,10]],[[3,10],8],[[4,10],9],[[1,10],11],[[2,10],11],[[3,10],[[11,[8]]]],[[4,10],[[11,[9]]]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[],4],[1,11],[[2,12],[[11,[12]]]],[[3,8],11],[[4,9],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],13],[[],13],[[],13],[[],13],0,0,[[]],[[]],[[]],[[]],[[[15,[14]]],[[15,[14]]]],[[[15,[14]],[15,[14]]]],[[]],[[],15],[[],[[17,[16]]]],[[[17,[10]]]],[[[17,[10]]]],[[[15,[18]],[15,[18]]],9],[[[15,[19]],5],6],[[[17,[19]],5],6],[[[17,[10]]]],[[[17,[10]]]],[[]],[20],[[],15],[[]],[15,7],[[[17,[10]]],7],[15,7],[[[17,[10]]],7],[[15,10]],[[15,10],11],[[]],[[]],[15,7],[17,11],[[],15],[[],17],[15,11],[15,7],[[]],[[],11],[[],11],[15,11],[[],11],[[],11],[[],13],[[],13],[[],15]],"c":[],"p":[[3,"OnceRef"],[3,"OnceBox"],[3,"OnceNonZeroUsize"],[3,"OnceBool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"NonZeroUsize"],[15,"bool"],[8,"FnOnce"],[4,"Result"],[3,"Box"],[3,"TypeId"],[8,"Clone"],[3,"OnceCell"],[8,"Default"],[3,"Lazy"],[8,"PartialEq"],[8,"Debug"],[15,"never"]]},\
"parry3d":{"doc":"parry","t":"ABAABAAABAADDISSDLLLLLLLLLLLLLLLLLLLKLLLLLMLLLLLLLLLLLLLKLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLKLLLKLLMMKLLKLLMMLLLLLLLLLLLMLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFDLLLLLLLLLLLLALLLLLLLLLLLLLLLLMMLLMLLLMLLLLLLLLLLLLLLLLLLLFFGGGGRRGGGGGGGGRRGGGGGGRGGGLLQQDNNNDINNNDQGIDDDIDQEIGGEIEILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLMKLLLLMMLLLLLLMLLLLKLLLLLLLLLLLLLLLLLLLLKMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLLMLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKMMMCNNCDDNNDNNNNENNDNNNICCCNNIDDIDDEDEDNEDIMLLLLLLLLLLKLLLLLLLLLLKLLLLKLLACKLLACKLLKLLKLLMMAMMMFKLLALLLMMMLLLLLLLLLLLLLAFKLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMFKLLMMMMMAMAMMMMMMFKLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLAMMEDNNNLLLLLLLLLLFFFFFFFFFFFFFFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLFFFFFFFFFFFMLLLLLLLLLLLLMMMMLLLLLLLLDNNDDNNNNNNDDDDENNDIDDDDNDDEDNEIMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLFFFLLLLLLLLLLLKLLLLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFLLMMMMLMFFFFFFFFFFFFLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFFFFFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMMMMMMFFLLLLLLLLLLLLLLFFFFMMMMMLMLLLFFLMMMMMMLLFFFFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMCADLLLLLLLLLLLLLLLLLLLDNDDDENNNDLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLFLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMLLLLFLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQDDDDIILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFLLLLMKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFFFFFFDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLMMLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLQQQQQQQQQNNDNNSSDNNNDNNDNNDNNNDNNNNDNNSSSNNNEDDSDNNGNNDDIQSSSNNNNNNNNNNDQQDIDNNQQSGNNGNNGNNGNNDGNNDNNEIEDIQIDEDDDEGNNDDDIDDNNEEEISNNSMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLMMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLLLLLLLLLLLLLLLKLLLKLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLMLLLLMMLMMLLLLLMMMENNNLLLLFFFFLLLLLFLLLLLLLLFLLLAAAFFFFFFFFFFFFFFFFFDDMLLLLMLLLLLLLLLMMMLLLMLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLENNNNNNNNNNNDDEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMIIIDDDDIIIQNDDNEDKLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLFFFLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLKKKFFLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLLLLLLLLLLLLLLKMMMMMMMMMFLLLLLLLLLLKLLLLLLKFLLFFFKLLFFKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMEDGNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["bounding_volume","either","mass_properties","math","na","partitioning","query","shape","simba","transformation","utils","Aabb","BoundingSphere","BoundingVolume","EDGES_VERTEX_IDS","FACES_VERTEX_IDS","SimdAabb","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_sphere","canonical_split","cast_local_ray","cast_local_ray","cast_local_ray","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","center","center","center","center","center","center","center","clip_line","clip_line_parameters","clip_polygon","clip_polygon_with_workspace","clip_ray","clip_ray_parameters","clip_segment","clone","clone","clone","clone_into","clone_into","clone_into","contains","contains","contains","contains","contains_local_point","contains_local_point","contains_local_point","details","difference","difference_with_cut_sequence","dilate_by_factor","distance_to_local_point","distance_to_local_point","distance_to_local_point","distance_to_origin","eq","eq","extents","extract","fmt","fmt","fmt","from","from","from","from","from_half_extents","from_points","from_subset","from_subset","from_subset","half_extents","half_extents","intersection","intersects","intersects","intersects","intersects","intersects_local_ray","intersects_permutations","intersects_spiral","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","is_in_subset","loosen","loosen","loosen","loosen","loosened","loosened","loosened","maxs","maxs","merge","merge","merge","merged","merged","merged","mins","mins","new","new","new_invalid","new_invalid","project_local_point","project_local_point","project_local_point_and_get_feature","project_local_point_and_get_feature","project_on_axis","radius","radius","radius","replace","scaled","scaled","splat","split_at_center","take_point","tighten","tighten","tighten","tightened","tightened","tightened","to_merged_aabb","to_outline","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_trimesh","transform_by","transform_by","transform_by","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vertices","volume","local_point_cloud_aabb","local_support_map_aabb","point_cloud_aabb","point_cloud_bounding_sphere","support_map_aabb","MassProperties","abs_diff_eq","add","add_assign","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","default","default_epsilon","default_max_relative","details","eq","fmt","from","from_ball","from_capsule","from_compound","from_cone","from_convex_polyhedron","from_cuboid","from_cylinder","from_subset","from_trimesh","into","into_any","into_any_arc","into_any_rc","inv_mass","inv_principal_inertia_sqrt","is_in_subset","is_zero","local_com","mass","new","principal_inertia","principal_inertia_local_frame","reconstruct_inertia_matrix","reconstruct_inverse_inertia_matrix","relative_eq","set_mass","sub","sub_assign","sum","to_owned","to_subset","to_subset_unchecked","transform_by","try_from","try_into","type_id","with_inertia_matrix","with_principal_inertia_frame","world_com","world_inv_inertia_sqrt","zero","tetrahedron_unit_inertia_tensor_wrt_point","trimesh_signed_volume_and_center_of_mass","AngDim","AngVector","AngularInertia","CrossMatrix","DEFAULT_EPSILON","DIM","Dim","Isometry","Matrix","Orientation","Point","PrincipalAngularInertia","Real","Rotation","SIMD_LAST_INDEX","SIMD_WIDTH","SdpMatrix","SimdBool","SimdReal","SpacialVector","SpatialDim","SpatialVector","TWO_DIM","Translation","UnitVector","Vector","absolute_transform_vector","absolute_transform_vector","ArrayProxies","ArrayU32","CenterDataSplitter","ExitEarly","ExitEarly","ExitEarly","GenericQbvh","IndexedData","MaybeContinue","MaybeContinue","MaybeContinue","NodeIndex","Nodes","Qbvh","QbvhDataGenerator","QbvhNode","QbvhNonOverlappingDataSplitter","QbvhProxy","QbvhStorage","QbvhUpdateWorkspace","Result","SimdBestFirstVisitStatus","SimdBestFirstVisitor","SimdNodeIndex","SimdQbvh","SimdSimultaneousVisitStatus","SimdSimultaneousVisitor","SimdVisitStatus","SimdVisitor","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonical_split","children","clear_and_rebuild","clear_and_rebuild","clear_and_rebuild_with_splitter","clear_and_rebuild_with_splitter","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","data","default","default","default","empty","empty_leaf_with_parent","enable_fallback_split","epsilon","eq","eq","equivalent","equivalent","equivalent","equivalent","flags","fmt","fmt","fmt","fmt","for_each","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","index","index","intersect_aabb","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_changed","is_dirty","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_leaf","iter_data","iter_data","iter_data_mut","iter_data_mut","lane","leaf_data","leaf_data","new","new","node","node_aabb","node_aabb","parent","pre_update_or_insert","pre_update_or_insert","raw_nodes","raw_nodes","raw_proxies","raw_proxies","rebalance","rebalance","refit","refit","remove","remove","root_aabb","scaled","scaled","set_changed","set_dirty","simd_aabb","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","traverse_best_first","traverse_best_first_node","traverse_bvtt","traverse_bvtt_with_stack","traverse_depth_first","traverse_depth_first_node","traverse_depth_first_node_with_stack","traverse_depth_first_with_stack","traverse_modified_bvtt","traverse_modified_bvtt_with_stack","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","visit","visit","visit","mask","results","weights","ClosestPoints","CompositeShapeCompositeShapeContactManifoldsWorkspace","CompositeShapeShapeContactManifoldsWorkspace","Contact","ContactManifold","ContactManifoldsWorkspace","Converged","Custom","DefaultQueryDispatcher","Failed","HeightfieldCompositeShapeContactManifoldsWorkspace","HeightfieldShapeContactManifoldsWorkspace","Intersect","IntersectResult","Negative","Negative","NonlinearRigidMotion","OutOfIterations","Pair","Penetrating","PersistentQueryDispatcher","PointProjection","PointQuery","PointQueryWithLocation","Positive","Positive","QueryDispatcher","QueryDispatcherChain","Ray","RayCast","RayIntersection","SimdRay","SplitResult","TOI","TOIStatus","TrackedContact","TriMeshShapeContactManifoldsWorkspace","TypedWorkspaceData","Unsupported","WorkspaceData","angvel","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_typed_workspace_data","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_local_ray_and_get_normal","chain","chain","clone","clone","clone_dyn","clone_into","clone_into","closest_points","closest_points","closest_points","closest_points","closest_points","contact","contact","contact","contact","contact","contact_manifold_convex_convex","contact_manifold_convex_convex","contact_manifold_convex_convex","contact_manifolds","contact_manifolds","contact_manifolds","data","data","details","dir","dir","dist","distance","distance","distance","distance","epa","eq","equivalent","equivalent","feature","fid1","fid2","fmt","fmt","fmt","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","gjk","intersection_test","intersection_test","intersection_test","intersection_test","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","linvel","local_center","local_n1","local_n2","local_p1","local_p2","nonlinear_time_of_impact","nonlinear_time_of_impact","nonlinear_time_of_impact","nonlinear_time_of_impact","normal","normal1","normal2","origin","origin","point","points","sat","start","status","subshape1","subshape2","subshape_pos1","subshape_pos2","time_of_impact","time_of_impact","time_of_impact","time_of_impact","to_owned","to_owned","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","toi","toi","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","visitors","witness1","witness2","ClosestPoints","CompositeShapeAgainstShapeClosestPointsVisitor","Disjoint","Intersecting","WithinMargin","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","closest_points","closest_points_ball_ball","closest_points_ball_convex_polyhedron","closest_points_composite_shape_shape","closest_points_convex_polyhedron_ball","closest_points_cuboid_cuboid","closest_points_cuboid_triangle","closest_points_halfspace_support_map","closest_points_line_line","closest_points_line_line_parameters","closest_points_line_line_parameters_eps","closest_points_segment_segment","closest_points_segment_segment_with_locations","closest_points_segment_segment_with_locations_nD","closest_points_shape_composite_shape","closest_points_support_map_halfspace","closest_points_support_map_support_map","closest_points_support_map_support_map_with_params","closest_points_triangle_cuboid","eq","flip","flipped","fmt","from","from","from_subset","from_subset","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","new","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","transform_by","try_from","try_from","try_into","try_into","type_id","type_id","visit","Contact","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","contact","contact_ball_ball","contact_ball_convex_polyhedron","contact_composite_shape_shape","contact_convex_polyhedron_ball","contact_cuboid_cuboid","contact_halfspace_support_map","contact_shape_composite_shape","contact_support_map_halfspace","contact_support_map_support_map","contact_support_map_support_map_with_params","dist","eq","flip","flipped","fmt","from","from_subset","into","into_any","into_any_arc","into_any_rc","is_in_subset","new","normal1","normal2","point1","point2","to_owned","to_subset","to_subset_unchecked","transform1_by_mut","transform_by_mut","try_from","try_into","type_id","CompositeShapeAgainstAnyDistanceVisitor","CompositeShapeCompositeShapeContactManifoldsWorkspace","CompositeShapeShapeContactManifoldsWorkspace","ContactManifold","ContactManifoldsWorkspace","Converged","Custom","DirectionalTOI","Failed","HeightfieldCompositeShapeContactManifoldsWorkspace","HeightfieldShapeContactManifoldsWorkspace","IntersectionCompositeShapeShapeBestFirstVisitor","IntersectionCompositeShapeShapeVisitor","NonlinearRigidMotion","NonlinearTOICompositeShapeShapeBestFirstVisitor","NonlinearTOIMode","OutOfIterations","Penetrating","Ray","RayCast","RayCompositeShapeToiAndNormalBestFirstVisitor","RayCompositeShapeToiBestFirstVisitor","RayIntersection","SimdRay","StopAtPenetration","TOI","TOICompositeShapeShapeBestFirstVisitor","TOIStatus","TrackedContact","TriMeshShapeContactManifoldsWorkspace","TypedWorkspaceData","WorkspaceData","angvel","append","append_translation","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_typed_workspace_data","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_local_ray","cast_local_ray","cast_local_ray_and_get_normal","cast_ray","cast_ray","cast_ray_and_get_normal","cast_ray_and_get_normal","clear","clip_aabb_line","clip_halfspace_polygon","clip_segment_segment","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_dyn","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","constant_position","contact_manifold_ball_ball","contact_manifold_ball_ball_shapes","contact_manifold_capsule_capsule","contact_manifold_capsule_capsule_shapes","contact_manifold_convex_ball","contact_manifold_convex_ball_shapes","contact_manifold_cuboid_cuboid","contact_manifold_cuboid_cuboid_shapes","contact_manifold_cuboid_triangle","contact_manifold_cuboid_triangle_shapes","contact_manifold_halfspace_pfm","contact_manifold_halfspace_pfm_shapes","contact_manifold_pfm_pfm","contact_manifold_pfm_pfm_shapes","contact_manifolds_composite_shape_composite_shape","contact_manifolds_composite_shape_shape","contact_manifolds_heightfield_composite_shape","contact_manifolds_heightfield_shape","contact_manifolds_heightfield_shape_shapes","contact_manifolds_trimesh_shape","contact_manifolds_trimesh_shape_shapes","contacts","copy_geometry_from","data","data","dir","dir","directional_toi","dist","distance","distance_ball_ball","distance_ball_convex_polyhedron","distance_composite_shape_shape","distance_convex_polyhedron_ball","distance_cuboid_cuboid","distance_halfspace_support_map","distance_segment_segment","distance_shape_composite_shape","distance_support_map_halfspace","distance_support_map_support_map","distance_support_map_support_map_with_params","downcast","downcast_arc","downcast_mut","downcast_rc","downcast_ref","eq","equivalent","equivalent","feature","fid1","fid2","find_deepest_contact","flipped","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","freeze","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","identity","intersection_test","intersection_test_aabb_segment","intersection_test_aabb_triangle","intersection_test_ball_ball","intersection_test_ball_point_query","intersection_test_composite_shape_shape","intersection_test_cuboid_cuboid","intersection_test_cuboid_segment","intersection_test_cuboid_triangle","intersection_test_halfspace_support_map","intersection_test_point_query_ball","intersection_test_segment_cuboid","intersection_test_shape_composite_shape","intersection_test_support_map_halfspace","intersection_test_support_map_support_map","intersection_test_support_map_support_map_with_params","intersection_test_triangle_cuboid","intersects_local_ray","intersects_local_ray","intersects_ray","intersects_ray","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","inverse_transform_by","is","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","line_toi_with_halfspace","linvel","local_center","local_n1","local_n2","local_p1","local_p2","local_ray_intersection_with_support_map_with_params","local_ray_intersection_with_triangle","match_contacts","match_contacts_using_positions","new","new","new","new","new","new","new","new","new","new","new","new","nonlinear_time_of_impact","nonlinear_time_of_impact_composite_shape_shape","nonlinear_time_of_impact_shape_composite_shape","nonlinear_time_of_impact_support_map_support_map","normal","normal1","normal2","origin","origin","point_at","points","position_at_time","prepend","prepend_translation","ray_toi_with_ball","ray_toi_with_halfspace","splat","start","status","subshape1","subshape2","subshape_pos1","subshape_pos2","swapped","take","time_of_impact","time_of_impact_ball_ball","time_of_impact_composite_shape_shape","time_of_impact_halfspace_support_map","time_of_impact_heightfield_shape","time_of_impact_shape_composite_shape","time_of_impact_shape_heightfield","time_of_impact_support_map_halfspace","time_of_impact_support_map_support_map","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","toi","toi","transform1_by","transform_by","transform_by","translate_by","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_update_contacts","try_update_contacts_eps","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","visit","visit","visit","visit","visit","visit","visit","with_data","witness1","witness2","max_angular_thickness","sum_linear_thickness","EPA","epa3","EPA","as_any","as_any_mut","borrow","borrow_mut","closest_points","from","from_subset","into","into_any","into_any_arc","into_any_rc","is_in_subset","new","project_origin","to_subset","to_subset_unchecked","try_from","try_into","type_id","CSOPoint","ClosestPoints","ConstantOrigin","ConstantPoint","DilatedShape","GJKResult","Intersection","NoIntersection","Proximity","VoronoiSimplex","add_point","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_local_ray","clone","clone","clone","clone_into","clone_into","clone_into","closest_points","contains_point","dimension","directional_distance","eps_tol","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from_shapes","from_shapes_toward","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","local_support_point","local_support_point","local_support_point","local_support_point_toward","local_support_point_toward","local_support_point_toward","max_sq_len","modify_pnts","new","new","new_with_point","orig1","orig2","origin","point","point","prev_dimension","prev_point","prev_proj_coord","proj_coord","project_origin","project_origin","project_origin_and_reduce","radius","reset","shape","single_point","sub","support_point","support_point","support_point","support_point_toward","support_point_toward","support_point_toward","swap","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","translate","translate_mut","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Location","PointCompositeShapeProjBestFirstVisitor","PointCompositeShapeProjWithFeatureBestFirstVisitor","PointCompositeShapeProjWithLocationBestFirstVisitor","PointProjection","PointQuery","PointQueryWithLocation","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","contains_local_point","contains_point","distance_to_local_point","distance_to_point","fmt","from","from","from","from","from_subset","from_subset","from_subset","from_subset","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_inside","local_point_projection_on_support_map","new","new","new","new","point","project_local_point","project_local_point_and_get_feature","project_local_point_and_get_location","project_local_point_and_get_location_with_max_dist","project_local_point_with_max_dist","project_point","project_point_and_get_feature","project_point_and_get_location","project_point_and_get_location_with_max_dist","project_point_with_max_dist","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","transform_by","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","visit","visit","visit","cuboid_cuboid_compute_separation_wrt_local_line","cuboid_cuboid_find_local_separating_edge_twoway","cuboid_cuboid_find_local_separating_normal_oneway","cuboid_segment_find_local_separating_edge_twoway","cuboid_support_map_compute_separation_wrt_local_line","cuboid_support_map_find_local_separating_edge_twoway","cuboid_support_map_find_local_separating_normal_oneway","cuboid_triangle_find_local_separating_edge_twoway","point_cuboid_find_local_separating_normal_oneway","segment_triangle_find_local_separating_edge_twoway","support_map_support_map_compute_separation","triangle_cuboid_find_local_separating_normal_oneway","triangle_segment_find_local_separating_normal_oneway","AabbSetsInterferencesCollector","BoundingVolumeIntersectionsSimultaneousVisitor","BoundingVolumeIntersectionsVisitor","CompositeClosestPointVisitor","CompositePointContainmentTest","PointIntersectionsVisitor","RayIntersectionsVisitor","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","collector","found","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","ls_m2","ls_m2_abs_rot","new","new","new","new","new","new","new","point","shape","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","tolerence","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","visit","visit","visit","visit","visit","visit","with_relative_pos","ArrayIdx","ArrayPoint","ArrayTopoFace","ArrayTopoHalfEdge","ArrayTopoVertex","ArrayU32","ArrayUsize","ArrayVector","ArrayVectorTriple","BadAdjascentTrianglesOrientation","BadTriangle","Ball","Ball","Ball","CELL_REMOVED","CONNECTED_COMPONENTS","Capsule","Capsule","Capsule","Clockwise","Compound","Compound","Compound","Cone","Cone","Cone","ConvexPolyhedron","ConvexPolyhedron","ConvexPolyhedron","CounterClockwise","Cuboid","Cuboid","Cuboid","Custom","Custom","Cylinder","Cylinder","Cylinder","DELETE_BAD_TOPOLOGY_TRIANGLES","DELETE_DEGENERATE_TRIANGLES","DELETE_DUPLICATE_TRIANGLES","Degenerate","Edge","Face","FeatureId","GenericHeightField","GenericTriMesh","HALF_EDGE_TOPOLOGY","HalfSpace","HalfSpace","HalfSpace","HeightField","HeightField","HeightField","HeightFieldCellStatus","HeightFieldRadialTriangles","HeightFieldStorage","Heights","LEFT_TRIANGLE_REMOVED","MERGE_DUPLICATE_VERTICES","ORIENTED","OnEdge","OnEdge","OnEdge","OnFace","OnFace","OnSolid","OnSolid","OnVertex","OnVertex","OnVertex","PackedFeatureId","PartId","PartShape","PolygonalFeature","PolygonalFeatureMap","Polyline","Polyline","Polyline","QbvhStorage","QbvhStorage","RIGHT_TRIANGLE_REMOVED","RoundCone","RoundCone","RoundCone","RoundConvexPolyhedron","RoundConvexPolyhedron","RoundConvexPolyhedron","RoundCuboid","RoundCuboid","RoundCuboid","RoundCylinder","RoundCylinder","RoundCylinder","RoundShape","RoundTriangle","RoundTriangle","RoundTriangle","Segment","Segment","Segment","SegmentPointLocation","Shape","ShapeType","SharedShape","SimdCompositeShape","Status","SupportMap","Tetrahedron","TetrahedronPointLocation","TopoFace","TopoHalfEdge","TopoVertex","TopologyError","TriMesh","TriMesh","TriMesh","TriMeshConnectedComponents","TriMeshFlags","TriMeshPseudoNormals","TriMeshStorage","TriMeshTopology","Triangle","Triangle","Triangle","TriangleOrientation","TrianglePointLocation","TypedShape","TypedSimdCompositeShape","UNKNOWN","Unknown","Vertex","ZIGZAG_SUBDIVISION","a","a","a","aabb","aabb","aabb","aabb","aabb","aabb","aabb","aabb","aabb","aabb","aabb","aabb","aabbs","all","all","append","append","area","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_ball","as_ball_mut","as_capsule","as_capsule_mut","as_composite_shape","as_composite_shape","as_composite_shape","as_composite_shape","as_compound","as_compound_mut","as_cone","as_cone_mut","as_convex_polyhedron","as_convex_polyhedron_mut","as_cuboid","as_cuboid_mut","as_cylinder","as_cylinder_mut","as_halfspace","as_halfspace_mut","as_heightfield","as_heightfield_mut","as_polygonal_feature_map","as_polygonal_feature_map","as_polygonal_feature_map","as_polygonal_feature_map","as_polygonal_feature_map","as_polygonal_feature_map","as_polygonal_feature_map","as_polygonal_feature_map","as_polygonal_feature_map","as_polygonal_feature_map","as_polygonal_feature_map","as_polygonal_feature_map","as_polygonal_feature_map","as_polyline","as_polyline_mut","as_ref","as_round_cone","as_round_cone_mut","as_round_convex_polyhedron","as_round_convex_polyhedron_mut","as_round_cuboid","as_round_cuboid_mut","as_round_cylinder","as_round_cylinder_mut","as_round_triangle","as_round_triangle_mut","as_segment","as_segment_mut","as_shape","as_shape_mut","as_support_map","as_support_map","as_support_map","as_support_map","as_support_map","as_support_map","as_support_map","as_support_map","as_support_map","as_support_map","as_support_map","as_support_map","as_support_map","as_support_map","as_triangle","as_triangle_mut","as_trimesh","as_trimesh_mut","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","b","b","b","ball","barycentric_coordinates","barycentric_coordinates","barycentric_coordinates","barycentric_coordinates","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","border_radius","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounding_sphere","bounding_sphere","bounding_sphere","bounding_sphere","bounding_sphere","bounding_sphere","bounding_sphere","bounding_sphere","bounding_sphere","bounding_sphere","bounding_sphere","bounding_sphere","bounding_sphere","c","c","canonical_intersection_with_plane","canonical_intersection_with_plane","canonical_split","canonical_split","canonical_split","canonical_transform","capsule","capsule_x","capsule_y","capsule_z","cast_local_ray","cast_local_ray","cast_local_ray","cast_local_ray","cast_local_ray","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","cell_at_point","cell_height","cell_status","cell_width","cells_statuses","cells_statuses_mut","center","center","center","check_geometry","circumcircle","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","closest_cell_at_point","cmp","cmp","complement","complement","compound","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_bounding_sphere","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_swept_aabb","cone","connected_components","contacts","contains","contains","contains_local_point","contains_local_point","contains_local_point","contains_local_point","contains_local_point","contains_local_point","contains_local_point","contains_point","convert_triangle_feature_id","convex_decomposition","convex_decomposition_with_params","convex_hull","convex_mesh","cuboid","cylinder","d","default","default","default","default","default","default","default","deref","difference","difference","direction","distance_to_local_point","distance_to_local_point","distance_to_local_point","downcast","downcast_arc","downcast_mut","downcast_rc","downcast_ref","edge","edge","edge_ids","edges","edges","edges_adj_to_face","edges_pseudo_normal","edges_scaled_directions","eids","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","extents_on_dir","extract_connected_components","face","face","face","face_colors","face_ids","faces","faces","faces_adj_to_vertex","feature_normal","feature_normal","feature_normal","feature_normal","feature_normal_at_point","feature_normal_at_point","feature_normal_at_point","feature_normal_at_point","feature_normal_at_point","feature_normal_at_point","fid","flags","flat_indices","flat_indices","flat_indices","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_convex_hull","from_convex_mesh","from_i64","from_iter","from_iter","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_u64","grouped_faces","half_edge","half_edge","half_edges","half_extents","half_height","half_height","half_height","halfspace","hash","hash","hash","hash","hash","height","heightfield","heights","indices","indices","inner_shape","insert","insert","intersection","intersection","intersection_with_aabb","intersection_with_aabb","intersection_with_cuboid","intersection_with_cuboid","intersection_with_local_cuboid","intersection_with_local_cuboid","intersection_with_local_plane","intersection_with_local_plane","intersection_with_plane","intersection_with_plane","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is","is_affinely_dependent","is_affinely_dependent_eps","is_all","is_all","is_backface","is_convex","is_convex","is_convex","is_convex","is_convex","is_convex","is_convex","is_convex","is_convex","is_convex","is_convex","is_convex","is_convex","is_convex","is_convex","is_convex_polyhedron","is_convex_polyhedron","is_convex_polyhedron","is_edge","is_empty","is_empty","is_face","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_on_face","is_unknown","is_vertex","length","local_aabb","local_aabb","local_aabb","local_aabb","local_aabb","local_aabb","local_aabb","local_aabb","local_aabb","local_aabb","local_aabb","local_aabb","local_aabb","local_bounding_sphere","local_bounding_sphere","local_bounding_sphere","local_bounding_sphere","local_bounding_sphere","local_bounding_sphere","local_bounding_sphere","local_bounding_sphere","local_bounding_sphere","local_bounding_sphere","local_bounding_sphere","local_bounding_sphere","local_bounding_sphere","local_bounding_sphere","local_split","local_split","local_split","local_split_and_get_intersection","local_support_edge_segment","local_support_edge_segment","local_support_feature","local_support_feature","local_support_feature","local_support_feature","local_support_feature","local_support_feature","local_support_feature","local_support_point","local_support_point","local_support_point","local_support_point","local_support_point","local_support_point","local_support_point","local_support_point","local_support_point","local_support_point","local_support_point_toward","local_support_point_toward","local_support_point_toward","local_support_point_toward","make_mut","map_elements_in_local_aabb","map_part_at","map_part_at","map_part_at","map_part_at","map_typed_part_at","map_typed_part_at","map_typed_part_at","map_typed_part_at","map_typed_part_at","map_untyped_part_at","map_untyped_part_at","map_untyped_part_at","map_untyped_part_at","map_untyped_part_at","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","ncols","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_x","new_y","new_z","next","next","normal","normal","normal","not","not","nrows","num_cells_ij","num_connected_components","num_segments","num_triangles","num_vertices","orientation2d","partial_cmp","partial_cmp","perimeter","planar_normal","point_at","points","polyline","project_local_point","project_local_point","project_local_point","project_local_point","project_local_point","project_local_point","project_local_point","project_local_point","project_local_point","project_local_point","project_local_point","project_local_point","project_local_point","project_local_point","project_local_point","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_location","project_local_point_and_get_location","project_local_point_and_get_location","project_local_point_and_get_location","project_local_point_and_get_location","project_local_point_and_get_location","project_local_point_and_get_location_with_max_dist","project_local_point_assuming_solid_interior_ccw","project_local_point_with_max_dist","project_local_point_with_max_dist","pseudo_normals","qbvh","qbvh","qbvh","qbvh","qbvh","qbvh","radius","radius","radius","radius","ranges","remove","remove","reverse","reverse","reverse","reverse","root_aabb","rotation_wrt_y","round_cone","round_convex_decomposition","round_convex_decomposition_with_params","round_convex_hull","round_convex_mesh","round_cuboid","round_cylinder","round_triangle","same_feature_as","scale","scaled","scaled","scaled","scaled","scaled","scaled","scaled","scaled","scaled","scaled","scaled","scaled","scaled","scaled_direction","scaled_normal","scaled_planar_normal","segment","segment","segment","segment_feature_to_polyline_feature","segments","set","set","set_cell_status","set_flags","set_flags","set_scale","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shapes","signed_volume","signed_x_at","signed_z_at","split","split","sub","sub","sub_assign","sub_assign","support_face","support_face","support_feature","support_feature_id_toward","support_point","support_point","support_point_toward","support_point_toward","swap","symmetric_difference","symmetric_difference","to_outline","to_outline","to_outline","to_outline","to_outline","to_outline","to_outline","to_outline","to_outline","to_outline","to_outline","to_outline","to_outline","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_trimesh","to_trimesh","to_trimesh","to_trimesh","to_trimesh","to_trimesh","to_trimesh","toggle","toggle","topology","transform_by","transform_by","transform_vertices","transform_vertices","transform_wrt_y","transformed","transformed","triangle","triangle","triangle_at_id","triangle_vids_at_id","triangles","triangles","triangles","triangles_around_point","triangles_at","triangles_vids_at","trimesh","trimesh_with_flags","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","twin","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","typed_qbvh","typed_qbvh","typed_qbvh","typed_qbvh","typed_qbvh","unclamped_cell_at_point","unclamped_elements_range_in_local_aabb","union","union","unit_cell_height","unit_cell_width","unpack","unwrap_edge","unwrap_face","unwrap_vertex","vertex","vertex","vertices","vertices","vertices","vertices","vertices","vertices","vertices_adj_to_face","vertices_pseudo_normal","vids","volume","with_flags","with_flags","x_at","z_at","edge","triangle1","triangle2","ConvexHullError","InternalError","MissingSupportPoint","Unreachable","as_any","as_any_mut","borrow","borrow_mut","check_convex_hull","convex_hull","convex_polygons_intersection","convex_polygons_intersection_points","eq","fmt","fmt","from","from_subset","intersect_meshes","into","into_any","into_any_arc","into_any_rc","is_in_subset","to_string","to_subset","to_subset_unchecked","try_convex_hull","try_from","try_into","type_id","utils","vhacd","voxelization","apply_revolution","push_arc","push_arc_and_idx","push_arc_idx","push_circle","push_circle_outline_indices","push_degenerate_open_top_ring_indices","push_degenerate_top_ring_indices","push_filled_circle_indices","push_open_circle_outline_indices","push_open_ring_indices","push_rectangle_indices","push_ring_indices","reverse_clockwising","scaled","transform","transformed","VHACD","VHACDParameters","alpha","as_any","as_any","as_any_mut","as_any_mut","beta","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","compute_convex_hulls","compute_exact_convex_hulls","compute_primitive_intersections","concavity","convex_hull_approximation","convex_hull_downsampling","decompose","default","eq","fill_mode","fmt","from","from","from_subset","from_subset","from_voxels","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","max_convex_hulls","plane_downsampling","resolution","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","voxel_parts","FillMode","FloodFill","PrimitiveInsideSurface","PrimitiveInsideSurfaceToWalk","PrimitiveOnSurface","PrimitiveOnSurfaceNoWalk","PrimitiveOnSurfaceToWalk1","PrimitiveOnSurfaceToWalk2","PrimitiveOutsideSurface","PrimitiveOutsideSurfaceToWalk","PrimitiveUndefined","SurfaceOnly","Voxel","VoxelSet","VoxelValue","VoxelizedVolume","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","compute_bb","compute_convex_hull","compute_exact_convex_hull","compute_primitive_intersections","compute_volume","coords","default","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_on_surface","len","max_bb_voxels","min_bb_voxels","new","origin","resolution","scale","scale","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_trimesh","to_trimesh","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","voxel","voxel_volume","voxelize","voxelize","voxels","detect_cavities","Array1","Array2","AsBytes","DefaultStorage","DeterministicState","HashablePartialEq","Interval","IntervalFunction","IsometryOps","IsometryOpt","Item","Point","SdpMatrix2","SdpMatrix3","Segment","SegmentsIntersection","SortedPair","absolute_transform_vector","add","add","add","add","add_assign","add_diagonal","add_diagonal","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_bytes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_hasher","ccw_face_normal","center","center_cov","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","cos","cov","default","deref","diagonal","diagonal","div","enclose","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval_interval","eval_interval_gradient","find_root_intervals","find_root_intervals_to","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_sdp_matrix","from_sdp_matrix","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","get","get_at","get_at","hash","hash","hash","hashmap","intersect","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_matrix","inv_mul","inverse_transform_point","inverse_transform_unit_vector","inverse_transform_vector","inverse_unchecked","inverse_unchecked","is_empty","is_empty","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_zero","is_zero","len","m11","m11","m12","m12","m13","m22","m22","m23","m33","median","midpoint","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","ncols","neg","new","new","new","new","new","nrows","obb","one","partial_cmp","point_cloud_support_point","point_cloud_support_point_id","point_in_poly2d","prepend_to","quadform","quadform3x2","remove_unused_points","segments_intersection2d","set","sin","sin_cos","sort","splat","split","sub","sub","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","transform_point","transform_unit_vector","transform_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap","width","zero","zero","zero","first_loc1","first_loc2","loc1","loc2","second_loc1","second_loc2","Entry","FxHasher32","HashMap","Occupied","Vacant","and_modify","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","default","finish","fmt","from","from","from_subset","from_subset","insert_entry","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","key","or_default","or_insert","or_insert_with","or_insert_with_key","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","write","write_u16","write_u32","write_u64","write_u8","write_usize"],"q":[[0,"parry3d"],[11,"parry3d::bounding_volume"],[179,"parry3d::bounding_volume::details"],[184,"parry3d::mass_properties"],[242,"parry3d::mass_properties::details"],[244,"parry3d::math"],[272,"parry3d::partitioning"],[553,"parry3d::partitioning::SimdBestFirstVisitStatus"],[556,"parry3d::query"],[763,"parry3d::query::closest_points"],[829,"parry3d::query::contact"],[872,"parry3d::query::details"],[1406,"parry3d::query::details::NonlinearTOIMode"],[1408,"parry3d::query::epa"],[1410,"parry3d::query::epa::epa3"],[1430,"parry3d::query::gjk"],[1596,"parry3d::query::point"],[1696,"parry3d::query::sat"],[1709,"parry3d::query::visitors"],[1849,"parry3d::shape"],[3531,"parry3d::shape::TopologyError"],[3534,"parry3d::transformation"],[3567,"parry3d::transformation::utils"],[3584,"parry3d::transformation::vhacd"],[3639,"parry3d::transformation::voxelization"],[3777,"parry3d::transformation::voxelization::FillMode"],[3778,"parry3d::utils"],[4068,"parry3d::utils::SegmentsIntersection"],[4074,"parry3d::utils::hashmap"]],"d":["Bounding volumes.","","Mass properties (mass, inertia, center-of-mass) of shapes.","Compilation flags dependent aliases for mathematical types.","","Spatial partitioning tools.","Non-persistent geometric queries.","Shapes supported by parry.","","Transformation, simplification and decomposition of meshes.","Various unsorted geometrical and logical operators.","An Axis Aligned Bounding Box.","A Bounding Sphere.","Trait of bounding volumes.","The vertex indices of each edge of this Aabb.","The vertex indices of each face of this Aabb.","Four Aabb represented as a single SoA Aabb with SIMD …","","","","","","","","","","","","","The smallest bounding sphere containing this Aabb.","Splits this Aabb along the given canonical axis.","","","Casts a ray on all the Aabbs represented by <code>self</code>.","","","Returns a point inside of this bounding volume. This is …","","The center of this Aabb.","","The bounding sphere center.","The center of all the Aabbs represented by `self``.","","Computes the intersection segment between a line and this …","Computes the parameters of the two intersection points …","Computes the intersections between this Aabb and the given …","Computes the intersections between this Aabb and the given …","Computes the intersection segment between a ray and this …","Computes the parameters of the two intersection points …","Computes the intersection of a segment with this Aabb.","","","","","","","Checks if this bounding volume contains another one.","","","Lanewise check which Aabb represented by <code>self</code> contains the …","","","Check which Aabb represented by <code>self</code> contains the given …","Free functions for some special cases of bounding-volume …","Returns the difference between this Aabb and <code>rhs</code>.","Returns the difference between this Aabb and <code>rhs</code>.","Dilate all the Aabbs represented by …","","","Computes the distances between a point and all the Aabbs …","Computes the distances between the origin and all the …","","","The extents of this Aabb.","Extracts the Aabb stored in the given SIMD lane of the …","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Creates a new Aabb from its center and its half-extents.","Creates a new Aabb from a set of points.","","","","The half extents of this Aabb.","The half-extents of all the Aabbs represented by `self``.","Computes the intersection of this Aabb and another one.","Checks if this bounding volume intersect with another one.","","","Check which Aabb represented by <code>self</code> contains the given …","","Checks intersections between all the lanes combination …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Enlarges this bounding volume.","","","Enlarges this bounding volume by the given margin.","Creates a new, enlarged version, of this bounding volume.","","","","The max coordinates the Aabbs.","Merges this bounding volume with another one. The merge is …","","","Merges this bounding volume with another one.","","","","The min coordinates of the Aabbs.","Creates a new Aabb.","Creates a new bounding sphere.","Creates an invalid Aabb with <code>mins</code> components set to …","An invalid Aabb.","","","","","Projects every point of Aabb on an arbitrary axis.","The bounding sphere radius.","The radius of all the Aabbs represented by `self``.","","Replace the <code>i-th</code> Aabb of this SIMD AAAB by the given value.","","Returns a scaled version of this Aabb.","Builds an SIMD aabb composed of four identical aabbs.","Splits this Aabb at its center, into height parts (as in …","Enlarges this Aabb so it also contains the point <code>pt</code>.","Tighten this bounding volume.","","","Creates a new, tightened version, of this bounding volume.","","","Merge all the Aabb represented by <code>self</code> into a single one.","Outlines this Aabb’s shape using polylines.","","","","","","","","","","Discretize the boundary of this Aabb as a triangle-mesh.","Computes the Aabb bounding <code>self</code> transformed by <code>m</code>.","Transforms this bounding sphere by <code>m</code>.","Return the Aabb of the <code>self</code> transformed by the given …","","","","","","","","","","Computes the vertices of this Aabb.","The volume of this Aabb.","Computes the Aabb of a set of points.","Computes the Aabb of an support mapped shape.","Computes the Aabb of a set of points transformed by <code>m</code>.","Computes a bounding sphere of the specified set of point.","Computes the Aabb of an support mapped shape.","The local mass properties of a rigid-body.","","","","","","","","","","","","","Free functions for some special-cases of mass-properties …","","","Returns the argument unchanged.","Computes the mass properties of a ball.","Computes the mass properties of a capsule.","Computes the mass properties of a compound shape.","Computes the mass properties of a cone.","Computes the mass properties of a convex polyhedron.","Computes the mass properties of a cuboid.","Computes the mass properties of a cylinder.","","Computes the mass properties of a triangle mesh.","Calls <code>U::from(self)</code>.","","","","The inverse of the mass of a rigid-body.","The inverse of the principal angular inertia of the …","","","The center of mass of a rigid-body expressed in its …","The mass.","Initializes the mass properties from the given …","The angular inertia along the principal inertia axes of …","The principal vectors of the local angular inertia tensor …","Reconstructs the angular inertia tensor of the rigid body …","Reconstructs the inverse angular inertia tensor of the …","","Changes the mass on these mass-properties.","","","","","","","Transform each element of the mass properties.","","","","Initialize a new <code>MassProperties</code> from a given …","Initializes the mass properties from the given …","The world-space center of mass of the rigid-body.","The world-space inverse angular inertia tensor of the …","","Computes the unit inertia tensor of a tetrahedron, with …","Computes the volume and center-of-mass of a mesh.","The dimension of the rotations.","The angular vector type.","The angular inertia of a rigid body.","A matrix that represent the cross product with a given …","The default tolerance used for geometric operations.","The dimension of the space.","The dimension of the ambient space.","The transformation matrix type.","The matrix type.","The orientation type.","The point type.","The principal angular inertia of a rigid body.","The scalar type used throughout this crate.","The rotation matrix type.","SIMD_WIDTH - 1","The number of lanes of a SIMD number.","A 3D symmetric-definite-positive matrix.","A SIMD bool with SIMD_WIDTH lanes.","A SIMD float with SIMD_WIDTH lanes.","A vector with a dimension equal to the maximum number of …","The dimension of a spatial vector.","The vector type with dimension <code>SpatialDim × 1</code>.","The dimension of the space multiplied by two.","The translation type.","The unit vector type.","The vector type.","","","Type of the array containing the Qbvh leaves.","Type of an array containing u32.","A data splitter that arranges a set of Aabbs in two sets …","The traversal aborts.","The traversal should exit immediately.","The traversal should exit immediately.","A quaternary bounding-volume-hierarchy.","A data to which an index is associated.","The traversal can continue.","The traversal should continue on the children of the …","The traversal should continue on the children of the …","The index of a node part of a Qbvh. The index of one …","Type of the array containing the Qbvh nodes.","A quaternary bounding-volume-hierarchy.","Trait used for generating the content of the leaves of the …","A SIMD node of an SIMD Qbvh.","Data splitter for Qbvh construction that generates …","Combination of a leaf data and its associated node’s …","Trait describing all the types needed for storing a …","Workspace for QBVH update.","The result of a best-first traversal.","The next action to be taken by a BVH traversal algorithm …","Trait implemented by cost functions used by the best-first …","The index of an internal SIMD node of a Qbvh.","A quaternary bounding-volume-hierarchy.","The status of the simultaneous traversal of two spatial …","Trait implemented by visitor called during a simultaneous …","The status of the spatial partitioning structure traversal.","Trait implemented by visitor called during the traversal …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The leaf data-splitting function.","Index of the nodes of the 4 nodes represented by <code>self</code>. If …","Clears this quaternary BVH and rebuilds it from a new set …","Clears this quaternary BVH and rebuilds it from a new set …","Clears this quaternary BVH and rebuilds it from a new set …","Clears this quaternary BVH and rebuilds it from a new set …","","","","","","","","","","","The data contained in this node.","Creates a new default instance of <code>Self</code>.","","","An empty internal node.","An empty leaf.","If all the Aabb centers have the same coordinate values …","Allowed overlap between two leaf Aabbs.","","","","","","","Status flags for this node.","","","","","Iterate through all the elements of this generator.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Gets the index associated to <code>self</code>.","The index of the SIMD node containing the addressed node.","Retrieve all the data of the nodes with Aabbs intersecting …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Was the AABB of this node changed since the last …","Does the AABB of this node needs to be updated?","","","","","","","","","","","Is this node a leaf?","Iterate through all the leaf data in this Qbvh.","Iterate through all the leaf data in this Qbvh.","Iterates mutably through all the leaf data in this Qbvh.","Iterates mutably through all the leaf data in this Qbvh.","The SIMD lane the addressed node is associated to.","Returns the data associated to a given leaf.","Returns the data associated to a given leaf.","Initialize an empty Qbvh.","Initialize an empty Qbvh.","Index of the leaf node the leaf data is associated to.","The Aabb of the given node.","The Aabb of the given node.","The index of the node parent to the 4 nodes represented by …","Prepare a new leaf for insertion into this QBVH (or for …","Prepare a new leaf for insertion into this QBVH (or for …","The raw nodes of this BVH.","The raw nodes of this BVH.","The raw proxies of this BVH.","The raw proxies of this BVH.","Rebalances the <code>Qbvh</code> tree.","Rebalances the <code>Qbvh</code> tree.","Update all the nodes that have been marked as dirty by …","Update all the nodes that have been marked as dirty by …","Immediately remove a leaf from this QBVH.","Immediately remove a leaf from this QBVH.","The Aabb of the root of this tree.","Computes a scaled version of this Qbvh.","Computes a scaled version of this Qbvh.","Sets if the AABB of this node changed since the last …","Sets if the AABB of this node needs to be updated.","The Aabbs of the qbvh nodes represented by this node.","Gives an idea of the number of elements this generator …","","","","","","","","","","","","","","","","","","","","","","","","","","Performs a best-first-search on the BVH.","Performs a best-first-search on the BVH, starting at the …","Performs a simultaneous traversal of two Qbvh.","Performs a simultaneous traversal of two Qbvh.","Performs a depth-first traversal on the BVH.","Performs a depth-first traversal on the BVH, starting at …","Performs a depth-first traversal on the BVH.","Performs a depth-first traversal on the BVH.","Performs a simultaneous traversal of two Qbvh.","Performs a simultaneous traversal of two Qbvh.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compute the next action to be taken by the …","Execute an operation on the content of a node of the …","Execute an operation on the content of two nodes, one from …","Each lane indicates if the corresponding child of the node …","Optional results associated to each child of the node …","The weight associated to each child of the node being …","","A composite shape vs. composite shape workspace.","A composite shape vs. shape workspace.","","A contact manifold between two shapes.","A serializable workspace used by some contact-manifolds …","The TOI algorithm converged successfully.","A custom workspace.","A dispatcher that exposes built-in queries","Something went wrong during the TOI computation, likely …","A heightfield vs. composite shape workspace.","A heightfield vs. shape workspace.","The intersect operation yielded a result, lying in the …","The result of a plane-intersection operation.","The shape being split is fully contained in the negative …","The shape being intersected is fully contained in the …","A nonlinear motion from a starting isometry traveling at …","The TOI algorithm ran out of iterations before achieving …","The split operation yield two results: one lying on the …","The two shape already overlap at the time 0.","A query dispatcher for queries relying on spatial …","","","","The shape being split is fully contained in the positive …","The shape being intersected is fully contained in the …","Dispatcher for pairwise queries.","The composition of two dispatchers","A Ray.","Traits of objects which can be transformed and tested for …","Structure containing the result of a successful ray cast.","A structure representing 4 rays in an SIMD SoA fashion.","The result of a plane-splitting operation.","The result of a time-of-impact (TOI) computation.","The status of the time-of-impact computation algorithm.","A single contact between two shape.","A trimesh workspace.","Enum representing workspace data of a specific type.","Error indicating that a query is not supported between …","Data from a <code>ContactManifoldsWorkspace</code>.","The angular velocity of this motion.","","","","","","","","","","","Gets the underlying workspace as an enum.","","","","","","","","","","","Computes the time of impact, and normal between this …","Construct a <code>QueryDispatcher</code> that falls back on <code>other</code> for …","Construct a <code>QueryDispatcher</code> that falls back on <code>other</code> for …","","","Clones <code>self</code>.","","","Implementation details of the <code>closest_points</code> function.","","Computes the pair of closest points between two shapes.","","","Implementation details of the <code>contact</code> and <code>contacts</code> …","","Computes one pair of contact points point between two …","","","Computes the contact-manifold between two convex shapes.","","","Compute all the contacts between two shapes.","","","User-data associated to this contact.","Additional tracked data associated to this contact …","Queries dedicated to specific pairs of shapes.","Direction of the ray.","The direction of the rays represented as a single SIMD …","The distance between the two contact points.","Computes the minimum distance separating two shapes.","Computes the minimum distance separating two shapes.","","Computes the minimum distance separating two shapes.","The EPA algorithm for penetration depth computation.","","","","Feature at the intersection point.","The feature ID of the first shape involved in the contact.","The feature ID of the second shape involved in the contact.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","The GJK algorithm for distance computation.","Tests whether two shapes are intersecting.","Tests whether two shapes are intersecting.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","The translational velocity of this motion.","The local-space point at which the rotational part of this …","The contact normal of all the contacts of this manifold, …","The contact normal of all the contacts of this manifold, …","The contact point in the local-space of the first shape.","The contact point in the local-space of the second shape.","Computes the smallest time of impact of two shapes under …","Computes the smallest time of impact of two shapes under …","","","The normal at the intersection point.","The local-space outward normal on the first shape at the …","The local-space outward normal on the second shape at the …","Starting point of the ray.","The origin of the rays represented as a single SIMD point.","Point inclusion and projection.","The contacts points.","Application of the Separating-Axis-Theorem (SAT).","The starting isometry at <code>t = 0</code>.","The way the time-of-impact computation algorithm …","The first subshape involved in this contact manifold.","The second subshape involved in this contact manifold.","If the first shape involved is a composite shape, this …","If the second shape involved is a composite shape, this …","Computes the smallest time when two shapes under …","Computes the smallest time when two shapes under …","","","","","","","","","","","","","","","","The time of impact of the ray with the object.  The exact …","The time at which the objects touch.","","","","","","","","","","","","","","","","Visitors for performing geometric queries exploiting …","The local-space closest point on the first shape at the …","The local-space closest point on the second shape at the …","Closest points information.","A visitor for computing the closest points between a …","The two objects are non-intersecting and further than a …","The two objects are intersecting.","The two objects are non-intersecting but closer than a …","","","","","","","","","","","Computes the pair of closest points between two shapes.","Closest points between balls.","ClosestPoints between a ball and a convex polyhedron.","Closest points between a composite shape and any other …","ClosestPoints between a convex polyhedron and a ball.","Closest points between two cuboids.","Closest points between a cuboid and a triangle.","Closest points between a halfspace and a support-mapped …","Closest points between two segments.","Closest points between two lines.","Closest points between two lines with a custom tolerance …","Closest points between segments.","Closest points between two segments.","Segment-segment closest points computation in an arbitrary …","Closest points between a shape and a composite shape.","Closest points between a support-mapped shape (Cuboid, …","Closest points between support-mapped shapes (<code>Cuboid</code>, …","Closest points between support-mapped shapes (<code>Cuboid</code>, …","Closest points between a triangle and a cuboid.","","Swaps the two points.","Returns the result of swapping the two points if <code>self</code> is …","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Initializes a visitor for computing the closest points …","","","","","","Transform the points in <code>self</code> by <code>pos1</code> and <code>pos2</code>.","","","","","","","","Geometric description of a contact.","","","","","","","Computes one pair of contact points point between two …","Contact between balls.","Contact between a ball and a convex polyhedron.","Best contact between a composite shape (<code>Mesh</code>, <code>Compound</code>) …","Contact between a convex polyhedron and a ball.","Contact between two cuboids.","Contact between a halfspace and a support-mapped shape …","Best contact between a shape and a composite (<code>Mesh</code>, …","Contact between a support-mapped shape (Cuboid, …","Contact between support-mapped shapes (<code>Cuboid</code>, <code>ConvexHull</code>, …","Contact between support-mapped shapes (<code>Cuboid</code>, <code>ConvexHull</code>, …","Distance between the two contact points.","","Swaps the points and normals of this contact.","Returns a new contact containing the swapped points and …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Creates a new contact.","Contact normal, pointing towards the exterior of the first …","Contact normal, pointing towards the exterior of the …","Position of the contact on the first object.","Position of the contact on the second object.","","","","Transform <code>self.point1</code> and <code>self.normal1</code> by the <code>pos</code>.","Transform the points and normals from this contact by the …","","","","A visitor for computing the distance between a composite …","A composite shape vs. composite shape workspace.","A composite shape vs. shape workspace.","A contact manifold between two shapes.","A serializable workspace used by some contact-manifolds …","The TOI algorithm converged successfully.","A custom workspace.","When there is a penetration, don’t stop the TOI search …","Something went wrong during the TOI computation, likely …","A heightfield vs. composite shape workspace.","A heightfield vs. shape workspace.","A visitor for checking if a composite-shape and a shape …","A visitor for checking if a composite-shape and a shape …","A nonlinear motion from a starting isometry traveling at …","A visitor used to determine the non-linear time of impact …","Enum specifying the behavior of TOI computation when there …","The TOI algorithm ran out of iterations before achieving …","The two shape already overlap at the time 0.","A Ray.","Traits of objects which can be transformed and tested for …","A visitor for casting a ray on a composite shape.","A visitor for casting a ray on a composite shape.","Structure containing the result of a successful ray cast.","A structure representing 4 rays in an SIMD SoA fashion.","Stop TOI computation as soon as there is a penetration.","The result of a time-of-impact (TOI) computation.","A visitor used to find the time-of-impact between a …","The status of the time-of-impact computation algorithm.","A single contact between two shape.","A trimesh workspace.","Enum representing workspace data of a specific type.","Data from a <code>ContactManifoldsWorkspace</code>.","The angular velocity of this motion.","Appends a constant isometry to this rigid-motion.","Appends a constant translation to this rigid-motion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the underlying workspace as an enum.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the time of impact between this transform shape …","Computes the time of impact between this transform shape …","Computes the time of impact, and normal between this …","Computes the time of impact between this transform shape …","Computes the time of impact between this transform shape …","Computes the time of impact, and normal between this …","Computes the time of impact, and normal between this …","Removes all the contacts from <code>self</code>.","Computes the segment given by the intersection of a line …","Cuts a polygon with the given half-space.","Projects two segments on one another and compute their …","","","","","","","","","","","","Clones <code>self</code>.","","","","","","","","","","","","Create a <code>NonlinearRigidMotion</code> that always return <code>pos</code>.","Computes the contact manifold between two balls.","Computes the contact manifold between two balls given as …","Computes the contact manifold between two capsules.","Computes the contact manifold between two capsules given …","Computes the contact manifold between a convex shape and a …","Computes the contact manifold between a convex shape and a …","Computes the contact manifold between two cuboids.","Computes the contact manifold between two cuboids …","Computes the contact manifold between a cuboid and a …","Computes the contact manifold between a cuboid and a …","Computes the contact manifold between a convex shape and a …","Computes the contact manifold between a convex shape and a …","Computes the contact manifold between two convex shapes …","Computes the contact manifold between two convex shapes …","Computes the contact manifolds between two composite …","Computes the contact manifolds between a composite shape …","Computes the contact manifold between an heightfield and a …","Computes the contact manifold between an heightfield and …","Computes the contact manifold between an heightfield and a …","Computes the contact manifold between a triangle-mesh and …","Computes the contact manifold between a triangle-mesh an a …","The slice of all the contacts, active or not, on this …","Copy to <code>self</code> the geometric information from <code>contact</code>.","User-data associated to this contact.","Additional tracked data associated to this contact …","Direction of the ray.","The direction of the rays represented as a single SIMD …","Initializes a directional TOI mode.","The distance between the two contact points.","Computes the minimum distance separating two shapes.","Distance between balls.","Distance between a ball and a convex polyhedron.","Smallest distance between a composite shape and any other …","Distance between a convex polyhedron and a ball.","Distance between two cuboids.","Distance between a halfspace and a support-mapped shape.","Distance between two segments.","Smallest distance between a shape and a composite shape.","Distance between a support-mapped shape and a halfspace.","Distance between support-mapped shapes.","Distance between support-mapped shapes.","Returns a boxed object from a boxed trait object if the …","Returns an <code>Arc</code>-ed object from an <code>Arc</code>-ed trait object if …","Returns a mutable reference to the object within the trait …","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …","Returns a reference to the object within the trait object …","","","","Feature at the intersection point.","The feature ID of the first shape involved in the contact.","The feature ID of the second shape involved in the contact.","Returns the contact with the smallest distance (i.e. the …","Creates a new tracked contact where its input may need to …","","","","","","","","","","Freezes this motion at the time <code>t</code>.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Create a <code>NonlinearRigidMotion</code> that always returns the …","Tests whether two shapes are intersecting.","Test if a segment intersects an Aabb.","Tests if a triangle intersects an Aabb.","Intersection test between balls.","Intersection test between a ball and a shape implementing …","Intersection test between a composite shape (<code>Mesh</code>, <code>Compound</code>…","Intersection test between cuboids.","Test if a segment intersects a cuboid.","Tests if a triangle intersects an cuboid.","Intersection test between a halfspace and a support-mapped …","Intersection test between a shape implementing the …","Test if a segment intersects a cuboid.","Proximity between a shape and a composite (<code>Mesh</code>, <code>Compound</code>) …","Intersection test between a support-mapped shape (Cuboid, …","Intersection test between support-mapped shapes (<code>Cuboid</code>, …","Intersection test between support-mapped shapes (<code>Cuboid</code>, …","Tests if a triangle intersects a cuboid.","Tests whether a ray intersects this transformed shape.","Tests whether a ray intersects this transformed shape.","Tests whether a ray intersects this transformed shape.","Tests whether a ray intersects this transformed shape.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Transforms this ray by the inverse of the given isometry.","Returns true if the trait object wraps an object of type …","","","","","","","","","","","","","","","","","","","Computes the toi of an unbounded line with a halfspace …","The translational velocity of this motion.","The local-space point at which the rotational part of this …","The contact normal of all the contacts of this manifold, …","The contact normal of all the contacts of this manifold, …","The contact point in the local-space of the first shape.","The contact point in the local-space of the second shape.","Cast a ray on a shape using the GJK algorithm.","Computes the intersection between a triangle and a ray.","Copy data associated to contacts from <code>old_contacts</code> to the …","Copy data associated to contacts from <code>old_contacts</code> to the …","Initialize a visitor for computing the distance between a …","Initialize a visitor for checking if a composite-shape and …","Initialize a visitor for checking if a composite-shape and …","Initializes visitor used to determine the non-linear time …","Initialize a visitor for casting a ray on a composite …","Initialize a visitor for casting a ray on a composite …","Creates a new visitor used to find the time-of-impact …","Creates a new tracked contact.","Create a new empty contact-manifold.","Initialize a motion from a starting isometry and linear …","Creates a new ray starting from <code>origin</code> and with the …","Creates a new <code>RayIntersection</code>.","Computes the smallest time of impact of two shapes under …","Time Of Impact of a composite shape with any other shape, …","Time Of Impact of any shape with a composite shape, under …","Compute the time of first impact between two support-map …","The normal at the intersection point.","The local-space outward normal on the first shape at the …","The local-space outward normal on the second shape at the …","Starting point of the ray.","The origin of the rays represented as a single SIMD point.","Computes the point at the given parameter on this line.","The contacts points.","Computes the position at time <code>t</code> of a rigid-body following …","Prepends a constant translation to this rigid-motion.","Prepends a constant translation to this rigid-motion.","Computes the time of impact of a ray on a ball.","Computes the toi of a ray with a halfspace described by …","Creates a new SIMD ray with all its lanes filled with the …","The starting isometry at <code>t = 0</code>.","The way the time-of-impact computation algorithm …","The first subshape involved in this contact manifold.","The second subshape involved in this contact manifold.","If the first shape involved is a composite shape, this …","If the second shape involved is a composite shape, this …","Swaps every data of this TOI result such that the role of …","Clones <code>self</code> and then remove all contact points from <code>self</code>.","Computes the smallest time when two shapes under …","Time Of Impact of two balls under translational movement.","Time Of Impact of a composite shape with any other shape, …","Time Of Impact of a halfspace with a support-mapped shape …","Time Of Impact between a moving shape and a heightfield.","Time Of Impact of any shape with a composite shape, under …","Time Of Impact between a moving shape and a heightfield.","Time Of Impact of a halfspace with a support-mapped shape …","Time of impacts between two support-mapped shapes under …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The time of impact of the ray with the object.  The exact …","The time at which the objects touch.","Transform <code>self.witness1</code> and <code>self.normal1</code> by <code>pos</code>.","Transforms this ray by the given isometry.","","Translates this ray by the given vector. Its direction is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to use spatial coherence to update contacts …","Attempts to use spatial coherence to update contacts …","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new empty contact-manifold with the given …","The local-space closest point on the first shape at the …","The local-space closest point on the second shape at the …","The max of the <code>Shape::ccd_angular_thickness</code> of both shapes …","The sum of the <code>Shape::ccd_thickness</code> of both shapes …","","Three-dimensional penetration depth queries using the …","The Expanding Polytope Algorithm in 3D.","","","","","Projects the origin on a shape unsing the EPA algorithm.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Creates a new instance of the 3D Expanding Polytope …","Projects the origin on boundary of the given shape.","","","","","","A point of a Configuration-Space Obstacle.","Result of the GJK algorithm when a projection of the …","A support mapping that is the point at (0.0, 0.0, 0.0).","A support mapping that is a single point.","The Minkowski sum of a shape and a ball.","Results of the GJK algorithm.","Result of the GJK algorithm when the origin is inside of …","Result of the GJK algorithm when the origin is too far …","Result of the GJK algorithm when the origin is too close …","A simplex of dimension up to 3 that uses Voronoï regions …","Add a point to this simplex.","","","","","","","","","","","","","","","","","","","","","","","","","Casts a ray on a support map using the GJK algorithm.","","","","","","","Projects the origin on a shape using the Separating Axis …","Tests if the given point is already a vertex of this …","The dimension of the smallest subspace that can contain …","Compute the normal and the distance that can travel <code>g1</code> …","The absolute tolerence used by the GJK algorithm.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Computes the support point of the CSO of <code>g1</code> and <code>g2</code> toward …","Computes the support point of the CSO of <code>g1</code> and <code>g2</code> toward …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The maximum squared length of the vertices of this simplex.","Apply a function to all the vertices of this simplex.","Initializes a CSO point with <code>orig1 - orig2</code>.","Creates a new empty simplex.","Initializes a CSO point with all information provided.","The original point on the first shape used to compute …","The original point on the second shape used to compute …","CSO point where all components are set to zero.","The i-th point of this simplex.","The point on the CSO. This is equal to …","The dimension of the simplex before the last call to …","The i-th point of the simplex before the last call to …","Retrieves the barycentric coordinate associated to the <code>i</code>…","Retrieves the barycentric coordinate associated to the <code>i</code>…","Projects the origin on the boundary of the given shape.","Compute the projection of the origin on the boundary of …","Projets the origin on the boundary of this simplex and …","The radius of the ball involved in the Minkoski sum.","Resets this simplex to a single point.","The shape involved in the Minkowski sum.","Initializes a CSO point where both original points are …","","","","","","","","Swap two vertices of this simplex.","","","","","","","","","","","","","","","","Translate the CSO point.","Translate in-place the CSO point.","","","","","","","","","","","","","","","","","","","Additional shape-specific projection information","A visitor for the projection of a point on a composite …","A visitor for the projection of a point on a composite …","A visitor for the projection of a point on a composite …","Description of the projection of a point on a shape.","Trait of objects that can be tested for point inclusion …","Returns shape-specific info in addition to generic …","","","","","","","","","","","","","","","","","","","Tests if the given point is inside of <code>self</code>.","Tests if the given point is inside of <code>self</code> transformed by <code>m</code>…","Computes the minimal distance between a point and <code>self</code>.","Computes the minimal distance between a point and <code>self</code> …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Whether or not the point to project was inside of the …","Projects a point on a shape using the GJK algorithm.","Initialize a visitor for the projection of a point on a …","Initialize a visitor for the projection of a point on a …","Initialize a visitor for the projection of a point on a …","Initializes a new <code>PointProjection</code>.","The projection result.","Projects a point on <code>self</code>.","Projects a point on the boundary of <code>self</code> and returns the …","Projects a point on <code>self</code>.","Projects a point on <code>self</code>, with a maximum projection …","Projects a point on <code>self</code>, unless the projection lies …","Projects a point on <code>self</code> transformed by <code>m</code>.","Projects a point on the boundary of <code>self</code> transformed by <code>m</code> …","Projects a point on <code>self</code> transformed by <code>m</code>.","Projects a point on <code>self</code> transformed by <code>m</code>, with a maximum …","Projects a point on <code>self</code> transformed by <code>m</code>, unless the …","","","","","","","","","","Transforms <code>self.point</code> by <code>pos</code>.","","","","","","","","","","","","","","","","Computes the separation of two cuboids along <code>axis1</code>.","Finds the best separating edge between two cuboids.","Finds the best separating normal between two cuboids.","Finds the best separating edge between a cuboid and a …","Computes the separation between a cuboid an a convex shape …","Finds the best separating edge between a cuboid and a …","Finds the best separating normal between a cuboid and a …","Finds the best separating edge between a cuboid and a …","Computes the separation between a point and a cuboid, …","Finds the best separating edge between a segment and a …","Computes the separation along the given direction, between …","Finds the best separating normal a triangle and a cuboid.","Finds the best separating normal a triangle and a segment.","Spatial partitioning data structure visitor collecting …","Spatial partitioning data structure visitor collecting …","Spatial partitioning data structure visitor collecting …","Best-first traversal visitor for computing the point …","Visitor for checking if a composite shape contains a …","Spatial partitioning structure visitor collecting nodes …","Bounding Volume Tree visitor collecting intersections with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The data contained by the nodes with bounding volumes …","A traversal will set this to <code>true</code> if the point is inside …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The transform from the local-space of the second bounding …","The absolute value of the rotation matrix representing …","Creates a new <code>AabbSetsInterferencesCollector</code>.","Creates a new …","Creates a new <code>BoundingVolumeIntersectionsVisitor</code>.","Initializes a visitor that allows the computation of the …","Creates a new visitor for the testing containment of the …","Creates a new <code>PointIntersectionsVisitor</code>.","Creates a new <code>RayIntersectionsVisitor</code>.","The point to be tested.","The composite shape on which the point containment test …","","","","","","","","","","","","","","","A tolerance applied to the interference tests.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new …","Storage needed to store triangle indices.","Storage needed to store points.","Storage needed to store topology faces.","Storage needed to store topology half-edges.","Storage needed to store topology vertices.","Storage needed to store u32","Storage needed to store usize.","Storage needed to store vectors.","Storage needed to store triples of vectors.","At least two adjacent triangles have opposite orientations.","Found a triangle with two or three identical vertices.","A Ball shape.","A ball shape.","A ball shape.","If this bit is set, both triangles of the concerned …","If set, the half-edge topology and connected components of …","A capsule shape defined as a round segment.","A capsule shape.","A capsule shape.","Orientation with a clockwise orientaiton, i.e., with a …","A compound shape with an aabb bounding volume.","A Compound shape.","A Compound shape.","Cone shape with its principal axis aligned with the <code>y</code> axis.","A cone shape.","A cone shape.","A convex polyhedron without degenerate faces.","A convex polyhedron.","A convex polyhedron.","Orientation with a clockwise orientaiton, i.e., with a …","Shape of a box.","A cuboid shape.","A cuboid shape.","A custom user-defined shape.","A custom user-defined shape with a type identified by a …","Cylinder shape with its principal axis aligned with the <code>y</code> …","A cylindrical shape.","A cylindrical shape.","If set, any triangle that results in a failing half-hedge …","If set, the triangles sharing two vertices with identical …","If set, two triangles sharing three vertices with …","Degenerate triangle.","Shape-dependent identifier of an edge.","Shape-dependent identifier of a face.","An identifier of a feature of a convex polyhedron.","A 3D heightfield with a generic storage buffer for its …","A triangle mesh.","If set, the half-edge topology of the trimesh will be …","A half-space delimited by an infinite plane.","A shape representing a full half-space.","A shape representing a full half-space.","A 3D heightfield.","A heightfield shape.","A heightfield shape.","The status of the cell of an heightfield.","An iterator through all the triangles around the given …","Trait describing all the types needed for storing an …","Type of the array containing the heightfield’s heights.","If this bit is set, the leftmost triangle of the concerned …","If set, the duplicate vertices of the trimesh will be …","If set, the trimesh will be assumed to be oriented (with …","The point lies on the segment interior.","The point lies on an edge.","The point lies on an edge.","The point lies on the triangle interior.","The point lies on a triangular face interior.","The point lies on the triangle interior (for “solid” …","The point lies inside of the tetrahedron.","The point lies on a vertex.","The point lies on a vertex.","The point lies on a vertex.","A feature id where the feature type is packed into the …","","","A polygonal feature representing the local polygonal …","Trait implemented by convex shapes with features with …","A polyline.","A set of segments.","A set of segments.","","Storage needed to store a Qbvh.","If this bit is set, the rightmost triangle of the …","A cone dilated by a sphere (so it has round corners).","A cone with rounded corners.","A cone with rounded corners.","A convex polyhedron dilated by a sphere (so it has round …","A convex polyhedron with rounded corners.","A convex polyhedron with rounded corners.","A cuboid dilated by a sphere (so it has round corners).","A cuboid with rounded corners.","A cuboid with rounded corners.","A cylinder dilated by a sphere (so it has round corners).","A cylinder with rounded corners.","A cylinder with rounded corners.","A shape with rounded borders.","A triangle dilated by a sphere (so it has round corners).","A triangle with rounded corners.","A triangle with rounded corners.","A segment shape.","A segment shape.","A segment shape.","Logical description of the location of a point on a …","Trait implemented by shapes usable by Rapier.","Enum representing the type of a shape.","The shape of a collider.","Trait implemented by shapes composed of multiple simpler …","Type of the array containing the heightfield’s cells …","Traits of convex shapes representable by a support mapping …","A tetrahedron with 4 vertices.","Logical description of the location of a point on a …","A face of a triangle-mesh’s half-edge topology.","A half-edge of a triangle-mesh’s half-edge topology.","A vertex of a triangle-mesh’s half-edge topology.","Indicated an inconsistency in the topology of a triangle …","A triangle-mesh.","A triangle mesh shape.","A triangle mesh shape.","The connected-components of a triangle mesh.","The status of the cell of an heightfield.","The set of pseudo-normals of a triangle mesh.","Trait describing all the types needed for storing a …","The half-edge topology information of a triangle mesh.","A triangle shape.","A triangle shape.","A triangle shape.","Orientation of a triangle.","Description of the location of a point on a triangle.","Enum representing the shape with its actual type","","Packed feature id identifying an unknown feature.","Unknown identifier.","Shape-dependent identifier of a vertex.","If this bit is set, the concerned heightfield cell is …","The segment first point.","The triangle first point.","The tetrahedron first point.","Compute the axis-aligned bounding box of this triangle …","Computes the world-space Aabb of this ball transformed by …","The axis-aligned bounding box of this capsule.","Computes the world-space Aabb of this cuboid, transformed …","Computes the world-space Aabb of this half-space.","Compute the axis-aligned bounding box of this polyline.","Computes the world-space Aabb of this segment, transformed …","Computes the world-space Aabb of this triangle, …","Computes the world-space Aabb of this cone, transformed by …","Computes the world-space Aabb of this convex polyhedron, …","Computes the world-space Aabb of this cylinder, …","Computes the world-space Aabb of this heightfield, …","The shapes Aabbs.","Returns the set containing all flags.","Returns the set containing all flags.","Appends a second triangle mesh to this triangle mesh.","Appends a second triangle mesh to this triangle mesh.","The area of this triangle.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts this abstract shape to a ball, if it is one.","Converts this abstract shape to a mutable ball, if it is …","Converts this abstract shape to a capsule, if it is one.","Converts this abstract shape to a mutable capsule, if it …","","","","","Converts this abstract shape to a compound shape, if it is …","Converts this abstract shape to a mutable compound shape, …","Converts this abstract shape to a cone, if it is one.","Converts this abstract shape to a mutable cone, if it is …","","","Converts this abstract shape to a cuboid, if it is one.","Converts this abstract shape to a mutable cuboid, if it is …","Converts this abstract shape to a cylinder, if it is one.","Converts this abstract shape to a mutable cylinder, if it …","Converts this abstract shape to a halfspace, if it is one.","Converts this abstract shape to a halfspace, if it is one.","Converts this abstract shape to a heightfield, if it is …","Converts this abstract shape to a mutable heightfield, if …","Converts this shape to a polygonal feature-map, if it is …","","","","","","","","","","","","","Converts this abstract shape to a polyline, if it is one.","Converts this abstract shape to a mutable polyline, if it …","","Converts this abstract shape to a round cone, if it is one.","Converts this abstract shape to a mutable round cone, if …","Converts this abstract shape to a round convex polyhedron, …","Converts this abstract shape to a mutable round convex …","Converts this abstract shape to a round cuboid, if it is …","Converts this abstract shape to a mutable round cuboid, if …","Converts this abstract shape to a round cylinder, if it is …","Converts this abstract shape to a mutable round cylinder, …","Converts this abstract shape to a round triangle, if it is …","Converts this abstract shape to a round triangle, if it is …","Converts this abstract shape to a segment, if it is one.","Converts this abstract shape to a mutable segment, if it …","Converts this abstract shape to the given shape, if it is …","Converts this abstract shape to the given mutable shape, …","Convents this shape into its support mapping, if it has …","","","","","","","","","","","","","","Converts this abstract shape to a triangle, if it is one.","Converts this abstract shape to a mutable triangle, if it …","Converts this abstract shape to a triangle mesh, if it is …","Converts this abstract shape to a mutable triangle mesh, …","Gets the underlying shape as an enum.","","","","","","","","","","","","","","","","","","","The segment second point.","The triangle second point.","The tetrahedron first point.","Initialize a ball shape defined by its radius.","The barycentric coordinates corresponding to this point …","The barycentric coordinates corresponding to this point …","Computes the barycentric coordinates of the given point in …","The barycentric coordinates corresponding to this point …","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","The radius of the rounded border.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the world-space bounding sphere of this triangle …","Computes the world-space bounding sphere of this triangle …","Computes the world-space bounding sphere of this ball, …","Computes the world-space bounding sphere of this capsule, …","Computes the world-space bounding sphere of this cuboid, …","Computes the world-space bounding sphere of this …","Computes the world-space bounding sphere of this polyline, …","Computes the world-space bounding sphere of this segment, …","Computes the world-space bounding sphere of this triangle, …","Computes the world-space bounding sphere of this cone, …","Computes the world-space bounding sphere of this convex …","Computes the world-space bounding sphere of this cylinder, …","Computes the world-space bounding sphere of this …","The triangle third point.","The tetrahedron first point.","Computes the intersection <code>Polyline</code>s between this mesh and …","Computes the intersection <code>Polyline</code>s between this mesh and …","Splits this <code>TriMesh</code> along the given canonical axis.","Splits this <code>TriMesh</code> along the given canonical axis.","Splits this segment along the given canonical axis.","The transformation such that <code>t * Y</code> is collinear with <code>b - a</code> …","Initialize a capsule shape from its endpoints and radius.","Initialize a capsule shape aligned with the <code>x</code> axis.","Initialize a capsule shape aligned with the <code>y</code> axis.","Initialize a capsule shape aligned with the <code>z</code> axis.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The pair of index of the cell containing the vertical …","The height (extent along its local <code>z</code> axis) of each cell of …","The status of the <code>(i, j)</code>-th cell.","The width (extent along its local <code>x</code> axis) of each cell of …","The statuses of all the cells of this heightfield.","The mutable statuses of all the cells of this heightfield.","The center of this capsule.","The geometric center of this triangle.","Computes the center of this tetrahedron.","Verify if this convex polyhedron is actually convex.","The circumcircle of this triangle.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clones this shape into a boxed trait-object.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The pair of index of the cell containing the vertical …","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Initialize a compound shape defined by its subshapes.","Computes the Aabb of this shape with the given position.","","","","","","","","","","","","","","","","","","","Computes the bounding-sphere of this shape with the given …","Computes the Aabb of this shape.","","","","","","","","","","","","","","","","","","","Computes the bounding-sphere of this shape.","","","","","","","","","","","","","","","","","","","Computes the swept Aabb of this shape, i.e., the space it …","Initialize a cone shape defined by its half-height (along …","Returns the connected-component information of this …","Computes all the contacts between two polygonal features.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","Tests if a point is inside of this triangle.","Converts the FeatureID of the left or right triangle at …","Initializes a compound shape obtained from the …","Initializes a compound shape obtained from the …","Creates a new shared shape that is the convex-hull of the …","Creates a new shared shape that is a convex polyhedron …","Initialize a cuboid shape defined by its half-extents.","Initialize a cylindrical shape defined by its half-height …","The tetrahedron first point.","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","The unit direction of this segment.","","","","Returns a boxed object from a boxed trait object if the …","Returns an <code>Arc</code>-ed object from an <code>Arc</code>-ed trait object if …","Returns a mutable reference to the object within the trait …","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …","Returns a reference to the object within the trait object …","Returns the i-th edge of this tetrahedron.","Converts a edge feature id into a packed feature id.","Returns the indices of the vertices of the i-th edge of …","The three edges of this triangle: [AB, BC, CA].","The topology of the edges of this convex polyhedron.","The array containing the indices of the edges adjacent to …","The pseudo-normals of the edges.","The three edges scaled directions of this triangle: [B - …","The feature IDs of this polygon’s edges.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the extents of this triangle on the given …","Extracts the connected components of this polyline, …","Returns the i-th face of this tetrahedron.","Converts a face feature id into a packed feature id.","The face associated to this half-edge.","The <code>face_colors[i]</code> gives the connected-component index of …","Returns the i-th face of this tetrahedron.","The topology of the faces of this convex polyhedron.","The faces of this half-edge representation.","The array containing the indices of the faces adjacent to …","The normal of the given feature of this shape.","The normal of the given feature of this shape.","The normal of the given feature of this shape.","The normal of the given feature.","The shape’s normal at the given point located on a …","The shape’s normal at the given point located on a …","","","","","The feature ID of this polygonal feature.","The flags of this triangle mesh.","A flat view of the index buffer of this mesh.","A flat view of the index buffer of this mesh.","A flat view of the index buffer of this mesh.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Creates the reference to a segment from the reference to …","Creates the reference to a triangle from the reference to …","Creates the reference to a tetrahedron from the reference …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Creates a new convex polyhedron from an arbitrary set of …","Attempts to create a new solid assumed to be convex from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The set of faces grouped by connected components.","One of the half-edge with this vertex as endpoint.","The half-edge adjacent to this face, with a starting point …","The half-edges of this half-edge representation.","The half-extents of the cuboid.","The half-height of this capsule.","The half-height of the cone.","The half-height of the cylinder.","Initialize a plane shape defined by its outward normal.","","","","","","The height of this capsule.","Initializes an heightfield shape on the x-z plane defined …","The heights of this heightfield.","The index buffer of this mesh.","The index buffer of this mesh.","The shape being rounded.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Computes the intersection mesh between an Aabb and this …","Computes the intersection mesh between an Aabb and this …","Computes the intersection mesh between a cuboid and this …","Computes the intersection mesh between a cuboid and this …","Computes the intersection mesh between a cuboid and this …","Computes the intersection mesh between a cuboid and this …","Computes the intersection <code>Polyline</code>s between this mesh and …","Computes the intersection <code>Polyline</code>s between this mesh and …","Computes the intersection <code>Polyline</code>s between this mesh, …","Computes the intersection <code>Polyline</code>s between this mesh, …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the trait object wraps an object of type …","Tests if this triangle is affinely dependent, i.e., its …","Is this triangle degenerate or almost degenerate?","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Does the given feature ID identify a backface of this …","Is this shape known to be convex?","","","","","","","","","","","","","","","Is this shape a <code>ConvexPolyhedron</code>?","Is this shape a <code>ConvexPolyhedron</code>?","","Is the identified feature an edge?","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Is the identified feature a face?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the point is located on the relative …","Is the identified feature unknown?","Is the identified feature a vertex?","The length of this segment.","Gets the local axis-aligned bounding box of this triangle …","Computes the local-space Aabb of this ball.","The axis-aligned bounding box of this capsule.","The Aabb of this compound in its local-space.","Computes the local-space Aabb of this cuboid.","Computes the local-space Aabb of this half-space.","Gets the local axis-aligned bounding box of this polyline.","Computes the local-space Aabb of this segment.","Computes the local-space Aabb of this triangle.","Computes the local-space Aabb of this cone.","Computes the local-space Aabb of this convex polyhedron.","Computes the local-space Aabb of this cylinder.","Computes the local-space Aabb of this heightfield.","Computes the local-space bounding sphere of this triangle …","Computes the local-space bounding sphere of this triangle …","Computes the local-space Aabb of this ball.","Computes the world-space bounding sphere of this capsule.","The bounding-sphere of this compound in its local-space.","Computes the local-space bounding sphere of this cuboid.","Computes the local-space bounding sphere of this …","Computes the local-space bounding sphere of this polyline.","Computes the local-space bounding sphere of this segment.","Computes the local-space bounding sphere of this triangle.","Computes the local-space bounding sphere of this cone.","Computes the local-space bounding sphere of this convex …","Computes the local-space bounding sphere of this cylinder.","Computes the local-space bounding sphere of this …","Splits this mesh by a plane identified by its normal …","Splits this mesh by a plane identified by its normal …","Splits this segment by a plane identified by its normal …","Split a segment with a plane.","Return the edge segment of this cuboid with a normal cone …","Return the edge segment of this cuboid with a normal cone …","Compute the support polygonal face of <code>self</code> towards the <code>dir</code>.","","","","","","","","","","","","","","","","","Same as <code>self.local_support_point</code> except that <code>dir</code> is …","","","","If this shape is shared, then the content of <code>self</code> is …","Applies the function <code>f</code> to all the triangles of this …","Applies a function to one sub-shape of this composite …","","","","","","","","","","","","","","Compute the mass-properties of this shape given its …","","","","","","","","","","","","","","","","","","","The number of columns of this heightfield.","Initializes a new heightfield with the given heights and a …","Creates a new triangle mesh from a vertex buffer and an …","Creates a new triangle mesh from a vertex buffer and an …","Creates a new ball from its radius and center.","Creates a new capsule defined as the segment between <code>a</code> and …","Builds a new compound shape.","Creates a new box from its half-extents. Half-extents are …","Builds a new halfspace from its center and its normal.","Creates a new polyline from a vertex buffer and an index …","Creates a new segment from two points.","Creates a triangle from three points.","Creates a new cone.","Creates a new cylinder.","Initializes a new heightfield with the given heights and a …","Creates a new empty polygonal feature.","Creates a tetrahedron from three points.","Wraps the given shape as a shared shape.","Creates a new capsule aligned with the <code>x</code> axis and with the …","Creates a new capsule aligned with the <code>y</code> axis and with the …","Creates a new capsule aligned with the <code>z</code> axis and with the …","Returns the next triangle in this iterator.","The next half-edge.","Returns <code>None</code>. Exists only for API similarity with the 2D …","The normal of this triangle assuming it is oriented ccw.","The halfspace planar boundary’s outward normal.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","The number of rows of this heightfield.","The number of cells of this heightfield along each …","The total number of connected components.","The number of segments forming this polyline.","The number of triangles forming this mesh.","The number of vertices on this polygon (must be &lt;= 4).","The orientation of the 2D triangle, based on its signed …","","","The perimeter of this triangle.","The normalized counterclockwise normal of this segment, …","Computes the point at the given location.","The set of vertices of this convex polyhedron.","Initializes a polyline shape defined by its vertex and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Projects a point on <code>self</code>, with a maximum projection …","Perform a point projection assuming a solid interior based …","Projects a point on <code>self</code> transformed by <code>m</code>, unless the …","","The pseudo-normals of this triangle mesh, if they have …","Gets the acceleration structure of the composite shape.","The acceleration structure used by this triangle-mesh.","","","The acceleration structure used by this compound shape.","","The radius of the ball.","The radius of the capsule.","The base radius of the cone.","The radius fo the cylinder.","The range of connected components. …","Removes the specified flags in-place.","Removes the specified flags in-place.","Reverse the orientation of the triangle mesh.","Reverse the orientation of the triangle mesh.","Reverse the orientation of this polyline by swapping the …","Reverse the orientation of this triangle by swapping b and …","The Aabb of this heightmap.","The rotation <code>r</code> such that <code>r * Y</code> is collinear with <code>b - a</code>.","Initialize a rounded cone shape defined by its half-height …","Initializes a compound shape obtained from the …","Initializes a compound shape obtained from the …","Creates a new shared shape with rounded corners that is the","Creates a new shared shape with round corners that is a …","Initialize a round cuboid shape defined by its …","Initialize a rounded cylindrical shape defined by its …","Initializes a triangle shape with round corners.","Returns <code>true</code> if both <code>self</code> and <code>other</code> correspond to points …","The scale factor applied to this heightfield.","Returns a scaled version of this triangle mesh.","Returns a scaled version of this triangle mesh.","Computes a scaled version of this ball.","Computes a scaled version of this capsule.","Computes a scaled version of this cuboid.","Computes a scaled version of this half-space.","Computes a scaled version of this polyline.","Computes a scaled version of this segment.","Computes a scaled version of this triangle.","Computes a scaled version of this cone.","Computes a scaled version of this convex polygon.","Computes a scaled version of this cylinder.","Returns a scaled version of this heightfield.","The direction of this segment scaled by its length.","A vector normal of this triangle.","The not-normalized counterclockwise normal of this …","Get the <code>i</code>-th segment of this mesh.","Initialize a segment shape from its endpoints.","The endpoints of the capsule’s principal axis.","Transforms  the feature-id of a segment to the feature-id …","An iterator through all the segments of this mesh.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Set the status of the <code>(i, j)</code>-th cell.","Sets the flags of this triangle mesh, controlling its …","Sets the flags of this triangle mesh, controlling its …","Sets the scale factor applied to this heightfield.","Gets the type tag of this shape.","","","","","","","","","","","","","","","","","","","The shapes of this compound shape.","Computes the signed volume of this tetrahedron.","The smallest x coordinate of the <code>j</code>-th column of this …","The smallest z coordinate of the start of the <code>i</code>-th row of …","Splits this mesh, transformed by <code>position</code> by a plane …","Splits this mesh, transformed by <code>position</code> by a plane …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Computes the face with a normal that maximizes the …","Return the face of this triangle with a normal that …","Return the face of this cuboid with a normal that maximizes","Computes the ID of the features with a normal that …","","","Same as <code>self.support_point</code> except that <code>dir</code> is normalized.","","Swaps the two vertices of this segment.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Outlines this round cylinder’s shape using polylines.","Outlines this round cone’s shape using polylines.","Outlines this round cuboid’s surface with polylines.","Outlines this round convex polyhedron’s shape using …","Outlines this ball’s shape using polylines.","Outlines this capsule’s shape using polylines.","Outlines this cuboid’s shape using polylines.","Outlines this round cylinder’s shape using polylines.","Outlines this round cuboid’s surface with polylines.","Outlines this round cone’s shape using polylines.","Outlines this round convex polyhedron’s shape using …","Outlines this cone’s shape using polylines.","Outlines this cylinder’s shape using polylines.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Discretize the boundary of this ball as a triangle-mesh.","Discretize the boundary of this capsule as a triangle-mesh.","Discretize the boundary of this cuboid as a triangle-mesh.","Discretize the boundary of this cone as a triangle-mesh.","Discretize the boundary of this convex polyhedron as a …","Discretize the boundary of this cylinder as a …","Discretize the boundary of this heightfield as a …","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Returns the topology information of this trimesh, if it …","Creates a new capsule equal to <code>self</code> with all its endpoints …","Transform each vertex of this polygonal feature by the …","Transforms in-place the vertices of this triangle mesh.","Transforms in-place the vertices of this triangle mesh.","The transform <code>t</code> such that <code>t * Y</code> is collinear with <code>b - a</code> …","Applies the isometry <code>m</code> to the vertices of this segment and …","Returns a new triangle with vertices transformed by <code>m</code>.","Get the <code>i</code>-th triangle of this mesh.","Initializes a triangle shape.","Gets the the vertices of the triangle identified by <code>id</code>.","Gets the vertex indices of the triangle identified by <code>id</code>.","An iterator through all the triangles of this mesh.","An iterator through all the triangles of this mesh.","An iterator through all the triangles of this heightfield.","An iterator through all the triangles around the given …","The two triangles at the cell (i, j) of this heightfield.","Gets the indices of the vertices of the (up to) two …","Initializes a triangle mesh shape defined by its vertex …","Initializes a triangle mesh shape defined by its vertex …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This half-edge twin on the adjacent triangle.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The pair of index of the cell containing the vertical …","The range of segment ids that may intersect the given …","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","The height (extent along its local <code>z</code> axis) of each cell of …","The width (extent along its local <code>x</code> axis) of each cell of …","Unpacks this feature id into an explicit enum.","Revries the value of the identifier if <code>self</code> is an edge.","Retrieves the value of the identifier if <code>self</code> is a face.","Revries the value of the identifier if <code>self</code> is a vertex.","Converts a vertex feature id into a packed feature id.","The first vertex of this edge.","The vertex buffer of this mesh.","The vertex buffer of this mesh.","Reference to an array containing the three vertices of …","The topology of the vertices of this convex polyhedron.","Up to four vertices forming this polygonal feature.","The vertices of this half-edge representation.","The array containing the indices of the vertices adjacent …","The pseudo-normals of the vertices.","The feature IDs of this polygon’s vertices.","Computes the volume of this tetrahedron.","Creates a new triangle mesh from a vertex buffer and an …","Creates a new triangle mesh from a vertex buffer and an …","The smallest x coordinate of the <code>j</code>-th column of this …","The smallest z coordinate of the start of the <code>i</code>-th row of …","The edge shared between the two triangles.","The first triangle, with an orientation opposite to the …","The second triangle, with an orientation opposite to the …","Errors generated by the convex-hull calculation.","Reached an impossible configuration in the convex-hull …","The convex hull calculation was unable to find a support …","Reached a piece of code we shouldn’t (internal error).","","","","","Checks if a convex-hull is properly formed.","Computes the convex hull of a set of 3d points.","Computes the intersection of two convex polygons.","Computes the intersection points of two convex polygons.","","","","Returns the argument unchanged.","","Computes the intersection of two meshes.","Calls <code>U::from(self)</code>.","","","","","","","","Computes the convex hull of a set of 3d points.","","","","Utilities useful for various generations tasks.","Approximate convex decomposition using the VHACD algorithm.","Voxelization of a 2D polyline or 3D triangle mesh.","Applies a revolution, using the Y symmetry axis passing …","Pushes to <code>out</code> a set of points forming an arc starting at …","Pushes to <code>out_vtx</code> a set of points forming an arc starting …","Pushes the index buffer for an arc between <code>start</code> and <code>end</code> …","Pushes a discretized counterclockwise circle to a buffer.","Pushes the index buffer of a closed loop.","Creates the faces from a circle and a point that is shared …","Creates the faces from a circle and a point that is shared …","Pushes indices so that a circle is filled with triangles. …","Pushes the index buffer of an open chain.","Creates the faces from two circles with the same …","Given four corner points, pushes to two counterclockwise …","Creates the faces from two circles with the same …","Reverses the clockwising of a set of faces.","Returns the transformed version of a vector of points.","Applies in-place a transformation to an array of points.","Returns the transformed version of a vector of points.","Approximate convex decomposition using the VHACD algorithm.","Parameters controlling the VHACD convex decomposition.","Controls the bias toward clipping along symmetry planes.","","","","","Controls the bias toward clipping along revolution planes.","","","","","","","Compute the convex hulls of the voxelized …","Compute the convex-hulls of the parts computed by this …","Compute the intersections between the voxelized convex …","Maximum concavity.","Controls whether the convex-hull should be approximated …","Controls the precision of the convex-hull generation …","Decompose the given polyline (in 2D) or triangle mesh (in …","","","Controls the way the input mesh or polyline is being …","","Returns the argument unchanged.","Returns the argument unchanged.","","","Perform an approximate convex decomposition of a set of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Controls the max number of convex-hull generated by the …","Controls the granularity of the search for the best …","Resolution used during the voxelization stage.","","","","","","","","","","","","The almost-convex voxelized parts computed by the VHACD …","Controls how the voxelization determines which voxel needs …","Use a flood-fill technique to consider fill the voxels …","A voxel that is on the interior of the voxelized shape.","Intermediate value, should be ignored by end-user code.","Voxel that intersects the surface of the voxelized shape.","Intermediate value, should be ignored by end-user code.","Intermediate value, should be ignored by end-user code.","Intermediate value, should be ignored by end-user code.","A voxel that is outside of the voxelized shape.","Intermediate value, should be ignored by end-user code.","Intermediate value, should be ignored by end-user code.","Only consider full the voxels intersecting the surface of …","A voxel.","A sparse set of voxels.","The values of a voxel.","A cubic volume filled with voxels.","","","","","","","","","","","","","","","","","","","","","","","","","","","Update the bounding box of this voxel set.","Compute the convex-hull of the voxels in this set.","Compute the convex-hull of this voxel set after cutting …","Computes the intersections between all the voxels of this …","Computes the total volume of the voxels contained by this …","The integer coordinates of the voxel as part of the voxel …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Is this voxel on the surface of the volume (i.e. not …","The number of voxels in this set.","The maximal coordinates of the integer bounding-box of the …","The minimal coordinates of the integer bounding-box of the …","Creates a new empty set of voxels.","The 3D origin of this voxel-set.","The number of voxel subdivisions along each coordinate …","The scale factor that needs to be applied to the voxels of …","The scale factor between the voxel integer coordinates and …","","","","","","","","","","","","","","Convert <code>self</code> into a mesh, including only the voxels on the …","Naive conversion of all the voxels with the given <code>value</code> to …","","","","","","","","","","","","","","","","The value of the given voxel.","The volume of a single voxel of this voxel set.","Voxelizes the given shape described by its boundary: a …","Voxelizes the given shape described by its boundary: a …","The set of voxels.","Detects holes inside of a solid contour.","Abstraction over a 1D array.","Abstraction over a 2D array.","Trait that transforms thing to a slice of u8.","Default data storage based on <code>Vec</code>, <code>DVector</code>, and <code>DMatrix</code>.","A hasher builder that creates <code>DefaultHasher</code> with default …","A structure that implements <code>Eq</code> and is hashable even if the …","An interval implementing interval arithmetic.","A derivable valued function which can be bounded on …","Extra operations with isometries.","Various operations usable with <code>Option&lt;Isometry&gt;</code> and …","The type of heights.","Single point of intersection.","A 2x2 symmetric-definite-positive matrix.","A 3x3 symmetric-definite-positive matrix.","Intersection along a segment (when both segments are …","Intersection between two segments.","A pair of elements sorted in increasing order.","Transform a vector by the absolute value of the …","","","","","","Adds <code>val</code> to the diagonal components of <code>self</code>.","Adds <code>elt</code> to the diagonal components of <code>self</code>.","","","","","","","","","","","","","","","","","Converts <code>self</code> to a slice of bytes.","","","","","","","","","","","","","","","","","","Computes the normal of a counter-clock-wise triangle.","Computes the center of a set of point.","Computes the center and the covariance matrix of a set of …","","","","","","","","","","","","","","Does this interval contain the given value?","Bounds the image of the cosinus function on this interval.","Computes the covariance matrix of a set of points.","","","Create a new SDP matrix with its diagonal filled with <code>val</code>, …","Create a new SDP matrix with its diagonal filled with <code>val</code>, …","","Computes a new interval that contains both <code>self</code> and <code>t</code>.","","","","","","","","","","","","","","","Evaluate the function at <code>t</code>.","Bounds all the values of this function on the interval <code>t</code>.","Bounds all the values of the gradient of this function on …","Execute the Interval Newton Method to isolate all the …","Execute the Interval Newton Method to isolate all the …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Build an <code>SdpMatrix2</code> structure from a plain matrix, …","Build an <code>SdpMatrix3</code> structure from a plain matrix, …","","","","","","","","","Gets the height on the <code>(i, j)</code>-th cell of the height grid.","Gets the i-th element of this array, if it exists.","Gets the i-th element of this array, if it exists.","","","","A hash-map that behaves deterministically when the …","Computes the intersection between two intervals.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Convert this SDP matrix to a regular matrix representation.","Computes <code>self.inverse() * rhs</code>.","Computes <code>self.inverse() * p</code>.","Computes <code>self.inverse() * v</code>.","Computes <code>self.inverse() * v</code>.","Compute the inverse of this SDP matrix without performing …","Compute the inverse of this SDP matrix without performing …","Is this array empty?","Is this array empty?","","","","","","","","","","Are all components of this matrix equal to zero?","The number of heights on this storage.","The component at the first row and first column of this …","The component at the first row and first column of this …","The component at the first row and second column of this …","The component at the first row and second column of this …","The component at the first row and third column of this …","The component at the second row and second column of this …","The component at the second row and second column of this …","The component at the second row and third column of this …","The component at the third row and third column of this …","Computes the median of a set of values.","The average of the two interval endpoints.","","","","","","","","","","The number of columns of the heights grid.","","Creates a new <code>DeterministicState</code> that builds <code>DefaultHasher</code> …","Creates a new <code>HashablePartialEq</code>. Please make sure that you …","A new SDP 2x2 matrix with the given components.","A new SDP 3x3 matrix with the given components.","Sorts two elements in increasing order into a new pair.","The number of rows of the heights grid.","Computes an oriented bounding box for the given set of …","","","Computes the support point of a cloud of points.","Computes the index of the support point of a cloud of …","Tests if the given point is inside of a polygon with …","Computes <code>rhs * self</code>.","Compute the quadratic form <code>m.transpose() * self * m</code>.","Compute the quadratic form <code>m.transpose() * self * m</code>.","Given an index buffer, remove from <code>points</code> every point that …","Computes the intersection between two segments.","Sets the height on the <code>(i, j)</code>-th cell of the height grid.","Bounds the image of the sinus function on this interval.","Bounds the image of the<code>sin</code> and <code>cos</code> functions on this …","Create the interval <code>[min(a, b), max(a, b)]</code>.","Create the interval <code>[e, e]</code> (single value).","Splits this interval at its mitpoint.","","","","","","","","","","","","","","","","","","","","","","","","","","Computes <code>self * p</code>.","Computes <code>self * v</code>.","Computes <code>self * v</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Gets the wrapped value.","The width of this inverval.","","Create a new SDP matrix filled with zeros.","Create a new SDP matrix filled with zeros.","Location of the first intersection point on the first …","Location of the first intersection point on the second …","Location of the intersection point on the first segment.","Location of the intersection point on the second segment.","Location of the second intersection point on the first …","Location of the second intersection point on the second …","A view into a single entry in a map, which may either be …","This is the same as FxHasher, but with the guarantee that …","Type alias for a hashmap using the <code>fx</code> hash algorithm.","An occupied entry.","A vacant entry.","Provides in-place mutable access to an occupied entry …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Sets the value of the entry, and returns an <code>OccupiedEntry</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns a reference to this entry’s key.","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,2,3,10,2,3,10,2,3,10,2,3,10,2,2,2,3,10,2,3,218,2,2,3,3,10,3,2,2,2,2,2,2,2,2,3,10,2,3,10,218,2,3,10,2,3,10,0,2,2,10,2,3,10,10,2,3,2,10,2,3,10,2,3,10,10,2,2,2,3,10,2,10,2,218,2,3,10,3,10,2,2,3,10,2,3,10,2,3,10,2,3,10,2,3,10,218,2,3,10,218,2,3,2,10,218,2,3,218,2,3,2,10,2,3,2,10,2,3,2,3,2,3,10,3,10,2,10,10,2,2,218,2,3,218,2,3,10,2,2,3,10,2,3,10,2,3,10,2,2,3,10,2,3,10,2,3,10,2,3,10,2,2,0,0,0,0,0,0,35,35,35,35,35,35,35,35,35,35,35,35,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,30,52,52,0,62,63,64,0,0,62,63,64,0,52,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0,54,219,62,63,64,48,49,51,47,53,54,219,62,63,64,48,49,51,47,53,54,219,62,63,64,48,49,51,47,53,54,219,62,63,64,48,49,51,47,53,219,49,44,47,44,47,48,49,51,47,53,48,49,51,47,53,51,43,54,53,49,49,54,219,48,51,48,48,51,51,49,48,49,51,47,45,54,219,62,63,64,48,49,51,47,53,54,219,62,63,64,48,49,51,47,53,43,48,47,54,219,62,63,64,48,49,51,47,53,54,219,62,63,64,48,49,51,47,53,54,219,62,63,64,48,49,51,47,53,54,219,62,63,64,48,49,51,47,53,49,49,54,219,62,63,64,48,49,51,47,53,49,44,47,44,47,48,44,47,44,47,51,44,47,49,44,47,44,47,44,47,44,47,44,47,44,47,47,44,47,49,49,49,45,48,49,51,47,53,54,219,62,63,64,48,49,51,47,53,54,219,62,63,64,48,49,51,47,53,47,47,47,47,47,47,47,47,47,47,54,219,62,63,64,48,49,51,47,53,54,219,62,63,64,48,49,51,47,53,54,219,62,63,64,48,49,51,47,53,59,61,60,220,220,220,0,65,65,0,0,0,97,65,0,97,65,65,153,0,6,153,0,97,6,97,0,0,0,0,6,153,0,0,0,0,0,0,0,0,0,0,65,0,0,0,80,68,6,153,69,70,68,6,153,69,70,71,68,6,153,69,70,68,6,153,69,70,221,67,67,69,70,71,69,70,0,0,67,68,69,0,0,67,68,69,76,68,69,76,68,69,95,75,0,7,11,95,0,67,68,69,0,70,70,70,13,95,95,69,70,70,68,6,153,69,70,68,6,153,69,70,0,0,67,68,69,68,6,153,69,70,68,6,153,69,70,68,6,153,69,70,68,6,153,69,70,68,6,153,69,70,80,80,75,75,95,95,0,67,68,69,13,81,81,7,11,0,75,0,80,81,75,75,75,75,0,67,68,69,69,70,70,68,6,153,69,70,68,6,153,69,70,13,81,68,6,153,69,70,68,6,153,69,70,68,6,153,69,70,0,81,81,0,0,73,73,73,92,73,92,73,92,73,92,73,73,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,73,73,73,92,73,92,73,92,73,92,73,92,73,92,73,92,73,92,73,92,73,92,73,73,92,73,92,73,92,73,92,0,74,74,74,74,74,74,0,0,0,0,0,0,0,0,0,0,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,0,65,65,0,0,97,65,96,97,65,65,0,0,0,0,0,97,97,0,0,0,0,0,0,96,0,0,0,0,65,0,0,80,80,80,79,106,107,108,109,110,111,112,95,75,65,80,96,7,13,11,97,81,79,106,107,108,109,110,111,112,95,75,65,80,96,7,13,11,97,81,71,79,106,107,108,109,110,111,112,95,75,65,80,96,7,13,11,97,81,79,106,107,108,109,110,111,112,95,75,65,80,96,7,13,11,97,81,221,221,221,221,221,221,221,75,0,0,0,79,95,75,65,80,96,7,13,11,97,81,71,79,95,75,65,80,96,7,13,11,97,81,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,95,95,75,7,11,96,95,0,0,0,0,0,0,0,0,0,0,0,0,71,71,71,71,71,97,97,97,13,95,95,75,95,95,75,80,96,7,13,11,97,81,80,79,79,106,107,108,109,110,111,112,95,75,65,80,96,7,13,11,97,81,79,106,107,108,109,110,111,112,95,75,65,80,96,7,13,11,97,81,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,221,221,221,79,106,107,108,109,110,111,112,95,75,65,80,96,7,13,11,97,81,79,106,107,108,109,110,111,112,95,75,65,80,96,7,13,11,97,81,79,106,107,108,109,110,111,112,95,75,65,80,96,7,13,11,97,81,79,106,107,108,109,110,111,112,95,75,65,80,96,7,13,11,97,81,7,71,79,106,107,108,109,110,111,112,95,75,65,80,96,7,13,11,97,81,0,80,80,75,75,95,95,0,0,75,75,106,107,108,109,110,111,112,95,75,80,7,13,0,0,0,0,13,81,81,7,11,7,75,80,80,80,0,0,11,80,81,75,75,75,75,81,75,0,0,0,0,0,0,0,0,0,79,95,75,65,80,96,7,13,11,97,81,79,106,107,108,109,110,111,112,95,75,65,80,96,7,13,11,97,81,79,106,107,108,109,110,111,112,95,75,65,80,96,7,13,11,97,81,13,81,81,7,13,7,79,106,107,108,109,110,111,112,95,75,65,80,96,7,13,11,97,81,79,106,107,108,109,110,111,112,95,75,65,80,96,7,13,11,97,81,75,75,79,106,107,108,109,110,111,112,95,75,65,80,96,7,13,11,97,81,106,107,108,109,110,111,112,75,81,81,222,222,0,0,0,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,0,91,0,0,0,0,91,91,91,0,90,118,119,120,117,91,90,118,119,120,117,91,90,118,119,120,117,91,90,118,119,120,117,91,90,0,117,91,90,117,91,90,0,90,90,0,0,117,91,117,91,90,118,119,120,117,91,90,117,117,118,119,120,117,91,90,118,119,120,117,91,90,118,119,120,117,91,90,118,119,120,117,91,90,118,119,120,117,91,90,118,119,120,117,91,90,118,119,120,118,119,120,90,90,117,90,117,117,117,117,90,117,90,90,90,90,0,90,90,120,90,120,117,117,118,119,120,118,119,120,90,117,91,90,118,119,120,117,91,90,118,119,120,117,91,90,117,117,118,119,120,117,91,90,118,119,120,117,91,90,118,119,120,117,91,90,223,0,0,0,0,0,0,121,122,123,29,121,122,123,29,121,122,123,29,121,122,123,29,29,29,105,105,105,105,29,121,122,123,29,121,122,123,29,121,122,123,29,121,122,123,29,121,122,123,29,121,122,123,29,121,122,123,29,29,0,121,122,123,29,29,105,105,223,223,105,105,105,223,223,105,29,121,122,123,29,121,122,123,29,29,121,122,123,29,121,122,123,29,121,122,123,29,121,122,123,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,125,126,127,128,129,130,124,125,126,127,128,129,130,124,125,126,127,128,129,130,124,125,126,127,128,129,130,124,128,124,125,126,127,128,129,130,124,125,126,127,128,129,130,124,125,126,127,128,129,130,124,125,126,127,128,129,130,124,125,126,127,128,129,130,124,125,126,127,128,129,130,124,125,126,127,128,129,130,124,124,124,125,126,127,128,129,130,128,128,124,125,126,127,128,129,130,124,125,126,127,128,129,130,124,124,125,126,127,128,129,130,124,125,126,127,128,129,130,124,125,126,127,128,129,130,125,126,127,128,129,130,125,131,131,131,131,131,131,131,131,131,158,158,0,155,147,138,139,0,155,147,156,0,155,147,0,155,147,0,155,147,156,0,155,147,155,147,0,155,147,139,139,139,156,113,113,0,0,0,139,0,155,147,0,155,147,0,0,0,114,138,139,139,148,149,151,149,151,149,151,148,149,151,0,84,84,0,0,0,155,147,84,131,138,0,155,147,0,155,147,0,155,147,0,155,147,0,0,155,147,0,155,147,0,0,0,0,0,114,0,0,0,0,0,0,0,0,155,147,0,0,0,0,0,0,155,147,0,0,0,0,104,113,113,138,16,86,150,132,83,98,85,87,133,16,86,134,135,136,115,137,138,139,132,101,86,171,132,83,98,137,85,87,133,140,16,148,155,147,86,149,156,134,135,136,138,115,157,150,151,158,159,160,161,162,163,164,139,113,104,141,171,132,83,98,137,85,87,133,140,16,148,155,147,86,149,156,134,135,136,138,115,157,150,151,158,159,160,161,162,163,164,139,113,104,141,72,72,72,72,72,101,137,133,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,98,85,140,140,140,140,140,16,86,134,135,136,72,72,141,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,83,98,85,140,140,140,140,140,16,86,134,135,136,72,72,72,72,72,100,101,83,98,137,85,87,133,140,140,140,140,140,16,86,134,135,136,16,86,150,141,148,149,150,151,138,139,138,139,138,139,138,139,138,139,138,139,138,139,140,171,132,83,98,137,85,87,133,140,16,148,155,147,86,149,156,134,135,136,138,115,157,150,151,158,159,160,161,162,163,164,139,113,104,141,171,132,83,98,137,85,87,133,140,16,148,155,147,86,149,156,134,135,136,138,115,157,150,151,158,159,160,161,162,163,164,139,113,104,141,132,101,83,98,85,87,133,16,86,134,135,136,115,86,150,132,101,132,101,16,98,141,141,141,141,101,83,137,85,133,101,83,98,137,85,87,133,140,16,86,134,135,136,115,72,100,101,83,98,137,85,87,133,140,140,140,140,140,16,86,134,135,136,72,100,101,83,98,137,85,87,133,140,140,140,140,140,16,86,134,135,136,115,115,115,115,115,115,98,86,150,135,86,132,83,98,137,85,87,133,140,16,148,155,147,86,149,156,134,135,136,138,115,157,150,151,158,159,160,161,162,163,164,139,113,104,141,72,100,101,83,98,137,85,87,133,140,140,140,140,140,16,86,134,135,136,132,83,98,137,85,87,133,140,16,148,155,147,86,149,156,134,135,136,138,115,157,150,151,158,159,160,161,162,163,164,139,113,104,141,115,138,139,138,139,141,72,100,101,83,98,137,85,87,133,140,140,140,140,140,16,86,134,135,136,72,72,100,101,83,98,137,85,87,133,140,140,140,140,140,16,86,134,135,136,72,100,101,83,98,137,85,87,133,140,140,140,140,140,16,86,134,135,136,72,141,132,157,138,139,132,83,137,85,87,133,115,86,115,141,141,141,141,141,141,150,86,138,157,159,164,139,113,141,138,139,16,83,85,87,72,72,72,72,72,150,104,150,86,135,135,159,86,157,138,139,83,85,87,16,148,155,86,156,134,135,136,138,158,139,113,104,155,155,156,156,138,138,158,158,139,139,113,113,104,104,138,139,86,133,150,104,163,160,150,135,164,135,85,16,86,135,72,83,85,16,86,135,157,132,132,101,133,83,98,85,87,140,16,148,155,86,149,156,134,135,136,138,138,138,138,138,115,157,150,151,158,158,160,161,162,163,139,139,139,139,139,113,104,171,132,101,101,83,98,137,85,87,133,140,16,16,148,155,147,86,86,149,156,134,135,136,138,115,157,157,157,150,151,158,159,160,161,162,163,164,139,113,104,104,141,16,86,150,138,139,138,139,138,139,135,135,155,138,139,171,132,83,98,137,85,87,133,140,16,148,155,147,86,149,156,134,135,136,138,115,157,150,151,158,159,160,161,162,163,164,139,113,104,141,155,160,161,162,164,85,98,134,136,141,155,138,139,113,104,98,141,115,132,133,140,138,139,138,139,132,101,132,101,132,101,132,101,132,101,138,139,171,132,83,98,137,85,87,133,140,16,148,155,147,86,149,156,134,135,136,138,115,157,150,151,158,159,160,161,162,163,164,139,113,104,141,171,132,83,98,137,85,87,133,140,16,148,155,147,86,149,156,134,135,136,138,115,157,150,151,158,159,160,161,162,163,164,139,113,104,141,171,132,83,98,137,85,87,133,140,16,148,155,147,86,149,156,134,135,136,138,115,157,150,151,158,159,160,161,162,163,164,139,113,104,141,171,132,83,98,137,85,87,133,140,16,148,155,147,86,149,156,134,135,136,138,115,157,150,151,158,159,160,161,162,163,164,139,113,104,141,72,86,86,138,139,132,72,83,98,85,87,140,140,140,140,140,16,86,134,135,136,99,99,135,104,138,139,104,171,132,83,98,137,85,87,133,140,16,148,155,147,86,149,156,134,135,136,138,115,157,150,151,158,159,160,161,162,163,164,139,113,104,141,149,104,104,16,132,83,98,137,85,87,133,16,86,134,135,136,115,132,101,83,98,137,85,87,133,16,86,134,135,136,115,132,101,16,16,85,86,99,85,16,86,134,135,136,33,83,98,85,140,16,86,134,135,136,33,83,98,140,141,115,93,101,137,133,84,93,132,137,133,84,93,132,137,133,72,100,101,83,98,137,85,87,133,140,140,140,140,140,16,86,134,135,136,115,100,132,101,83,98,137,85,87,133,16,86,134,136,115,157,150,141,98,98,98,171,163,16,86,87,138,139,115,115,160,133,132,157,86,138,139,86,16,16,135,141,132,83,98,137,85,87,133,140,16,86,134,135,136,115,150,132,83,98,137,85,87,133,140,16,86,134,135,136,115,150,132,133,16,86,115,150,132,133,132,115,132,93,132,101,137,137,133,83,98,134,136,160,138,139,132,101,133,86,115,98,141,141,141,141,141,141,141,141,151,115,132,101,83,98,85,87,133,16,86,134,135,136,115,16,86,16,133,141,98,133,133,138,139,115,132,101,115,72,100,101,83,98,137,85,87,133,140,140,140,140,140,16,86,134,135,136,137,150,115,115,132,101,138,139,138,139,85,86,85,135,33,83,33,83,16,138,139,145,142,144,143,83,98,85,140,140,140,140,134,136,132,83,98,137,85,87,133,140,16,148,155,147,86,149,156,134,135,136,138,115,157,150,151,158,159,160,161,162,163,164,139,113,104,141,158,171,132,83,98,137,85,87,133,140,16,148,155,147,86,149,156,134,135,136,138,115,157,150,151,158,159,160,161,162,163,164,139,113,104,141,171,132,83,98,137,85,87,133,140,16,148,155,147,86,149,156,134,135,136,138,115,157,150,151,158,159,160,161,162,163,164,139,113,104,141,83,98,85,134,135,136,115,138,139,132,98,157,132,101,98,16,86,132,141,115,115,132,101,115,115,115,115,141,141,171,132,83,98,137,85,87,133,140,16,148,155,147,86,149,156,134,135,136,138,115,157,150,151,158,159,160,161,162,163,164,139,113,104,141,171,132,83,98,137,85,87,133,140,16,148,155,147,86,149,156,134,135,136,138,115,157,150,151,158,159,160,161,162,163,164,139,113,104,141,163,171,132,83,98,137,85,87,133,140,16,148,155,147,86,149,156,134,135,136,138,115,157,150,151,158,159,160,161,162,163,164,139,113,104,141,84,93,132,137,133,115,115,138,139,115,115,104,113,113,113,104,163,132,133,86,135,157,164,135,159,157,150,132,101,115,115,224,224,224,0,176,176,176,176,176,176,176,0,0,0,0,176,176,176,176,176,0,176,176,176,176,176,176,176,176,0,176,176,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,178,166,178,166,166,178,166,178,166,166,166,178,178,178,166,166,166,178,166,166,166,166,178,166,178,166,178,178,166,178,166,178,166,178,166,178,166,166,166,166,166,178,166,178,166,178,166,178,166,178,166,178,0,181,182,182,182,182,182,182,182,182,182,181,0,0,0,0,179,183,180,181,182,179,183,180,181,182,179,183,180,181,182,179,183,180,181,182,180,181,182,180,181,182,179,179,179,179,179,180,180,181,182,181,181,182,182,180,181,182,179,183,180,181,182,179,183,180,181,182,179,183,183,180,181,182,179,183,180,181,182,179,183,180,181,182,179,183,180,181,182,179,183,180,181,182,180,179,179,179,179,179,183,183,179,180,181,182,179,183,180,181,182,179,183,180,181,182,179,183,179,183,180,181,182,179,183,180,181,182,179,183,180,181,182,183,179,179,183,179,225,0,0,0,0,0,0,0,0,0,0,226,210,0,0,210,0,0,227,185,185,187,188,185,187,188,189,210,46,191,185,187,188,193,189,210,46,191,185,187,188,193,200,189,210,46,191,185,187,188,193,189,210,46,191,185,187,188,193,189,0,0,0,46,191,185,187,188,193,46,191,185,187,188,193,193,185,185,0,46,193,187,188,185,185,46,191,185,187,188,193,46,46,191,191,185,185,193,193,197,197,197,0,0,46,191,185,187,188,193,189,210,46,191,185,187,188,188,193,187,188,189,210,46,191,185,187,188,193,226,228,228,191,185,193,0,185,189,210,46,191,185,187,188,193,189,210,46,191,185,187,188,193,189,210,46,191,185,187,188,193,189,210,46,191,185,187,188,193,187,229,229,229,229,187,188,228,228,189,210,46,191,185,187,188,193,185,188,228,187,188,187,188,188,187,188,188,188,0,185,185,185,187,187,188,188,188,188,185,226,185,189,191,187,188,193,226,0,185,193,0,0,0,229,188,188,0,0,226,185,185,185,185,185,185,185,185,46,191,185,187,188,193,189,210,46,191,185,187,188,193,189,210,46,191,185,187,188,193,229,229,229,189,210,46,191,185,187,188,193,189,210,46,191,185,187,188,193,189,210,46,191,185,187,188,193,191,185,185,187,188,230,230,231,231,230,230,0,0,0,212,212,212,212,214,212,214,212,214,212,214,214,214,212,212,214,212,214,212,212,214,212,214,212,214,212,214,212,214,212,212,212,212,212,212,214,212,214,212,214,212,214,212,214,214,214,214,214,214,214],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[2,3],[[2,4,5,5],[[6,[2]]]],[[2,7,5,8],[[9,[5]]]],[[3,7,5,8],[[9,[5]]]],[[10,11,12]],[[2,7,5,8],[[9,[13]]]],[[3,7,5,8],[[9,[13]]]],[[],[[14,[5]]]],[2,[[14,[5]]]],[2,[[14,[5]]]],[3,[[14,[5]]]],[3,[[14,[5]]]],[10,[[14,[12]]]],0,[[2,[14,[5]],[15,[5]]],[[9,[16]]]],[[2,[14,[5]],[15,[5]]],9],[[2,[17,[[14,[5]]]]]],[[2,[17,[[14,[5]]]],[17,[[14,[5]]]]]],[[2,7],[[9,[16]]]],[[2,7],9],[[2,[14,[5]],[14,[5]]],[[9,[16]]]],[2,2],[3,3],[10,10],[[]],[[]],[[]],[[],8],[[2,2],8],[[3,3],8],[[10,10],18],[[2,[14,[5]]],8],[[3,[14,[5]]],8],[[10,[14,[12]]],18],0,[[2,2],[[19,[2]]]],[[2,2]],[[10,12]],[[2,[14,[5]],8],5],[[3,[14,[5]],8],5],[[10,[14,[12]]],12],[10,12],[[2,2],8],[[3,3],8],[2,[[15,[5]]]],[[10,4],2],[[2,20],21],[[3,20],21],[[10,20],21],[[]],[[]],[[[22,[2]]],10],[[]],[[[14,[5]],[15,[5]]],2],[23,2],[[]],[[]],[[]],[2,[[15,[5]]]],[10,[[15,[12]]]],[[2,2],[[9,[2]]]],[[],8],[[2,2],8],[[3,3],8],[[10,10],18],[[3,7,5],8],[[10,10],[[22,[18]]]],[[2,[14,[5]],[14,[5]],[24,[5]],[15,[5]],5],8],[[]],[[]],[[]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[],8],[[],8],[[],8],[5],[[2,5]],[[3,5]],[[10,12]],[5],[[2,5],2],[[3,5],3],0,0,[[]],[[2,2]],[[3,3]],[[]],[[2,2],2],[[3,3],3],0,0,[[[14,[5]],[14,[5]]],2],[[[14,[5]],5],3],[[],2],[[],10],[[2,[14,[5]],8],29],[[3,[14,[5]],8],29],[[2,[14,[5]]]],[[3,[14,[5]]]],[[2,[24,[5]]]],[3,5],[10,12],0,[[10,4,2]],[[2,[15,[5]]],2],[[10,[15,[12]]],10],[2,10],[2,[[22,[2]]]],[[2,[14,[5]]]],[5],[[2,5]],[[3,5]],[5],[[2,5],2],[[3,5],3],[10,2],[2],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[]],[[]],[[]],[2],[[2,[30,[5]]],2],[[3,[30,[5]]],3],[[10,[30,[12]]],10],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],32],[2,[[22,[[14,[5]]]]]],[2,5],[23,2],[33,2],[[[30,[5]],23],2],[[[34,[[14,[5]]]]]],[[[30,[5]],33],2],0,[[35,35],8],[[35,35],35],[[35,35]],[[],1],[[],1],[[]],[[]],[35,35],[[]],[[],35],[[]],[[]],0,[[35,35],8],[[35,20],21],[[]],[[5,5],35],[[5,[14,[5]],[14,[5]],5],35],[[5,34],35],[[5,5,5],35],[[5,[34,[[14,[5]]]],[34,[[22,[36]]]]],35],[[5,[15,[5]]],35],[[5,5,5],35],[[]],[[5,[34,[[14,[5]]]],[34,[[22,[36]]]]],35],[[]],[[[26,[25]]],[[26,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],0,0,[[],8],[35,8],0,[35,5],[[[14,[5]],5,[37,[5]]],35],[35,[[37,[5]]]],0,[35,[[38,[5]]]],[35,[[38,[5]]]],[[35,35],8],[[35,5,8]],[[35,35],35],[[35,35]],[39,35],[[]],[[],9],[[]],[[35,[30,[5]]],35],[[],31],[[],31],[[],32],[[[14,[5]],5,[38,[5]]],35],[[[14,[5]],5,[37,[5]],[40,[5]]],35],[[35,[30,[5]]],[[14,[5]]]],[[35,[40,[5]]],[[41,[5]]]],[[],35],[[[14,[5]],[14,[5]],[14,[5]],[14,[5]],[14,[5]]],[[42,[5]]]],[[[34,[[14,[5]]]],[34,[[22,[36]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[30,[12]],[15,[12]]],[[15,[12]]]],[[[30,[5]],[15,[5]]],[[15,[5]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[44,[43]],[45,[43]],5]],[[[47,[43,46]],[45,[43]],5]],[[[44,[43]],[45,[43]],[0,[43]],5]],[[[47,[43,46]],[45,[43]],[0,[43]],5]],[48,48],[49,49],[[[51,[50]]],[[51,[50]]]],[[[47,[52]]],[[47,[52]]]],[53,53],[[]],[[]],[[]],[[]],[[]],0,[[]],[[],54],[[],53],[[],49],[48,49],0,0,[[48,48],8],[[[51,[55]],[51,[55]]],8],[[],8],[[],8],[[],8],[[],8],0,[[48,20],21],[[49,20],21],[[[51,[56]],20],21],[[[47,[56,[0,[56,[52,[56]]]]]],20],21],[57],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],0,[[[47,[43,[52,[43]]]],2,[17,[43]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[49,8],[49,8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[49,8],[[[44,[43]]],39],[[[47,[43,46]]],39],[[[44,[43]]],39],[[[47,[43,46]]],39],0,[[[44,[43]],48],[[9,[43]]]],[[[47,[43,46]],48],[[9,[43]]]],[[],[[44,[43]]]],[[],[[47,[43,46]]]],0,[[[44,[43]],48],[[9,[2]]]],[[[47,[43,46]],48],[[9,[2]]]],0,[[[44,[43]],43]],[[[47,[43,46]],43]],[[[44,[43]]],[[34,[49]]]],[[[47,[43,46]]],[[34,[49]]]],[[[44,[43]]],[[34,[[51,[43]]]]]],[[[47,[43,46]]],[[34,[[51,[43]]]]]],[[[44,[43]],5,53]],[[[47,[43,46]],5,53]],[[[44,[43]],5,53,58],4],[[[47,[43,46]],5,53,58],4],[[[44,[43]],43],[[9,[43]]]],[[[47,[43,46]],43],[[9,[43]]]],[[[47,[43,[52,[43]]]]],2],[[[44,[43]],[15,[5]]],[[44,[43]]]],[[[47,[43,46]],[15,[5]]],[[47,[43,46]]]],[[49,8]],[[49,8]],0,[[],4],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[47,[43,[52,[43]]]],[59,[43,10]]],9],[[[47,[43,[52,[43]]]],[59,[43,10]],36,5],9],[[[47,[43,[52,[43]]]],[44,[43]],[60,[43,43,10]]]],[[[47,[43,[52,[43]]]],[44,[43]],[60,[43,43,10]],17]],[[[47,[43,[52,[43]]]],[61,[43,10]]],8],[[[47,[43,[52,[43]]]],[61,[43,10]],36],8],[[[47,[43,[52,[43]]]],[61,[43,10]],[17,[36]],36],8],[[[47,[43,[52,[43]]]],[61,[43,10]],[17,[36]]],8],[[[47,[43,[52,[43]]]],[44,[43]],[60,[43,43,10]]]],[[[47,[43,[52,[43]]]],[44,[43]],[60,[43,43,10]],17]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[5,[9,[[22,[9]]]]],62],[[[9,[[22,[9]]]]],63],[[[9,[[22,[9]]]],[9,[[22,[9]]]]],64],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],65],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[7,5,8],[[9,[13]]]],[[66,67],[[68,[66,67]]]],[[66,67],[[68,[66,67]]]],[69,69],[70,70],[[],[[26,[71]]]],[[]],[[]],0,0,[[[30,[5]],72,72,5],[[31,[73,70]]]],[[[68,[67,67]],[30,[5]],72,72,5],[[31,[73,70]]]],[[69,[30,[5]],72,72,5],[[31,[73,70]]]],0,0,[[[30,[5]],72,72,5],[[31,[[9,[74]],70]]]],[[[68,[67,67]],[30,[5]],72,72,5],[[31,[[9,[74]],70]]]],[[69,[30,[5]],72,72,5],[[31,[[9,[74]],70]]]],[[[30,[5]],72,72,5,75],[[31,[70]]]],[[[68,[76,76]],[30,[5]],72,72,5,75],[[31,[70]]]],[[69,[30,[5]],72,72,5,[75,[[0,[77,50]],[0,[77,78]]]]],[[31,[70]]]],[[[30,[5]],72,72,5,[17,[75]],[9,[79]]],[[31,[70]]]],[[[68,[76,76]],[30,[5]],72,72,5,[17,[75]],[9,[79]]],[[31,[70]]]],[[69,[30,[5]],72,72,5,[17,[[75,[[0,[77,50]],[0,[77,78]]]]]],[9,[79]]],[[31,[70]]]],0,0,0,0,0,0,[[[30,[5]],72,[30,[5]],72],[[31,[5,70]]]],[[[30,[5]],72,72],[[31,[5,70]]]],[[[68,[67,67]],[30,[5]],72,72],[[31,[5,70]]]],[[69,[30,[5]],72,72],[[31,[5,70]]]],0,[[70,70],8],[[],8],[[],8],0,0,0,[[69,20],21],[[70,20],21],[[70,20],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[30,[5]],72,[30,[5]],72],[[31,[8,70]]]],[[[30,[5]],72,72],[[31,[8,70]]]],[[[68,[67,67]],[30,[5]],72,72],[[31,[8,70]]]],[[69,[30,[5]],72,72],[[31,[8,70]]]],[[]],[[]],[[]],[[]],[[]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[],8],[[],8],[[],8],[[],8],[[],8],0,0,0,0,0,0,[[80,72,80,72,5,5,8],[[31,[[9,[81]],70]]]],[[80,72,80,72,5,5,8],[[31,[[9,[81]],70]]]],[[[68,[67,67]],80,72,80,72,5,5,8],[[31,[[9,[81]],70]]]],[[69,80,72,80,72,5,5,8],[[31,[[9,[81]],70]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[30,[5]],[15,[5]],72,[30,[5]],[15,[5]],72,5,8],[[31,[[9,[81]],70]]]],[[[30,[5]],[15,[5]],72,72,5,8],[[31,[[9,[81]],70]]]],[[[68,[67,67]],[30,[5]],[15,[5]],72,72,5,8],[[31,[[9,[81]],70]]]],[[69,[30,[5]],[15,[5]],72,72,5,8],[[31,[[9,[81]],70]]]],[[]],[[]],[[],82],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],0,0,[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],32],[[],32],[[],32],0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[73,73],[[]],[[[30,[5]],72,[30,[5]],72,5],[[31,[73,70]]]],[[[30,[5]],83,83,5],73],[[[30,[5]],83,[0,[72,66]],5],73],[[[0,[67,66]],[30,[5]],[0,[84,66]],72,5],73],[[[30,[5]],[0,[72,66]],83,5],73],[[[30,[5]],85,85,5],73],[[[30,[5]],85,86,5],73],[[[30,[5]],87,[0,[66,33]],5],73],[[[14,[5]],[15,[5]],[14,[5]],[15,[5]]]],[[[14,[5]],[15,[5]],[14,[5]],[15,[5]]]],[[[88,[5]],[89,[5]],[88,[5]],[89,[5]],5]],[[[30,[5]],16,16,5],73],[[[30,[5]],16,16]],[[]],[[[0,[67,66]],[30,[5]],72,[0,[84,66]],5],73],[[[30,[5]],[0,[66,33]],87,5],73],[[[30,[5]],[0,[33,66]],[0,[33,66]],5],73],[[[30,[5]],[0,[33,66]],[0,[33,66]],5,90,[9,[[15,[5]]]]],91],[[[30,[5]],86,85,5],73],[[73,73],8],[73],[73,73],[[73,20],21],[[]],[[]],[[]],[[]],[[]],[[]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[],8],[[],8],[[[0,[67,66]],[30,[5]],[0,[84,66]],72,5],[[92,[[0,[67,66]],[0,[84,66]]]]]],[[]],[[],9],[[],9],[[]],[[]],[[73,[30,[5]],[30,[5]]],73],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[[92,[[0,[67,66]],[0,[84,66]]]],5,10,[9,[[22,[9]]]]],62],0,[[],1],[[],1],[[]],[[]],[74,74],[[]],[[[30,[5]],72,[30,[5]],72,5],[[31,[[9,[74]],70]]]],[[[30,[5]],83,83,5],[[9,[74]]]],[[[30,[5]],83,[0,[72,66]],5],[[9,[74]]]],[[[0,[67,66]],[30,[5]],[0,[93,66]],72,5],[[9,[74]]]],[[[30,[5]],[0,[72,66]],83,5],[[9,[74]]]],[[[30,[5]],85,85,5],[[9,[74]]]],[[[30,[5]],87,[0,[66,33]],5],[[9,[74]]]],[[[0,[67,66]],[30,[5]],72,[0,[93,66]],5],[[9,[74]]]],[[[30,[5]],[0,[66,33]],87,5],[[9,[74]]]],[[[30,[5]],[0,[33,66]],[0,[33,66]],5],[[9,[74]]]],[[[30,[5]],[0,[33,66]],[0,[33,66]],5,90,[9,[[94,[[15,[5]]]]]]],91],0,[[74,74],8],[74],[74,74],[[74,20],21],[[]],[[]],[[]],[[[26,[25]]],[[26,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[],8],[[[14,[5]],[14,[5]],[94,[[15,[5]]]],[94,[[15,[5]]]],5],74],0,0,0,0,[[]],[[],9],[[]],[[74,[30,[5]]]],[[74,[30,[5]],[30,[5]]]],[[],31],[[],31],[[],32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[80,[30,[5]]],80],[[80,[15,[5]]],80],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],65],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[7,5,8],[[9,[5]]]],[[7,5,8],[[9,[5]]]],[[7,5,8],[[9,[13]]]],[[[30,[5]],7,5,8],[[9,[5]]]],[[[30,[5]],7,5,8],[[9,[5]]]],[[[30,[5]],7,5,8],[[9,[13]]]],[[[30,[5]],7,5,8],[[9,[13]]]],[[[75,[[0,[77,78]]]]]],[[2,[14,[5]],[15,[5]]],9],[[[14,[5]],[15,[5]],[34,[[14,[5]]]],[17,[[14,[5]]]]]],[[],9],[79,79],[[[95,[50]]],[[95,[50]]]],[[[75,[50,50]]],[[75,[50,50]]]],[65,65],[80,80],[96,96],[7,7],[13,13],[11,11],[97,97],[81,81],[[],[[26,[71]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[30,[5]]],80],[[[30,[5]],83,83,5,[75,[[0,[77,78]]]]]],[[[30,[5]],72,72,5,[75,[[0,[77,78]]]]]],[[[30,[5]],98,98,5,[75,[[0,[77,78]]]]]],[[[30,[5]],72,72,5,[75,[[0,[77,78]]]]]],[[[30,[5]],[0,[66,72]],83,5,[75,[[0,[77,78]]]],8]],[[[30,[5]],72,72,5,[75,[[0,[77,78]]]]]],[[[30,[5]],85,85,5,[75,[[0,[77,78]]]]]],[[[30,[5]],72,72,5,[75,[[0,[77,78]]]]]],[[[30,[5]],[30,[5]],85,86,5,[75,[[0,[77,78]]]],8]],[[[30,[5]],72,72,5,[75,[[0,[77,78]]]]]],[[[30,[5]],87,[0,[66,99]],5,5,[75,[[0,[77,78]]]],8]],[[[30,[5]],72,72,5,[75,[[0,[77,78]]]]]],[[[30,[5]],[0,[66,99]],5,[0,[66,99]],5,5,[75,[77,[0,[77,78]]]]]],[[[30,[5]],72,72,5,[75,[77,[0,[77,78]]]]]],[[76,[30,[5]],93,93,5,[17,[[75,[[0,[77,50]],[0,[77,78]]]]]],[9,[79]]]],[[76,[30,[5]],93,72,5,[17,[[75,[[0,[77,50]],[0,[77,78]]]]]],[9,[79]],8]],[[76,[30,[5]],[30,[5]],100,93,5,[17,[[75,[[0,[77,50]],[0,[77,78]]]]]],[9,[79]],8]],[[76,[30,[5]],100,72,5,[17,[[75,[[0,[77,50]],[0,[77,78]]]]]],[9,[79]],8]],[[76,[30,[5]],72,72,5,[17,[[75,[[0,[77,50]],[0,[77,78]]]]]],[9,[79]]]],[[76,[30,[5]],101,72,5,[17,[[75,[77,[0,[77,78]]]]]],[9,[79]],8]],[[76,[30,[5]],72,72,5,[17,[[75,[77,[0,[77,78]]]]]],[9,[79]]]],[[[75,[[0,[77,78]]]]],[[34,[[95,[[0,[77,78]]]]]]]],[[[95,[[0,[77,78]]]],[95,[[0,[77,78]]]]]],0,0,0,0,[[[0,[66,72]],[0,[66,72]]],96],0,[[[30,[5]],72,[30,[5]],72],[[31,[5,70]]]],[[83,[14,[5]],83],5],[[[30,[5]],83,[0,[72,66]]],5],[[[0,[67,66]],[30,[5]],[0,[84,66]],72],5],[[[30,[5]],[0,[72,66]],83],5],[[[30,[5]],85,85],5],[[[30,[5]],87,[0,[66,33]]],5],[[[30,[5]],16,16],5],[[[0,[67,66]],[30,[5]],72,[0,[84,66]]],5],[[[30,[5]],[0,[66,33]],87],5],[[[30,[5]],[0,[33,66]],[0,[33,66]]],5],[[[30,[5]],[0,[33,66]],[0,[33,66]],90,[9,[[15,[5]]]]],5],[[[26,[71]]],[[31,[[26,[71]],[26,[71]]]]]],[[[27,[71]]],[[31,[[27,[[0,[1,102,103,71]]]],[27,[71]]]]]],[71,[[9,[71]]]],[[[28,[71]]],[[31,[[28,[71]],[28,[71]]]]]],[71,[[9,[71]]]],[[97,97],8],[[],8],[[],8],0,0,0,[[[75,[[0,[77,78]]]]],[[9,[[95,[[0,[77,78]]]]]]]],[[[14,[5]],[14,[5]],104,104,5,8],[[95,[[0,[77,78]]]]]],[[[95,[56]],20],21],[[[75,[56,56]],20],21],[[80,20],21],[[96,20],21],[[7,20],21],[[13,20],21],[[11,20],21],[[97,20],21],[[81,20],21],[[80,5]],[71,79],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],80],[[[30,[5]],72,[30,[5]],72],[[31,[8,70]]]],[[2,16],8],[[2,86],8],[[[14,[5]],83,83],8],[[[30,[5]],83,[0,[66,105]]],8],[[[0,[67,66]],[30,[5]],[0,[84,66]],72],8],[[[30,[5]],85,85],8],[[[30,[5]],85,16],8],[[[30,[5]],85,86],8],[[[30,[5]],87,[0,[66,33]]],8],[[[30,[5]],[0,[66,105]],83],8],[[[30,[5]],16,85],8],[[[0,[67,66]],[30,[5]],72,[0,[84,66]]],8],[[[30,[5]],[0,[66,33]],87],8],[[[30,[5]],[0,[33,66]],[0,[33,66]]],8],[[[30,[5]],[0,[33,66]],[0,[33,66]],90,[9,[[94,[[15,[5]]]]]]]],[[[30,[5]],86,85],8],[[7,5],8],[[7,5],8],[[[30,[5]],7,5],8],[[[30,[5]],7,5],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[7,[30,[5]]],7],[71,8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[[14,[5]],[15,[5]],[14,[5]],[15,[5]]],[[9,[5]]]],0,0,0,0,0,0,[[[0,[33,66]],90,7,5,8],[[9,[13]]]],[[[14,[5]],[14,[5]],[14,[5]],7],9],[[[75,[[0,[77,78]]]],[34,[[95,[[0,[77,78]]]]]]]],[[[75,[[0,[77,78]]]],[34,[[95,[[0,[77,78]]]]]],5]],[[66,[30,[5]],66,72],[[106,[66,66]]]],[[[0,[67,66]],[30,[5]],[0,[84,66]],72],[[107,[[0,[67,66]],[0,[84,66]]]]]],[[[0,[67,66]],[30,[5]],[0,[84,66]],72],[[108,[[0,[67,66]],[0,[84,66]]]]]],[[[0,[67,66]],80,[0,[84,66]],80,72,5,5,8],[[109,[[0,[67,66]],[0,[84,66]]]]]],[[7,5,8],110],[[7,5,8],111],[[[0,[67,66]],[30,[5]],[15,[5]],[0,[84,66]],72,5,8],[[112,[[0,[67,66]],[0,[84,66]]]]]],[[[14,[5]],[14,[5]],104,104,5],[[95,[[0,[77,78]]]]]],[[],[[75,[77,[0,[77,78]]]]]],[[[30,[5]],[14,[5]],[15,[5]],[15,[5]]],80],[[[14,[5]],[15,[5]]],7],[[5,[15,[5]],113],13],[[80,72,80,72,5,5,8],[[31,[[9,[81]],70]]]],[[[0,[67,66]],80,[0,[84,66]],80,72,5,5,8],[[9,[81]]]],[[[0,[67,66]],80,72,80,[0,[84,66]],5,5,8],[[9,[81]]]],[[[0,[66,67]],80,[0,[66,33]],72,80,[0,[66,33]],72,5,5,96],[[9,[81]]]],0,0,0,0,0,[[7,5],[[14,[5]]]],0,[[80,5],[[30,[5]]]],[[80,[30,[5]]],80],[[80,[15,[5]]],80],[[[14,[5]],5,7,8]],[[[14,[5]],[15,[5]],7],[[9,[5]]]],[7,11],0,0,0,0,0,0,[81,81],[[[75,[50,[0,[77,78]]]]],[[75,[50,[0,[77,78]]]]]],[[[30,[5]],[15,[5]],72,[30,[5]],[15,[5]],72,5,8],[[31,[[9,[81]],70]]]],[[[30,[5]],[15,[5]],83,83,5],[[9,[81]]]],[[[0,[67,66]],[30,[5]],[15,[5]],[0,[84,66]],72,5,8],[[9,[81]]]],[[[30,[5]],[15,[5]],87,[0,[33,66]],5,8],[[9,[81]]]],[[[0,[67,66]],[30,[5]],[15,[5]],[115,[114]],72,5,8],[[31,[[9,[81]],70]]]],[[[0,[67,66]],[30,[5]],[15,[5]],72,[0,[84,66]],5,8],[[9,[81]]]],[[[0,[67,66]],[30,[5]],[15,[5]],72,[115,[114]],5,8],[[31,[[9,[81]],70]]]],[[[30,[5]],[15,[5]],[0,[33,66]],87,5,8],[[9,[81]]]],[[[30,[5]],[15,[5]],[0,[33,66]],[0,[33,66]],5,8],[[9,[81]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[81,[30,[5]]],81],[[7,[30,[5]]],7],[[13,[30,[5]]],13],[[7,[15,[5]]],7],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[[75,[[0,[77,78]]]],[30,[5]]],8],[[[75,[[0,[77,78]]]],[30,[5]],5,5],8],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[[106,[[0,[67,66]],[0,[84,66]]]],5,10,[9,[[22,[9]]]]],62],[[[107,[[0,[67,66]],[0,[84,66]]]],10,[9,[[22,[9]]]]],63],[[[108,[[0,[67,66]],[0,[84,66]]]],5,10,[9,[[22,[9]]]]],62],[[[109,[[0,[67,66]],[0,[84,66]]]],5,10,[9,[[22,[9]]]]],62],[[[110,[84]],5,10,[9,[[22,[9]]]]],62],[[[111,[84]],5,10,[9,[[22,[9]]]]],62],[[[112,[[0,[67,66]],[0,[84,66]]]],5,10,[9,[[22,[9]]]]],62],[[36,36],[[75,[[0,[77,78]]]]]],0,0,0,0,0,0,0,[[],1],[[],1],[[]],[[]],[[116,[30,[5]],[0,[33,66]],[0,[33,66]],90],9],[[]],[[]],[[]],[[[26,[25]]],[[26,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[],8],[[],116],[[116,[30,[5]],[0,[33,66]],90],[[9,[[14,[5]]]]]],[[],9],[[]],[[],31],[[],31],[[],32],0,0,0,0,0,0,0,0,0,0,[[90,117],8],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[33,66]],90,7,5],9],[117,117],[91,91],[90,90],[[]],[[]],[[]],[[[30,[5]],[0,[33,66]],[0,[33,66]],5,8,90],91],[[90,[14,[5]]],8],[90,4],[[[30,[5]],[0,[33,66]],[0,[33,66]],[15,[5]],90],9],[[],5],[[117,117],8],[[91,91],8],[[117,20],21],[[91,20],21],[[90,20],21],[[]],[[]],[[]],[[]],[[]],[[]],[[[30,[5]],[0,[33,66]],[0,[33,66]],[15,[5]]],117],[[[30,[5]],[0,[33,66]],[0,[33,66]],[94,[[15,[5]]]]],117],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[118,[15,[5]]],[[14,[5]]]],[[119,[15,[5]]],[[14,[5]]]],[[[120,[[0,[66,33]]]],[15,[5]]],[[14,[5]]]],[[118,[94,[[15,[5]]]]],[[14,[5]]]],[[119,[94,[[15,[5]]]]],[[14,[5]]]],[[[120,[[0,[66,33]]]],[94,[[15,[5]]]]],[[14,[5]]]],[90,5],[[90,58]],[[[14,[5]],[14,[5]]],117],[[],90],[[[14,[5]],[14,[5]],[14,[5]]],117],0,0,[[],117],[[90,4],117],0,[90,4],[[90,4],117],[[90,4],5],[[90,4],5],[[[30,[5]],[0,[33,66]],90],[[9,[[14,[5]]]]]],[90,[[14,[5]]]],[90,[[14,[5]]]],0,[[90,117]],0,[[[14,[5]]],117],[[117,117],[[15,[5]]]],[[118,[30,[5]],[15,[5]]],[[14,[5]]]],[[119,[30,[5]],[15,[5]]],[[14,[5]]]],[[[120,[[0,[66,33]]]],[30,[5]],[15,[5]]],[[14,[5]]]],[[118,[30,[5]],[94,[[15,[5]]]]],[[14,[5]]]],[[119,[30,[5]],[94,[[15,[5]]]]],[[14,[5]]]],[[[120,[[0,[66,33]]]],[30,[5]],[94,[[15,[5]]]]],[[14,[5]]]],[[90,4,4]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[117,[15,[5]]],117],[[117,[15,[5]]]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29,29],[[]],[[[14,[5]]],8],[[[30,[5]],[14,[5]]],8],[[[14,[5]],8],5],[[[30,[5]],[14,[5]],8],5],[[29,20],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[],8],[[],8],[[],8],[[],8],0,[[33,90,[14,[5]],8],29],[[[14,[5]],8],121],[[[14,[5]],8],122],[[[14,[5]],8],123],[[8,[14,[5]]],29],0,[[[14,[5]],8],29],[[[14,[5]]]],[[[14,[5]],8]],[[[14,[5]],8,5],9],[[[14,[5]],8,5],[[9,[29]]]],[[[30,[5]],[14,[5]],8],29],[[[30,[5]],[14,[5]]]],[[[30,[5]],[14,[5]],8]],[[[30,[5]],[14,[5]],8,5],9],[[[30,[5]],[14,[5]],8,5],[[9,[29]]]],[[]],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[29,[30,[5]]],29],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],32],[[],32],[[[121,[84]],5,10,[9,[[22,[9]]]]],62],[[[122,[84]],5,10,[9,[[22,[9]]]]],62],[[[123,[84]],5,10,[9,[[22,[9]]]]],62],[[85,85,[30,[5]],[15,[5]]]],[[85,85,[30,[5]]]],[[85,85,[30,[5]]]],[[85,16,[30,[5]]]],[[85,33,[30,[5]],[94,[[15,[5]]]]]],[[85,33,[34,[[15,[5]]]],[30,[5]]]],[[85,33,[30,[5]]]],[[85,86,[30,[5]]]],[[[14,[5]],[9,[[94,[[15,[5]]]]]],85,[30,[5]]]],[[16,86,[30,[5]]]],[[33,33,[30,[5]],[94,[[15,[5]]]]],5],[[86,85,[30,[5]]]],[[86,16,[30,[5]]]],0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,0,[[5,[30,[5]],[42,[5]],17],124],[[],125],[[2,57],[[126,[57]]]],[[[14,[5]],8],127],[[[14,[5]]],128],[[[14,[5]],57],[[129,[57]]]],[[7,5,57],[[130,[57]]]],0,0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[[125,[57]],10,[9,[[22,[9]]]],10,[9,[[22,[9]]]]],64],[[[126,[57]],10,[9,[[22,[9]]]]],63],[[[127,[[0,[93,105]]]],5,10,[9,[[22,[[9,[36]]]]]]],62],[[[128,[84]],10,[9,[[22,[9]]]]],63],[[[129,[57]],10,[9,[[22,[9]]]]],63],[[[130,[57]],10,[9,[[22,[9]]]]],63],[[[30,[5]]],125],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[132,[131]],[30,[5]]],2],[[83,[30,[5]]],2],[[98,[30,[5]]],2],[[85,[30,[5]]],2],[[87,[30,[5]]],2],[[133,[30,[5]]],2],[[16,[30,[5]]],2],[[86,[30,[5]]],2],[[134,[30,[5]]],2],[[135,[30,[5]]],2],[[136,[30,[5]]],2],[[[115,[114]],[30,[5]]],2],[137,[[34,[2]]]],[[],138],[[],139],[[[132,[46]],101]],[[101,101]],[86,5],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[72,[[9,[83]]]],[72,[[9,[83]]]],[72,[[9,[98]]]],[72,[[9,[98]]]],[[],[[9,[93]]]],[101,[[9,[93]]]],[137,[[9,[93]]]],[133,[[9,[93]]]],[72,[[9,[137]]]],[72,[[9,[137]]]],[72,[[9,[134]]]],[72,[[9,[134]]]],[72,[[9,[135]]]],[72,[[9,[135]]]],[72,[[9,[85]]]],[72,[[9,[85]]]],[72,[[9,[136]]]],[72,[[9,[136]]]],[72,[[9,[87]]]],[72,[[9,[87]]]],[72,[[9,[100]]]],[72,[[9,[100]]]],[[],9],[98,9],[85,9],[[[140,[134]]],9],[[[140,[136]]],9],[[[140,[86]]],9],[[[140,[135]]],9],[[[140,[85]]],9],[16,9],[86,9],[134,9],[135,9],[136,9],[72,[[9,[133]]]],[72,[[9,[133]]]],[141,72],[72,[[9,[142]]]],[72,[[9,[142]]]],[72,[[9,[143]]]],[72,[[9,[143]]]],[72,[[9,[144]]]],[72,[[9,[144]]]],[72,[[9,[145]]]],[72,[[9,[145]]]],[72,[[9,[146]]]],[72,[[9,[146]]]],[72,[[9,[16]]]],[72,[[9,[16]]]],[72,[[9,[72]]]],[72,[[9,[72]]]],[[],[[9,[33]]]],[83,[[9,[33]]]],[98,[[9,[33]]]],[85,[[9,[33]]]],[[[140,[85]]],[[9,[33]]]],[[[140,[136]]],[[9,[33]]]],[[[140,[86]]],[[9,[33]]]],[[[140,[135]]],[[9,[33]]]],[[[140,[134]]],[[9,[33]]]],[16,[[9,[33]]]],[86,[[9,[33]]]],[134,[[9,[33]]]],[135,[[9,[33]]]],[136,[[9,[33]]]],[72,[[9,[86]]]],[72,[[9,[86]]]],[72,[[9,[101]]]],[72,[[9,[101]]]],[[],147],[100,147],[101,147],[83,147],[98,147],[137,147],[85,147],[87,147],[133,147],[[[140,[136]]],147],[[[140,[135]]],147],[[[140,[86]]],147],[[[140,[134]]],147],[[[140,[85]]],147],[16,147],[86,147],[134,147],[135,147],[136,147],0,0,0,[5,141],[148,[[22,[5]]]],[149,[[9,[[22,[5]]]]]],[[150,[14,[5]]],[[9,[[22,[5]]]]]],[151,[[9,[[22,[5]]]]]],[[138,138],138],[[139,139],139],[[138,138]],[[139,139]],[[138,138],138],[[139,139],139],[[138,138]],[[139,139]],[138,152],[139,152],[[138,138],138],[[139,139],139],[[138,138]],[[139,139]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[132,[46]],[30,[5]]],3],[[101,[30,[5]]],3],[[83,[30,[5]]],3],[[98,[30,[5]]],3],[[85,[30,[5]]],3],[[87,[30,[5]]],3],[[133,[30,[5]]],3],[[16,[30,[5]]],3],[[86,[30,[5]]],3],[[134,[30,[5]]],3],[[135,[30,[5]]],3],[[136,[30,[5]]],3],[[[115,[114]],[30,[5]]],3],0,0,[[[132,[46]],4,5,5],[[153,[133]]]],[[101,4,5,5],[[153,[133]]]],[[[132,[46]],4,5,5],[[6,[[132,[46]]]]]],[[101,4,5,5],[[6,[101]]]],[[16,4,5,5],[[6,[16]]]],[98,[[30,[5]]]],[[[14,[5]],[14,[5]],5],141],[[5,5],141],[[5,5],141],[[5,5],141],[[101,7,5,8],[[9,[5]]]],[[83,7,5,8],[[9,[5]]]],[[137,7,5,8],[[9,[5]]]],[[85,7,5,8],[[9,[5]]]],[[133,7,5,8],[[9,[5]]]],[[101,7,5,8],[[9,[13]]]],[[83,7,5,8],[[9,[13]]]],[[98,7,5,8],[[9,[13]]]],[[137,7,5,8],[[9,[13]]]],[[85,7,5,8],[[9,[13]]]],[[87,7,5,8],[[9,[13]]]],[[133,7,5,8],[[9,[13]]]],[[[140,[33]],7,5,8],[[9,[13]]]],[[16,7,5,8],[[9,[13]]]],[[86,7,5,8],[[9,[13]]]],[[134,7,5,8],[[9,[13]]]],[[135,7,5,8],[[9,[13]]]],[[136,7,5,8],[[9,[13]]]],[[[115,[114]],7,5,8],[[9,[13]]]],[[],5],[100,5],[101,5],[83,5],[98,5],[137,5],[85,5],[87,5],[133,5],[[[140,[134]]],5],[[[140,[86]]],5],[[[140,[135]]],5],[[[140,[136]]],5],[[[140,[85]]],5],[16,5],[86,5],[134,5],[135,5],[136,5],[[],5],[100,5],[101,5],[83,5],[98,5],[137,5],[85,5],[87,5],[133,5],[[[140,[85]]],5],[[[140,[134]]],5],[[[140,[86]]],5],[[[140,[135]]],5],[[[140,[136]]],5],[16,5],[86,5],[134,5],[135,5],[136,5],[[[115,[114]],[154,[5]]],9],[[[115,[114]]],5],[[[115,[114]],4,4],138],[[[115,[114]]],5],[[[115,[114]]]],[[[115,[114]]]],[98,[[14,[5]]]],[86,[[14,[5]]]],[150,[[14,[5]]]],[135],[86],[[[132,[131]]],[[132,[131]]]],[83,83],[98,98],[137,137],[85,85],[87,87],[133,133],[[[140,[50]]],[[140,[50]]]],[16,16],[148,148],[155,155],[147,147],[86,86],[149,149],[156,156],[134,134],[135,135],[136,136],[138,138],[[[115,[114]]],[[115,[114]]]],[157,157],[150,150],[151,151],[158,158],[[[159,[131]]],[[159,[131]]]],[[[160,[131]]],[[160,[131]]]],[161,161],[162,162],[163,163],[[[164,[131]]],[[164,[131]]]],[139,139],[113,113],[104,104],[141,141],[[],[[26,[72]]]],[100,[[26,[72]]]],[101,[[26,[72]]]],[83,[[26,[72]]]],[98,[[26,[72]]]],[137,[[26,[72]]]],[85,[[26,[72]]]],[87,[[26,[72]]]],[133,[[26,[72]]]],[[[140,[135]]],[[26,[72]]]],[[[140,[85]]],[[26,[72]]]],[[[140,[136]]],[[26,[72]]]],[[[140,[134]]],[[26,[72]]]],[[[140,[86]]],[[26,[72]]]],[16,[[26,[72]]]],[86,[[26,[72]]]],[134,[[26,[72]]]],[135,[[26,[72]]]],[136,[[26,[72]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[115,[114]],[154,[5]]]],[[138,138],165],[[139,139],165],[138,138],[139,139],[17,141],[[[30,[5]]],2],[[100,[30,[5]]],2],[[101,[30,[5]]],2],[[83,[30,[5]]],2],[[98,[30,[5]]],2],[[137,[30,[5]]],2],[[85,[30,[5]]],2],[[87,[30,[5]]],2],[[133,[30,[5]]],2],[[[140,[134]],[30,[5]]],2],[[[140,[135]],[30,[5]]],2],[[[140,[85]],[30,[5]]],2],[[[140,[136]],[30,[5]]],2],[[[140,[86]],[30,[5]]],2],[[16,[30,[5]]],2],[[86,[30,[5]]],2],[[134,[30,[5]]],2],[[135,[30,[5]]],2],[[136,[30,[5]]],2],[[[30,[5]]],3],[[],2],[100,2],[101,2],[83,2],[98,2],[137,2],[85,2],[87,2],[133,2],[[[140,[134]]],2],[[[140,[135]]],2],[[[140,[86]]],2],[[[140,[85]]],2],[[[140,[136]]],2],[16,2],[86,2],[134,2],[135,2],[136,2],[[],3],[100,3],[101,3],[83,3],[98,3],[137,3],[85,3],[87,3],[133,3],[[[140,[85]]],3],[[[140,[135]]],3],[[[140,[86]]],3],[[[140,[134]]],3],[[[140,[136]]],3],[16,3],[86,3],[134,3],[135,3],[136,3],[[[30,[5]],[30,[5]]],2],[[5,5],141],[[[132,[131]]],[[9,[[160,[131]]]]]],[[[30,[5]],[30,[5]],[15,[5]],[15,[5]],157,157,5,[75,[[0,[77,78]]]],8]],[[138,138],8],[[139,139],8],[[[132,[131]],[14,[5]]],8],[[83,[14,[5]]],8],[[137,[14,[5]]],8],[[85,[14,[5]]],8],[[87,[14,[5]]],8],[[133,[14,[5]]],8],[[[115,[114]],[14,[5]]],8],[[86,[14,[5]]],8],[[[115,[114]],4,4,8,113],113],[[[34,[[14,[5]]]],[34,[[22,[36]]]]],141],[[[34,[[14,[5]]]],[34,[[22,[36]]]],166],141],[[[34,[[14,[5]]]]],[[9,[141]]]],[[[17,[[14,[5]]]],[34,[[22,[36]]]]],[[9,[141]]]],[[5,5,5],141],[[5,5],141],0,[[],86],[[],138],[[],157],[[],[[159,[[0,[77,131]]]]]],[[],[[164,[[0,[77,131]]]]]],[[],139],[[],113],[141,72],[[138,138],138],[[139,139],139],[16,[[9,[[94,[[15,[5]]]]]]]],[[83,[14,[5]],8],5],[[85,[14,[5]],8],5],[[87,[14,[5]],8],5],[[[26,[72]]],[[31,[[26,[72]],[26,[72]]]]]],[[[27,[72]]],[[31,[[27,[[0,[1,102,103,72]]]],[27,[72]]]]]],[72,[[9,[72]]]],[[[28,[72]]],[[31,[[28,[72]],[28,[72]]]]]],[72,[[9,[72]]]],[[150,36],16],[36,104],[36],[86,[[22,[16]]]],[135,[[34,[0]]]],[135,[[34,[36]]]],0,[86,[[22,[[15,[5]]]]]],0,[[],138],[[],139],[[83,83],8],[[85,85],8],[[87,87],8],[[16,16],8],[[148,148],8],[[155,155],8],[[86,86],8],[[156,156],8],[[134,134],8],[[135,135],8],[[136,136],8],[[138,138],8],[[158,158],8],[[139,139],8],[[113,113],8],[[104,104],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[138,23]],[[139,23]],[[86,[94,[[15,[5]]]]]],[133,[[17,[133]]]],[[150,4],86],[36,104],0,0,[36],[135,[[34,[0]]]],0,[135,[[34,[36]]]],[[85,113],[[9,[[94,[[15,[5]]]]]]]],[[16,113],[[9,[[94,[[15,[5]]]]]]]],[[86,113],[[9,[[94,[[15,[5]]]]]]]],[[135,113],[[9,[[94,[[15,[5]]]]]]]],[[113,[14,[5]]],[[9,[[94,[[15,[5]]]]]]]],[[83,113,[14,[5]]],[[9,[[94,[[15,[5]]]]]]]],[[85,113,[14,[5]]],[[9,[[94,[[15,[5]]]]]]]],[[16,113,[14,[5]]],[[9,[[94,[[15,[5]]]]]]]],[[86,113,[14,[5]]],[[9,[[94,[[15,[5]]]]]]]],[[135,113,[14,[5]]],[[9,[[94,[[15,[5]]]]]]]],0,[[[132,[131]]],139],[[[132,[46]]],[[34,[36]]]],[101,[[34,[36]]]],[133,[[34,[36]]]],[[83,20],21],[[98,20],21],[[85,20],21],[[87,20],21],[[[140,[56]],20],21],[[16,20],21],[[148,20],21],[[155,20],21],[[86,20],21],[[149,20],21],[[156,20],21],[[134,20],21],[[135,20],21],[[136,20],21],[[138,20],21],[[138,20],21],[[138,20],21],[[138,20],21],[[138,20],21],[[[115,[[0,[56,114]]]],20],21],[[157,20],21],[[150,20],21],[[151,20],21],[[158,20],21],[[158,20],21],[[[160,[[0,[56,131]]]],20],21],[[161,20],21],[[162,20],21],[[163,20],21],[[139,20],21],[[139,20],21],[[139,20],21],[[139,20],21],[[139,20],21],[[113,20],21],[[104,20],21],[[]],[[]],[85,101],[[[115,[114]]],101],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[22,[[14,[5]]]]],16],[[]],[[]],[[]],[[]],[[[22,[[14,[5]]]]],86],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,157],[[]],[86,157],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[113,104],[[]],[[]],[[[22,[[14,[5]]]]],16],[[[22,[[14,[5]]]]],86],[[[22,[[14,[5]]]]],150],[152,[[9,[138]]]],[152,[[9,[139]]]],[152,138],[152,139],[152,138],[152,139],[[[34,[[14,[5]]]]],[[9,[135]]]],[[[17,[[14,[5]]]],[34,[[22,[36]]]]],[[9,[135]]]],[167,[[9,[155]]]],[23,138],[23,139],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[168,[[9,[155]]]],0,0,0,0,0,[98,5],0,0,[[[94,[[15,[5]]]]],141],[[155,169]],[[138,169]],[[139,169]],[[113,169]],[[104,169]],[98,5],[[[170,[5]],[15,[5]]],141],[[[115,[114]]]],[[[132,[131]]]],[133,[[34,[[22,[36]]]]]],0,[[138,138]],[[139,139]],[[138,138],138],[[139,139],139],[[[132,[46]],[30,[5]],8,2,8,5],[[9,[[132,[46]]]]]],[[101,[30,[5]],8,2,8,5],[[9,[101]]]],[[[132,[46]],[30,[5]],8,85,[30,[5]],8,5],[[9,[[132,[46]]]]]],[[101,[30,[5]],8,85,[30,[5]],8,5],[[9,[101]]]],[[[132,[46]],8,85,[30,[5]],8,5],[[9,[[132,[46]]]]]],[[101,8,85,[30,[5]],8,5],[[9,[101]]]],[[[132,[46]],[24,[5]],5,5],[[153,[133]]]],[[101,[24,[5]],5,5],[[153,[133]]]],[[[132,[46]],[30,[5]],[24,[5]],5,5],[[153,[133]]]],[[101,[30,[5]],[24,[5]],5,5],[[153,[133]]]],[[138,138],8],[[139,139],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[72,8],[86,8],[[86,5],8],[138,8],[139,8],[[[132,[131]],113],8],[[],8],[83,8],[98,8],[85,8],[87,8],[[[140,[85]]],8],[[[140,[86]]],8],[[[140,[135]]],8],[[[140,[134]]],8],[[[140,[136]]],8],[16,8],[86,8],[134,8],[135,8],[136,8],[[],8],[[],8],[135,8],[104,8],[138,8],[139,8],[104,8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[149,8],[104,8],[104,8],[16,5],[[[132,[131]]],2],[83,2],[98,2],[137,2],[85,2],[87,2],[133,2],[16,2],[86,2],[134,2],[135,2],[136,2],[[[115,[114]]],2],[[[132,[46]]],3],[101,3],[83,3],[98,3],[137,3],[85,3],[87,3],[133,3],[16,3],[86,3],[134,3],[135,3],[136,3],[[[115,[114]]],3],[[[132,[46]],[24,[5]],5,5],[[6,[[132,[46]]]]]],[[101,[24,[5]],5,5],[[6,[101]]]],[[16,[24,[5]],5,5],[[6,[16]]]],[[16,[24,[5]],5,5]],[[85,[15,[5]]],16],[[86,[15,[5]]],16],[[[94,[[15,[5]]]],157]],[[85,[94,[[15,[5]]]],157]],[[16,[94,[[15,[5]]]],157]],[[86,[94,[[15,[5]]]],157]],[[134,[94,[[15,[5]]]],157]],[[135,[94,[[15,[5]]]],157]],[[136,[94,[[15,[5]]]],157]],[[[15,[5]]],[[14,[5]]]],[[83,[15,[5]]],[[14,[5]]]],[[98,[15,[5]]],[[14,[5]]]],[[85,[15,[5]]],[[14,[5]]]],[[[140,[33]],[15,[5]]],[[14,[5]]]],[[16,[15,[5]]],[[14,[5]]]],[[86,[15,[5]]],[[14,[5]]]],[[134,[15,[5]]],[[14,[5]]]],[[135,[15,[5]]],[[14,[5]]]],[[136,[15,[5]]],[[14,[5]]]],[[[94,[[15,[5]]]]],[[14,[5]]]],[[83,[94,[[15,[5]]]]],[[14,[5]]]],[[98,[94,[[15,[5]]]]],[[14,[5]]]],[[[140,[33]],[94,[[15,[5]]]]],[[14,[5]]]],[141,72],[[[115,[114]],2,57]],[[36,57]],[[101,36,57]],[[137,36,57]],[[133,36,57]],[57],[[93,36,57]],[[[132,[131]],36,57]],[[137,36,57]],[[133,36,57]],[57],[[93,36,57]],[[[132,[131]],36,57]],[[137,36,57]],[[133,36,57]],[5,35],[[100,5],35],[[101,5],35],[[83,5],35],[[98,5],35],[[137,5],35],[[85,5],35],[[87,5],35],[[133,5],35],[[[140,[136]],5],35],[[[140,[134]],5],35],[[[140,[86]],5],35],[[[140,[85]],5],35],[[[140,[135]],5],35],[[16,5],35],[[86,5],35],[[134,5],35],[[135,5],35],[[136,5],35],[[[115,[114]]],4],[[[170,[5]],[15,[5]]],100],[[[17,[[14,[5]]]],[17,[[22,[36]]]]],[[132,[46]]]],[[[17,[[14,[5]]]],[17,[[22,[36]]]]],101],[5,83],[[[14,[5]],[14,[5]],5],98],[17,137],[[[15,[5]]],85],[[[94,[[15,[5]]]]],87],[[[17,[[14,[5]]]],[9,[[17,[[22,[36]]]]]]],133],[[[14,[5]],[14,[5]]],16],[[[14,[5]],[14,[5]],[14,[5]]],86],[[5,5],134],[[5,5],136],[[[170,[5]],[15,[5]]],[[115,[46]]]],[[],157],[[[14,[5]],[14,[5]],[14,[5]],[14,[5]]],150],[72,141],[[5,5],98],[[5,5],98],[[5,5],98],[[[171,[114]],5],[[9,[86]]]],0,[16,[[9,[[94,[[15,[5]]]]]]]],[86,[[9,[[94,[[15,[5]]]]]]]],0,[138,138],[139,139],[[[115,[114]]],4],[[[115,[114]]]],[[[160,[131]]],4],[133,4],[[[132,[131]]],4],0,[[[172,[5]],[172,[5]],[172,[5]],5],156],[[138,138],[[9,[165]]]],[[139,139],[[9,[165]]]],[86,5],[[16,152],[[9,[[94,[[15,[5]]]]]]]],[[16,148],[[14,[5]]]],[135,[[34,[[14,[5]]]]]],[[[17,[[14,[5]]]],[9,[[17,[[22,[36]]]]]]],141],[[[132,[131]],[14,[5]],8],29],[[83,[14,[5]],8],29],[[98,[14,[5]],8],29],[[137,[14,[5]],8],29],[[85,[14,[5]],8],29],[[87,[14,[5]],8],29],[[133,[14,[5]],8],29],[[[140,[33]],[14,[5]],8],29],[[16,[14,[5]],8],29],[[86,[14,[5]],8],29],[[134,[14,[5]],8],29],[[135,[14,[5]],8],29],[[136,[14,[5]],8],29],[[[115,[114]],[14,[5]],8],29],[[150,[14,[5]],8],29],[[[132,[131]],[14,[5]]]],[[83,[14,[5]]]],[[98,[14,[5]]]],[[137,[14,[5]]]],[[85,[14,[5]]]],[[87,[14,[5]]]],[[133,[14,[5]]]],[[[140,[33]],[14,[5]]]],[[16,[14,[5]]]],[[86,[14,[5]]]],[[134,[14,[5]]]],[[135,[14,[5]]]],[[136,[14,[5]]]],[[[115,[114]],[14,[5]]]],[[150,[14,[5]]]],[[[132,[131]],[14,[5]],8]],[[133,[14,[5]],8]],[[16,[14,[5]],8]],[[86,[14,[5]],8]],[[[115,[114]],[14,[5]],8]],[[150,[14,[5]],8]],[[[132,[131]],[14,[5]],8,5],9],[[133,[14,[5]],152]],[[[132,[131]],[14,[5]],8,5],[[9,[29]]]],[[[115,[114]],[14,[5]],8,5],[[9,[29]]]],[[[132,[131]]],[[9,[[159,[131]]]]]],[[],[[44,[36]]]],[[[132,[131]]],[[47,[36]]]],[101,[[44,[36]]]],[137,[[44,[36]]]],[137,[[44,[36]]]],[133,[[44,[36]]]],0,0,0,0,0,[[138,138]],[[139,139]],[[[132,[46]]]],[101],[133],[86],[[[115,[114]]],2],[98,[[40,[5]]]],[[5,5,5],141],[[[34,[[14,[5]]]],[34,[[22,[36]]]],5],141],[[[34,[[14,[5]]]],[34,[[22,[36]]]],166,5],141],[[[34,[[14,[5]]]],5],[[9,[141]]]],[[[17,[[14,[5]]]],[34,[[22,[36]]]],5],[[9,[141]]]],[[5,5,5,5],141],[[5,5,5],141],[[[14,[5]],[14,[5]],[14,[5]],5],141],[[151,151],8],[[[115,[114]]],[[15,[5]]]],[[[132,[46]],[15,[5]]],[[132,[46]]]],[[101,[15,[5]]],101],[[83,[15,[5]],36],[[9,[[173,[83,135]]]]]],[[98,[15,[5]],36],[[9,[[173,[98,135]]]]]],[[85,[15,[5]]],85],[[87,[15,[5]]],[[9,[87]]]],[[133,[15,[5]]],133],[[16,[15,[5]]],16],[[86,[15,[5]]],86],[[134,[15,[5]],36],[[9,[[173,[134,135]]]]]],[[135,[15,[5]]],[[9,[135]]]],[[136,[15,[5]],36],[[9,[[173,[136,135]]]]]],[[[115,[114]],[15,[5]]],[[115,[114]]]],[16,[[15,[5]]]],[86,[[15,[5]]]],[[16,152],[[15,[5]]]],[[133,36],16],[[[14,[5]],[14,[5]]],141],0,[[133,36,113],113],[133,174],[[138,138,8]],[[139,139,8]],[[[115,[114]],4,4,138]],[[[132,[46]],139],[[31,[158]]]],[[101,139],[[31,[158]]]],[[[115,[114]],[15,[5]]]],[[],155],[100,155],[101,155],[83,155],[98,155],[137,155],[85,155],[87,155],[133,155],[[[140,[134]]],155],[[[140,[136]]],155],[[[140,[135]]],155],[[[140,[85]]],155],[[[140,[86]]],155],[16,155],[86,155],[134,155],[135,155],[136,155],[137,34],[150,5],[[[115,[114]],175],5],[[[115,[114]],175],5],[[[132,[46]],[30,[5]],[24,[5]],5,5],[[6,[[132,[46]]]]]],[[101,[30,[5]],[24,[5]],5,5],[[6,[101]]]],[[138,138],138],[[139,139],139],[[138,138]],[[139,139]],[[85,[15,[5]]],157],[[86,[15,[5]]],157],[[85,[15,[5]]],157],[[135,[94,[[15,[5]]]]],113],[[[30,[5]],[15,[5]]],[[14,[5]]]],[[83,[30,[5]],[15,[5]]],[[14,[5]]]],[[[30,[5]],[94,[[15,[5]]]]],[[14,[5]]]],[[83,[30,[5]],[94,[[15,[5]]]]],[[14,[5]]]],[16],[[138,138],138],[[139,139],139],[[145,36,36]],[[142,36,36]],[[144,36]],[[143,36]],[[83,36]],[[98,36]],[85],[[[140,[136]],36,36]],[[[140,[85]],36]],[[[140,[134]],36,36]],[[[140,[135]],36]],[[134,36]],[[136,36]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],82],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[83,36,36]],[[98,36,36]],[85],[[134,36]],[135],[[136,36]],[[[115,[114]]]],[[138,138]],[[139,139]],[[[132,[131]]],[[9,[[164,[131]]]]]],[[98,[30,[5]]],98],[[157,[30,[5]]]],[[[132,[46]],[30,[5]]]],[[101,[30,[5]]]],[98,[[30,[5]]]],[[16,[30,[5]]],16],[[86,[30,[5]]],86],[[[132,[131]],36],86],[[[14,[5]],[14,[5]],[14,[5]]],141],[[[115,[114]],36],[[9,[86]]]],[[[115,[114]],36],[[9,[[22,[36]]]]]],[[[132,[46]]],174],[101,174],[[[115,[114]]],39],[[[115,[114]],[154,[5]]],[[171,[114]]]],[[[115,[114]],4,4]],[[[115,[114]],4,4]],[[[17,[[14,[5]]]],[17,[[22,[36]]]]],141],[[[17,[[14,[5]]]],[17,[[22,[36]]]],139],141],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],0,[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],47],[93,47],[[[132,[131]]],[[47,[36]]]],[137,[[44,[36]]]],[133,[[44,[36]]]],[[[115,[114]],[154,[5]]]],[[[115,[114]],2]],[[138,138],138],[[139,139],139],[[[115,[114]]],5],[[[115,[114]]],5],[104,113],[113,36],[113,36],[113,36],[36,104],0,[[[132,[131]]]],[133,[[34,[[14,[5]]]]]],[86,[[22,[[14,[5]]]]]],[135,[[34,[0]]]],0,0,[135,[[34,[36]]]],0,0,[150,5],[[[17,[[14,[5]]]],[17,[[22,[36]]]],139],[[132,[46]]]],[[[17,[[14,[5]]]],[17,[[22,[36]]]],139],101],[[[115,[114]],4],5],[[[115,[114]],4],5],0,0,0,0,0,0,0,[[],1],[[],1],[[]],[[]],[[[34,[[154,[5]]]],[34,[[22,[36]]]]]],[[[34,[[154,[5]]]]]],[[[34,[[172,[5]]]],[34,[[172,[5]]]],57]],[[[34,[[172,[5]]]],[34,[[172,[5]]]],[17,[[172,[5]]]]]],[[176,176],8],[[176,20],21],[[176,20],21],[[]],[[]],[[[30,[5]],101,8,[30,[5]],101,8],[[31,[[9,[101]],0]]]],[[]],[[[26,[25]]],[[26,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[],8],[[],82],[[],9],[[]],[[[34,[[154,[5]]]]],[[31,[176]]]],[[],31],[[],31],[[],32],0,0,0,[[8,8,[34,[[177,[36]]]],36,[17,[[14,[5]]]],[17,[[22,[36]]]]]],[[[14,[5]],[14,[5]],[14,[5]],36,[17,[[14,[5]]]]]],[[[14,[5]],36,36,36,[17,[[14,[5]]]],[17,[[22,[36]]]]]],[[36,[177,[36]],36,[17,[[22,[36]]]]]],[[5,36,5,5,[17,[[14,[5]]]]]],[[[17,[[22,[36]]]],[177,[36]]]],[[36,36,36,[17,[[22,[36]]]]]],[[36,36,36,[17,[[22,[36]]]]]],[[36,36,[17,[[22,[36]]]]]],[[[17,[[22,[36]]]],[177,[36]]]],[[36,36,36,[17,[[22,[36]]]]]],[[36,36,36,36,[17,[[22,[36]]]]]],[[36,36,36,[17,[[22,[36]]]]]],[[[34,[[22,[36]]]]]],[[[17,[[14,[5]]]],[15,[5]]],[[17,[[14,[5]]]]]],[[[34,[[14,[5]]]],[30,[5]]]],[[[17,[[14,[5]]]],[30,[5]]],[[17,[[14,[5]]]]]],0,0,0,[[],1],[[],1],[[],1],[[],1],0,[[]],[[]],[[]],[[]],[166,166],[[]],[[178,36],17],[[178,[34,[[14,[5]]]],[34,[[22,[36]]]]],17],[[178,[34,[[14,[5]]]],[34,[[22,[36]]]]],[[17,[[17,[[14,[5]]]]]]]],0,0,0,[[166,[34,[[14,[5]]]],[34,[[22,[36]]]],8],178],[[],166],[[166,166],8],0,[[166,20],21],[[]],[[]],[[]],[[]],[[166,179],178],[[]],[[]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[],8],[[],8],0,0,0,[[]],[[],9],[[],9],[[]],[[]],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[178,[[34,[179]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[180,180],[181,181],[182,182],[[]],[[]],[[]],[179],[[179,36]],[[179,[34,[[14,[5]]]],[34,[[22,[36]]]]]],[[179,[34,[[14,[5]]]],[34,[[22,[36]]]]],[[17,[[14,[5]]]]]],[179,5],0,[[],180],[[181,181],8],[[182,182],8],[[],8],[[],8],[[],8],[[],8],[[180,20],21],[[181,20],21],[[182,20],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[183,179],[[]],[[]],[[]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[],8],[[],8],[[],8],[[],8],[[],8],0,[179,4],[179,[[14,[36]]]],[179,[[14,[36]]]],[[],179],0,[183,[[22,[36]]]],[183,5],0,[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[179,36,8]],[[183,182]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],32],[[],32],[[],32],[[183,36,36,36],182],[179,5],[[[34,[[14,[5]]]],[34,[[22,[36]]]],36,181,8],179],[[[34,[[14,[5]]]],[34,[[22,[36]]]],36,181,8],183],[179,[[34,[180]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[15,15],[[[185,[[184,[[184,[[184,[184]]]]]]]],[185,[[184,[[184,[[184,[184]]]]]]]]]],[[[185,[[0,[[184,[[0,[[184,[[0,[[184,[[0,[184,78]]]],78]]]],78]]]],78]]]],[0,[[184,[[0,[[184,[[0,[[184,[[0,[[184,[[0,[184,78]]]],78]]]],78]]]],78]]]],78]]]],[[[187,[[0,[186,78]]]],[187,[[0,[186,78]]]]],[[187,[[0,[186,78]]]]]],[[[188,[[184,[[184,[[184,[184]]]]]]]],[188,[[184,[[184,[[184,[184]]]]]]]]]],[[[185,[[0,[78,[184,[[0,[78,[184,[[0,[78,[184,[[0,[78,184]]]]]]]]]]]]]]]],[185,[[0,[78,[184,[[0,[78,[184,[[0,[78,[184,[[0,[78,184]]]]]]]]]]]]]]]]]],[[[187,[[0,[186,78]]]],[0,[186,78]]],[[187,[[0,[186,78]]]]]],[[[188,[[0,[186,78]]]],[0,[186,78]]],[[188,[[0,[186,78]]]]]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],[[34,[152]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[189,190],[[[22,[[14,[5]]]]],[[9,[[94,[[15,[5]]]]]]]],[[[34,[[14,[5]]]]],[[14,[5]]]],[[[34,[[14,[5]]]]]],[46,46],[[[191,[50]]],[[191,[50]]]],[[[185,[50]]],[[185,[50]]]],[[[187,[50]]],[[187,[50]]]],[[[188,[50]]],[[188,[50]]]],[[[193,[[0,[50,192]]]]],[[193,[[0,[50,192]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[193,[[0,[194,192]]]],[193,[[0,[194,192]]]]],165],[[[185,[[192,[[192,[[192,[192]]]]]]]],[192,[[192,[[192,[[192,[192]]]]]]]]],8],[[[185,[[0,[195,78]]]]],[[185,[[0,[195,78]]]]]],[[[34,[[14,[5]]]]],[[42,[5]]]],[[],46],[[[193,[192]]]],[[[0,[186,78]]],[[187,[[0,[186,78]]]]]],[[[0,[186,78]]],[[188,[[0,[186,78]]]]]],[[[185,[[0,[195,78,[196,[[0,[195,78,[196,[[0,[195,78,[196,[[0,[195,78,196]]]]]]]]]]]]]]]],[185,[[0,[195,78,[196,[[0,[195,78,[196,[[0,[195,78,[196,[[0,[195,78,196]]]]]]]]]]]]]]]]]],[[[185,[192]],192],[[185,[192]]]],[[46,46],8],[[[191,[55]],[191,[55]]],8],[[[185,[55]],[185,[55]]],8],[[[187,[55]],[187,[55]]],8],[[[188,[55]],[188,[55]]],8],[[[193,[[0,[55,192]]]],[193,[[0,[55,192]]]]],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[]],[185,185],[185,185],[[[197,[[0,[195,78]]]],[185,[[0,[195,78]]]],[0,[195,78]],[0,[195,78]],4],[[17,[[185,[[0,[195,78]]]]]]]],[[[197,[[0,[195,78]]]],[185,[[0,[195,78]]]],[0,[195,78]],[0,[195,78]],4,[17,[[185,[[0,[195,78]]]]]],17]],[[46,20],21],[[[191,[56]],20],21],[[[185,[56]],20],21],[[[187,[56]],20],21],[[[188,[56]],20],21],[[[193,[[0,[56,192]]]],20],21],[[]],[[]],[[]],[[]],[[]],[[]],[[[22,[[188,[5]]]]],[[188,[[198,[[22,[5]]]]]]]],[[]],[[]],[[[199,[[0,[186,78]]]]],[[187,[[0,[186,78]]]]]],[[[38,[[0,[186,78]]]]],[[188,[[0,[186,78]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[4,4]],[4,9],[4,9],[[[191,[200]],169]],[[[185,[201]],169]],[[[193,[[0,[201,192]]]],169]],0,[[[185,[[0,[192,202]]]],[185,[[0,[192,202]]]]],[[9,[[185,[[0,[192,202]]]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[187,[[0,[186,78]]]]],[[199,[[0,[186,78]]]]]],[[[30,[5]]],[[30,[5]]]],[[[14,[5]]],[[14,[5]]]],[[[94,[[15,[5]]]]],[[94,[[15,[5]]]]]],[[[15,[5]]],[[15,[5]]]],[[[187,[[0,[186,78]]]]],[[187,[[0,[186,78]]]]]],[[[188,[[0,[186,78]]]]],[[188,[[0,[186,78]]]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[[185,[[0,[203,[184,[[0,[203,[184,[[0,[203,[184,[[0,[203,184]]]]]]]]]]]]]]]]],8],[[[188,[[0,[186,78]]]]],8],[[],4],0,0,0,0,0,0,0,0,0,[[[34,[5]]],5],[[[185,[[0,[195,78]]]]],[[0,[195,78]]]],[[[185,[[0,[78,192,203,[204,[[0,[78,192,203,[204,[[0,[78,192,203,[204,[[0,[78,192,203,204]]]]]]]]]]]]]]]],[185,[[0,[78,192,203,[204,[[0,[78,192,203,[204,[[0,[78,192,203,[204,[[0,[78,192,203,204]]]]]]]]]]]]]]]]]],[[[185,[[0,[78,192,203,[204,[[0,[78,192,203,[204,[[0,[78,192,203,[204,[[0,[78,192,203,204]]]]]]]]]]]]]]]],[0,[78,192,203,[204,[[0,[78,192,203,[204,[[0,[78,192,203,[204,[[0,[78,192,203,[204,[[0,[78,192,203,204]]]]]]]]]]]]]]]]]]]],[[[187,[[0,[186,78]]]],[205,[[0,[186,78]]]]]],[[[187,[5]],5]],[[[188,[5]],5]],[[[188,[[0,[186,78]]]],[206,[[0,[186,78]]]]]],[[[188,[[0,[186,78]]]],[38,[[0,[186,78]]]]]],[[[188,[[0,[186,78]]]],[207,[[0,[186,78]]]]]],[[[185,[[0,[78,192,203,[204,[[0,[78,192,203,[204,[[0,[78,192,203,[204,[[0,[78,192,203,204]]]]]]]]]]]]]]]],[185,[[0,[78,192,203,[204,[[0,[78,192,203,[204,[[0,[78,192,203,[204,[[0,[78,192,203,204]]]]]]]]]]]]]]]]]],[[],4],[[[185,[208]]]],[[],189],[[],191],[[[0,[186,78]],[0,[186,78]],[0,[186,78]]],[[187,[[0,[186,78]]]]]],[[[0,[186,78]],[0,[186,78]],[0,[186,78]],[0,[186,78]],[0,[186,78]],[0,[186,78]]],[[188,[[0,[186,78]]]]]],[[192,192],[[193,[192]]]],[[],4],[[[34,[[14,[5]]]]]],[[],[[185,[[0,[209,[204,[[0,[209,[204,[[0,[209,[204,[[0,[209,204]]]]]]]]]]]]]]]]]],[[[193,[[0,[192,192]]]],[193,[[0,[192,192]]]]],[[9,[165]]]],[[[15,[5]],[34,[[14,[5]]]]],[[14,[5]]]],[[[15,[5]],[34,[[14,[5]]]]],4],[[[172,[5]],[34,[[172,[5]]]]],8],[[[30,[5]]],[[30,[5]]]],[[[188,[[0,[186,78]]]],[38,[[0,[186,78]]]]],[[188,[[0,[186,78]]]]]],[[[188,[[0,[186,78]]]],[207,[[0,[186,78]]]]],[[187,[[0,[186,78]]]]]],[[[17,[[14,[5]]]],[34,[[22,[36]]]]]],[[[172,[5]],[172,[5]],[172,[5]],[172,[5]],5],[[9,[210]]]],[[4,4]],[[[185,[[0,[195,78]]]]],[[185,[[0,[195,78]]]]]],[[[185,[[0,[195,78]]]]]],[[192,192],[[185,[192]]]],[50,[[185,[50]]]],[[[185,[[0,[195,78]]]]],[[22,[[185,[[0,[195,78]]]]]]]],[[[185,[[0,[[211,[[0,[[211,[[0,[[211,[[0,[211,78]]]],78]]]],78]]]],78]]]],[0,[[211,[[0,[[211,[[0,[[211,[[0,[[211,[[0,[211,78]]]],78]]]],78]]]],78]]]],78]]]],[[[185,[[0,[[211,[[0,[[211,[[0,[[211,[[0,[211,78]]]],78]]]],78]]]],78]]]],[185,[[0,[[211,[[0,[[211,[[0,[[211,[[0,[211,78]]]],78]]]],78]]]],78]]]]]],[[[185,[[0,[78,[211,[[0,[78,[211,[[0,[78,[211,[[0,[78,211]]]]]]]]]]]]]]]],[185,[[0,[78,[211,[[0,[78,[211,[[0,[78,[211,[[0,[78,211]]]]]]]]]]]]]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[14,[5]]],[[14,[5]]]],[[[94,[[15,[5]]]]],[[94,[[15,[5]]]]]],[[[15,[5]]],[[15,[5]]]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[191],[[[185,[[211,[[211,[[211,[211]]]]]]]]]],[[],[[185,[[0,[203,[184,[[0,[203,[184,[[0,[203,[184,[[0,[203,184]]]]]]]]]]]]]]]]]],[[],[[187,[[0,[186,78]]]]]],[[],[[188,[[0,[186,78]]]]]],0,0,0,0,0,0,0,0,0,0,0,[[212,213],212],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[],214],[214,168],[[[212,[56,56]],20],[[31,[215]]]],[[]],[[]],[[]],[[]],[212,216],[[]],[[]],[[[26,[25]]],[[26,[1,25]]]],[[[26,[25]]],[[26,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[27,[25]]],[[27,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[[28,[25]]],[[28,[1,25]]]],[[],8],[[],8],[212],[[[212,[77]]],77],[212],[[212,213]],[[212,213]],[[],9],[[],9],[[]],[[]],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[214,[34,[152]]]],[[214,217]],[[214,36]],[[214,168]],[[214,152]],[[214,4]]],"c":[296,883],"p":[[8,"Any"],[3,"Aabb"],[3,"BoundingSphere"],[15,"usize"],[6,"Real"],[4,"SplitResult"],[3,"Ray"],[15,"bool"],[4,"Option"],[3,"SimdAabb"],[3,"SimdRay"],[6,"SimdReal"],[3,"RayIntersection"],[6,"Point"],[6,"Vector"],[3,"Segment"],[3,"Vec"],[6,"SimdBool"],[3,"ArrayVec"],[3,"Formatter"],[6,"Result"],[15,"array"],[8,"IntoIterator"],[6,"UnitVector"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[3,"PointProjection"],[6,"Isometry"],[4,"Result"],[3,"TypeId"],[8,"SupportMap"],[15,"slice"],[3,"MassProperties"],[15,"u32"],[6,"AngVector"],[6,"Matrix3"],[8,"Iterator"],[6,"Rotation"],[6,"AngularInertia"],[6,"Matrix"],[8,"IndexedData"],[6,"Qbvh"],[8,"QbvhDataGenerator"],[3,"DefaultStorage"],[3,"GenericQbvh"],[3,"NodeIndex"],[3,"QbvhNode"],[8,"Clone"],[3,"QbvhProxy"],[8,"QbvhStorage"],[3,"QbvhUpdateWorkspace"],[3,"CenterDataSplitter"],[8,"PartialEq"],[8,"Debug"],[8,"FnMut"],[8,"Fn"],[8,"SimdBestFirstVisitor"],[8,"SimdSimultaneousVisitor"],[8,"SimdVisitor"],[4,"SimdBestFirstVisitStatus"],[4,"SimdVisitStatus"],[4,"SimdSimultaneousVisitStatus"],[4,"TypedWorkspaceData"],[8,"Sized"],[8,"QueryDispatcher"],[3,"QueryDispatcherChain"],[3,"DefaultQueryDispatcher"],[3,"Unsupported"],[8,"WorkspaceData"],[8,"Shape"],[4,"ClosestPoints"],[3,"Contact"],[3,"ContactManifold"],[8,"PersistentQueryDispatcher"],[8,"Default"],[8,"Copy"],[3,"ContactManifoldsWorkspace"],[3,"NonlinearRigidMotion"],[3,"TOI"],[3,"String"],[3,"Ball"],[8,"TypedSimdCompositeShape"],[3,"Cuboid"],[3,"Triangle"],[3,"HalfSpace"],[6,"Point"],[6,"SVector"],[3,"VoronoiSimplex"],[4,"GJKResult"],[3,"CompositeShapeAgainstShapeClosestPointsVisitor"],[8,"SimdCompositeShape"],[3,"Unit"],[3,"TrackedContact"],[4,"NonlinearTOIMode"],[4,"TOIStatus"],[3,"Capsule"],[8,"PolygonalFeatureMap"],[6,"HeightField"],[6,"TriMesh"],[8,"Send"],[8,"Sync"],[3,"PackedFeatureId"],[8,"PointQuery"],[3,"CompositeShapeAgainstAnyDistanceVisitor"],[3,"IntersectionCompositeShapeShapeVisitor"],[3,"IntersectionCompositeShapeShapeBestFirstVisitor"],[3,"NonlinearTOICompositeShapeShapeBestFirstVisitor"],[3,"RayCompositeShapeToiBestFirstVisitor"],[3,"RayCompositeShapeToiAndNormalBestFirstVisitor"],[3,"TOICompositeShapeShapeBestFirstVisitor"],[4,"FeatureId"],[8,"HeightFieldStorage"],[3,"GenericHeightField"],[3,"EPA"],[3,"CSOPoint"],[3,"ConstantPoint"],[3,"ConstantOrigin"],[3,"DilatedShape"],[3,"PointCompositeShapeProjBestFirstVisitor"],[3,"PointCompositeShapeProjWithLocationBestFirstVisitor"],[3,"PointCompositeShapeProjWithFeatureBestFirstVisitor"],[3,"AabbSetsInterferencesCollector"],[3,"BoundingVolumeIntersectionsSimultaneousVisitor"],[3,"BoundingVolumeIntersectionsVisitor"],[3,"CompositeClosestPointVisitor"],[3,"CompositePointContainmentTest"],[3,"PointIntersectionsVisitor"],[3,"RayIntersectionsVisitor"],[8,"TriMeshStorage"],[3,"GenericTriMesh"],[3,"Polyline"],[3,"Cone"],[3,"ConvexPolyhedron"],[3,"Cylinder"],[3,"Compound"],[3,"HeightFieldCellStatus"],[3,"TriMeshFlags"],[3,"RoundShape"],[3,"SharedShape"],[6,"RoundCone"],[6,"RoundConvexPolyhedron"],[6,"RoundCuboid"],[6,"RoundCylinder"],[6,"RoundTriangle"],[4,"TypedShape"],[4,"SegmentPointLocation"],[4,"TrianglePointLocation"],[3,"Tetrahedron"],[4,"TetrahedronPointLocation"],[15,"u8"],[4,"IntersectResult"],[6,"Point3"],[4,"ShapeType"],[4,"TriangleOrientation"],[3,"PolygonalFeature"],[4,"TopologyError"],[3,"TriMeshPseudoNormals"],[3,"TriMeshConnectedComponents"],[3,"TopoVertex"],[3,"TopoFace"],[3,"TopoHalfEdge"],[3,"TriMeshTopology"],[4,"Ordering"],[3,"VHACDParameters"],[15,"i64"],[15,"u64"],[8,"Hasher"],[6,"DMatrix"],[3,"HeightFieldRadialTriangles"],[6,"Point2"],[4,"Either"],[8,"ExactSizeIterator"],[15,"isize"],[4,"ConvexHullError"],[3,"Range"],[3,"VHACD"],[3,"VoxelSet"],[3,"Voxel"],[4,"FillMode"],[4,"VoxelValue"],[3,"VoxelizedVolume"],[8,"Add"],[3,"Interval"],[8,"SimdRealField"],[3,"SdpMatrix2"],[3,"SdpMatrix3"],[3,"DeterministicState"],[3,"DefaultHasher"],[3,"HashablePartialEq"],[8,"PartialOrd"],[3,"SortedPair"],[8,"Ord"],[8,"RealField"],[8,"Div"],[8,"IntervalFunction"],[8,"From"],[6,"Matrix2"],[8,"AsBytes"],[8,"Hash"],[8,"SimdPartialOrd"],[8,"Zero"],[8,"Mul"],[6,"Vector2"],[6,"Vector3"],[6,"Matrix3x2"],[8,"Neg"],[8,"One"],[4,"SegmentsIntersection"],[8,"Sub"],[4,"Entry"],[8,"FnOnce"],[3,"FxHasher32"],[3,"Error"],[3,"OccupiedEntry"],[15,"u16"],[8,"BoundingVolume"],[3,"QbvhNonOverlappingDataSplitter"],[13,"MaybeContinue"],[8,"RayCast"],[13,"DirectionalTOI"],[8,"PointQueryWithLocation"],[13,"BadAdjascentTrianglesOrientation"],[13,"FloodFill"],[8,"Array2"],[8,"IsometryOps"],[8,"Array1"],[8,"IsometryOpt"],[13,"Segment"],[13,"Point"]]},\
"paste":{"doc":"github crates-io docs-rs","t":"O","n":["paste"],"q":[[0,"paste"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"powerfmt":{"doc":"<code>powerfmt</code> is a library that provides utilities for …","t":"AAADLLLLLLLLLLLLLLLLLLLLLLLLIKDDQILLLLLLLLLLLLLLLLLLLLLKLLLOLLLLLLLLLLLLLLLLLLLLLL","n":["buf","ext","smart_display","WriteBuffer","as_ref","as_ref","as_str","borrow","borrow","borrow_mut","cmp","default","deref","eq","fmt","fmt","fmt","from","hash","into","metadata","new","partial_cmp","remaining_capacity","try_from","try_into","type_id","write_str","FormatterExt","pad_with_width","FormatterOptions","Metadata","Metadata","SmartDisplay","align","alternate","borrow","borrow","borrow_mut","borrow_mut","clone","clone","default","deref","fill","fmt","fmt","fmt","fmt_with_metadata","from","from","from","from","into","into","metadata","new","padded_width","padded_width_of","padded_width_of","precision","reuse","sign_aware_zero_pad","sign_minus","sign_plus","try_from","try_from","try_into","try_into","type_id","type_id","unpadded_width","unpadded_width_of","width","with_align","with_alternate","with_fill","with_precision","with_sign_aware_zero_pad","with_sign_minus","with_sign_plus","with_width"],"q":[[0,"powerfmt"],[3,"powerfmt::buf"],[28,"powerfmt::ext"],[30,"powerfmt::smart_display"]],"d":["A buffer for constructing a string while avoiding heap …","Extension traits.","Definition of <code>SmartDisplay</code> and its related items.","A buffer for construct a string while avoiding heap …","","","Obtain the contents of the buffer as a string.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Creates an empty buffer.","","Determine how many bytes are remaining in the buffer.","","","","","An extension trait for <code>core::fmt::Formatter</code>.","Writes the given arguments to the formatter, padding them …","Configuration for formatting.","Information used to format a value. This is returned by …","User-provided metadata type.","Format trait that allows authors to provide additional …","Flag indicating what form of alignment was requested.","Determines if the <code>#</code> flag was specified.","","","","","","","","","Character used as ‘fill’ whenever there is alignment.","","Format the value using the given formatter. This is the …","","Format the value using the given formatter and metadata. …","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Compute any information needed to format the value. This …","Creates a new <code>Metadata</code> with the given width and metadata. …","Obtain the width of the value after padding.","Obtain the width of the value after padding, given the …","Compute the width of multiple items while optionally …","Optionally specified precision for numeric types. …","Reuse the metadata for another type. This is useful when …","Determines if the <code>0</code> flag was specified.","Determines if the <code>-</code> flag was specified.","Determines if the <code>+</code> flag was specified.","","","","","","","Obtain the width of the value before padding.","Obtain the width of the value before padding, given the …","Optionally specified integer width that the output should …","Set the flag indicating what form of alignment is …","Set whether the <code>#</code> flag is specified.","Sets the fill character to use whenever there is alignment.","Set the optional precision for numeric types. …","Set whether the <code>0</code> flag is specified.","Set whether the <code>-</code> flag is specified.","Set whether the <code>+</code> flag is specified.","Set the optional integer width that the output should be."],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,21,0,0,18,0,10,10,11,10,11,10,11,10,10,11,10,11,18,10,18,11,10,10,10,11,10,18,11,11,11,0,10,11,10,10,10,11,10,11,10,11,10,11,11,10,10,10,10,10,10,10,10,10],"f":[0,0,0,0,[1,2],[1,[[4,[3]]]],[1,2],[1,2],[[]],[[]],[[1,1],5],[[],1],[1],[[1,1],6],[[1,7],8],[[1,7],8],[[1,7],8],[[]],[[1,9]],[[]],[[1,10],[[11,[1]]]],[[],1],[[1,1],[[12,[5]]]],[1,13],[[],14],[[],14],[[],15],[[1,2],8],0,[[13,16],8],0,0,0,0,[10,[[12,[17]]]],[10,6],[[]],[[]],[[]],[[]],[[[11,[18]]],[[11,[18]]]],[10,10],[[],10],[[[11,[[0,[18,19]]]]]],[10,20],[[[11,[18]],7],8],[7,8],[[10,7],8],[[7,11],8],[[]],[[]],[7,10],[7,10],[[]],[[]],[10,11],[[13,[0,[18,19]]],[[11,[[0,[18,19]]]]]],[[[11,[[0,[18,19]]]],10],13],[[18,10],13],0,[10,[[12,[13]]]],[[[11,[[0,[18,19]]]]],[[11,[[0,[18,19]]]]]],[10,6],[10,6],[10,6],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[[11,[[0,[18,19]]]]],13],[[18,10],13],[10,[[12,[13]]]],[[10,[12,[17]]],10],[[10,6],10],[[10,20],10],[[10,[12,[13]]],10],[[10,6],10],[[10,6],10],[[10,6],10],[[10,[12,[13]]],10]],"c":[],"p":[[3,"WriteBuffer"],[15,"str"],[15,"u8"],[15,"slice"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[3,"FormatterOptions"],[3,"Metadata"],[4,"Option"],[15,"usize"],[4,"Result"],[3,"TypeId"],[3,"Arguments"],[4,"Alignment"],[8,"SmartDisplay"],[8,"Sized"],[15,"char"],[8,"FormatterExt"]]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":"NNNEDNDNNDDNNNDNEDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDCLLLLLLLLLLLLLL","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":[[0,"proc_macro2"],[231,"proc_macro2::extra"],[246,"proc_macro2::token_stream"]],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[11,10,10,0,0,8,0,8,11,0,0,8,10,10,0,8,0,0,0,0,1,22,7,6,8,9,10,1,11,12,5,22,7,6,8,9,10,1,11,12,5,5,6,5,7,6,8,9,10,1,11,12,5,7,6,8,9,10,1,11,12,5,12,7,9,9,10,11,12,12,10,11,12,7,7,0,5,5,5,5,22,22,7,7,6,8,8,9,9,10,1,1,11,12,12,5,5,22,7,7,7,6,6,8,8,8,8,8,9,10,1,11,12,5,7,7,7,5,12,5,5,5,5,5,5,5,5,5,5,22,7,6,8,9,10,1,11,12,5,7,7,5,5,6,6,6,7,9,1,12,12,12,6,8,9,1,12,5,6,1,22,8,9,1,12,5,9,9,9,5,5,7,6,8,9,10,1,11,12,5,22,7,8,9,1,12,5,0,22,7,6,8,9,10,1,11,12,5,22,7,6,8,9,10,1,11,12,5,22,7,6,8,9,10,1,11,12,5,5,5,5,5,5,5,5,5,5,5,6,5,5,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[3]]],5],[[],6],[2,5],[7,7],[6,6],[8,8],[9,9],[10,10],[1,1],[11,11],[12,12],[5,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[12,12],13],[[],7],[9,14],[9,10],[[10,10],15],[[11,11],15],[[12,[0,[16,[18,[17]]]]],15],[[12,12],15],[[],15],[[],15],[[],15],[[7,19]],[[7,19]],0,[20,5],[20,5],[21,5],[21,5],[[22,23],24],[[22,23],24],[[7,23],24],[[7,23],24],[[6,23],24],[[8,23],24],[[8,23],24],[[9,23],24],[[9,23],24],[[10,23],24],[[1,23],24],[[1,23],24],[[11,23],24],[[12,23],24],[[12,23],24],[[5,23],24],[[5,23],24],[[]],[8,7],[25,7],[[]],[26,6],[[]],[12,8],[[]],[9,8],[5,8],[1,8],[[]],[[]],[[]],[[]],[[]],[[]],[19,7],[19,7],[17,[[27,[7,22]]]],[17,[[27,[5,22]]]],[[12,28]],[29,5],[29,5],[30,5],[30,5],[31,5],[31,5],[32,5],[32,5],[33,5],[33,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,34],[7,15],[35,5],[35,5],[[6,6],[[36,[6]]]],[[6,6],6],[[],6],[[],7],[[10,7],9],[[2,11],1],[[17,6],12],[[17,6],12],[[12,12],[[36,[13]]]],[[6,6],6],[[8,6]],[[9,6]],[[1,6]],[[12,6]],[[5,6]],[6,[[36,[37]]]],[1,11],[22,6],[8,6],[9,6],[1,6],[12,6],[5,6],[9,6],[9,6],[9,7],[17,5],[[5,[39,[38]]],[[36,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],0,[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[41,5],[41,5],[42,5],[42,5],[43,5],[43,5],[44,5],[44,5],[3,5],[3,5],[6,26],[38,5],[38,5],0,[[]],[[]],[14,14],[[]],[14,6],[[14,23],24],[[]],[[]],[14,6],[14,6],[[]],[[],27],[[],27],[[],40],0,0,[[]],[[]],[34,34],[[]],[[34,23],24],[[]],[[]],[[]],[34,[[36,[8]]]],[34],[[]],[[],27],[[],27],[[],40]],"c":[],"p":[[3,"Punct"],[15,"char"],[15,"u8"],[15,"slice"],[3,"Literal"],[3,"Span"],[3,"TokenStream"],[4,"TokenTree"],[3,"Group"],[4,"Delimiter"],[4,"Spacing"],[3,"Ident"],[4,"Ordering"],[3,"DelimSpan"],[15,"bool"],[8,"Sized"],[15,"str"],[8,"AsRef"],[8,"IntoIterator"],[15,"f32"],[15,"f64"],[3,"LexError"],[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[4,"Result"],[8,"Hasher"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter"],[15,"isize"],[4,"Option"],[3,"String"],[15,"usize"],[8,"RangeBounds"],[3,"TypeId"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"]]},\
"quote":{"doc":"github crates-io docs-rs","t":"IIIKKKKKOLLOOLLLLK","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":[[0,"quote"]],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,11,11,11,11,12,0,4,4,0,0,12,12,4,4,4],"f":[0,0,0,[[[2,[1]]]],[3],[[3,4]],[[3,4]],[5,6],0,[7,8],[7,8],0,0,[[],[[10,[9]]]],[[],[[10,[9]]]],[[],8],[[],8],[8]],"c":[],"p":[[4,"TokenTree"],[8,"Into"],[8,"IntoIterator"],[8,"ToTokens"],[3,"Formatter"],[6,"Result"],[8,"Sized"],[3,"TokenStream"],[3,"Span"],[4,"Option"],[8,"TokenStreamExt"],[8,"IdentFragment"]]},\
"rapier3d":{"doc":"Rapier","t":"RAABAAAABBAAANDDEDDDNDDLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLMLMMMLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLMMLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMLLMMMMMMLMLMMMMMLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLMLMLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLMMLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMMMMMLLLLLLMLMLLLMLLLLLLLLLLMLLLMMMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLMMLLLMLLLMCDCALLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSSNNNNNDGDSESNNNSNSSSSNDDNDDDDDDDDEEDDNNSSSSSSDSNDNNNEDDDDDDNSDDSSSSDDDDEDDDDDDDDDDDDEDDDSDDSSSSSNSNSNSLLLLLLLLLLLLLLMLLLLLMLLMMMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLMLMLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLMLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMMLLLLLLLLLMLLLLLLLLLLMLLMMMLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMLLLMMLLLLLLLLLLMLLLLLMMMMLMMMMMMMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMMLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLMMLMLMLLLLLLLLLLMLLLSGDNQQQQQQQQQNNGNNDESSSGNNNDDDDEDGDEDDDDDGEEDDNNGNNGDDGDDDNNNGNNNNGNNSSSSSSNNNNNSNNSNESSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSDDDSDNNGNNDDIQDDDSSSSSSNNSDSNNNNNNNNNNSSSDQQGDIDNNQQSSGGGGNNGNNGNNGNNDGNNSSGNNENIEDDINDDNQNIGSGDEDDDEDGNNDDDIDGNNEEEISNNSMLLLLLLLLMMLLMMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMMMLLMMLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLMLMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMLLLLLLLLLLLLLLLLLLLMMLKLKLLLLLMLKLLLKLLLLKLLLLLLKLLLLLLLLLLLLLLMLMMLMLLLLLLLLLLLLLLLLLLLLLMLMMLLLLLLLLLLLLLMLLLLLLLLMLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLMLMLLLLLLLLLLLMMMLLMMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLKLLLLLLLLLLLLLLLLMMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLMMMLMLLLMMLMMLLLLLLLLLMMMRGGGGRRGGGGGRGGGGGGRRRGGGGGGRGGGLLDDSSDDDNSSSSSISSSSSSDIDDDDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLMLLLLLLMMMMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMGGBOOQIQIIIIKKKLKK","n":["VERSION","control","counters","crossbeam","data","dynamics","geometry","math","na","parry","pipeline","prelude","utils","Absolute","CharacterAutostep","CharacterCollision","CharacterLength","DynamicRayCastVehicleController","EffectiveCharacterMovement","KinematicCharacterController","Relative","Wheel","WheelTuning","add_wheel","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","autostep","axle","axle_cs","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brake","center","character_pos","chassis","chassis_connection_point_cs","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","current_vehicle_speed","damping_compression","damping_relaxation","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","direction_cs","drop","drop","drop","drop","drop","drop","drop","drop","engine_force","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","forward_impulse","friction_slip","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","grounded","handle","include_dynamic_bodies","index_forward_axis","index_up_axis","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","map_absolute","map_relative","max_height","max_slope_climb_angle","max_suspension_force","max_suspension_force","max_suspension_travel","max_suspension_travel","min_slope_slide_angle","min_width","move_shape","new","offset","radius","rotation","side_impulse","slide","snap_to_ground","solve_character_collision_impulses","steering","suspension","suspension_compression","suspension_damping","suspension_rest_length","suspension_stiffness","suspension_stiffness","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","toi","translation","translation_applied","translation_remaining","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","up","update_vehicle","wheel_suspension_force","wheels","wheels_mut","CCDCounters","CollisionDetectionCounters","Counters","SolverCounters","StagesCounters","Timer","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","assembly_completed","assembly_started","assembly_time","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broad_phase_completed","broad_phase_started","broad_phase_time","broad_phase_time","broad_phase_time","ccd","ccd_completed","ccd_started","ccd_time","ccd_time","cd","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collision_detection_completed","collision_detection_started","collision_detection_time","collision_detection_time","custom","custom_completed","custom_started","custom_time","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","disable","drop","drop","drop","drop","drop","drop","enable","enabled","enabled","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","init","init","init","init","init","init","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","island_construction_completed","island_construction_started","island_construction_time","island_construction_time","narrow_phase_completed","narrow_phase_started","narrow_phase_time","narrow_phase_time","narrow_phase_time","nconstraints","ncontact_pairs","ncontacts","new","new","new","new","new","new","num_substeps","pause","position_assembly_time","position_resolution_completed","position_resolution_started","position_resolution_time","position_resolution_time","reset","reset","reset","reset","reset","reset","resume","set_nconstraints","set_ncontact_pairs","set_ncontacts","solver","solver_completed","solver_started","solver_time","solver_time","solver_time","stages","start","step_completed","step_started","step_time","step_time","time","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","toi_computation_time","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update_completed","update_started","update_time","update_time","velocity_assembly_time","velocity_resolution_completed","velocity_resolution_started","velocity_resolution_time","velocity_resolution_time","velocity_update_completed","velocity_update_started","velocity_update_time","velocity_update_time","Arena","Coarena","Index","arena","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","ensure_element_exist","ensure_pair_exists","fmt","from","from_subset","get","get_mut","get_unknown_gen","init","insert","into","into_any","into_any_arc","into_any_rc","is_in_subset","iter","new","pubsub","remove","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","Arena","Drain","Index","IntoIter","Iter","IterMut","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","contains","default","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drain","drop","drop","drop","drop","drop","drop","eq","equivalent","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","for_each","from","from","from","from","from","from","from_iter","from_raw_parts","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","get","get2_mut","get_mut","get_unknown_gen","get_unknown_gen_mut","hash","index","index","index_mut","init","init","init","init","init","init","insert","insert_with","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_raw_parts","is_empty","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","iter","iter_mut","len","len","len","len","new","next","next","next","next","next_back","next_back","next_back","partial_cmp","remove","reserve","retain","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_insert_with","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","PubSub","Subscription","ack","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","from","from","from_subset","from_subset","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","new","publish","read","read_ith","subscribe","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","ANG_AXES","ANG_X","ANG_Y","ANG_Z","AccelerationBased","AngX","AngY","AngZ","Average","BodyPair","BodyStatus","CCDSolver","COLLIDERS","CoefficientCombineRule","DOMINANCE","Disabled","DisabledByAttachedBody","Dynamic","ENABLED_OR_DISABLED","Enabled","FREE_FIXED_AXES","FREE_PRISMATIC_AXES","FREE_REVOLUTE_AXES","FREE_SPHERICAL_AXES","Fixed","FixedJoint","FixedJointBuilder","ForceBased","GenericJoint","GenericJointBuilder","ImpulseJoint","ImpulseJointHandle","ImpulseJointSet","IntegrationParameters","IslandManager","JointAxesMask","JointAxis","JointEnabled","JointLimits","JointMotor","KinematicPositionBased","KinematicVelocityBased","LIN_AXES","LOCAL_MASS_PROPERTIES","LOCKED_FIXED_AXES","LOCKED_PRISMATIC_AXES","LOCKED_REVOLUTE_AXES","LOCKED_SPHERICAL_AXES","LockedAxes","MODIFIED","Mass","MassProperties","MassProps","Max","Min","MotorModel","Multibody","MultibodyIndex","MultibodyJoint","MultibodyJointHandle","MultibodyJointSet","MultibodyLink","Multiply","POSITION","PrismaticJoint","PrismaticJointBuilder","ROTATION_LOCKED","ROTATION_LOCKED_X","ROTATION_LOCKED_Y","ROTATION_LOCKED_Z","RevoluteJoint","RevoluteJointBuilder","RigidBody","RigidBodyActivation","RigidBodyAdditionalMassProps","RigidBodyBuilder","RigidBodyCcd","RigidBodyChanges","RigidBodyColliders","RigidBodyDamping","RigidBodyDominance","RigidBodyForces","RigidBodyHandle","RigidBodyIds","RigidBodyMassProps","RigidBodyPosition","RigidBodySet","RigidBodyType","RigidBodyVelocity","RopeJoint","RopeJointBuilder","SLEEP","SphericalJoint","SphericalJointBuilder","TRANSLATION_LOCKED","TRANSLATION_LOCKED_X","TRANSLATION_LOCKED_Y","TRANSLATION_LOCKED_Z","TYPE","X","X","Y","Y","Z","Z","abs_diff_eq","activation","activation_mut","active","active_dynamic_bodies","active_kinematic_bodies","add","add","add_assign","add_assign","add_collider","add_force","add_force_at_point","add_torque","additional_local_mprops","additional_mass","additional_mass_properties","all","all","all","allowed_linear_error","angular_damping","angular_damping","angular_damping","angular_damping","angular_threshold","angvel","angvel","angvel","angvel","apply_damping","apply_displacement","apply_displacements","apply_force_at_point","apply_impulse","apply_impulse","apply_impulse_at_point","apply_impulse_at_point","apply_torque_impulse","apply_torque_impulse","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_fixed","as_fixed_mut","as_mut_slice","as_prismatic","as_prismatic_mut","as_revolute","as_revolute_mut","as_rope","as_rope_mut","as_slice","as_spherical","as_spherical_mut","as_vector","as_vector_mut","attach_collider","attached_bodies","attached_enabled_joints","attached_joints","attached_joints","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bodies_attached_with_enabled_joint","body1","body1","body2","body2","body_to_parent","body_type","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","build","build","can_sleep","can_sleep","cannot_sleep","ccd_active","ccd_enabled","ccd_enabled","ccd_enabled","ccd_max_dist","ccd_thickness","center_of_mass","cfm_factor","clamp_motions","cleanup_removed_rigid_bodies","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","colliders","combine_coefficients","complement","complement","complement","compute_effective_force_and_torque","contacts_enabled","contacts_enabled","contacts_enabled","contacts_enabled","contacts_enabled","contacts_enabled","contacts_enabled","contacts_enabled","contacts_enabled","contacts_enabled","contacts_enabled","contacts_enabled","contacts_enabled","contains","contains","contains","contains","contains","coupled_axes","coupled_axes","damping","damping","damping_mut","damping_ratio","data","data","data","data","data","data","data","data","data","data","data","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_angular_threshold","default_damping","default_epsilon","default_linear_threshold","default_max_relative","default_time_until_sleep","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","detach_collider","difference","difference","difference","dominance_group","dominance_group","dominance_group","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dt","dynamic","effective_angular_inertia","effective_dominance_group","effective_group","effective_inv_mass","effective_mass","effective_world_inv_inertia_sqrt","empty","empty","empty","enable_ccd","enabled","enabled","enabled","enabled_rotations","enabled_translations","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","erp","erp_inv_dt","extend","extend","extend","find_first_impact","fixed","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force","forward_kinematics","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ball","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_capsule","from_compound","from_cone","from_convex_polyhedron","from_cuboid","from_cylinder","from_iter","from_iter","from_iter","from_raw_parts","from_raw_parts","from_raw_parts","from_slice","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_trimesh","generalized_acceleration","generalized_velocity","generalized_velocity_mut","get","get","get","get_multibody","get_multibody_mut_internal","get_mut","get_mut","get_mut","get_mut_internal","get_unknown_gen","get_unknown_gen","get_unknown_gen","get_unknown_gen_mut","get_unknown_gen_mut","gravitational_potential_energy","gravity_scale","gravity_scale","gravity_scale","gravity_scale","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","impulse","impulse","impulses","inactive","index","index","index","index","index","index_mut","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","insert","insert","insert","insert","insert","insert","integrate","integrate","integrate","integrate_forces_and_velocities","interleave_restitution_and_friction_resolution","interpolate_velocity","intersection","intersection","intersection","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_raw_parts","into_raw_parts","into_raw_parts","inv_augmented_mass","inv_dt","inv_mass","inv_principal_inertia_sqrt","invalid","invalid","invalid","is_active","is_all","is_all","is_all","is_ccd_active","is_ccd_enabled","is_dynamic","is_dynamic","is_empty","is_empty","is_empty","is_empty","is_empty","is_enabled","is_enabled","is_fixed","is_fixed","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_kinematic","is_kinematic","is_moving","is_moving_fast","is_root","is_rotation_locked","is_sleeping","is_translation_locked","is_zero","is_zero","iter","iter","iter","iter_mut","iter_mut","jacobian","jacobian_mul_coordinates","joint","joint","joint_between","joint_cfm_coeff","joint_damping_ratio","joint_erp","joint_erp_inv_dt","joint_graph","joints_between","kinematic_position_based","kinematic_velocity_based","kinetic_energy","kinetic_energy","len","len","limit_axes","limits","limits","limits","limits","limits","limits","limits","limits","limits","limits","limits","linear_damping","linear_damping","linear_damping","linear_damping","linear_threshold","link","link_id","link_mut","links","links_mut","linvel","linvel","linvel","linvel","local_anchor1","local_anchor1","local_anchor1","local_anchor1","local_anchor1","local_anchor1","local_anchor1","local_anchor1","local_anchor1","local_anchor1","local_anchor1","local_anchor1","local_anchor2","local_anchor2","local_anchor2","local_anchor2","local_anchor2","local_anchor2","local_anchor2","local_anchor2","local_anchor2","local_anchor2","local_anchor2","local_anchor2","local_axis1","local_axis1","local_axis1","local_axis1","local_axis1","local_axis1","local_axis2","local_axis2","local_axis2","local_axis2","local_axis2","local_axis2","local_com","local_frame1","local_frame1","local_frame1","local_frame1","local_frame2","local_frame2","local_frame2","local_frame2","local_mprops","local_to_parent","local_to_world","lock_axes","lock_rotations","lock_rotations","lock_translations","lock_translations","locked_axes","locked_axes","locked_axes","locked_axes","map_attached_joints_mut","mass","mass","mass","mass_properties","max","max_ccd_substeps","max_force","max_penetration_correction","max_point_velocity","max_stabilization_iterations","max_velocity_friction_iterations","max_velocity_iterations","min","min_ccd_dt","min_island_size","model","motor","motor","motor","motor","motor","motor","motor","motor_axes","motor_max_force","motor_max_force","motor_max_force","motor_max_force","motor_max_force","motor_model","motor_model","motor_model","motor_model","motor_model","motor_model","motor_position","motor_position","motor_position","motor_position","motor_position","motor_velocity","motor_velocity","motor_velocity","motor_velocity","motor_velocity","motors","mul","multibodies","ndofs","ndofs","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_kinematic_position_based","new_kinematic_velocity_based","new_static","next_position","next_position","not","not","not","num_links","num_velocity_constraints","parent_id","partial_cmp","partial_cmp","partial_cmp","partial_cmp","position","position","position","position","predict_impacts_at_next_positions","predict_position_using_velocity_and_forces","prediction_distance","principal_inertia","principal_inertia_local_frame","propagate_modified_body_positions_to_colliders","pseudo_kinetic_energy","recompute_mass_properties_from_colliders","recompute_mass_properties_from_colliders","reconstruct_inertia_matrix","reconstruct_inverse_inertia_matrix","relative_eq","remove","remove","remove","remove","remove","remove","remove_joints_attached_to_rigid_body","remove_joints_attached_to_rigid_body","remove_multibody_articulations","reset_forces","reset_torques","restrict_rotations","restrict_rotations","restrict_translations","restrict_translations","rigid_body_handle","rigid_body_link","root","root_mut","rotation","rotation","set","set","set","set_additional_mass","set_additional_mass_properties","set_angular_damping","set_angvel","set_body_type","set_contacts_enabled","set_contacts_enabled","set_contacts_enabled","set_contacts_enabled","set_contacts_enabled","set_contacts_enabled","set_dominance_group","set_dt","set_enabled","set_enabled","set_enabled_rotations","set_enabled_translations","set_gravity_scale","set_inv_dt","set_limits","set_limits","set_limits","set_limits","set_limits","set_linear_damping","set_linvel","set_local_anchor1","set_local_anchor1","set_local_anchor1","set_local_anchor1","set_local_anchor1","set_local_anchor1","set_local_anchor2","set_local_anchor2","set_local_anchor2","set_local_anchor2","set_local_anchor2","set_local_anchor2","set_local_axis1","set_local_axis1","set_local_axis1","set_local_axis2","set_local_axis2","set_local_axis2","set_local_frame1","set_local_frame1","set_local_frame2","set_local_frame2","set_locked_axes","set_mass","set_motor","set_motor","set_motor","set_motor","set_motor","set_motor","set_motor","set_motor","set_motor_max_force","set_motor_max_force","set_motor_max_force","set_motor_max_force","set_motor_max_force","set_motor_model","set_motor_model","set_motor_model","set_motor_model","set_motor_model","set_motor_position","set_motor_position","set_motor_position","set_motor_position","set_motor_position","set_motor_velocity","set_motor_velocity","set_motor_velocity","set_motor_velocity","set_motor_velocity","set_next_kinematic_position","set_next_kinematic_rotation","set_next_kinematic_translation","set_position","set_rotation","set_translation","sleep","sleep","sleeping","sleeping","sleeping","stiffness","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","symmetric_difference","symmetric_difference","symmetric_difference","target_pos","target_vel","time_since_can_sleep","time_until_sleep","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","toggle","toggle","toggle","torque","transform_by","transformed","translation","translation","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","unit_joint_limit_constraint","unit_joint_motor_constraint","update_ccd_active_flags","update_positions","update_world_mass_properties","user_data","user_data","user_data","user_force","user_force","user_torque","user_torque","velocity_at_point","velocity_at_point","velocity_constraints","wake_up","wake_up","wake_up","with_inertia_matrix","with_principal_inertia_frame","with_query_dispatcher","world_com","world_com","world_inv_inertia_sqrt","zero","zero","ALL","Aabb","ActiveCollisionTypes","AddPair","ArrayIdx","ArrayPoint","ArrayTopoFace","ArrayTopoHalfEdge","ArrayTopoVertex","ArrayU32","ArrayUsize","ArrayVector","ArrayVectorTriple","BadAdjascentTrianglesOrientation","BadTriangle","Ball","Ball","Ball","BroadPhase","BroadPhasePairEvent","CELL_REMOVED","COMPUTE_IMPULSES","CONNECTED_COMPONENTS","Capsule","Capsule","Capsule","Clockwise","Collider","ColliderBroadPhaseData","ColliderBuilder","ColliderChanges","ColliderEnabled","ColliderFlags","ColliderGraphIndex","ColliderHandle","ColliderMassProps","ColliderMaterial","ColliderPair","ColliderParent","ColliderPosition","ColliderSet","ColliderShape","ColliderType","CollisionEvent","CollisionEventFlags","Compound","Compound","Compound","Cone","Cone","Cone","Contact","ContactData","ContactForceEvent","ContactManifold","ContactManifoldData","ContactPair","ConvexPolyhedron","ConvexPolyhedron","ConvexPolyhedron","CounterClockwise","Cuboid","Cuboid","Cuboid","Custom","Custom","Cylinder","Cylinder","Cylinder","DELETE_BAD_TOPOLOGY_TRIANGLES","DELETE_DEGENERATE_TRIANGLES","DELETE_DUPLICATE_TRIANGLES","DYNAMIC_DYNAMIC","DYNAMIC_FIXED","DYNAMIC_KINEMATIC","Degenerate","DeletePair","Density","Disabled","DisabledByParent","ENABLED_OR_DISABLED","Edge","Enabled","FIXED_FIXED","Face","FeatureId","GROUPS","GROUP_1","GROUP_10","GROUP_11","GROUP_12","GROUP_13","GROUP_14","GROUP_15","GROUP_16","GROUP_17","GROUP_18","GROUP_19","GROUP_2","GROUP_20","GROUP_21","GROUP_22","GROUP_23","GROUP_24","GROUP_25","GROUP_26","GROUP_27","GROUP_28","GROUP_29","GROUP_3","GROUP_30","GROUP_31","GROUP_32","GROUP_4","GROUP_5","GROUP_6","GROUP_7","GROUP_8","GROUP_9","GenericHeightField","GenericTriMesh","Group","HALF_EDGE_TOPOLOGY","HalfSpace","HalfSpace","HalfSpace","HeightField","HeightField","HeightField","HeightFieldCellStatus","HeightFieldRadialTriangles","HeightFieldStorage","Heights","InteractionGraph","InteractionGroups","IntersectionPair","KINEMATIC_FIXED","KINEMATIC_KINEMATIC","LEFT_TRIANGLE_REMOVED","LOCAL_MASS_PROPERTIES","MERGE_DUPLICATE_VERTICES","MODIFIED","Mass","MassProperties","NONE","NarrowPhase","ORIENTED","OnEdge","OnEdge","OnEdge","OnFace","OnFace","OnSolid","OnSolid","OnVertex","OnVertex","OnVertex","PARENT","PARENT_EFFECTIVE_DOMINANCE","POSITION","PackedFeatureId","PartId","PartShape","PointProjection","PolygonalFeature","PolygonalFeatureMap","Polyline","Polyline","Polyline","QbvhStorage","QbvhStorage","REMOVED","RIGHT_TRIANGLE_REMOVED","Ray","RayIntersection","RigidBodyGraphIndex","RoundCone","RoundCone","RoundCone","RoundConvexPolyhedron","RoundConvexPolyhedron","RoundConvexPolyhedron","RoundCuboid","RoundCuboid","RoundCuboid","RoundCylinder","RoundCylinder","RoundCylinder","RoundShape","RoundTriangle","RoundTriangle","RoundTriangle","SENSOR","SHAPE","Segment","Segment","Segment","SegmentPointLocation","Sensor","Shape","ShapeType","SharedShape","SharedShape","SimdCompositeShape","Solid","SolverContact","SolverFlags","Started","Status","Stopped","SupportMap","TOI","TYPE","TemporaryInteractionIndex","Tetrahedron","TetrahedronPointLocation","TopoFace","TopoHalfEdge","TopoVertex","TopologyError","TrackedContact","TriMesh","TriMesh","TriMesh","TriMeshConnectedComponents","TriMeshFlags","TriMeshPseudoNormals","TriMeshStorage","TriMeshTopology","Triangle","Triangle","Triangle","TriangleOrientation","TrianglePointLocation","TypedShape","TypedSimdCompositeShape","UNKNOWN","Unknown","Vertex","ZIGZAG_SUBDIVISION","a","aabb","aabb","aabb","aabb","aabb","aabbs","active_collision_types","active_collision_types","active_collision_types","active_collision_types","active_events","active_events","active_events","active_events","active_hooks","active_hooks","active_hooks","active_hooks","all","all","all","all","all","all","all","all","append","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_ball","as_ball_mut","as_capsule","as_capsule_mut","as_composite_shape","as_composite_shape","as_composite_shape","as_composite_shape","as_compound","as_compound_mut","as_cone","as_cone_mut","as_convex_polyhedron","as_convex_polyhedron_mut","as_cuboid","as_cuboid_mut","as_cylinder","as_cylinder_mut","as_halfspace","as_halfspace_mut","as_heightfield","as_heightfield_mut","as_mut","as_polygonal_feature_map","as_polygonal_feature_map","as_polygonal_feature_map","as_polygonal_feature_map","as_polygonal_feature_map","as_polygonal_feature_map","as_polygonal_feature_map","as_polyline","as_polyline_mut","as_ref","as_ref","as_round_cone","as_round_cone_mut","as_round_convex_polyhedron","as_round_convex_polyhedron_mut","as_round_cuboid","as_round_cuboid_mut","as_round_cylinder","as_round_cylinder_mut","as_round_triangle","as_round_triangle_mut","as_segment","as_segment_mut","as_shape","as_shape_mut","as_support_map","as_support_map","as_support_map","as_support_map","as_support_map","as_support_map","as_support_map","as_triangle","as_triangle_mut","as_trimesh","as_trimesh_mut","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","as_typed_shape","b","ball","ball","barycentric_coordinates","barycentric_coordinates","barycentric_coordinates","barycentric_coordinates","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","border_radius","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounding_sphere","bounding_sphere","bounding_sphere","bounding_sphere","bounding_sphere","build","c","canonical_intersection_with_plane","canonical_split","capsule","capsule_x","capsule_x","capsule_y","capsule_y","capsule_z","capsule_z","cast_local_ray","cast_local_ray","cast_local_ray","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","cast_local_ray_and_get_normal","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_angular_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","ccd_thickness","cell_at_point","cell_height","cell_status","cell_width","cells_statuses","cells_statuses_mut","center","check_geometry","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_box","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","closest_cell_at_point","cmp","cmp","cmp","cmp","cmp","cmp","cmp","collider1","collider1","collider1","collider1","collider2","collider2","collider2","collider2","collision_groups","collision_groups","collision_groups","collision_groups","complement","complement","complement","complement","complement","complement","complement","compound","compound","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_aabb","compute_bounding_sphere","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_aabb","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_local_bounding_sphere","compute_swept_aabb","compute_swept_aabb","cone","cone","connected_components","contact_force_event_threshold","contact_force_event_threshold","contact_force_event_threshold","contact_graph","contact_pair","contact_pair_at_index","contact_pair_unknown_gen","contact_pairs","contacts","contacts_with","contacts_with_unknown_gen","contains","contains","contains","contains","contains","contains","contains","contains","contains_local_point","contains_local_point","contains_local_point","contains_local_point","contains_local_point","convert_triangle_feature_id","convex_decomposition","convex_decomposition","convex_decomposition_with_params","convex_decomposition_with_params","convex_hull","convex_hull","convex_mesh","convex_mesh","copy_geometry_from","cuboid","cuboid","cylinder","cylinder","d","data","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_density","default_friction","delta","density","density","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","difference","difference","difference","difference","difference","difference","difference","dist","dist","distance_to_local_point","downcast","downcast_arc","downcast_mut","downcast_rc","downcast_ref","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","edge","edge","edge_ids","edges","edges_adj_to_face","edges_pseudo_normal","eids","empty","empty","empty","empty","empty","empty","empty","enabled","enabled","enabled","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","extend","extend","extend","extend","extend","extract_connected_components","face","face","face","face_colors","face_ids","faces","faces","faces_adj_to_vertex","feature_normal","feature_normal_at_point","feature_normal_at_point","fid","fid1","fid2","filter","find_deepest_contact","flags","flat_indices","flat_indices","flipped","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","friction","friction","friction","friction","friction","friction_combine_rule","friction_combine_rule","friction_combine_rule","friction_combine_rule","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_contact_pair","from_convex_hull","from_convex_mesh","from_i64","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_raw_parts","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_u64","get","get_mut","get_unknown_gen","get_unknown_gen_mut","grouped_faces","half_edge","half_edge","half_edges","halfspace","halfspace","handle","handle_user_changes","has_any_active_contact","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","heightfield","heightfield","heights","identity","impulse","index","index","index","index_interaction","index_mut","indices","indices","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inner_shape","insert","insert","insert","insert","insert","insert","insert","insert","insert_with_parent","interaction_pair","interaction_pair_mut","interactions","interactions_with","interactions_with_endpoints","interactions_with_mut","intersecting","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersection_graph","intersection_pair","intersection_pair_unknown_gen","intersection_pairs","intersection_with_aabb","intersection_with_cuboid","intersection_with_local_cuboid","intersection_with_local_plane","intersection_with_plane","intersections_with","intersections_with_unknown_gen","intersects","intersects","intersects","intersects","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_raw_parts","invalid","invalid_handle","is","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_backface","is_bouncy","is_convex","is_convex","is_convex","is_convex","is_convex","is_convex","is_convex","is_convex","is_convex_polyhedron","is_convex_polyhedron","is_edge","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_enabled","is_face","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_new","is_on_face","is_sensor","is_sensor","is_sensor","is_unknown","is_vertex","iter","iter_enabled","iter_enabled_mut","iter_mut","len","local_aabb","local_aabb","local_aabb","local_aabb","local_aabb","local_aabb","local_bounding_sphere","local_bounding_sphere","local_bounding_sphere","local_bounding_sphere","local_bounding_sphere","local_bounding_sphere","local_p1","local_p2","local_split","local_support_feature","local_support_feature","local_support_point","local_support_point","local_support_point","local_support_point_toward","local_support_point_toward","make_mut","manifolds","map_elements_in_local_aabb","map_part_at","map_part_at","map_part_at","map_part_at","map_typed_part_at","map_typed_part_at","map_typed_part_at","map_typed_part_at","map_typed_part_at","map_untyped_part_at","map_untyped_part_at","map_untyped_part_at","map_untyped_part_at","map_untyped_part_at","mass","mass","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","mass_properties","material","max_force_direction","max_force_magnitude","max_impulse","memberships","ncols","needs_broad_phase_update","needs_narrow_phase_update","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next","next","none","normal","normal","not","not","not","not","not","not","not","nrows","num_active_contacts","num_cells_ij","num_connected_components","num_segments","num_triangles","num_vertices","parent","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","point","points","polyline","polyline","pos_wrt_parent","position","position","position","position_wrt_parent","position_wrt_parent","project_local_point","project_local_point","project_local_point","project_local_point","project_local_point","project_local_point","project_local_point","project_local_point","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_feature","project_local_point_and_get_location","project_local_point_and_get_location","project_local_point_and_get_location","project_local_point_and_get_location","project_local_point_and_get_location_with_max_dist","project_local_point_assuming_solid_interior_ccw","project_local_point_with_max_dist","project_local_point_with_max_dist","pseudo_normals","qbvh","qbvh","qbvh","qbvh","qbvh","qbvh","query_dispatcher","ranges","raw_graph","relative_dominance","remove","remove","remove","remove","remove","remove","remove","remove","removed","restitution","restitution","restitution","restitution","restitution","restitution_combine_rule","restitution_combine_rule","restitution_combine_rule","restitution_combine_rule","reverse","reverse","rigid_body1","rigid_body2","root_aabb","rotation","rotation","round_cone","round_cone","round_convex_decomposition","round_convex_decomposition","round_convex_decomposition_with_params","round_convex_decomposition_with_params","round_convex_hull","round_convex_hull","round_convex_mesh","round_convex_mesh","round_cuboid","round_cuboid","round_cylinder","round_cylinder","round_triangle","round_triangle","same_feature_as","scale","scaled","scaled","scaled","scaled","scaled","segment","segment","segment","segment_feature_to_polyline_feature","segments","sensor","sensor","set","set","set","set","set","set","set","set_active_collision_types","set_active_events","set_active_hooks","set_cell_status","set_collision_groups","set_contact_force_event_threshold","set_density","set_enabled","set_flags","set_friction","set_friction_combine_rule","set_mass","set_mass_properties","set_parent","set_position","set_position_wrt_parent","set_restitution","set_restitution_combine_rule","set_rotation","set_rotation_wrt_parent","set_scale","set_sensor","set_shape","set_solver_groups","set_translation","set_translation_wrt_parent","shape","shape","shape_mut","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shape_type","shapes","shared_shape","signed_volume","signed_x_at","signed_z_at","solver_contacts","solver_flags","solver_groups","solver_groups","solver_groups","solver_groups","split","started","stopped","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","support_feature_id_toward","support_point","support_point_toward","swap","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","tangent_impulse","tangent_velocity","test","test","to_outline","to_outline","to_outline","to_outline","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_trimesh","to_trimesh","toggle","toggle","toggle","toggle","toggle","toggle","toggle","topology","total_force","total_force_magnitude","total_impulse","total_impulse_magnitude","transform_by","transform_vertices","translation","translation","triangle","triangle","triangle","triangle_at_id","triangle_vids_at_id","triangles","triangles","triangles_around_point","triangles_at","triangles_vids_at","trimesh","trimesh","trimesh_with_flags","trimesh_with_flags","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","twin","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","typed_qbvh","typed_qbvh","typed_qbvh","typed_qbvh","typed_qbvh","unclamped_cell_at_point","unclamped_elements_range_in_local_aabb","union","union","union","union","union","union","union","unit_cell_height","unit_cell_width","unpack","unwrap_edge","unwrap_face","unwrap_vertex","update","user_data","user_data","user_data","user_data","vertex","vertex","vertices","vertices","vertices","vertices","vertices","vertices_adj_to_face","vertices_pseudo_normal","vids","volume","volume","with_filter","with_flags","with_memberships","with_query_dispatcher","x_at","z_at","zero","edge","triangle1","triangle2","ANG_DIM","AngDim","AngVector","AngularInertia","CrossMatrix","DEFAULT_EPSILON","DIM","Dim","Isometry","Jacobian","JacobianView","JacobianViewMut","MAX_MANIFOLD_POINTS","Matrix","Orientation","Point","PrincipalAngularInertia","Real","Rotation","SIMD_LAST_INDEX","SIMD_WIDTH","SPATIAL_DIM","SdpMatrix","SimdBool","SimdReal","SpacialVector","SpatialDim","SpatialVector","TWO_DIM","Translation","UnitVector","Vector","copy_sign_to","copy_sign_to","ActiveEvents","ActiveHooks","COLLISION_EVENTS","CONTACT_FORCE_EVENTS","ChannelEventCollector","CollisionPipeline","ContactModificationContext","CurrentPosition","EXCLUDE_DYNAMIC","EXCLUDE_FIXED","EXCLUDE_KINEMATIC","EXCLUDE_SENSORS","EXCLUDE_SOLIDS","EventHandler","FILTER_CONTACT_PAIRS","FILTER_INTERSECTION_PAIR","MODIFY_SOLVER_CONTACTS","ONLY_DYNAMIC","ONLY_FIXED","ONLY_KINEMATIC","PairFilterContext","PhysicsHooks","PhysicsPipeline","QueryFilter","QueryFilterFlags","QueryPipeline","QueryPipelineMode","SweepTestWithNextPosition","SweepTestWithPredictedPosition","all","all","all","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bodies","bodies","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_ray","cast_ray_and_get_normal","cast_shape","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","collider1","collider1","collider2","collider2","colliders","colliders","colliders_with_aabb_intersecting_aabb","complement","complement","complement","contains","contains","contains","counters","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","difference","difference","difference","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","empty","empty","empty","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","exclude_collider","exclude_collider","exclude_dynamic","exclude_fixed","exclude_kinematic","exclude_rigid_body","exclude_rigid_body","exclude_sensors","exclude_solids","extend","extend","extend","filter_contact_pair","filter_contact_pair","filter_intersection_pair","filter_intersection_pair","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","groups","groups","handle_collision_event","handle_collision_event","handle_contact_force_event","handle_contact_force_event","hash","hash","hash","init","init","init","init","init","init","init","init","init","init","init","insert","insert","insert","intersection","intersection","intersection","intersection_with_shape","intersections_with_point","intersections_with_ray","intersections_with_shape","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","manifold","modify_solver_contacts","modify_solver_contacts","new","new","new","new","new","nonlinear_cast_shape","normal","not","not","not","only_dynamic","only_fixed","only_kinematic","partial_cmp","partial_cmp","partial_cmp","predicate","predicate","project_point","project_point_and_get_feature","query_dispatcher","remove","remove","remove","rigid_body1","rigid_body1","rigid_body2","rigid_body2","set","set","set","solver_contacts","step","step","sub","sub","sub","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","test","test","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","update","update_as_oneway_platform","update_incremental","update_with_mode","user_data","with_query_dispatcher","dt","DMatrix","DVector","nalgebra","point","vector","Basis","IndexMut2","Result","WBasis","WQuat","WReal","WSign","copy_sign_to","diff_conj1_2","index_mut2","index_mut_const","orthonormal_basis","orthonormal_vector"],"q":[[0,"rapier3d"],[13,"rapier3d::control"],[270,"rapier3d::counters"],[521,"rapier3d::data"],[560,"rapier3d::data::arena"],[764,"rapier3d::data::pubsub"],[819,"rapier3d::dynamics"],[2966,"rapier3d::geometry"],[5692,"rapier3d::geometry::TopologyError"],[5695,"rapier3d::math"],[5729,"rapier3d::pipeline"],[6194,"rapier3d::pipeline::QueryPipelineMode"],[6195,"rapier3d::prelude"],[6200,"rapier3d::utils"]],"d":["The string version of Rapier.","Utilities for controlling the trajectories of objects in a …","Counters for benchmarking various parts of the physics …","","Data structures modified with guaranteed deterministic …","Structures related to dynamics: bodies, impulse_joints, …","Structures related to geometry: colliders, shapes, etc.","Elementary mathematical entities (vectors, matrices, …","","","Structure for combining the various physics components to …","Prelude containing the common types defined by Rapier.","Miscellaneous utilities.","The length is specified as an aboslute value, independent …","Configuration for the auto-stepping character controller …","A collision between the character and its environment …","A length measure used for various options of a character …","A character controller to simulate vehicles using …","The effective movement computed by the character …","A character controller for kinematic bodies.","The length is specified relative to some of the character …","A wheel attached to a vehicle.","Parameters affecting the physical behavior of a wheel.","Adds a wheel to this vehicle.","","","","","","","","","","","","","","","","","Should the character automatically step over small …","The world-space direction of the wheel’s axle.","The wheel’s axle axis, relative to the chassis.","","","","","","","","","","","","","","","","","The maximum amount of braking impulse applied to slow down …","The world-space center of the wheel.","The position of the character when the collider was hit.","Handle of the vehicle’s chassis.","The position of the wheel, relative to the chassis.","","","","","","","","","","","","","The current forward speed of the vehicle.","The suspension’s damping when it is being compressed.","The suspension’s damping when it is being released.","","","","","","","","","","","","","","","","","","","","The direction of the wheel’s suspension, relative to the …","","","","","","","","","The forward force applied by this wheel on the chassis.","","","","","","","","","","","The forward impulses applied by the wheel on the chassis.","Parameter controlling how much traction the tire his.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Is the character touching the ground after applying …","The collider hit by the character.","Can the character automatically step over dynamic bodies …","The chassis’ local <em>forward</em> direction (<code>0 = x, 1 = y, 2 = z</code>…","The chassis’ local <em>up</em> direction (<code>0 = x, 1 = y, 2 = z</code>)","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self</code> with its value changed by the closure <code>f</code> if …","Returns <code>self</code> with its value changed by the closure <code>f</code> if …","The maximum step height a character can automatically step …","The maximum angle (radians) between the floor’s normal …","The maximum force applied by the suspension.","The maximum force applied by the suspension.","The maximum distance the suspension can travel before and …","The maximum distance the suspension can travel before and …","The minimum angle (radians) between the floor’s normal …","The minimum width of free space that must be available …","Computes the possible movement for a shape.","Creates a new vehicle represented by the given rigid-body.","A small gap to preserve between the character and its …","The wheel’s radius.","The wheel’s current rotation on its axle.","The side impulses applied by the wheel on the chassis.","Should the character try to slide against the floor if it …","Should the character be automatically snapped to the …","For a given collision between a character and its …","The steering angle for this wheel.","The world-space direction of the wheel’s suspension.","The suspension’s damping when it is being compressed.","The suspension’s damping when it is being released.","The rest length of the wheel’s suspension spring.","The suspension stiffness.","The suspension stiffness.","","","","","","","","","","","","","","","","","","","","","","","Geometric information about the hit.","The movement to apply.","The translation that was already applied to the character …","The translations that was still waiting to be applied to …","","","","","","","","","","","","","","","","","","","","","","","","","The direction that goes “up”. Used to determine where …","Updates the vehicle’s velocity based on its suspension, …","The force applied by the suspension.","Reference to all the wheels attached to this vehicle.","Mutable reference to all the wheels attached to this …","Performance counters related to continuous collision …","Performance counters related to collision detection.","Aggregation of all the performances counters tracked by …","Performance counters related to constraints resolution.","Performance counters related to each stage of the time …","A timer.","","","","","","","","","","","","","Stop this timer.","Start this timer.","Gets the time elapsed for this timer.","","","","","","","","","","","","","Stop this timer.","Start this timer.","Gets the time elapsed for this timer.","The total time spent by the broad-phase in the CCD …","Time spent for the broad-phase of the collision detection.","Counters for the CCD resolution stage.","Stop this timer.","Start this timer.","Gets the time elapsed for this timer.","Total time spent for CCD and CCD resolution.","Counters of the collision-detection stage.","","","","","","","","","","","","","Stop this timer.","Start this timer.","Gets the time elapsed for this timer.","Total time spent for the collision detection (including …","Timer used for debugging.","Notfy that the custom operation has finished.","Notify that the custom operation has started.","Total time of a custom event.","","","","","","","","","","","","","","","","","","","Disable all the counters.","","","","","","","Enable all the counters.","Return <code>true</code> if the counters are enabled.","Whether thi counter is enabled or not.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Stop this timer.","Start this timer.","Gets the time elapsed for this timer.","Time spent for the computation of collision island and …","Stop this timer.","Start this timer.","Gets the time elapsed for this timer.","The total time spent by the narrow-phase in the CCD …","Time spent for the narrow-phase of the collision detection.","Number of constraints generated.","Number of contact pairs detected.","Number of contacts found.","Creates a new counter initialized to zero.","Creates a new counter initialized to zero.","Creates a new counter initialized to zero.","Create a new counter intialized to zero.","Creates a new timer initialized to zero and not started.","Create a new set of counters initialized to zero.","The number of substeps actually performed by the CCD …","Pause the timer.","Time spent for the assembly of all the position …","Stop this timer.","Start this timer.","Gets the time elapsed for this timer.","Time spent for the update of the position of the bodies.","Resets this counter to 0.","Resets all the coounters and timers.","Reset all the counters to zero.","Resets all the counters and timers.","Resets the timer to 0.","Resets all the counters and timers.","Resume the timer.","Set the number of constraints generated.","Set the number of contact pairs generated.","Set the number of contacts generated.","Counters of the constraints resolution and force …","Stop this timer.","Start this timer.","Gets the time elapsed for this timer.","The total time spent for force computation and integration …","Total time spent for the constraints resolution and …","Counters of every satge of one time step.","Start the timer.","Notfy that the time-step has finished.","Notify that the time-step has started.","Total time spent for one  of the physics engine.","Timer for a whole timestep.","The measured time between the last <code>.start()</code> and <code>.pause()</code> …","","","","","","","","","","","","","","","","","","","","","","","","","The total time spent for TOI computation in the CCD …","","","","","","","","","","","","","","","","","","","Stop this timer.","Start this timer.","Gets the time elapsed for this timer.","Time spent for updating the kinematic and dynamics of …","Time spent for the assembly of all the velocity …","Stop this timer.","Start this timer.","Gets the time elapsed for this timer.","Time spent for the resolution of the constraints (force …","Stop this timer.","Start this timer.","Gets the time elapsed for this timer.","Time spent for the update of the velocity of the bodies.","","A container for data associated to item existing into …","","Arena adapted from the generational-arena crate.","","","","","","","","","","","Ensure that the given element exists in thihs coarena, and …","Ensure that elements at the two given indices exist in …","","Returns the argument unchanged.","","Gets a specific element from the coarena, if it exists.","Gets a mutable reference to a specific element from the …","Gets a specific element from the coarena without …","","Inserts an element into this coarena.","Calls <code>U::from(self)</code>.","","","","","Iterates through all the elements of this coarena.","A coarena with no element.","Publish-subscribe mechanism for internal events.","Deletes an element for the coarena and returns its value.","","","","","","","The <code>Arena</code> allows inserting and removing elements that are …","An iterator that removes elements from the arena.","An index (and generation) into an <code>Arena</code>.","An iterator over the elements in an arena.","An iterator over shared references to the elements in an …","An iterator over exclusive references to elements in this …","","","","","","","","","","","","","","","","","","","","","","","","","Get the capacity of this arena.","Clear all the items inside the arena, but keep its …","","","","","","","","","","Is the element at index <code>i</code> in the arena?","","","","","","","","","","","","","","","","Iterate over elements of the arena and remove them.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Create a new <code>Index</code> from its raw parts.","","","","","","","Get a shared reference to the element at index <code>i</code> if it is …","Get a pair of exclusive references to the elements at …","Get an exclusive reference to the element at index <code>i</code> if it …","Given an i of <code>usize</code> without a generation, get a shared …","Given an i of <code>usize</code> without a generation, get an exclusive …","","","","","","","","","","","Insert <code>value</code> into the arena, allocating more capacity if …","Insert the value returned by <code>create</code> into the arena, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Convert this <code>Index</code> into its raw parts.","Returns true if the arena contains no elements","","","","","","","Iterate over shared references to the elements in this …","Iterate over exclusive references to the elements in this …","Get the length of this arena.","","","","Constructs a new, empty <code>Arena</code>.","","","","","","","","","Remove the element at index <code>i</code> from the arena.","Allocate space for <code>additional_capacity</code> more elements in …","Retains only the elements specified by the predicate.","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to insert <code>value</code> into the arena using existing …","Attempts to insert the value returned by <code>create</code> into the …","","","","","","","","","","","","","Constructs a new, empty <code>Arena&lt;T&gt;</code> with the specified …","A pub-sub queue.","A permanent subscription to a pub-sub queue.","Makes the given subscribe acknowledge all the messages in …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Create a new empty pub-sub queue.","Publish a new message.","Get the messages not yet read by the given subscriber.","Read the i-th message not yet read by the given subsciber.","Subscribe to the queue.","","","","","","","","","","","","","The set of all angular degrees of freedom.","The angular degree of freedom along the local X axis of a …","The angular degree of freedom along the local Y axis of a …","The angular degree of freedom along the local Z axis of a …","The solved spring-like equation is: …","The rotational degree of freedom along the joint’s local …","The rotational degree of freedom along the joint’s local …","The rotational degree of freedom along the joint’s local …","The two coefficients are averaged.","A pair of rigid body handles.","The type of a body, governing the way it is affected by …","Solver responsible for performing motion-clamping on …","Flag indicating that the <code>RigidBodyColliders</code> component of …","Rules used to combine two coefficients.","Flag indicating that the <code>RigidBodyDominance</code> component of …","The joint is disabled by the user explicitly.","The joint wasn’t disabled by the user explicitly but it …","A <code>RigidBodyType::Dynamic</code> body can be affected by all …","Flag indicating that the rigid-body was enabled or …","The joint is enabled.","The set of degrees of freedom left free by a fixed joint.","The set of degrees of freedom left free by a prismatic …","The set of degrees of freedom left free by a revolute …","The set of degrees of freedom left free by a spherical …","A <code>RigidBodyType::Fixed</code> body cannot be affected by external …","A fixed joint, locks all relative motion between two …","Create fixed joints using the builder pattern.","The solved spring-like equation is: …","A generic joint.","Create generic joints using the builder pattern.","An impulse-based joint attached to two bodies.","The unique identifier of a joint added to the joint set. …","A set of impulse_joints that can be handled by a physics …","Parameters for a time-step of the physics engine.","Structure responsible for maintaining the set of active …","A bit mask identifying multiple degrees of freedom of a …","Identifiers of degrees of freedoms of a joint.","Enum indicating whether or not a joint is enabled.","The limits of a joint along one of its degrees of freedom.","A joint’s motor along one of its degrees of freedom.","A <code>RigidBodyType::KinematicPositionBased</code> body cannot be …","A <code>RigidBodyType::KinematicVelocityBased</code> body cannot be …","The set of all translational degrees of freedom.","Flag indicating that the local mass-properties of this …","The set of degrees of freedom locked by a fixed joint.","The set of degrees of freedom locked by a prismatic joint.","The set of degrees of freedom locked by a revolute joint.","The set of degrees of freedom locked by a spherical joint.","Flags affecting the behavior of the constraints solver for …","Flag indicating that any component of this rigid-body has …","Mass to be added to the rigid-body. This will also …","The local mass properties of a rigid-body.","Mass properties to be added as-is.","The greatest coefficient is chosen.","The smallest coefficient is chosen.","The spring-like model used for constraints resolution.","An articulated body simulated using the …","The temporary index of a multibody added to a …","An joint attached to two bodies based on the reduced …","The unique handle of an multibody_joint added to a …","A set of rigid bodies that can be handled by a physics …","One link of a multibody.","The two coefficients are multiplied.","Flag indicating that the <code>RigidBodyPosition</code> component of …","A prismatic joint, locks all relative motion between two …","Create prismatic joints using the builder pattern.","Combination of flags indicating that the rigid-body cannot …","Flag indicating that the rigid-body cannot rotate along …","Flag indicating that the rigid-body cannot rotate along …","Flag indicating that the rigid-body cannot rotate along …","A revolute joint, locks all relative motion except for …","Create revolute joints using the builder pattern.","A rigid body.","The rb_activation status of a body.","Mass and angular inertia added to a rigid-body on top of …","A builder for rigid-bodies.","Information used for Continuous-Collision-Detection.","Flags describing how the rigid-body has been modified by …","The set of colliders attached to this rigid-bodies.","Damping factors to progressively slow down a rigid-body.","The dominance groups of a rigid-body.","The user-defined external forces applied to this …","The unique handle of a rigid body added to a <code>RigidBodySet</code>.","Internal identifiers used by the physics engine.","The mass properties of a rigid-body.","The position of this rigid-body.","A set of rigid bodies that can be handled by a physics …","The status of a body, governing the way it is affected by …","The velocities of this rigid-body.","A rope joint, limits the maximum distance between two …","Create rope joints using the builder pattern.","Flag indicating that the <code>RigidBodyActivation</code> component of …","A spherical joint, locks all relative translations between …","Create spherical joints using the builder pattern.","Flag indicating that the rigid-body cannot translate along …","Flag indicating that the rigid-body cannot translate along …","Flag indicating that the rigid-body cannot translate along …","Flag indicating that the rigid-body cannot translate along …","Flag indicating that the <code>RigidBodyType</code> component of this …","The translational degree of freedom along the joint’s …","The translational degree of freedom along the local X axis …","The translational degree of freedom along the joint’s …","The translational degree of freedom along the local Y axis …","The translational degree of freedom along the joint’s …","The translational degree of freedom along the local Z axis …","","The activation status of this rigid-body.","Mutable reference to the activation status of this …","Create a new rb_activation status initialised with the …","Iter through all the active dynamic rigid-bodies on this …","Iter through all the active kinematic rigid-bodies on this …","","","","","Adds a collider to this rigid-body.","Adds to this rigid-body a constant force applied at its …","Adds to this rigid-body a constant force at the given …","Adds to this rigid-body a constant torque at its …","Mass-properties of this rigid-bodies, added to the …","Sets the additional mass of the rigid-body being built.","Sets the additional mass-properties of the rigid-body …","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Amount of penetration the engine wont attempt to correct …","The angular damping coefficient of this rigid-body.","Sets the damping factor for the angular part of the …","Damping factor for gradually slowing down the angular …","Damping factor for gradually slowing down the angular …","The angular linear velocity bellow which the body can fall …","The angular velocity of this rigid-body.","Sets the initial angular velocity of the rigid-body to be …","The angular velocity of the rigid-body.","The angular velocity of the rigid-body to be built.","Returns the update velocities after applying the given …","Apply a displacement to the multibody_joint.","Apply displacements, in generalized coordinates, to this …","Applies a force at the given world-space point of the …","Applies an impulse at the center-of-mass of this …","Applies an impulse at the center-of-mass of this …","Applies an impulse at the given world-space point of this …","Applies an impulse at the given world-space point of this …","Applies an angular impulse at the center-of-mass of this …","Applies an angular impulse at the center-of-mass of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the joint to its specific variant, if it is one.","Converts the joint to its specific mutable variant, if it …","This velocity seen as a mutable slice.","Converts the joint to its specific variant, if it is one.","Converts the joint to its specific mutable variant, if it …","Converts the joint to its specific variant, if it is one.","Converts the joint to its specific mutable variant, if it …","Converts the joint to its specific variant, if it is one.","Converts the joint to its specific mutable variant, if it …","This velocity seen as a slice.","Converts the joint to its specific variant, if it is one.","Converts the joint to its specific mutable variant, if it …","This velocity seen as a vector.","This velocity seen as a mutable vector.","Attach a collider to this rigid-body.","Iterate through the handles of all the rigid-bodies …","Iterates through all the enabled impulse joints attached …","Iterates through all the impulse joints attached to the …","Iterates through all the joints attached to the given …","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Iterate through the handles of all the rigid-bodies …","Handle to the first body attached to this joint.","The first rigid body handle.","Handle to the second body attached to this joint.","The second rigid body handle.","The position of the multibody link containing this …","The type of this rigid-body.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Build the fixed joint.","Builds the generic joint.","Builds the prismatic joint.","Builds the revolute joint.","Builds the rope joint.","Builds the spherical joint.","Build a new rigid-body with the parameters configured with …","Sets whether or not the rigid-body to be created can sleep …","Whether or not the rigid-body to be created can sleep if …","Create a new activation status that prevents the …","Is CCD active for this rigid-body?","Sets whether or not continuous collision-detection is …","Is CCD enabled for this rigid-body?","Whether continuous collision-detection is enabled for the …","The max distance between this rigid-body’s center of …","The distance used by the CCD solver to decide if a …","The world-space center-of-mass of this rigid-body.","The CFM factor to be used in the constraints resolution.","Apply motion-clamping to the bodies affected by the given …","Update this data-structure after one or multiple …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The handles of colliders attached to this rigid body.","Combines the coefficients used for solving the spring …","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Adds to <code>self</code> the gravitational force that would result in …","Are contacts between the attached rigid-bodies enabled?","Sets whether contacts between the attached rigid-bodies …","Are contacts between the attached rigid-bodies enabled?","Sets whether contacts between the attached rigid-bodies …","Are contacts between the attached rigid-bodies enabled?","Sets whether contacts between the attached rigid-bodies …","Are contacts between the attached rigid-bodies enabled?","Sets whether contacts between the attached rigid-bodies …","Are contacts between the attached rigid-bodies enabled?","Sets whether contacts between the attached rigid-bodies …","Are contacts between the attached rigid-bodies enabled?","Sets whether contacts between the attached rigid-bodies …","Are contacts between the attached rigid-bodies enabled?","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Is the given joint handle valid?","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Is the given body handle valid?","Sets the coupled degrees of freedom for this joint’s …","The coupled degrees of freedom of this joint.","The vector of damping applied to this multibody.","The damping coefficient of the motor’s spring-like …","Mutable vector of damping applied to this multibody.","0-1: the damping ratio used by the springs for Baumgarte …","The underlying generic joint.","The underlying generic joint.","The underlying generic joint.","The underlying generic joint.","The underlying joint data.","The joint’s description.","The joint’s description.","The underlying joint data.","The underlying joint data.","The underlying joint data.","The underlying joint data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The default angular velocity bellow which a body can be …","Fill <code>out</code> with the non-zero entries of a damping that can …","","The default linear velocity bellow which a body can be put …","","The amount of time the rigid-body must remain bellow …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Detach a collider from this rigid-body.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","The dominance group of this rigid-body.","Sets the dominance group of this rigid-body.","The dominance group of the rigid-body to be built.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The timestep length (default: <code>1.0 / 60.0</code>)","Initializes the builder of a new dynamic rigid body.","The effective world-space angular inertia (that takes the …","The dominance group of this rigid-body.","The actual dominance group of this rigid-body, after …","The inverse mass taking into account translation locking.","The effective mass (that takes the potential translation …","The square-root of the world-space inverse angular inertia …","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Enables of disable CCD (continuous collision-detection) …","Enable or disable the rigid-body after its creation.","Whether or not the joint is enabled.","Will the rigid-body being built be enabled?","Only allow rotations of this rigid-body around specific …","Only allow translations of this rigid-body around specific …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","0-1: multiplier for how much of the constraint violation …","The ERP coefficient, multiplied by the inverse timestep …","","","","Find the first time a CCD-enabled body has a non-sensor …","Initializes the builder of a new fixed rigid body.","Flags for locking rotation and translation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Accumulation of external forces (only for dynamic bodies).","Apply forward-kinematics to this multibody and its related …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Computes the mass properties of a ball.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Computes the mass properties of a capsule.","Computes the mass properties of a compound shape.","Computes the mass properties of a cone.","Computes the mass properties of a convex polyhedron.","Computes the mass properties of a cuboid.","Computes the mass properties of a cylinder.","","","","Reconstructs an handle from its (index, generation) …","Reconstructs an handle from its (index, generation) …","Reconstructs an handle from its (index, generation) …","Converts a slice to a rigid-body velocity.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the mass properties of a triangle mesh.","The generalized accelerations of this multibodies.","The generalized velocities of this multibodies.","The mutable generalized velocities of this multibodies.","Gets the joint with the given handle.","Gets a reference to the multibody identified by its <code>handle</code>.","Gets the rigid-body with the given handle.","Gets a reference to a multibody, based on its temporary …","Gets a mutable reference to a multibody, based on its …","Gets a mutable reference to the joint with the given …","Gets a mutable reference to the multibody identified by …","Gets a mutable reference to the rigid-body with the given …","Gets a mutable reference to the multibody identified by …","Gets the joint with the given handle without a known …","Gets the joint with the given handle without a known …","Gets the rigid-body with the given handle without a known …","Gets a mutable reference to the joint with the given …","Gets a mutable reference to the rigid-body with the given …","The potential energy of this body in a gravity field.","The scale factor applied to the gravity affecting this …","Sets the scale applied to the gravity force affecting the …","Gravity is multiplied by this scaling factor before it’s …","The scale factor applied to the gravity affecting the …","","","","","","","","","","","The impulse applied to enforce the joint’s limit.","The impulse applied by this motor.","The impulses applied by this joint.","Create a new rb_activation status initialised with the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts a new joint into this set and retrieve its handle.","Inserts a new multibody_joint into this set.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Insert a rigid body into this set and retrieve its handle.","Integrate the position of this multibody_joint.","Integrate the velocities in <code>self</code> to compute obtain new …","Integrate these forces to compute new velocities.","Compute new positions after integrating the given forces …","If <code>false</code>, friction and non-penetration constraints will be …","Computes the velocity need to travel from <code>self.position</code> to …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts this handle into its (index, generation) …","Converts this handle into its (index, generation) …","Converts this handle into its (index, generation) …","The inverse augmented mass matrix of this multibody.","The inverse of the time-stepping length, i.e. the steps …","The inverse of the mass of a rigid-body.","The inverse of the principal angular inertia of the …","An always-invalid joint handle.","An always-invalid rigid-body handle.","An always-invalid rigid-body handle.","Returns <code>true</code> if the body is not asleep.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Is CCD active for this rigid-body?","Is CCD (continous collision-detection) enabled for this …","Is this rigid-body dynamic (i.e. can move and be affected …","Is this rigid body dynamic?","Returns <code>true</code> if no flags are currently stored.","<code>true</code> if there are no impulse_joints in this set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","<code>true</code> if there are no rigid bodies in this set.","Is this joint enabled?","Is this rigid-body enabled?","Is this rigid-body fixed (i.e. cannot move)?","Is this rigid body fixed?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Is this rigid-body kinematic (i.e. can move but is …","Is this rigid body kinematic?","Is the velocity of this body not zero?","Is this rigid-body moving fast enough so that it may cause …","Checks if this link is the root of the multibody.","Returns <code>true</code> for each rotational degrees of freedom locked …","Is this rigid body sleeping?","Are the translations of this rigid-body locked?","Are these velocities exactly equal to zero?","","Iterates through all the joint on this set.","Iterates through all the multibody joints from this set.","Iterates through all the rigid-bodies on this set.","Iterates mutably through all the joint on this set.","Iterates mutably through all the rigid-bodies on this set.","Sets in <code>out</code> the non-zero entries of the multibody_joint …","Multiply the multibody_joint jacobian by generalized …","The multibody joint of this link.","The multibody joint of this link.","Returns the the joint between two rigid-bodies (if it …","The CFM (constraints force mixing) coefficient applied to …","The fraction of critical damping applied to the joint for …","0-1: multiplier for how much of the joint violation will …","The joint ERP coefficient, multiplied by the inverse …","Retrieve the joint graph where edges are impulse_joints …","Iterates through all the joints between two rigid-bodies.","Initializes the builder of a new position-based kinematic …","Initializes the builder of a new velocity-based kinematic …","The kinetic energy of this rigid-body.","The kinetic energy of this body.","The number of impulse_joints on this set.","The number of rigid bodies on this set.","The degrees-of-freedoms limited by this joint.","The joint limits along the specified axis.","Sets the joint limits along the specified axis.","The limit distance attached bodies can translate along the …","Sets the <code>[min,max]</code> limit distances attached bodies can …","The limit angle attached bodies can translate along the …","Sets the <code>[min,max]</code> limit angles attached bodies can rotate …","The limit maximum distance attached bodies can translate.","Sets the <code>[min,max]</code> limit distances attached bodies can …","The limit distance attached bodies can translate along the …","Sets the <code>[min,max]</code> limit distances attached bodies can …","The limits, along each degrees of freedoms of this joint.","The linear damping coefficient of this rigid-body.","Sets the damping factor for the linear part of the …","Damping factor for gradually slowing down the …","Damping factor for gradually slowing down the …","The threshold linear velocity bellow which the body can …","Reference <code>i</code>-th multibody link of this multibody.","The handle of this multibody link.","Mutable reference to the multibody link with the given id.","Iterator through all the links of this multibody.","Mutable iterator through all the links of this multibody.","The linear velocity of this rigid-body.","Sets the initial linear velocity of the rigid-body to be …","The linear velocity of the rigid-body.","The linear velocity of the rigid-body to be built.","The joint’s anchor, expressed in the local-space of the …","Sets the joint’s anchor, expressed in the local-space of …","The anchor of this joint, expressed in the first …","Sets the anchor of this joint, expressed in the first …","The joint’s anchor, expressed in the local-space of the …","Sets the joint’s anchor, expressed in the local-space of …","The joint’s anchor, expressed in the local-space of the …","Sets the joint’s anchor, expressed in the local-space of …","The joint’s anchor, expressed in the local-space of the …","Sets the joint’s anchor, expressed in the local-space of …","The joint’s anchor, expressed in the local-space of the …","Sets the joint’s anchor, expressed in the local-space of …","The joint’s anchor, expressed in the local-space of the …","Sets the joint’s anchor, expressed in the local-space of …","The anchor of this joint, expressed in the second …","Sets the anchor of this joint, expressed in the second …","The joint’s anchor, expressed in the local-space of the …","Sets the joint’s anchor, expressed in the local-space of …","The joint’s anchor, expressed in the local-space of the …","Sets the joint’s anchor, expressed in the local-space of …","The joint’s anchor, expressed in the local-space of the …","Sets the joint’s anchor, expressed in the local-space of …","The joint’s anchor, expressed in the local-space of the …","Sets the joint’s anchor, expressed in the local-space of …","The principal (local X) axis of this joint, expressed in …","Sets the principal (local X) axis of this joint, expressed …","The principal axis of the joint, expressed in the …","Sets the principal axis of the joint, expressed in the …","The principal axis of the joint, expressed in the …","Sets the principal axis of the joint, expressed in the …","The principal (local X) axis of this joint, expressed in …","Sets the principal (local X) axis of this joint, expressed …","The principal axis of the joint, expressed in the …","Sets the principal axis of the joint, expressed in the …","The principal axis of the joint, expressed in the …","Sets the principal axis of the joint, expressed in the …","The center of mass of a rigid-body expressed in its …","The joint’s frame, expressed in the first rigid-body’s …","Sets the joint’s frame, expressed in the first …","Sets the joint’s frame, expressed in the first …","The joint’s frame, expressed in the first rigid-body’s …","The joint’s frame, expressed in the second …","Sets joint’s frame, expressed in the second …","Sets the joint’s frame, expressed in the second …","The joint’s frame, expressed in the second …","The local mass properties of the rigid-body.","The position of the rigid-body attached to this link …","The world-space transform of the rigid-body attached to …","Add the specified axes to the set of axes locked by this …","Locks or unlocks all the rotations of this rigid-body.","Prevents this rigid-body from rotating because of forces.","Locks or unlocks all the rotations of this rigid-body.","Prevents this rigid-body from translating because of …","Sets the degrees of freedom locked by the joint.","The axes along which this rigid-body cannot translate or …","Sets the axes along which this rigid-body cannot translate …","The degrees-of-freedoms locked by this joint.","Iterates through all the impulse joints attached to the …","The mass of the rigid-body.","The mass of this rigid body.","The mass.","The mass-properties of this rigid-body.","The maximum bound of the joint limit.","Maximum number of substeps performed by the  solver …","The maximum force this motor can deliver.","Maximum amount of penetration the solver will attempt to …","The maximum velocity any point of any collider attached to …","Maximum number of iterations performed to remove the …","Maximum number of iterations performed to solve friction …","Maximum number of iterations performed to solve …","The minimum bound of the joint limit.","Minimum timestep size when using CCD with multiple …","Minimum number of dynamic bodies in each active island …","The spring-like model used for simulating this motor.","The motor affecting the joint’s degree of freedom along …","The motor affecting the joint’s translational degree of …","The motor affecting the joint’s rotational degree of …","Configure both the target angle and target velocity of the …","The motor affecting the joint’s translational degree of …","The motor affecting the joint’s rotational degree of …","Configure both the target angle and target velocity of the …","The degrees-of-freedoms motorised by this joint.","Sets the maximum force the motor can deliver along the …","Sets the maximum force the motor can deliver.","Sets the maximum force the motor can deliver.","Sets the maximum force the motor can deliver.","Sets the maximum force the motor can deliver along the …","The spring-like motor model along the specified axis of …","Set the spring-like model used by the motor to reach the …","Set the spring-like model used by the motor to reach the …","Set the spring-like model used by the motor to reach the …","Set the spring-like model used by the motor to reach the …","Set the spring-like model used by the motor to reach the …","Sets the target angle this motor needs to reach.","Sets the target angle this motor needs to reach.","Sets the target angle this motor needs to reach.","Sets the target angle this motor needs to reach.","Sets the target angle this motor needs to reach.","Sets the target velocity this motor needs to reach.","Sets the target velocity this motor needs to reach.","Sets the target velocity this motor needs to reach.","Sets the target velocity this motor needs to reach.","Sets the target velocity this motor needs to reach.","The motors, along each degrees of freedoms of this joint.","","Iterates through all the multibodies on this set.","The total number of freedoms of this multibody.","The number of degrees of freedom allowed by the …","Initializes a new CCD solver","Creates a new empty island manager.","Creates a new fixed joint.","Creates a new builder for fixed joints.","Creates a new generic joint that locks the specified …","Creates a new generic joint builder.","Creates a new empty set of impulse_joints.","Creates a new multibody with no link.","Create a new empty set of multibodies.","Creates a new multibody link.","Creates a new multibody joint from its description.","Creates a new prismatic joint allowing only relative …","Creates a new builder for prismatic joints.","Creates a new revolute joint allowing only relative …","Creates a new revolute joint builder, allowing only …","Creates a new rope joint limiting the max distance between …","Creates a new builder for rope joints.","Creates a new spherical joint locking all relative …","Creates a new builder for spherical joints.","Create a new rigid-body velocity component.","Initialize a new builder for a rigid body which is either …","Builds a new pair of rigid-body handles.","Create a new empty set of rigid bodies.","Initializes the mass properties from the given …","Initializes the builder of a new position-based kinematic …","Initializes the builder of a new velocity-based kinematic …","Initializes the builder of a new fixed rigid body.","The predicted position of this rigid-body.","The next position of the rigid-body.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","The number of links on this multibody.","Maximum number of velocity constrains that can be …","The handle of the parent link.","","","","","The world-space position of this rigid-body.","Sets the initial position (translation and orientation) of …","The world-space position of the rigid-body.","The initial position of the rigid-body to be built.","Outputs the set of bodies as well as their first …","Predicts the next position of this rigid-body, by …","The maximal distance separating two objects that will …","The angular inertia along the principal inertia axes of …","The principal vectors of the local angular inertia tensor …","Update colliders positions after rigid-bodies moved.","The approximate kinetic energy of this rigid-body.","Recompute the mass-properties of this rigid-bodies based …","Recompute the mass-properties of this rigid-bodies based …","Reconstructs the angular inertia tensor of the rigid body …","Reconstructs the inverse angular inertia tensor of the …","","Removes the specified flags in-place.","Removes a joint from this set.","Removes an multibody_joint from this set.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes a rigid-body, and all its attached colliders and …","Deletes all the impulse_joints attached to the given …","Removes all the multibody joints attached to a rigid-body.","Removes all the multibody_joints from the multibody the …","Resets to zero all the constant (linear) forces manually …","Resets to zero all the constant torques manually applied …","Locks or unlocks rotations of this rigid-body along each …","Locks or unlocks rotations of this rigid-body along each …","Locks or unlocks rotations of this rigid-body along each …","Only allow translations of this rigid-body around specific …","The handle of the rigid-body of this link.","Returns the link of this multibody attached to the given …","The first link of this multibody.","Mutable reference to the first link of this multibody.","The rotational part of this rigid-body’s position.","Sets the initial orientation of the rigid-body to be …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Sets the rigid-body’s additional mass.","Sets the rigid-body’s additional mass-properties.","Sets the angular damping coefficient of this rigid-body.","The angular velocity of this rigid-body.","Sets the type of this rigid-body.","Sets whether contacts between the attached rigid-bodies …","Sets whether contacts between the attached rigid-bodies …","Sets whether contacts between the attached rigid-bodies …","Sets whether contacts between the attached rigid-bodies …","Sets whether contacts between the attached rigid-bodies …","Sets whether contacts between the attached rigid-bodies …","The dominance group of this rigid-body.","Sets the time-stepping length.","Set whether this joint is enabled or not.","Sets whether this rigid-body is enabled or not.","Locks or unlocks rotations of this rigid-body along each …","Locks or unlocks rotations of this rigid-body along each …","Sets the gravity scale facter for this rigid-body.","Sets the inverse time-stepping length (i.e. the frequency).","Sets the joint limits along the specified axis.","Sets the <code>[min,max]</code> limit distances attached bodies can …","Sets the <code>[min,max]</code> limit angle attached bodies can …","Sets the <code>[min,max]</code> limit distances attached bodies can …","Sets the <code>[min,max]</code> limit angles attached bodies can …","Sets the linear damping coefficient of this rigid-body.","The linear velocity of this rigid-body.","Sets the joint’s anchor, expressed in the local-space of …","Sets anchor of this joint, expressed in the first …","Sets the joint’s anchor, expressed in the local-space of …","Sets the joint’s anchor, expressed in the local-space of …","Sets the joint’s anchor, expressed in the local-space of …","Sets the joint’s anchor, expressed in the local-space of …","Sets the joint’s anchor, expressed in the local-space of …","Sets anchor of this joint, expressed in the second …","Sets the joint’s anchor, expressed in the local-space of …","Sets the joint’s anchor, expressed in the local-space of …","Sets the joint’s anchor, expressed in the local-space of …","Sets the joint’s anchor, expressed in the local-space of …","Sets the principal (local X) axis of this joint, expressed …","Sets the principal axis of the joint, expressed in the …","Sets the principal axis of the joint, expressed in the …","Sets the principal (local X) axis of this joint, expressed …","Sets the principal axis of the joint, expressed in the …","Sets the principal axis of the joint, expressed in the …","Sets the joint’s frame, expressed in the first …","Sets the joint’s frame, expressed in the first …","Sets joint’s frame, expressed in the second …","Sets the joint’s frame, expressed in the second …","Sets the axes along which this rigid-body cannot translate …","Changes the mass on these mass-properties.","Configure both the target angle and target velocity of the …","Configure both the target angle and target velocity of the …","Configure both the target angle and target velocity of the …","Configure both the target angle and target velocity of the …","Configure both the target angle and target velocity of the …","Configure both the target angle and target velocity of the …","Configure both the target angle and target velocity of the …","Configure both the target angle and target velocity of the …","Sets the maximum force the motor can deliver along the …","Sets the maximum force the motor can deliver.","Sets the maximum force the motor can deliver.","Sets the maximum force the motor can deliver.","Sets the maximum force the motor can deliver along the …","Set the spring-like model used by the motor to reach the …","Set the spring-like model used by the motor to reach the …","Set the spring-like model used by the motor to reach the …","Set the spring-like model used by the motor to reach the …","Set the spring-like model used by the motor to reach the …","Sets the target angle this motor needs to reach.","Sets the target angle this motor needs to reach.","Sets the target angle this motor needs to reach.","Sets the target angle this motor needs to reach.","Sets the target angle this motor needs to reach.","Sets the target velocity this motor needs to reach.","Sets the target velocity this motor needs to reach.","Sets the target velocity this motor needs to reach.","Sets the target velocity this motor needs to reach.","Sets the target velocity this motor needs to reach.","If this rigid body is kinematic, sets its future position …","If this rigid body is kinematic, sets its future …","If this rigid body is kinematic, sets its future …","Sets the position and <code>next_kinematic_position</code> of this …","Sets the rotational part of this rigid-body’s position.","Sets the translational part of this rigid-body’s …","Put this rigid-body to sleep.","Put this rigid body to sleep.","Sets whether or not the rigid-body is to be created asleep.","Is this body sleeping?","Whether or not the rigid-body is to be created asleep.","The stiffness coefficient of the motor’s spring-like …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","","","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","The target position of the motor.","The target velocity of the motor.","Since how much time can this body sleep?","The amount of time the rigid-body must remain below the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Accumulation of external torques (only for dynamic bodies).","Transform each element of the mass properties.","Return <code>self</code> rotated by <code>rotation</code>.","The translational part of this rigid-body’s position.","Sets the initial translation of the rigid-body to be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Initializes and generate the velocity constraints …","Initializes and generate the velocity constraints …","Updates the set of bodies that needs CCD to be resolved.","Update the positions of all the colliders attached to this …","Update the world-space mass properties of <code>self</code>, taking …","An arbitrary user-defined 128-bit integer associated to …","User-defined data associated to this rigid-body.","An arbitrary user-defined 128-bit integer associated to …","Retrieves the constant force(s) that the user has added to …","Forces applied by the user.","Retrieves the constant torque(s) that the user has added …","Torque applied by the user.","The velocity of the given world-space point on this …","The velocity of the given world-space point on this …","Initialize and generate velocity constraints to enforce, …","Forces the specified rigid-body to wake up if it is …","Wakes up this rigid-body.","Wakes up this rigid body if it is sleeping.","Initialize a new <code>MassProperties</code> from a given …","Initializes the mass properties from the given …","Initializes a CCD solver with a custom <code>QueryDispatcher</code> …","The world-space center of mass of the rigid-body.","The world-space center of mass of the rigid-body.","The world-space inverse angular inertia tensor of the …","Velocities set to zero.","","All of the groups.","An axis-aligned bounding box.","Flags affecting whether or not collision-detection happens …","A potential new collision pair has been detected by the …","Storage needed to store triangle indices.","Storage needed to store points.","Storage needed to store topology faces.","Storage needed to store topology half-edges.","Storage needed to store topology vertices.","Storage needed to store u32","Storage needed to store usize.","Storage needed to store vectors.","Storage needed to store triples of vectors.","At least two adjacent triangles have opposite orientations.","Found a triangle with two or three identical vertices.","A ball shape.","A ball shape.","A ball shape.","A broad-phase combining a Hierarchical Grid and …","An event emitted by the broad-phase.","If this bit is set, both triangles of the concerned …","The constraint solver will take this contact manifold into …","If set, the half-edge topology and connected components of …","A capsule shape.","A capsule shape.","A capsule shape.","Orientation with a clockwise orientaiton, i.e., with a …","A geometric entity that can be attached to a body so it …","Data associated to a collider that takes part to a …","A structure responsible for building a new collider.","Flags describing how the collider has been modified by the …","Enum indicating whether or not a collider is enabled.","A set of flags for controlling collision/intersection …","Index of a node of the interaction graph.","The unique identifier of a collider added to a collider …","The mass-properties of a collider.","The constraints solver-related properties of this collider …","A pair of collider handles.","Information about the rigid-body this collider is attached …","The position of a collider.","A set of colliders that can be handled by a physics <code>World</code>.","The shape of a collider.","The type of collider.","Events occurring when two colliders start or stop colliding","Flags providing more information regarding a collision …","A compound shape with an aabb bounding volume.","A Compound shape.","A Compound shape.","A cone shape.","A cone shape.","A cone shape.","A contact between two colliders.","A single contact between two collider.","Event occurring when the sum of the magnitudes of the …","A contact manifold between two colliders.","A contact manifold between two colliders.","The description of all the contacts between a pair of …","A convex polyhedron without degenerate faces.","A convex polyhedron.","A convex polyhedron.","Orientation with a clockwise orientaiton, i.e., with a …","A cuboid shape.","A cuboid shape.","A cuboid shape.","A custom user-defined shape.","A custom user-defined shape with a type identified by a …","A cylindrical shape.","A cylindrical shape.","A cylindrical shape.","If set, any triangle that results in a failing half-hedge …","If set, the triangles sharing two vertices with identical …","If set, two triangles sharing three vertices with …","Enable collision-detection between a collider attached to …","Enable collision-detection between a collider attached to …","Enable collision-detection between a collider attached to …","Degenerate triangle.","The two colliders are guaranteed not to touch any more.","The collider is given a density.","The collider is disabled by the user explicitly.","The collider wasn’t disabled by the user explicitly but …","Flag indicating that whether or not the collider is …","Shape-dependent identifier of an edge.","The collider is enabled.","Enable collision-detection between a collider attached to …","Shape-dependent identifier of a face.","An identifier of a feature of a convex polyhedron.","Flag indicating that the collision groups of the collider …","The group n°1.","The group n°10.","The group n°11.","The group n°12.","The group n°13.","The group n°14.","The group n°15.","The group n°16.","The group n°17.","The group n°18.","The group n°19.","The group n°2.","The group n°20.","The group n°21.","The group n°22.","The group n°23.","The group n°24.","The group n°25.","The group n°26.","The group n°27.","The group n°28.","The group n°29.","The group n°3.","The group n°30.","The group n°31.","The group n°32.","The group n°4.","The group n°5.","The group n°6.","The group n°7.","The group n°8.","The group n°9.","A 3D heightfield with a generic storage buffer for its …","A triangle mesh.","A bit mask identifying groups for interaction.","If set, the half-edge topology of the trimesh will be …","A half-space delimited by an infinite plane.","A shape representing a full half-space.","A shape representing a full half-space.","A heightfield shape.","A heightfield shape.","A heightfield shape.","The status of the cell of an heightfield.","An iterator through all the triangles around the given …","Trait describing all the types needed for storing an …","Type of the array containing the heightfield’s heights.","A graph where nodes are collision objects and edges are …","Pairwise filtering using bit masks.","The description of all the contacts between a pair of …","Enable collision-detection between a collider attached to …","Enable collision-detection between a collider attached to …","If this bit is set, the leftmost triangle of the concerned …","Flag indicating that the density or mass-properties of …","If set, the duplicate vertices of the trimesh will be …","Flag indicating that any component of the collider has …","The collider is given a mass.","The collider is given explicit mass-properties.","None of the groups.","The narrow-phase responsible for computing precise contact …","If set, the trimesh will be assumed to be oriented (with …","The point lies on the segment interior.","The point lies on an edge.","The point lies on an edge.","The point lies on the triangle interior.","The point lies on a triangular face interior.","The point lies on the triangle interior (for “solid” …","The point lies inside of the tetrahedron.","The point lies on a vertex.","The point lies on a vertex.","The point lies on a vertex.","Flag indicating that the <code>ColliderParent</code> component of the …","Flag indicating that the dominance groups of the parent of …","Flag indicating that the <code>ColliderPosition</code> component of the …","A feature id where the feature type is packed into the …","","","The the projection of a point on a collider.","A polygonal feature representing the local polygonal …","Trait implemented by convex shapes with features with …","A polyline.","A set of segments.","A set of segments.","","Storage needed to store a Qbvh.","Flag set if a <code>CollisionEvent::Stopped</code> was fired because at …","If this bit is set, the rightmost triangle of the …","A ray that can be cast against colliders.","The intersection between a ray and a  collider.","Index of a node of the interaction graph.","A cone dilated by a sphere (so it has round corners).","A cone with rounded corners.","A cone with rounded corners.","A convex polyhedron dilated by a sphere (so it has round …","A convex polyhedron with rounded corners.","A convex polyhedron with rounded corners.","A cuboid dilated by a sphere (so it has round corners).","A cuboid with rounded corners.","A cuboid with rounded corners.","A cylinder dilated by a sphere (so it has round corners).","A cylinder with rounded corners.","A cylinder with rounded corners.","A shape with rounded borders.","A triangle dilated by a sphere (so it has round corners).","A triangle with rounded corners.","A triangle with rounded corners.","Flag set if at least one of the colliders involved in the …","Flag indicating that the <code>ColliderShape</code> component of the …","A segment shape.","A segment shape.","A segment shape.","Logical description of the location of a point on a …","A collider that can generate intersection and intersection …","Trait implemented by shapes usable by Rapier.","Enum representing the type of a shape.","The shape of a collider.","The shape of a collider.","Trait implemented by shapes composed of multiple simpler …","A collider that can generate contacts and contact events.","A contact seen by the constraints solver for computing …","Flags affecting the behavior of the constraints solver for …","Event occurring when two colliders start colliding","Type of the array containing the heightfield’s cells …","Event occurring when two colliders stop colliding.","Traits of convex shapes representable by a support mapping …","The the time of impact between two shapes.","Flag indicating that the <code>ColliderType</code> component of the …","Temporary index to and edge of the interaction graph.","A tetrahedron with 4 vertices.","Logical description of the location of a point on a …","A face of a triangle-mesh’s half-edge topology.","A half-edge of a triangle-mesh’s half-edge topology.","A vertex of a triangle-mesh’s half-edge topology.","Indicated an inconsistency in the topology of a triangle …","A single contact between two shape.","A triangle-mesh.","A triangle mesh shape.","A triangle mesh shape.","The connected-components of a triangle mesh.","The status of the cell of an heightfield.","The set of pseudo-normals of a triangle mesh.","Trait describing all the types needed for storing a …","The half-edge topology information of a triangle mesh.","A triangle shape.","A triangle shape.","A triangle shape.","Orientation of a triangle.","Description of the location of a point on a triangle.","Enum representing the shape with its actual type","","Packed feature id identifying an unknown feature.","Unknown identifier.","Shape-dependent identifier of a vertex.","If this bit is set, the concerned heightfield cell is …","The tetrahedron first point.","Compute the axis-aligned bounding box of this triangle …","Computes the world-space Aabb of this half-space.","Compute the axis-aligned bounding box of this polyline.","Computes the world-space Aabb of this convex polyhedron, …","Computes the world-space Aabb of this heightfield, …","The shapes Aabbs.","The collision types enabled for this collider.","The set of active collision types for this collider.","Controls whether collision-detection happens between two …","Contact pairs enabled for this collider.","The events enabled for this collider.","The set of events enabled for this collider.","The events enabled for this collider.","Events enabled for this collider.","The physics hooks enabled for this collider.","The set of physics hooks enabled for this collider.","The physics hooks enabled for contact pairs and …","Physics hooks enabled for this collider.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Allow interaction with everything.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Appends a second triangle mesh to this triangle mesh.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts this abstract shape to a ball, if it is one.","Converts this abstract shape to a mutable ball, if it is …","Converts this abstract shape to a capsule, if it is one.","Converts this abstract shape to a mutable capsule, if it …","","","","","Converts this abstract shape to a compound shape, if it is …","Converts this abstract shape to a mutable compound shape, …","Converts this abstract shape to a cone, if it is one.","Converts this abstract shape to a mutable cone, if it is …","","","Converts this abstract shape to a cuboid, if it is one.","Converts this abstract shape to a mutable cuboid, if it is …","Converts this abstract shape to a cylinder, if it is one.","Converts this abstract shape to a mutable cylinder, if it …","Converts this abstract shape to a halfspace, if it is one.","Converts this abstract shape to a halfspace, if it is one.","Converts this abstract shape to a heightfield, if it is …","Converts this abstract shape to a mutable heightfield, if …","","Converts this shape to a polygonal feature-map, if it is …","","","","","","","Converts this abstract shape to a polyline, if it is one.","Converts this abstract shape to a mutable polyline, if it …","","","Converts this abstract shape to a round cone, if it is one.","Converts this abstract shape to a mutable round cone, if …","Converts this abstract shape to a round convex polyhedron, …","Converts this abstract shape to a mutable round convex …","Converts this abstract shape to a round cuboid, if it is …","Converts this abstract shape to a mutable round cuboid, if …","Converts this abstract shape to a round cylinder, if it is …","Converts this abstract shape to a mutable round cylinder, …","Converts this abstract shape to a round triangle, if it is …","Converts this abstract shape to a round triangle, if it is …","Converts this abstract shape to a segment, if it is one.","Converts this abstract shape to a mutable segment, if it …","Converts this abstract shape to the given shape, if it is …","Converts this abstract shape to the given mutable shape, …","Convents this shape into its support mapping, if it has …","","","","","","","Converts this abstract shape to a triangle, if it is one.","Converts this abstract shape to a mutable triangle, if it …","Converts this abstract shape to a triangle mesh, if it is …","Converts this abstract shape to a mutable triangle mesh, …","Gets the underlying shape as an enum.","","","","","","","","","","","","The tetrahedron first point.","Initialize a new collider builder with a ball shape …","Initialize a ball shape defined by its radius.","The barycentric coordinates corresponding to this point …","The barycentric coordinates corresponding to this point …","Computes the barycentric coordinates of the given point in …","The barycentric coordinates corresponding to this point …","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","The radius of the rounded border.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the world-space bounding sphere of this triangle …","Computes the world-space bounding sphere of this …","Computes the world-space bounding sphere of this polyline, …","Computes the world-space bounding sphere of this convex …","Computes the world-space bounding sphere of this …","Builds a new collider attached to the given rigid-body.","The tetrahedron first point.","Computes the intersection <code>Polyline</code>s between this mesh and …","Splits this <code>TriMesh</code> along the given canonical axis.","Initialize a capsule shape from its endpoints and radius.","Initialize a new collider builder with a capsule shape …","Initialize a capsule shape aligned with the <code>x</code> axis.","Initialize a new collider builder with a capsule shape …","Initialize a capsule shape aligned with the <code>y</code> axis.","Initialize a new collider builder with a capsule shape …","Initialize a capsule shape aligned with the <code>z</code> axis.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The pair of index of the cell containing the vertical …","The height (extent along its local <code>z</code> axis) of each cell of …","The status of the <code>(i, j)</code>-th cell.","The width (extent along its local <code>x</code> axis) of each cell of …","The statuses of all the cells of this heightfield.","The mutable statuses of all the cells of this heightfield.","Computes the center of this tetrahedron.","Verify if this convex polyhedron is actually convex.","Clears all the contacts of this contact pair.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clones this shape into a boxed trait-object.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The pair of index of the cell containing the vertical …","","","","","","","","The handle of the first collider involved in this …","The first collider involved in the contact.","The handle of the first collider involved in this pair.","The first collider involved in the contact pair.","The handle of the second collider involved in this …","The second collider involved in the contact.","The handle of the second ocllider involved in this pair.","The second collider involved in the contact pair.","The collision groups used by this collider.","Sets the collision groups used by this collider.","The groups controlling the pairs of colliders that can …","The collision groups for the collider being built.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Initialize a new collider builder with a compound shape.","Initialize a compound shape defined by its subshapes.","Computes the Aabb of this shape with the given position.","","Compute the axis-aligned bounding box of this collider.","","","","","","","","","","","Computes the bounding-sphere of this shape with the given …","Computes the Aabb of this shape.","","","","","","","","","","","","Computes the bounding-sphere of this shape.","","","","","","","","","","","","Computes the swept Aabb of this shape, i.e., the space it …","Compute the axis-aligned bounding box of this collider …","Initialize a new collider builder with a cone shape …","Initialize a cone shape defined by its half-height (along …","Returns the connected-component information of this …","The total force magnitude beyond which a contact force …","Sets the total force magnitude beyond which a contact …","The total force magnitude beyond which a contact force …","The contact graph containing all contact pairs and their …","The contact pair involving two specific colliders.","Returns the contact pair at the given temporary index.","The contact pair involving two specific colliders.","All the contact pairs maintained by this narrow-phase.","Computes all the contacts between two polygonal features.","All the contacts involving the given collider.","All the contacts involving the given collider.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Is this collider handle valid?","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","Converts the FeatureID of the left or right triangle at …","Initializes a collider builder with a compound shape …","Initializes a compound shape obtained from the …","Initializes a collider builder with a compound shape …","Initializes a compound shape obtained from the …","Initializes a new collider builder with a 2D convex …","Creates a new shared shape that is the convex-hull of the …","Creates a new collider builder that is a convex polyhedron …","Creates a new shared shape that is a convex polyhedron …","Copy to <code>self</code> the geometric information from <code>contact</code>.","Initialize a new collider builder with a cuboid shape …","Initialize a cuboid shape defined by its half-extents.","Initialize a new collider builder with a cylindrical shape …","Initialize a cylindrical shape defined by its half-height …","The tetrahedron first point.","User-data associated to this contact.","","","","","","","","","","","","","","","","","","","","","","","","","","The default density used by the collider builder.","The default friction coefficient used by the collider …","Set the position of this collider in the local-space of …","The density of this collider.","Sets the uniform density of the collider this builder will …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","The distance between the two original contacts points …","The distance between the two contact points.","","Returns a boxed object from a boxed trait object if the …","Returns an <code>Arc</code>-ed object from an <code>Arc</code>-ed trait object if …","Returns a mutable reference to the object within the trait …","Returns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …","Returns a reference to the object within the trait object …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the i-th edge of this tetrahedron.","Converts a edge feature id into a packed feature id.","Returns the indices of the vertices of the i-th edge of …","The topology of the edges of this convex polyhedron.","The array containing the indices of the edges adjacent to …","The pseudo-normals of the edges.","The feature IDs of this polygon’s edges.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Enable or disable the collider after its creation.","Whether or not the collider is enabled.","Will the collider being built be enabled?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts the connected components of this polyline, …","Returns the i-th face of this tetrahedron.","Converts a face feature id into a packed feature id.","The face associated to this half-edge.","The <code>face_colors[i]</code> gives the connected-component index of …","Returns the i-th face of this tetrahedron.","The topology of the faces of this convex polyhedron.","The faces of this half-edge representation.","The array containing the indices of the faces adjacent to …","The normal of the given feature.","The shape’s normal at the given point located on a …","","The feature ID of this polygonal feature.","The feature ID of the first shape involved in the contact.","The feature ID of the second shape involved in the contact.","Groups filter.","Finds the contact with the smallest signed distance.","The flags of this triangle mesh.","A flat view of the index buffer of this mesh.","A flat view of the index buffer of this mesh.","Creates a new tracked contact where its input may need to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The friction coefficient of this collider.","Sets the friction coefficient of the collider this builder …","The friction coefficient of this collider.","The effective friction coefficient at this contact point.","The friction coefficient of the collider to be built.","The combine rule used by this collider to combine its …","Sets the rule to be used to combine two friction …","The rule applied to combine the friction coefficients of …","The rule used to combine two friction coefficients.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Creates the reference to a tetrahedron from the reference …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Init a contact force event from a contact pair.","Creates a new convex polyhedron from an arbitrary set of …","Attempts to create a new solid assumed to be convex from …","","","","","","","","","Reconstructs an handle from its (index, generation) …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the collider with the given handle.","Gets a mutable reference to the collider with the given …","Gets the collider with the given handle without a known …","Gets a mutable reference to the collider with the given …","The set of faces grouped by connected components.","One of the half-edge with this vertex as endpoint.","The half-edge adjacent to this face, with a starting point …","The half-edges of this half-edge representation.","Initialize a new collider build with a half-space shape …","Initialize a plane shape defined by its outward normal.","Handle of the rigid-body this collider is attached to.","Maintain the narrow-phase internal state by taking …","Is there any active contact in this contact pair?","","","","","","","","","","","","","","","","","","Initializes a collider builder with a heightfield shape …","Initializes an heightfield shape on the x-z plane defined …","The heights of this heightfield.","The identity position.","The impulse, along the contact normal, applied by this …","","","","Gets the interaction with the given index.","","The index buffer of this mesh.","The index buffer of this mesh.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The shape being rounded.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts a new collider to this set and retrieve its handle.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts a new collider to this set, attach it to the given …","The interaction between the two collision objects …","The interaction between the two collision objects …","All the interactions on this graph.","All the interaction involving the collision object with …","All the interactions on this graph with the corresponding …","All the mutable references to interactions involving the …","Are the colliders intersecting?","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","The intersection graph containing all intersection pairs …","The intersection pair involving two specific colliders.","The intersection pair involving two specific colliders.","All the intersection pairs maintained by this narrow-phase.","Computes the intersection mesh between an Aabb and this …","Computes the intersection mesh between a cuboid and this …","Computes the intersection mesh between a cuboid and this …","Computes the intersection <code>Polyline</code>s between this mesh and …","Computes the intersection <code>Polyline</code>s between this mesh, …","All the intersections involving the given collider.","All the intersections involving the given collider.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeonverts this handle into its (index, generation) …","An always-invalid collider handle.","An always-invalid collider handle.","Returns true if the trait object wraps an object of type …","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Does the given feature ID identify a backface of this …","Should we treat this contact as a bouncy contact? If <code>true</code>, …","Is this shape known to be convex?","","","","","","","","Is this shape a <code>ConvexPolyhedron</code>?","","Is the identified feature an edge?","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","<code>true</code> if there are no colliders in this set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Is this collider enabled?","Is the identified feature a face?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether or not this contact existed during the last …","Returns <code>true</code> if the point is located on the relative …","Is this collider a sensor?","Is this collider a sensor?","Is this collider a sensor?","Is the identified feature unknown?","Is the identified feature a vertex?","Iterate through all the colliders on this set.","Iterate through all the enabled colliders on this set.","Iterates mutably through all the enabled colliders on this …","Iterates mutably through all the colliders on this set.","The number of colliders on this set.","Gets the local axis-aligned bounding box of this triangle …","The Aabb of this compound in its local-space.","Computes the local-space Aabb of this half-space.","Gets the local axis-aligned bounding box of this polyline.","Computes the local-space Aabb of this convex polyhedron.","Computes the local-space Aabb of this heightfield.","Computes the local-space bounding sphere of this triangle …","The bounding-sphere of this compound in its local-space.","Computes the local-space bounding sphere of this …","Computes the local-space bounding sphere of this polyline.","Computes the local-space bounding sphere of this convex …","Computes the local-space bounding sphere of this …","The contact point in the local-space of the first shape.","The contact point in the local-space of the second shape.","Splits this mesh by a plane identified by its normal …","Compute the support polygonal face of <code>self</code> towards the <code>dir</code>.","","","","","Same as <code>self.local_support_point</code> except that <code>dir</code> is …","","If this shape is shared, then the content of <code>self</code> is …","The set of contact manifolds between the two colliders.","Applies the function <code>f</code> to all the triangles of this …","Applies a function to one sub-shape of this composite …","","","","","","","","","","","","","","The mass of this collider.","Sets the mass of the collider this builder will build.","Compute the mass-properties of this shape given its …","","The mass-properties of this collider.","Compute the local-space mass properties of this collider.","Sets the mass properties of the collider this builder will …","","","","","","","","","","","Controls the way the collider’s mass-properties are …","The material (friction and restitution properties) of this …","The world-space (unit) direction of the force with …","The magnitude of the largest force at a contact point of …","The magnitude and (unit) direction of the maximum impulse …","Groups memberships.","The number of columns of this heightfield.","Do these changes justify a broad-phase update?","Do these changes justify a narrow-phase update?","Creates a new triangle mesh from a vertex buffer and an …","Create a new empty broad-phase.","Creates a new pair of collider handles.","Creates a new collider material with the given friction …","Creates a new empty collection of collision objects.","Initializes with the given interaction groups and …","Creates a new tracked contact.","Creates a new empty narrow-phase.","Initialize a new collider builder with the given shape.","Create a new empty set of colliders.","Builds a new compound shape.","Builds a new halfspace from its center and its normal.","Creates a new polyline from a vertex buffer and an index …","Initializes a new heightfield with the given heights and a …","Creates a new empty polygonal feature.","Creates a tetrahedron from three points.","Wraps the given shape as a shared shape.","Returns the next triangle in this iterator.","The next half-edge.","Prevent all interactions.","The world-space contact normal shared by all the contact …","The halfspace planar boundary’s outward normal.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","The number of rows of this heightfield.","Number of actives contacts, i.e., contacts that will be …","The number of cells of this heightfield along each …","The total number of connected components.","The number of segments forming this polyline.","The number of triangles forming this mesh.","The number of vertices on this polygon (must be &lt;= 4).","The rigid body this collider is attached to.","","","","","","","","The world-space contact point.","The set of vertices of this convex polyhedron.","Initializes a collider builder with a polyline shape …","Initializes a polyline shape defined by its vertex and …","Const position of this collider relative to its parent …","The world-space position of this collider.","Sets the initial position (translation and orientation) of …","The position of this collider.","The position of this collider wrt the body it is attached …","Sets the initial position (translation and orientation) of …","","","","","","","","","","","","","","","","","","","","","Projects a point on <code>self</code>, with a maximum projection …","Perform a point projection assuming a solid interior based …","Projects a point on <code>self</code> transformed by <code>m</code>, unless the …","","The pseudo-normals of this triangle mesh, if they have …","Gets the acceleration structure of the composite shape.","The acceleration structure used by this triangle-mesh.","","The acceleration structure used by this compound shape.","","","The query dispatcher used by this narrow-phase to select …","The range of connected components. …","The underlying raw graph structure of this interaction …","The relative dominance of the bodies involved in this …","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Remove a collider from this set and update its parent …","Removes the specified flags in-place.","Removes the specified flags in-place.","Was at least one of the colliders involved in the …","The restitution coefficient of this collider.","Sets the restitution coefficient of the collider this …","The restitution coefficient of this collider.","The effective restitution coefficient at this contact …","The restitution coefficient of the collider to be built.","The combine rule used by this collider to combine its …","Sets the rule to be used to combine two restitution …","The rule applied to combine the restitution coefficients …","The rule used to combine two restitution coefficients.","Reverse the orientation of the triangle mesh.","Reverse the orientation of this polyline by swapping the …","The first rigid-body involved in this contact manifold.","The second rigid-body involved in this contact manifold.","The Aabb of this heightmap.","The rotational part of this collider’s position.","Sets the initial orientation of the collider to be created.","Initialize a new collider builder with a rounded cone …","Initialize a rounded cone shape defined by its half-height …","Initializes a collider builder with a compound shape …","Initializes a compound shape obtained from the …","Initializes a collider builder with a compound shape …","Initializes a compound shape obtained from the …","Initializes a new collider builder with a round 2D convex …","Creates a new shared shape with rounded corners that is the","Creates a new collider builder that is a round convex …","Creates a new shared shape with round corners that is a …","Initialize a new collider builder with a round cuboid …","Initialize a round cuboid shape defined by its …","Initialize a new collider builder with a rounded …","Initialize a rounded cylindrical shape defined by its …","Initializes a collider builder with a triangle shape with …","Initializes a triangle shape with round corners.","Returns <code>true</code> if both <code>self</code> and <code>other</code> correspond to points …","The scale factor applied to this heightfield.","Returns a scaled version of this triangle mesh.","Computes a scaled version of this half-space.","Computes a scaled version of this polyline.","Computes a scaled version of this convex polygon.","Returns a scaled version of this heightfield.","Initializes a collider builder with a segment shape.","Get the <code>i</code>-th segment of this mesh.","Initialize a segment shape from its endpoints.","Transforms  the feature-id of a segment to the feature-id …","An iterator through all the segments of this mesh.","Was at least one of the colliders involved in the …","Sets whether or not the collider built by this builder is …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Sets the collision types enabled for this collider.","Sets the events enabled for this collider.","Sets the physics hooks enabled for this collider.","Set the status of the <code>(i, j)</code>-th cell.","Sets the collision groups of this collider.","Sets the total force magnitude beyond which a contact …","Sets the uniform density of this collider.","Sets whether or not this collider is enabled.","Sets the flags of this triangle mesh, controlling its …","Sets the friction coefficient of this collider.","Sets the combine rule used by this collider to combine its …","Sets the mass of this collider.","Sets the mass properties of this collider.","Sets the parent of the given collider.","Sets the position of this collider.","Sets the position of this collider wrt. its parent …","Sets the restitution coefficient of this collider.","Sets the combine rule used by this collider to combine its …","Sets the rotational part of this collider’s position.","Sets the rotational part of this collider’s rotaiton …","Sets the scale factor applied to this heightfield.","Sets whether or not this is a sensor collider.","Sets the shape of this collider.","Sets the solver groups of this collider.","Sets the translational part of this collider’s position.","Sets the translational part of this collider’s …","The geometric shape of this collider.","The shape of the collider to be built.","A mutable reference to the geometric shape of this …","Gets the type tag of this shape.","","","","","","","","","","","","The shapes of this compound shape.","Retrieve the SharedShape. Also see the <code>shape()</code> function","Computes the signed volume of this tetrahedron.","The smallest x coordinate of the <code>j</code>-th column of this …","The smallest z coordinate of the start of the <code>i</code>-th row of …","The contacts that will be seen by the constraints solver …","Flags used to control some aspects of the constraints …","The solver groups used by this collider.","Sets the solver groups used by this collider.","The groups controlling the pairs of collider that have …","The solver groups for the collider being built.","Splits this mesh, transformed by <code>position</code> by a plane …","Is this a <code>Started</code> collision event?","Is this a <code>Stopped</code> collision event?","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Computes the ID of the features with a normal that …","","Same as <code>self.support_point</code> except that <code>dir</code> is normalized.","Swaps the two collider handles in <code>self</code>.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","The friction impulses along the basis orthonormal to the …","The desired tangent relative velocity at the contact point.","Test whether contact should be computed between two …","Check if interactions should be allowed based on the …","Outlines this round cylinder’s shape using polylines.","Outlines this round cuboid’s surface with polylines.","Outlines this round convex polyhedron’s shape using …","Outlines this round cone’s shape using polylinesiscretize the boundary of this convex polyhedron as a …","Discretize the boundary of this heightfield as a …","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Returns the topology information of this trimesh, if it …","The sum of all the forces between the two colliders.","The sum of the magnitudes of each force between the two …","The sum of all the impulses applied by contacts on this …","The sum of the magnitudes of the contacts on this contact …","Transform each vertex of this polygonal feature by the …","Transforms in-place the vertices of this triangle mesh.","The translational part of this collider’s position.","Sets the initial translation of the collider to be created.","Get the <code>i</code>-th triangle of this mesh.","Initializes a collider builder with a triangle shape.","Initializes a triangle shape.","Gets the the vertices of the triangle identified by <code>id</code>.","Gets the vertex indices of the triangle identified by <code>id</code>.","An iterator through all the triangles of this mesh.","An iterator through all the triangles of this heightfield.","An iterator through all the triangles around the given …","The two triangles at the cell (i, j) of this heightfield.","Gets the indices of the vertices of the (up to) two …","Initializes a collider builder with a triangle mesh shape …","Initializes a triangle mesh shape defined by its vertex …","Initializes a collider builder with a triangle mesh shape …","Initializes a triangle mesh shape defined by its vertex …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This half-edge twin on the adjacent triangle.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The pair of index of the cell containing the vertical …","The range of segment ids that may intersect the given …","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","The height (extent along its local <code>z</code> axis) of each cell of …","The width (extent along its local <code>x</code> axis) of each cell of …","Unpacks this feature id into an explicit enum.","Revries the value of the identifier if <code>self</code> is an edge.","Retrieves the value of the identifier if <code>self</code> is a face.","Revries the value of the identifier if <code>self</code> is a vertex.","Updates the broad-phase, taking into account the new …","Sets an arbitrary user-defined 128-bit integer associated …","A user-defined piece of data.","User-defined data associated to this collider.","The user-data of the collider being built.","Converts a vertex feature id into a packed feature id.","The first vertex of this edge.","The vertex buffer of this mesh.","The vertex buffer of this mesh.","The topology of the vertices of this convex polyhedron.","Up to four vertices forming this polygonal feature.","The vertices of this half-edge representation.","The array containing the indices of the vertices adjacent …","The pseudo-normals of the vertices.","The feature IDs of this polygon’s vertices.","The volume (or surface in 2D) of this collider.","Computes the volume of this tetrahedron.","Sets the interaction mask of this filter.","Creates a new triangle mesh from a vertex buffer and an …","Sets the group this filter is part of.","Creates a new empty narrow-phase with a custom query …","The smallest x coordinate of the <code>j</code>-th column of this …","The smallest z coordinate of the start of the <code>i</code>-th row of …","Constructs a pair of artificial handles that are not …","The edge shared between the two triangles.","The first triangle, with an orientation opposite to the …","The second triangle, with an orientation opposite to the …","The maximum number of rotational degrees of freedom of a …","The dimension of the rotations.","The angular vector type.","The angular inertia of a rigid body.","A matrix that represent the cross product with a given …","The default tolerance used for geometric operations.","The dimension of the space.","The dimension of the ambient space.","The transformation matrix type.","The type of a constraint Jacobian in twist coordinates.","The type of a slice of the constraint Jacobian in twist …","The type of a mutable slice of the constraint Jacobian in …","Max number of pairs of contact points from the same …","The matrix type.","The orientation type.","The point type.","The principal angular inertia of a rigid body.","The scalar type used throughout this crate.","The rotation matrix type.","SIMD_WIDTH - 1","The number of lanes of a SIMD number.","The maximum number of possible rotations and translations …","A 3D symmetric-definite-positive matrix.","A SIMD bool with SIMD_WIDTH lanes.","A SIMD float with SIMD_WIDTH lanes.","A vector with a dimension equal to the maximum number of …","The dimension of a spatial vector.","The vector type with dimension <code>SpatialDim × 1</code>.","The dimension of the space multiplied by two.","The translation type.","The unit vector type.","The vector type.","","","Flags affecting the events generated for this collider.","Flags affecting the behavior of the constraints solver for …","If set, Rapier will call …","If set, Rapier will call …","A collision event handler that collects events into a …","The collision pipeline, responsible for performing …","Context given to custom contact modifiers to modify the …","The <code>Collider::position</code> is taken into account.","Exclude from the query any collider attached to a …","Exclude from the query any collider attached to a fixed …","Exclude from the query any collider attached to a dynamic …","Exclude from the query any collider that is a sensor.","Exclude from the query any collider that is not a sensor.","Trait implemented by structures responsible for handling …","If set, Rapier will call <code>PhysicsHooks::filter_contact_pair</code> …","If set, Rapier will call …","If set, Rapier will call …","Excludes all colliders not attached to a dynamic …","Exclude all colliders attached to a non-fixed rigid-body …","Excludes all colliders not attached to a kinematic …","Context given to custom collision filters to filter-out …","User-defined functions called by the physics engines …","The physics pipeline, responsible for stepping the whole …","A filter tha describes what collider should be included or …","Flags for excluding whole sets of colliders from a scene …","A pipeline for performing queries on all the colliders of …","Indicates how the colliders position should be taken into …","The …","The …","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","","","","","","","","","","","","","","","","","","","","","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","The set of rigid-bodies.","The set of rigid-bodies.","","","","","","","","","","","","","","","","","","","","","","","Find the closest intersection between a ray and a set of …","Find the closest intersection between a ray and a set of …","Casts a shape at a constant linear velocity and retrieve …","","","","","","","","","","","","","","The handle of the first collider involved in the potential …","The handle of the first collider involved in the potential …","The handle of the first collider involved in the potential …","The handle of the first collider involved in the potential …","The set of colliders.","The set of colliders.","Finds all handles of all the colliders with an Aabb …","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Counters used for benchmarking only.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","Set the collider that will be excluded from the scene …","If set, this collider will be excluded from the scene …","Exclude from the query any collider attached to a …","Exclude from the query any collider attached to a fixed …","Exclude from the query any collider attached to a dynamic …","Set the rigid-body that will be excluded from the scene …","If set, any collider attached to this rigid-body will be …","Exclude from the query any collider that is a sensor.","Exclude from the query any collider that is not a sensor.","","","","Applies the contact pair filter.","Applies the contact pair filter.","Applies the intersection pair filter.","Applies the intersection pair filter.","Flags indicating what particular type of colliders should …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","","Only colliders with collision groups compatible with this …","If set, only colliders with collision groups compatible …","Handle a collision event.","","Handle a force event.","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Gets the handle of up to one collider intersecting the …","Find all the colliders containing the given point.","Find the all intersections between a ray and a set of …","Retrieve all the colliders intersecting the given shape.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","The contact manifold.","Modifies the set of contacts seen by the constraints …","Modifies the set of contacts seen by the constraints …","Initializes a new physics pipeline.","Initialize a new collision event handler from crossbeam …","Initializes a new physics pipeline.","Initializes an empty query pipeline.","A query filter that doesn’t exclude any collider.","Casts a shape with an arbitrary continuous motion and …","The contact normal that can be modified.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Excludes all colliders not attached to a dynamic …","Exclude all colliders attached to a non-fixed rigid-body …","Excludes all colliders not attached to a kinematic …","","","","Set the predicate to apply a custom collider filtering …","If set, any collider for which this closure returns false …","Find the projection of a point on the closest collider.","Find the projection of a point on the closest collider.","The query dispatcher used by this query pipeline for …","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","The handle of the first body involved in the potential …","The handle of the first body involved in the potential …","The handle of the first body involved in the potential …","The handle of the first body involved in the potential …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","The solver contacts that can be modified.","Executes one step of the collision detection.","Executes one timestep of the physics simulation.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Tests if the given collider should be taken into account …","Applies the filters described by <code>self</code> to a collider to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Update the acceleration structure on the query pipeline.","Helper function to update <code>self</code> to emulate a …","Update the query pipeline incrementally, avoiding a …","Update the acceleration structure on the query pipeline.","User-defined data attached to the manifold.","Initializes an empty query pipeline with a custom …","The time used to integrate the rigid-body’s velocity and …","A dynamically sized column-major matrix.","A dynamically sized column vector.","","Construct a fixed-size point directly from data.","Construct a fixed-size column vector directly from data.","The type of the array of orthonormal vectors.","Methods for simultaneously indexing a container with two …","The result of quaternion differentiation.","Trait to compute the orthonormal basis of a vector.","Trait implemented by quaternions.","The trait for real numbers used by Rapier.","Trait to copy the sign of each component of one …","Copy the sign of each component of <code>self</code> to the …","Compute the differential of <code>inv(q1) * q2</code>.","Gets mutable references to two distinct elements of the …","Gets a mutable reference to one element, and immutable …","Computes the vectors which, when combined with <code>self</code>, form …","Computes a vector orthogonal to <code>self</code> with a unit length …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,8,0,0,1,28,1,8,9,10,11,5,6,28,1,8,9,10,11,5,6,11,6,6,28,1,8,9,10,11,5,6,28,1,8,9,10,11,5,6,6,6,10,1,6,8,9,10,11,5,6,8,9,10,11,5,6,1,6,6,9,11,5,28,1,8,9,10,11,5,6,28,1,8,9,10,11,5,6,6,28,1,8,9,10,11,5,6,6,8,9,5,6,8,9,10,11,5,6,6,5,28,1,8,9,10,11,5,6,28,1,8,9,10,11,5,6,28,10,9,1,1,28,1,8,9,10,11,5,6,28,1,8,9,10,11,5,6,28,1,8,9,10,11,5,6,28,1,8,9,10,11,5,6,28,1,8,9,10,11,5,6,28,1,8,9,10,11,5,6,8,8,9,11,5,6,5,6,11,9,11,1,11,6,6,6,11,11,11,6,6,5,5,6,5,6,8,9,10,11,5,6,28,1,8,9,10,11,5,6,28,1,8,9,10,11,5,6,10,28,10,10,28,1,8,9,10,11,5,6,28,1,8,9,10,11,5,6,28,1,8,9,10,11,5,6,11,1,6,1,1,0,0,0,0,0,0,36,37,38,39,40,34,36,37,38,39,40,34,34,34,34,36,37,38,39,40,34,36,37,38,39,40,34,34,34,34,36,37,34,34,34,34,39,34,36,37,38,39,40,34,36,37,38,39,40,34,34,34,34,39,34,34,34,34,36,37,38,39,40,34,36,37,38,39,40,34,36,37,38,39,40,34,34,36,37,38,39,40,34,34,34,34,36,37,38,39,40,40,34,36,37,38,39,40,34,36,37,38,39,40,34,36,37,38,39,40,34,36,37,38,39,40,34,36,37,38,39,40,34,36,37,38,39,40,34,36,37,38,39,40,34,36,37,38,39,40,34,34,34,34,39,34,34,34,36,37,38,37,38,36,37,38,39,40,34,36,40,38,34,34,34,38,36,37,38,39,40,34,40,34,34,34,34,34,34,34,36,39,34,40,34,34,34,34,40,36,37,38,39,40,34,36,37,38,39,40,34,36,37,38,39,40,34,36,37,38,39,40,34,36,36,37,38,39,40,34,36,37,38,39,40,34,36,37,38,39,40,34,34,34,34,39,38,34,34,34,38,34,34,34,38,0,0,0,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,44,44,44,44,44,44,44,0,0,0,0,0,0,50,46,51,52,56,54,50,46,51,52,56,54,50,46,51,52,56,54,50,46,51,52,56,54,50,50,50,46,51,52,50,46,51,52,46,50,50,46,46,50,46,51,52,56,54,50,46,51,52,56,54,50,50,46,51,52,56,54,46,46,46,50,50,46,51,52,56,54,51,50,46,51,52,56,54,50,46,50,46,51,52,56,54,50,50,50,50,50,46,50,46,50,50,46,51,52,56,54,50,50,50,46,51,52,56,54,50,46,51,52,56,54,50,46,51,52,56,54,50,46,51,52,56,54,50,50,50,51,52,56,54,46,50,50,46,51,52,56,54,50,50,50,51,52,56,50,51,52,56,54,51,52,56,46,50,50,50,51,51,52,56,50,46,51,52,50,46,51,52,56,54,50,46,51,52,56,54,50,46,51,52,56,54,50,50,50,46,51,52,56,54,50,46,51,52,56,54,50,0,0,58,59,58,59,58,59,58,59,58,59,58,59,58,58,59,58,59,58,59,58,59,58,59,58,59,58,59,58,59,58,59,58,59,58,59,58,58,58,58,58,58,59,58,59,58,59,58,59,58,59,58,59,58,71,71,71,71,109,103,103,103,102,0,0,0,72,0,72,106,106,93,72,106,71,71,71,71,93,0,0,109,0,0,0,0,0,0,0,0,0,0,0,0,93,93,71,72,71,71,71,71,0,72,113,0,113,102,102,0,0,0,0,0,0,0,102,72,0,0,73,73,73,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,73,73,73,73,72,103,71,103,71,103,71,60,61,61,62,63,63,64,60,64,60,61,61,61,61,79,70,70,71,72,73,100,61,70,75,70,62,61,70,64,70,64,76,77,78,64,61,64,61,64,61,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,80,80,64,80,80,80,80,80,80,64,80,80,64,64,87,90,91,91,90,71,72,73,71,72,73,71,72,73,71,72,73,71,72,73,71,72,73,71,72,73,90,107,116,107,116,76,61,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,94,95,96,97,98,99,70,70,70,62,88,70,88,70,88,88,61,100,101,63,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,71,72,73,115,61,109,71,72,73,78,81,94,80,95,82,96,83,97,84,98,85,99,80,71,91,72,73,21,95,80,77,105,77,100,82,83,84,85,81,107,76,82,83,84,85,101,102,100,63,81,94,71,104,105,80,91,109,77,110,110,90,85,99,29,29,72,89,113,79,64,75,78,88,114,87,115,62,61,21,60,62,76,60,62,60,62,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,87,71,72,73,61,70,70,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,100,70,79,61,115,79,79,79,71,72,73,61,70,80,70,70,70,102,81,94,71,103,104,105,106,80,95,107,108,109,110,111,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,70,116,60,102,102,71,71,106,106,108,108,109,109,110,110,111,111,29,29,93,93,72,72,73,73,114,114,87,87,115,115,116,116,100,100,71,72,73,101,70,79,102,100,81,94,71,71,71,71,71,103,104,105,106,80,95,107,108,109,110,111,76,82,96,83,97,84,98,85,99,29,93,72,72,72,72,72,89,73,73,73,73,73,113,79,64,75,78,88,114,87,115,62,61,70,116,60,78,77,101,102,100,63,81,94,71,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,89,73,113,79,79,79,64,75,78,88,114,87,115,62,61,70,116,21,60,60,71,72,73,71,72,73,71,72,73,60,60,60,60,60,60,71,72,73,108,110,29,64,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,60,77,77,77,91,90,21,90,90,91,90,21,90,91,90,21,91,21,61,61,70,78,70,71,106,108,110,111,29,72,73,114,115,104,105,107,62,110,90,29,21,21,21,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,71,91,90,72,73,21,76,64,78,89,100,89,71,72,73,71,72,73,101,102,100,63,81,81,94,94,71,103,104,105,106,80,95,95,107,108,91,109,77,110,111,90,112,76,82,82,96,96,83,83,97,97,84,84,98,98,85,85,99,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,70,116,21,60,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,108,110,29,77,100,60,60,108,110,29,62,71,72,73,61,61,93,61,71,91,72,73,21,80,61,93,61,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,93,61,61,88,112,61,61,61,64,60,91,90,21,91,21,76,76,112,112,90,100,100,100,100,91,91,70,70,64,61,91,21,80,80,95,82,96,83,97,84,98,85,99,80,61,70,75,70,62,77,112,77,77,77,61,70,64,70,81,94,80,95,82,96,83,97,84,98,85,99,81,94,80,95,82,96,83,97,84,98,85,99,80,95,82,96,84,98,80,95,82,96,84,98,60,81,94,95,80,81,94,95,80,79,112,112,80,61,70,61,70,95,61,70,80,91,79,61,60,61,104,100,105,100,88,100,100,100,104,100,100,105,80,82,83,97,84,85,99,80,95,96,97,98,99,80,95,96,97,98,99,95,96,97,98,99,95,96,97,98,99,80,64,90,77,76,101,63,81,94,80,95,91,77,90,112,76,82,96,83,97,84,98,85,99,64,70,116,21,60,70,70,70,61,89,71,72,73,77,76,112,71,72,73,115,61,70,89,70,101,61,100,60,60,21,64,79,61,60,60,60,71,91,90,72,73,21,91,90,90,61,61,61,70,61,70,112,90,77,77,61,70,71,72,73,61,61,61,61,61,81,80,82,83,84,85,61,100,80,61,61,61,61,100,80,82,83,84,85,61,61,81,80,82,83,84,85,81,80,82,83,84,85,80,82,84,80,82,84,81,80,81,80,61,60,80,95,82,96,83,84,98,85,80,82,83,84,85,80,82,83,84,85,80,82,83,84,85,80,82,83,84,85,61,61,61,61,61,61,62,61,70,62,70,105,71,72,73,60,71,72,73,60,60,71,72,73,105,105,62,62,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,71,72,73,78,60,64,61,70,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,101,102,100,63,81,94,71,103,104,105,106,80,95,107,108,91,109,77,110,111,90,112,76,82,96,83,97,84,98,85,99,29,93,72,89,73,113,79,64,75,78,88,114,87,115,62,61,70,116,21,60,71,72,73,0,0,101,87,79,70,61,70,61,78,61,78,64,61,76,63,62,61,60,60,101,60,79,60,64,60,165,0,0,237,147,147,147,147,147,147,147,147,147,209,209,0,206,180,0,0,166,163,167,0,206,180,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,206,180,0,206,180,0,0,0,0,0,0,0,206,180,207,0,206,180,206,180,0,206,180,167,167,167,157,157,157,207,237,69,199,199,162,216,199,157,216,0,162,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,0,0,0,167,0,206,180,0,206,180,0,0,0,153,0,0,0,157,157,166,162,167,162,69,69,165,0,167,181,182,184,182,184,182,184,181,182,184,162,162,162,0,253,253,0,0,0,0,206,180,253,147,161,166,0,0,0,0,206,180,0,206,180,0,206,180,0,206,180,0,0,206,180,161,162,0,206,180,0,196,0,0,0,0,0,196,0,0,192,153,192,0,0,162,0,0,0,0,0,0,0,0,0,206,180,0,0,0,0,0,0,206,180,0,0,0,0,217,216,216,166,183,148,150,151,152,154,155,156,158,200,158,156,158,200,158,156,158,200,158,161,162,157,163,164,165,166,167,148,237,232,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,237,232,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,24,24,24,24,24,148,155,151,24,24,24,24,24,24,24,24,24,24,24,24,24,24,67,24,175,175,175,175,175,152,24,24,67,177,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,175,175,175,175,175,152,24,24,24,24,24,148,155,150,151,175,175,175,175,175,152,154,183,158,177,181,182,183,184,161,162,157,163,165,166,167,161,162,157,163,165,166,167,161,162,157,163,165,166,167,161,162,157,163,165,166,167,161,162,157,163,165,166,167,161,162,157,163,165,166,167,161,162,157,163,165,166,167,175,237,232,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,237,232,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,148,150,151,152,154,158,183,148,148,177,158,177,158,177,158,177,148,155,151,148,155,150,151,175,152,154,24,148,155,150,151,175,175,175,175,175,152,154,24,148,155,150,151,175,175,175,175,175,152,154,154,154,154,154,154,154,183,152,191,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,24,148,155,150,151,175,175,175,175,175,152,154,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,154,161,162,157,163,165,166,167,192,193,195,191,192,193,195,191,156,158,200,158,161,162,157,163,165,166,167,158,177,24,148,156,155,150,151,175,175,175,175,175,152,154,24,24,148,155,150,151,175,175,175,175,175,152,154,24,148,155,150,151,175,175,175,175,175,152,154,24,156,158,177,148,156,158,158,124,124,124,124,124,208,124,124,161,162,157,163,165,22,166,167,148,155,150,151,154,154,158,177,158,177,158,177,158,177,205,158,177,158,177,183,205,193,194,195,65,65,162,197,69,67,198,157,200,163,201,203,137,164,124,22,166,208,210,215,167,216,158,158,158,156,158,237,232,148,161,192,193,194,195,65,162,196,197,69,66,67,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,177,237,232,148,161,192,193,194,195,65,162,196,197,69,66,67,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,161,162,157,163,165,166,167,204,205,150,24,24,24,24,24,237,232,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,183,217,183,152,152,210,208,161,162,157,163,165,166,167,158,200,158,161,193,195,65,162,196,197,69,66,67,198,157,199,200,163,164,165,150,181,206,207,152,166,209,167,216,217,161,161,195,195,65,65,162,162,196,196,197,197,157,157,199,199,200,200,163,163,164,164,165,165,206,206,207,207,166,166,209,209,167,167,216,216,217,217,161,162,157,163,165,166,167,151,183,217,214,211,183,152,215,152,152,24,152,208,205,205,164,191,148,148,151,205,161,161,161,161,161,192,193,195,65,162,162,162,162,162,196,197,66,67,198,157,157,157,157,157,199,200,163,163,163,163,163,201,202,203,204,164,205,165,165,165,165,165,150,175,181,206,182,207,152,166,166,166,166,166,154,208,183,184,209,209,211,212,213,214,167,167,167,167,167,216,217,156,158,198,204,158,156,158,198,158,237,232,148,148,148,161,192,193,194,195,65,162,196,197,69,69,66,67,67,198,157,199,200,200,200,163,201,202,191,203,204,137,164,205,165,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,208,208,183,184,209,210,211,212,213,214,215,167,216,217,217,177,183,161,162,157,163,165,166,167,161,162,157,163,165,166,167,161,162,157,163,165,166,167,193,152,152,206,161,162,157,163,165,166,167,65,237,232,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,206,22,22,22,22,211,212,213,215,158,177,66,124,191,161,192,195,65,162,197,157,199,200,163,164,165,206,166,167,216,217,158,177,154,67,201,65,22,22,137,22,148,151,237,232,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,175,161,162,157,163,165,22,166,167,22,137,137,137,137,137,137,202,161,162,157,163,165,166,167,124,124,124,124,148,148,148,148,148,124,124,161,162,157,163,165,166,167,237,232,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,237,232,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,237,232,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,237,232,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,65,65,22,24,161,162,157,163,165,166,167,148,204,24,150,175,175,175,175,175,152,254,152,217,161,162,157,163,165,22,166,167,156,217,237,232,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,204,182,196,156,158,217,217,22,22,22,22,22,148,155,150,151,152,154,148,155,150,151,152,154,205,205,148,254,152,179,175,152,179,175,177,191,154,171,148,155,151,253,171,148,155,151,253,171,148,155,151,156,158,24,148,69,156,158,155,150,151,175,175,175,175,175,152,154,158,156,193,193,191,164,154,162,162,148,194,195,198,137,164,205,124,158,22,155,150,151,154,208,183,177,232,214,164,203,150,161,162,157,163,165,166,167,154,203,154,211,151,148,208,156,161,162,157,163,165,166,167,204,152,158,177,66,156,158,158,156,158,148,155,150,151,175,152,154,183,148,155,150,151,175,152,154,183,148,151,154,183,148,151,148,154,148,171,148,148,155,155,151,124,211,137,203,161,162,157,163,165,22,166,167,192,156,158,198,204,158,156,158,198,158,148,151,203,203,154,156,158,158,177,158,177,158,177,158,177,158,177,158,177,158,177,158,177,184,154,148,150,151,152,154,158,151,177,151,151,192,158,161,162,157,163,165,166,167,156,156,156,154,156,156,156,156,148,156,156,156,156,22,156,156,156,156,156,156,154,156,156,156,156,156,156,158,156,24,148,155,150,151,175,175,175,175,175,152,154,155,156,183,154,154,203,203,156,158,200,158,148,192,192,161,162,157,163,165,166,167,161,162,157,163,165,166,167,152,179,179,195,161,162,157,163,165,166,167,201,204,157,164,175,175,175,175,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,209,237,232,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,237,232,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,152,154,161,162,157,163,165,166,167,148,193,193,191,191,208,148,156,158,148,158,177,154,154,148,154,154,154,154,158,177,158,177,237,232,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,237,232,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,214,237,232,148,161,192,193,194,195,65,162,196,197,69,66,67,198,157,199,200,163,201,202,191,203,204,137,164,205,165,124,156,158,22,155,150,151,175,181,206,180,182,207,152,166,154,208,183,184,209,210,211,212,213,214,215,167,216,217,177,253,171,148,155,151,154,154,161,162,157,163,165,166,167,154,154,217,216,216,216,194,158,203,156,158,217,214,148,151,152,208,215,152,210,208,156,183,164,148,164,124,154,154,195,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,239,0,0,159,159,0,0,0,252,240,240,240,240,240,0,160,160,160,240,240,240,0,0,0,0,0,0,0,252,252,159,160,240,243,246,245,247,244,252,159,160,23,240,26,243,246,245,247,244,252,159,160,23,240,26,159,160,240,159,160,240,159,160,240,159,160,240,159,160,240,159,160,240,159,160,240,245,247,243,246,245,247,244,252,159,160,23,240,26,243,246,245,247,244,252,159,160,23,240,26,23,23,23,159,160,23,240,26,159,160,23,240,26,159,160,240,245,247,245,247,245,247,23,159,160,240,159,160,240,244,243,244,159,160,23,240,26,243,246,245,247,244,252,159,160,23,240,26,243,246,245,247,244,252,159,160,23,240,26,159,160,240,243,246,245,247,244,252,159,160,23,240,26,159,160,240,159,160,240,159,159,160,160,240,240,26,26,26,26,26,26,26,26,26,159,160,240,251,251,251,251,26,159,159,159,159,159,160,160,160,160,160,240,240,240,240,240,243,246,245,247,244,252,159,160,23,240,26,26,26,159,160,240,159,160,240,159,160,240,159,160,240,243,246,245,247,244,252,159,160,23,240,26,26,26,139,246,139,246,159,160,240,243,246,245,247,244,252,159,160,23,240,26,159,160,240,159,160,240,23,23,23,23,159,160,240,243,246,245,247,244,252,159,160,23,240,26,243,246,245,247,244,252,159,160,23,240,26,243,246,245,247,244,252,159,160,23,240,243,246,245,247,244,252,159,160,23,240,26,159,160,240,159,160,240,243,246,245,247,244,252,159,160,23,240,26,247,251,251,243,246,244,23,26,23,247,159,160,240,26,26,26,159,160,240,26,26,23,23,23,159,160,240,245,247,245,247,159,160,240,247,243,244,159,160,240,159,160,240,159,160,240,240,26,159,160,23,240,26,243,246,245,247,244,252,159,160,23,240,26,243,246,245,247,244,252,159,160,23,240,26,159,160,240,243,246,245,247,244,252,159,160,23,240,26,243,246,245,247,244,252,159,160,23,240,26,243,246,245,247,244,252,159,160,23,240,26,159,160,240,23,247,23,23,247,23,256,0,0,0,0,0,257,0,258,0,0,0,0,259,258,260,260,257,257],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,[3,[2]],[4,[2]],[4,[2]],2,2,5],6],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,[6,[[4,[2]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[6,[[3,[2]]]],0,0,0,[8,8],[9,9],[10,10],[11,11],[5,5],[6,6],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],9],[[],11],[[],5],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],0,[12],[12],[12],[12],[12],[12],[12],[12],0,[[8,8],13],[[9,9],13],[[5,5],13],[[6,6],13],[[8,14],15],[[9,14],15],[[10,14],15],[[11,14],15],[[5,14],15],[[6,14],15],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[8,20],8],[[8,20],8],0,0,0,0,0,0,0,0,[[11,2,21,22,23,24,[25,[2]],[4,[2]],26,27],28],[29,1],0,0,0,0,0,0,[[11,2,21,22,23,24,2,10,26]],0,[6,[[4,[2]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],0,[[1,2,21,22,23,26]],0,[1,[[33,[6]]]],[1,[[33,[6]]]],0,0,0,0,0,0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[34],[34],[34,35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[34],[34],[34,35],0,0,0,[34],[34],[34,35],0,0,[36,36],[37,37],[38,38],[39,39],[40,40],[34,34],[[]],[[]],[[]],[[]],[[]],[[]],[34],[34],[34,35],0,0,[34],[34],[34,35],[[],36],[[],37],[[],38],[[],39],[[],40],[[],34],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[34],[12],[12],[12],[12],[12],[12],[34],[34,13],0,[[36,14],15],[[37,14],15],[[38,14],15],[[39,14],15],[[40,14],[[31,[41]]]],[[40,14],15],[[34,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],[[]],[[]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[34],[34],[34,35],0,[34],[34],[34,35],0,0,0,0,0,[[],36],[[],37],[[],38],[[],39],[[],40],[13,34],0,[40],0,[34],[34],[34,35],0,[36],[37],[38],[39],[40],[34],[40],[[34,12]],[[34,12]],[[34,12]],0,[34],[34],[34,35],0,0,0,[40],[34],[34],[34,35],0,[40,35],[[]],[[]],[[]],[[]],[[]],[[]],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[34],[34],[34,35],0,0,[34],[34],[34,35],0,[34],[34],[34,35],0,0,0,0,0,[[],7],[[],7],[[]],[[]],[[[44,[43]]],[[44,[43]]]],[[]],[[],[[44,[45]]]],[12],[12],[12],[[[44,[43]],46,43],43],[[[44,[43]],46,46,43]],[[[44,[47]],14],15],[[]],[[]],[[44,46],30],[[44,46],30],[[44,48],30],[[],12],[[[44,[[0,[43,45]]]],46,[0,[43,45]]]],[[]],[[[17,[16]]],[[17,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[],13],[44,49],[[],44],0,[[44,46],30],[[]],[[],30],[[]],[[],31],[[],31],[[],32],0,0,0,0,0,0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[50,12],[50],[[[50,[43]]],[[50,[43]]]],[46,46],[[[51,[43]]],[[51,[43]]]],[[[52,[43]]],[[52,[43]]]],[[]],[[]],[[]],[[]],[[46,46],53],[[50,46],13],[[],50],[[],46],[[],46],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[50,54],[12],[12],[12],[12],[12],[12],[[46,46],13],[[],13],[[],13],[[50,55]],[[[50,[47]],14],15],[[46,14],15],[[[51,[47]],14],15],[[[52,[47]],14],15],[[[56,[47]],14],15],[[[54,[47]],14],15],[27],[[]],[[]],[[]],[[]],[[]],[[]],[55,50],[[48,48],46],[[]],[[]],[[]],[[]],[[]],[[]],[[50,46],30],[[50,46,46]],[[50,46],30],[[50,48],30],[[50,48],30],[[46,57]],[[50,46]],[46,12],[[50,46]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[50,46],[[50,20],46],[[]],[[]],[[]],[[]],[[]],[[]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[50],[50],[50],[[]],[[]],[[]],[[]],[46],[50,13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[50,52],[50,56],[50,12],[51,12],[52,12],[56,12],[[],50],[51,30],[52,30],[56,30],[54,30],[51,30],[52,30],[56,30],[[46,46],[[30,[53]]]],[[50,46],30],[[50,12]],[[50,27]],[51],[[],12],[52],[56],[[]],[[]],[[]],[[]],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[50,[[31,[46]]]],[[50,20],[[31,[46,20]]]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[12,50],0,0,[[58,59]],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[[59,[43]]],[[59,[43]]]],[[[58,[43]]],[[58,[43]]]],[[]],[[]],[[],[[58,[45]]]],[12],[12],[12],[12],[12],[12],[[]],[[]],[[]],[[]],[[],12],[[],12],[[]],[[]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[],13],[[],13],[[],58],[58],[[58,59],49],[[58,59,12],30],[58,59],[[]],[[]],[[],30],[[],30],[[]],[[]],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[60,60],13],[61,62],[61,62],[[],62],[63,[[33,[29]]]],[63,[[33,[29]]]],[[64,64],64],[[60,60],60],[[64,64]],[[60,60]],[[61,65,66,67,68,69]],[[61,[4,[2]],13]],[[61,[4,[2]],[3,[2]],13]],[[61,[4,[2]],13]],0,[[70,2],70],[[70,60],70],[[],71],[[],72],[[],73],0,[61,2],[[70,2],70],0,0,0,[61,[[4,[2]]]],[[70,[74,[2]]],70],0,0,[[64,2,75],64],[[76,[33,[2]]]],[[77,[33,[2]]]],[[78,79,[4,[2]],[3,[2]]]],[[64,79,[4,[2]]]],[[61,[4,[2]],13]],[[64,79,[4,[2]],[3,[2]]]],[[61,[4,[2]],[3,[2]],13]],[[64,79,[4,[2]]]],[[61,[4,[2]],13]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[80,[[30,[81]]]],[80,[[30,[81]]]],[64,[[33,[2]]]],[80,[[30,[82]]]],[80,[[30,[82]]]],[80,[[30,[83]]]],[80,[[30,[83]]]],[80,[[30,[84]]]],[80,[[30,[84]]]],[64,[[33,[2]]]],[80,[[30,[85]]]],[80,[[30,[85]]]],[64,[[86,[2]]]],[64,[[86,[2]]]],[[87,72,88,79,89,65,67,66,68,69]],[[90,29],49],[[91,29],49],[[91,29],49],[[90,29],49],[[71,71],71],[[72,72],72],[[73,73],73],[[71,71]],[[72,72]],[[73,73]],[[71,71],71],[[72,72],72],[[73,73],73],[[71,71]],[[72,72]],[[73,73]],[71,92],[72,48],[73,92],[[71,71],71],[[72,72],72],[[73,73],73],[[71,71]],[[72,72]],[[73,73]],[[90,29],49],0,0,0,0,[76,[[25,[2]]]],[61,93],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[94,81],[95,80],[96,82],[97,83],[98,84],[99,85],[70,61],[[70,13],70],0,[[],62],0,[[70,13],70],0,0,0,0,[61,[[3,[2]]]],[100,2],0,[[63,21]],[101,101],[102,102],[100,100],[63,63],[81,81],[94,94],[71,71],[103,103],[[[104,[43]]],[[104,[43]]]],[105,105],[106,106],[80,80],[95,95],[107,107],[108,108],[91,91],[109,109],[77,77],[110,110],[111,111],[90,90],[112,112],[76,76],[82,82],[96,96],[83,83],[97,97],[84,84],[98,98],[85,85],[99,99],[29,29],[93,93],[72,72],[89,89],[73,73],[113,113],[79,79],[64,64],[75,75],[78,78],[88,88],[114,114],[87,87],[115,115],[62,62],[61,61],[70,70],[116,116],[21,21],[60,60],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[71,71],53],[[72,72],53],[[73,73],53],[[115,115],53],[61,[[33,[65]]]],[[109,2,2,2]],[71,71],[72,72],[73,73],[[78,[4,[2]],[4,[2]]]],[81,13],[[94,13],94],[80,13],[[95,13],95],[82,13],[[96,13],96],[83,13],[[97,13],97],[84,13],[[98,13],98],[85,13],[[99,13],99],0,[[71,71],13],[[91,108],13],[[72,72],13],[[73,73],13],[[21,29],13],[[95,71],95],0,[77,[[117,[2]]]],0,[77,[[117,[2]]]],0,[82,80],[83,80],[84,80],[85,80],0,0,0,0,0,0,0,[[],101],[[],102],[[],100],[[],63],[[],81],[[],94],[[],71],[[],[[104,[118]]]],[[],105],[[],80],[[],91],[[],109],[[],77],[[],110],[[],110],[[],90],[[],85],[[],99],[[],29],[[],29],[[],72],[[],89],[[],113],[[],79],[[],64],[[],75],[[],78],[[],88],[[],114],[[],87],[[],115],[[],62],[[],61],[[],21],[[],60],[[],2],[[76,[119,[2]]]],[[]],[[],2],[[]],[[],2],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[[87,72,65]],[[71,71],71],[[72,72],72],[[73,73],73],[61,120],[[70,120],70],0,[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],0,[[],70],[79,[[121,[2]]]],[61,122],[[115,93],122],0,[79,[[4,[2]]]],0,[[],71],[[],72],[[],73],[[61,13]],[[70,13],70],0,0,[[70,13,13,13],70],[[70,13,13,13],70],[[102,102],13],[[81,81],13],[[94,94],13],[[71,71],13],[[103,103],13],[[[104,[123]],[104,[123]]],13],[[105,105],13],[[106,106],13],[[80,80],13],[[95,95],13],[[107,107],13],[[108,108],13],[[109,109],13],[[110,110],13],[[111,111],13],[[82,82],13],[[96,96],13],[[83,83],13],[[97,97],13],[[84,84],13],[[98,98],13],[[85,85],13],[[99,99],13],[[29,29],13],[[93,93],13],[[72,72],13],[[89,89],13],[[73,73],13],[[113,113],13],[[79,79],13],[[64,64],13],[[75,75],13],[[78,78],13],[[88,88],13],[[114,114],13],[[87,87],13],[[115,115],13],[[62,62],13],[[70,70],13],[[116,116],13],[[60,60],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[100,2],[[71,55]],[[72,55]],[[73,55]],[[101,2,63,21,22,124],[[30,[2]]]],[[],70],0,[[102,14],15],[[100,14],15],[[81,14],15],[[94,14],15],[[71,14],15],[[71,14],15],[[71,14],15],[[71,14],15],[[71,14],15],[[103,14],15],[[[104,[47]],14],15],[[105,14],15],[[106,14],15],[[80,14],15],[[95,14],15],[[107,14],15],[[108,14],15],[[109,14],15],[[110,14],15],[[111,14],15],[[76,14],15],[[82,14],15],[[96,14],15],[[83,14],15],[[97,14],15],[[84,14],15],[[98,14],15],[[85,14],15],[[99,14],15],[[29,14],15],[[93,14],15],[[72,14],15],[[72,14],15],[[72,14],15],[[72,14],15],[[72,14],15],[[89,14],15],[[73,14],15],[[73,14],15],[[73,14],15],[[73,14],15],[[73,14],15],[[113,14],15],[[79,14],15],[[64,14],15],[[75,14],15],[[78,14],15],[[88,14],15],[[114,14],15],[[87,14],15],[[115,14],15],[[62,14],15],[[61,14],15],[[70,14],15],[[116,14],15],[[60,14],[[31,[41]]]],0,[[77,21,13]],[[]],[[]],[[]],[[]],[[]],[[]],[103,71],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],89],[[]],[[]],[60,79],[[]],[73,79],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[125,125],60],[92,[[30,[71]]]],[48,[[30,[72]]]],[92,[[30,[73]]]],[92,71],[48,72],[92,73],[92,71],[48,72],[92,73],[[125,[127,[125,126]],[127,[125,126]],125],60],[[125,33],60],[[125,125,125],60],[[125,[33,[[127,[125,126]]]],[33,[[128,[48]]]]],60],[[125,[130,[125,126,126,[129,[125]]]]],60],[[125,125,125],60],[55,71],[55,72],[55,73],[[48,48],108],[[48,48],110],[[48,48],29],[[[33,[2]]],64],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[125,[33,[[127,[125,126]]]],[33,[[128,[48]]]]],60],[77,[[131,[2]]]],[77,[[131,[2]]]],[77,[[119,[2]]]],[[91,108],[[30,[107]]]],[[90,110],30],[[21,29],[[30,[61]]]],[[90,111],[[30,[77]]]],[[90,111],[[30,[77]]]],[[91,108],[[30,[107]]]],[[90,110],30],[[21,29],[[30,[61]]]],[[90,110],30],[[91,48],30],[[90,48],30],[[21,48],30],[[91,48],30],[[21,48],30],[[61,2,[4,[2]]],2],[61,2],[[70,2],70],0,0,[[71,57]],[[106,57]],[[108,57]],[[110,57]],[[111,57]],[[29,57]],[[72,57]],[[73,57]],[[114,57]],[[115,57]],0,0,0,[[],62],[110,12],[[90,111],77],[29,12],[[21,46],61],[[21,29],61],[[21,29],61],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[71,71]],[[91,29,29,[132,[80]],13],108],[[90,29,29,[132,[80]],13],[[30,[110]]]],[[72,72]],[[73,73]],[[21,[132,[61]]],29],[[76,2,[33,[2]]]],[[64,2,[25,[2]],[3,[2]]],[[25,[2]]]],[[78,2,64,79],64],[[89,2,78,64,79],[[25,[2]]]],0,[[89,2,[3,[2]]],64],[[71,71],71],[[72,72],72],[[73,73],73],[[71,71],13],[[72,72],13],[[73,73],13],[[]],[[]],[[]],[[]],[[]],[81,80],[[]],[94,80],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[95,80],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[82,80],[[]],[[]],[96,80],[83,80],[[]],[[]],[97,80],[[]],[84,80],[98,80],[[]],[[]],[85,80],[99,80],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[70,61],[[]],[[]],[[]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[108],[110],[29],[77,[[134,[2,133,133]]]],[100,2],0,0,[[],108],[[],110],[[],29],[62,13],[71,13],[72,13],[73,13],[61,13],[61,13],[93,13],[61,13],[71,13],[91,13],[72,13],[73,13],[21,13],[80,13],[61,13],[93,13],[61,13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[93,13],[61,13],[61,13],[[88,2,64,[30,[78]]],13],[112,13],[61,[[128,[13]]]],[61,13],[61,13],[64,13],[60,13],[91,49],[90,49],[21,49],[91,49],[21,49],[[76,[135,[2]],[136,[2]]]],[[76,[33,[2]]],64],[112,76],0,[[90,29,29],30],[100,2],0,0,[100,2],[91,[[137,[29,107]]]],[[91,29,29],49],[[],70],[[],70],[[64,79],2],[61,2],[91,12],[21,12],0,[[80,103],[[30,[[104,[2]]]]]],[[95,103,[128,[2]]],95],[82,[[30,[[104,[2]]]]]],[[96,[128,[2]]],96],[83,[[30,[[104,[2]]]]]],[[97,[128,[2]]],97],[[84,103],[[30,[[104,[2]]]]]],[[98,[128,[2]]],98],[[85,103],[[30,[[104,[2]]]]]],[[99,103,[128,[2]]],99],0,[61,2],[[70,2],70],0,0,0,[[77,12],[[30,[112]]]],[112,12],[[77,12],[[30,[112]]]],[77,49],[77,49],[61,[[4,[2]]]],[[70,[4,[2]]],70],0,0,[81,[[3,[2]]]],[[94,[3,[2]]],94],[80,[[3,[2]]]],[[95,[3,[2]]],95],[82,[[3,[2]]]],[[96,[3,[2]]],96],[83,[[3,[2]]]],[[97,[3,[2]]],97],[84,[[3,[2]]]],[[98,[3,[2]]],98],[85,[[3,[2]]]],[[99,[3,[2]]],99],[81,[[3,[2]]]],[[94,[3,[2]]],94],[80,[[3,[2]]]],[[95,[3,[2]]],95],[82,[[3,[2]]]],[[96,[3,[2]]],96],[83,[[3,[2]]]],[[97,[3,[2]]],97],[84,[[3,[2]]]],[[98,[3,[2]]],98],[85,[[3,[2]]]],[[99,[3,[2]]],99],[80,[[138,[2]]]],[[95,[138,[2]]],95],[82,[[138,[2]]]],[[96,[138,[2]]],96],[84,[[138,[2]]]],[[98,[138,[2]]],98],[80,[[138,[2]]]],[[95,[138,[2]]],95],[82,[[138,[2]]]],[[96,[138,[2]]],96],[84,[[138,[2]]]],[[98,[138,[2]]],98],0,[81,[[25,[2]]]],[[94,[25,[2]]],94],[[95,[25,[2]]],95],0,[81,[[25,[2]]]],[[94,[25,[2]]],94],[[95,[25,[2]]],95],0,0,[112,[[25,[2]]]],[112,[[25,[2]]]],[[80,71],80],[[61,13,13]],[70,70],[[61,13,13]],[70,70],[[95,71],95],[61,73],[[70,73],70],0,[[91,29,27]],[79,2],[61,2],[60,125],[61,79],0,0,0,0,[[88,64],2],0,0,0,0,0,0,0,[[80,103],[[30,[105]]]],[82,[[30,[105]]]],[83,[[30,[105]]]],[[97,2,2,2,2],97],[[84,103],[[30,[105]]]],[[85,103],[[30,[105]]]],[[99,103,2,2,2,2],99],0,[[95,103,2],95],[[96,2],96],[[97,2],97],[[98,2],98],[[99,103,2],99],[[80,103],[[30,[109]]]],[[95,103,109],95],[[96,109],96],[[97,109],97],[[98,109],98],[[99,103,109],99],[[95,103,2,2,2],95],[[96,2,2,2],96],[[97,2,2,2],97],[[98,2,2,2],98],[[99,103,2,2,2],99],[[95,103,2,2],95],[[96,2,2],96],[[97,2,2],97],[[98,2,2],98],[[99,103,2,2],99],0,[[64,2],64],[90,49],[77,12],[76,12],[[],101],[[],63],[[],81],[[],94],[71,80],[71,95],[[],91],[[],77],[[],90],[[29,12,12,12,76,[25,[2]],[25,[2]]],112],[80,76],[[[138,[2]]],82],[[[138,[2]]],96],[[[138,[2]]],83],[[[138,[2]]],97],[[],84],[[],98],[[],85],[[],99],[[[4,[2]],[74,[2]]],64],[93,70],[[29,29],116],[[],21],[[[127,[125,126]],125,[130,[125,126,126,[129,[125]]]]],60],[[],70],[[],70],[[],70],[61,[[25,[2]]]],0,[71,71],[72,72],[73,73],[77,12],[76,12],[112,[[30,[12]]]],[[71,71],[[30,[53]]]],[[72,72],[[30,[53]]]],[[73,73],[[30,[53]]]],[[115,115],[[30,[53]]]],[61,[[25,[2]]]],[[70,[25,[2]]],70],0,0,0,[[61,2],[[25,[2]]]],0,[60,[[130,[125,126,126,[129,[125]]]]]],0,[[21,22]],[64,2],[[79,22,87,[25,[2]]]],[[61,22]],[60,[[130,[125,126,126,[129,[125]]]]]],[60,[[130,[125,126,126,[129,[125]]]]]],[[60,60],13],[[71,71]],[[91,108,13],[[30,[107]]]],[[90,110,13]],[[72,72]],[[73,73]],[[21,29,63,22,91,90,13],[[30,[61]]]],[[91,29],[[140,[108]]]],[[90,29]],[[90,29,13]],[[61,13]],[[61,13]],[[61,13,13,13,13]],[[70,13,13,13],70],[[61,13,13,13,13]],[[70,13,13,13],70],[112,29],[[90,29],[[30,[0]]]],[77,112],[77,112],[61,[[135,[2]]]],[[70,[74,[2]]],70],[[71,71,13]],[[72,72,13]],[[73,73,13]],[[61,2,13]],[[61,60,13]],[[61,2]],[[61,[4,[2]],13]],[[61,93,13]],[[81,13],81],[[80,13],80],[[82,13],82],[[83,13],83],[[84,13],84],[[85,13],85],[[61,120]],[[100,2]],[[80,13]],[[61,13]],[[61,13,13,13,13]],[[61,13,13,13,13]],[[61,2,13]],[[100,2]],[[80,103,[128,[2]]],80],[[82,[128,[2]]],82],[[83,[128,[2]]],83],[[84,[128,[2]]],84],[[85,103,[128,[2]]],85],[[61,2]],[[61,[4,[2]],13]],[[81,[3,[2]]],81],[[80,[3,[2]]],80],[[82,[3,[2]]],82],[[83,[3,[2]]],83],[[84,[3,[2]]],84],[[85,[3,[2]]],85],[[81,[3,[2]]],81],[[80,[3,[2]]],80],[[82,[3,[2]]],82],[[83,[3,[2]]],83],[[84,[3,[2]]],84],[[85,[3,[2]]],85],[[80,[138,[2]]],80],[[82,[138,[2]]],82],[[84,[138,[2]]],84],[[80,[138,[2]]],80],[[82,[138,[2]]],82],[[84,[138,[2]]],84],[[81,[25,[2]]],81],[[80,[25,[2]]],80],[[81,[25,[2]]],81],[[80,[25,[2]]],80],[[61,73,13]],[[60,125,13]],[[80,103,2,2,2,2],80],[[95,103,2,2,2,2],95],[[82,2,2,2,2],82],[[96,2,2,2,2],96],[[83,2,2,2,2],83],[[84,2,2,2,2],84],[[98,2,2,2,2],98],[[85,103,2,2,2,2],85],[[80,103,2],80],[[82,2],82],[[83,2],83],[[84,2],84],[[85,103,2],85],[[80,103,109],80],[[82,109],82],[[83,109],83],[[84,109],84],[[85,103,109],85],[[80,103,2,2,2],80],[[82,2,2,2],82],[[83,2,2,2],83],[[84,2,2,2],84],[[85,103,2,2,2],85],[[80,103,2,2],80],[[82,2,2],82],[[83,2,2],83],[[84,2,2],84],[[85,103,2,2],85],[[61,[25,[2]]]],[[61,[135,[2]]]],[[61,[4,[2]]]],[[61,[25,[2]],13]],[[61,[135,[2]],13]],[[61,[4,[2]],13]],[62],[61],[[70,13],70],0,0,0,[[71,71],71],[[72,72],72],[[73,73],73],[[60,60],60],[[71,71]],[[72,72]],[[73,73]],[[60,60]],[49,60],[[71,71],71],[[72,72],72],[[73,73],73],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[71,71]],[[72,72]],[[73,73]],0,[[60,[143,[125,[142,[[141,[125]]]]]]],60],[[64,[135,[2]]],64],[61,[[4,[2]]]],[[70,[4,[2]]],70],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[71,71],71],[[72,72],72],[[73,73],73],[[100,77,112,[128,[2]],2,12,12,[117,[2]],[140,[0]],[30,[12]]]],[[100,77,112,105,2,[30,[[128,[2]]]],12,12,[117,[2]],[140,[0]],[30,[12]]]],[[101,63,21,2,13],13],[[87,22,[140,[65]],[25,[2]]]],[[79,[25,[2]]]],[[70,144],70],0,0,[61,[[4,[2]]]],0,[61,[[74,[2]]]],0,[[64,[3,[2]],[3,[2]]],[[4,[2]]]],[[61,[3,[2]]],[[4,[2]]]],[[76,100,77,112,12,12,[117,[2]],[140,[0]],[30,[12]]]],[[63,21,29,13]],[[62,13]],[[61,13]],[[[127,[125,126]],125,[130,[125,126,126,[129,[125]]]]],60],[[[127,[125,126]],125,[130,[125,126,126,[129,[125]]]],[142,[[141,[125]]]]],60],[145,101],[[60,[143,[125,[142,[[141,[125]]]]]]],[[127,[125,126]]]],0,[[60,[142,[[141,[125]]]]],[[146,[125]]]],[[],64],[[],60],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[148,[147]],[143,[125,[142,[[141,[125]]]]]]],149],[[150,[143,[125,[142,[[141,[125]]]]]]],149],[[151,[143,[125,[142,[[141,[125]]]]]]],149],[[152,[143,[125,[142,[[141,[125]]]]]]],149],[[[154,[153]],[143,[125,[142,[[141,[125]]]]]]],149],[155,[[33,[149]]]],[156,157],[[158,157],158],0,0,[156,159],[[158,159],158],0,0,[156,160],[[158,160],158],0,0,[[],161],[[],162],[[],157],[[],163],[[],164],[[],165],[[],166],[[],167],[[[148,[168]],[148,[168]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[24,[[30,[169]]]],[24,[[30,[169]]]],[24,[[30,[170]]]],[24,[[30,[170]]]],[[],[[30,[171]]]],[[[148,[168]]],[[30,[171]]]],[155,[[30,[171]]]],[151,[[30,[171]]]],[24,[[30,[155]]]],[24,[[30,[155]]]],[24,[[30,[172]]]],[24,[[30,[172]]]],[24,[[30,[152]]]],[24,[[30,[152]]]],[24,[[30,[173]]]],[24,[[30,[173]]]],[24,[[30,[174]]]],[24,[[30,[174]]]],[24,[[30,[150]]]],[24,[[30,[150]]]],[24,[[30,[[154,[168]]]]]],[24,[[30,[[154,[168]]]]]],[67,[[25,[2]]]],[[],30],[[[175,[172]]],30],[[[175,[152]]],30],[[[175,[174]]],30],[[[175,[176]]],30],[[[175,[173]]],30],[152,30],[24,[[30,[151]]]],[24,[[30,[151]]]],[67,[[25,[2]]]],[177,24],[24,[[30,[[175,[172]]]]]],[24,[[30,[[175,[172]]]]]],[24,[[30,[[175,[152]]]]]],[24,[[30,[[175,[152]]]]]],[24,[[30,[[175,[173]]]]]],[24,[[30,[[175,[173]]]]]],[24,[[30,[[175,[174]]]]]],[24,[[30,[[175,[174]]]]]],[24,[[30,[[175,[176]]]]]],[24,[[30,[[175,[176]]]]]],[24,[[30,[178]]]],[24,[[30,[178]]]],[24,[[30,[24]]]],[24,[[30,[24]]]],[[],[[30,[179]]]],[[[175,[174]]],[[30,[179]]]],[[[175,[152]]],[[30,[179]]]],[[[175,[173]]],[[30,[179]]]],[[[175,[172]]],[[30,[179]]]],[[[175,[176]]],[[30,[179]]]],[152,[[30,[179]]]],[24,[[30,[176]]]],[24,[[30,[176]]]],[24,[[30,[[148,[168]]]]]],[24,[[30,[[148,[168]]]]]],[[],180],[[[148,[168]]],180],[155,180],[150,180],[151,180],[[[175,[172]]],180],[[[175,[152]]],180],[[[175,[174]]],180],[[[175,[176]]],180],[[[175,[173]]],180],[152,180],[[[154,[168]]],180],0,[2,158],[125,177],[181,[[128,[125]]]],[182,[[30,[[128,[125]]]]]],[[183,[127,[125,126]]],[[30,[[128,[125]]]]]],[184,[[30,[[128,[125]]]]]],[[161,161],161],[[162,162],162],[[157,157],157],[[163,163],163],[[165,165],165],[[166,166],166],[[167,167],167],[[161,161]],[[162,162]],[[157,157]],[[163,163]],[[165,165]],[[166,166]],[[167,167]],[[161,161],161],[[162,162],162],[[157,157],157],[[163,163],163],[[165,165],165],[[166,166],166],[[167,167],167],[[161,161]],[[162,162]],[[157,157]],[[163,163]],[[165,165]],[[166,166]],[[167,167]],[161,48],[162,48],[157,185],[163,48],[165,48],[166,92],[167,92],[[161,161],161],[[162,162],162],[[157,157],157],[[163,163],163],[[165,165],165],[[166,166],166],[[167,167],167],[[161,161]],[[162,162]],[[157,157]],[[163,163]],[[165,165]],[[166,166]],[[167,167]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[148,[168]],[143,[125,[142,[[141,[125]]]]]]],186],[[150,[143,[125,[142,[[141,[125]]]]]]],186],[[151,[143,[125,[142,[[141,[125]]]]]]],186],[[152,[143,[125,[142,[[141,[125]]]]]]],186],[[[154,[153]],[143,[125,[142,[[141,[125]]]]]]],186],[158,156],0,[[[148,[168]],12,125,125],[[187,[151]]]],[[[148,[168]],12,125,125],[[188,[[148,[168]]]]]],[[[127,[125,126]],[127,[125,126]],125],177],[[2,2],158],[[125,125],177],[[2,2],158],[[125,125],177],[[2,2],158],[[125,125],177],[[[148,[168]],189,125,13],[[30,[125]]]],[[155,189,125,13],[[30,[125]]]],[[151,189,125,13],[[30,[125]]]],[[[148,[168]],189,125,13],[[30,[190]]]],[[155,189,125,13],[[30,[190]]]],[[150,189,125,13],[[30,[190]]]],[[151,189,125,13],[[30,[190]]]],[[[175,[179]],189,125,13],[[30,[190]]]],[[152,189,125,13],[[30,[190]]]],[[[154,[153]],189,125,13],[[30,[190]]]],[[],125],[[[148,[168]]],125],[155,125],[150,125],[151,125],[[[175,[176]]],125],[[[175,[174]]],125],[[[175,[173]]],125],[[[175,[172]]],125],[[[175,[152]]],125],[152,125],[[[154,[168]]],125],[[],125],[[[148,[168]]],125],[155,125],[150,125],[151,125],[[[175,[152]]],125],[[[175,[172]]],125],[[[175,[173]]],125],[[[175,[174]]],125],[[[175,[176]]],125],[152,125],[[[154,[168]]],125],[[[154,[153]],[127,[125,126]]],30],[[[154,[153]]],125],[[[154,[153]],12,12],166],[[[154,[153]]],125],[[[154,[153]]]],[[[154,[153]]]],[183,[[127,[125,126]]]],[152],[191],[[[148,[147]]],[[148,[147]]]],[161,161],[192,192],[193,193],[194,194],[195,195],[65,65],[162,162],[196,196],[197,197],[69,69],[66,66],[67,67],[198,198],[157,157],[199,199],[200,200],[163,163],[201,201],[202,202],[191,191],[203,203],[204,204],[[[137,[43,43]]],[[137,[43,43]]]],[164,164],[[[205,[43]]],[[205,[43]]]],[165,165],[124,124],[156,156],[158,158],[22,22],[155,155],[150,150],[151,151],[[[175,[43]]],[[175,[43]]]],[181,181],[206,206],[180,180],[182,182],[207,207],[152,152],[166,166],[[[154,[153]]],[[154,[153]]]],[208,208],[183,183],[184,184],[209,209],[[[210,[147]]],[[210,[147]]]],[[[211,[147]]],[[211,[147]]]],[212,212],[213,213],[214,214],[[[215,[147]]],[[215,[147]]]],[167,167],[216,216],[217,217],[177,177],[[],[[17,[24,16]]]],[[[148,[168]]],[[17,[24,16]]]],[155,[[17,[24,16]]]],[150,[[17,[24,16]]]],[151,[[17,[24,16]]]],[[[175,[176]]],[[17,[24,16]]]],[[[175,[174]]],[[17,[24,16]]]],[[[175,[172]]],[[17,[24,16]]]],[[[175,[152]]],[[17,[24,16]]]],[[[175,[173]]],[[17,[24,16]]]],[152,[[17,[24,16]]]],[[[154,[168]]],[[17,[24,16]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[154,[153]],[127,[125,126]]]],[[161,161],53],[[162,162],53],[[157,157],53],[[163,163],53],[[165,165],53],[[166,166],53],[[167,167],53],[192,65],0,0,0,[192,65],0,0,0,[156,164],[[158,164],158],0,0,[161,161],[162,162],[157,157],[163,163],[165,165],[166,166],[167,167],[140,158],[[[140,[16]]],177],[[[143,[125,[142,[[141,[125]]]]]]],149],[[[148,[168]],[143,[125,[142,[[141,[125]]]]]]],149],[156,149],[[155,[143,[125,[142,[[141,[125]]]]]]],149],[[150,[143,[125,[142,[[141,[125]]]]]]],149],[[151,[143,[125,[142,[[141,[125]]]]]]],149],[[[175,[174]],[143,[125,[142,[[141,[125]]]]]]],149],[[[175,[172]],[143,[125,[142,[[141,[125]]]]]]],149],[[[175,[152]],[143,[125,[142,[[141,[125]]]]]]],149],[[[175,[176]],[143,[125,[142,[[141,[125]]]]]]],149],[[[175,[173]],[143,[125,[142,[[141,[125]]]]]]],149],[[152,[143,[125,[142,[[141,[125]]]]]]],149],[[[154,[168]],[143,[125,[142,[[141,[125]]]]]]],149],[[[143,[125,[142,[[141,[125]]]]]]],186],[[],149],[[[148,[168]]],149],[155,149],[150,149],[151,149],[[[175,[152]]],149],[[[175,[174]]],149],[[[175,[173]]],149],[[[175,[176]]],149],[[[175,[172]]],149],[152,149],[[[154,[168]]],149],[[],186],[[[148,[168]]],186],[155,186],[150,186],[151,186],[[[175,[172]]],186],[[[175,[174]]],186],[[[175,[152]]],186],[[[175,[173]]],186],[[[175,[176]]],186],[152,186],[[[154,[168]]],186],[[[143,[125,[142,[[141,[125]]]]]],[143,[125,[142,[[141,[125]]]]]]],149],[[156,[25,[2]]],149],[[2,2],158],[[125,125],177],[[[148,[147]]],[[30,[[211,[147]]]]]],[156,2],[[158,2],158],0,[124,[[137,[65,191]]]],[[124,65,65],[[30,[191]]]],[[124,218],191],[[124,48,48],[[30,[191]]]],[124,49],[[[143,[125,[142,[[141,[125]]]]]],[143,[125,[142,[[141,[125]]]]]],[130,[125,126,126,[129,[125]]]],[130,[125,126,126,[129,[125]]]],208,208,125,[220,[[0,[45,219]]]],13]],[[124,65],49],[[124,48],49],[[161,161],13],[[162,162],13],[[157,157],13],[[163,163],13],[[165,165],13],[[22,65],13],[[166,166],13],[[167,167],13],[[[148,[147]],[127,[125,126]]],13],[[155,[127,[125,126]]],13],[[150,[127,[125,126]]],13],[[151,[127,[125,126]]],13],[[[154,[153]],[127,[125,126]]],13],[[[154,[153]],12,12,13,216],216],[[[33,[[3,[2]]]],[33,[[128,[48]]]]],158],[[[33,[[127,[125,126]]]],[33,[[128,[48]]]]],177],[[[33,[[3,[2]]]],[33,[[128,[48]]]],221],158],[[[33,[[127,[125,126]]]],[33,[[128,[48]]]],221],177],[[[33,[[3,[2]]]]],[[30,[158]]]],[[[33,[[127,[125,126]]]]],[[30,[177]]]],[[[140,[[3,[2]]]],[33,[[128,[48]]]]],[[30,[158]]]],[[[140,[[127,[125,126]],16]],[33,[[128,[48]]]]],[[30,[177]]]],[[[205,[[0,[45,219]]]],[205,[[0,[45,219]]]]]],[[2,2,2],158],[[125,125,125],177],[[2,2],158],[[125,125],177],0,0,[[],193],[[],194],[[],195],[[],65],[[],65],[[],162],[[],197],[[],69],[[],67],[[],198],[[],157],[[],200],[[],163],[[],201],[[],203],[[],[[137,[219]]]],[[],164],[[],124],[[],22],[[],166],[[],208],[[],[[210,[[0,[45,147]]]]]],[[],[[215,[[0,[45,147]]]]]],[[],167],[[],216],[[],2],[[],2],[[158,[25,[2]]],158],[156,2],[[158,2],158],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[67,[[25,[2]]]],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[177,24],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[67],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[[161,161],161],[[162,162],162],[[157,157],157],[[163,163],163],[[165,165],165],[[166,166],166],[[167,167],167],0,0,[[150,[127,[125,126]],13],125],[[[17,[24,16]]],[[31,[[17,[24,16]],[17,[24,16]]]]]],[[[18,[24,16]]],[[31,[[18,[[0,[24,7,222,223]],16]],[18,[24,16]]]]]],[24,[[30,[24]]]],[[[19,[24,16]]],[[31,[[19,[24,16]],[19,[24,16]]]]]],[24,[[30,[24]]]],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[[183,48],178],[48,217],[48],[152,[[33,[224]]]],[152,[[33,[48]]]],0,0,[[],161],[[],162],[[],157],[[],163],[[],165],[[],166],[[],167],[[158,13],158],0,0,[[161,161],13],[[193,193],13],[[195,195],13],[[65,65],13],[[162,162],13],[[196,196],13],[[197,197],13],[[69,69],13],[[66,66],13],[[67,67],13],[[198,198],13],[[157,157],13],[[199,199],13],[[200,200],13],[[163,163],13],[[164,164],13],[[165,165],13],[[150,150],13],[[181,181],13],[[206,206],13],[[207,207],13],[[152,152],13],[[166,166],13],[[209,209],13],[[167,167],13],[[216,216],13],[[217,217],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[161,55]],[[162,55]],[[157,55]],[[163,55]],[[165,55]],[[166,55]],[[167,55]],[151,[[140,[151,16]]]],[[183,12],176],[48,217],0,0,[48],[152,[[33,[225]]]],0,[152,[[33,[48]]]],[[152,216],[[30,[[142,[[130,[125,126,126,[129,[125]]]]]]]]]],[[216,[127,[125,126]]],[[30,[[142,[[130,[125,126,126,[129,[125]]]]]]]]]],[[152,216,[127,[125,126]]],[[30,[[142,[[130,[125,126,126,[129,[125]]]]]]]]]],0,0,0,0,[191,30],[[[148,[147]]],167],[[[148,[168]]],[[33,[48]]]],[151,[[33,[48]]]],[[[127,[125,126]],[127,[125,126]],217,217,125,13],[[205,[[0,[45,219]]]]]],[[161,14],15],[[161,14],15],[[161,14],15],[[161,14],15],[[161,14],15],[[192,14],15],[[193,14],15],[[195,14],15],[[65,14],15],[[162,14],15],[[162,14],15],[[162,14],15],[[162,14],15],[[162,14],15],[[196,14],15],[[197,14],15],[[66,14],15],[[67,14],15],[[198,14],15],[[157,14],15],[[157,14],15],[[157,14],15],[[157,14],15],[[157,14],15],[[199,14],15],[[200,14],15],[[163,14],15],[[163,14],15],[[163,14],15],[[163,14],15],[[163,14],15],[[201,14],15],[[202,14],15],[[203,14],15],[[204,14],15],[[164,14],15],[[[205,[47]],14],[[31,[41]]]],[[165,14],15],[[165,14],15],[[165,14],15],[[165,14],15],[[165,14],15],[[150,14],[[31,[41]]]],[[[175,[47]],14],[[31,[41]]]],[[181,14],[[31,[41]]]],[[206,14],[[31,[41]]]],[[182,14],[[31,[41]]]],[[207,14],[[31,[41]]]],[[152,14],[[31,[41]]]],[[166,14],[[31,[41]]]],[[166,14],[[31,[41]]]],[[166,14],[[31,[41]]]],[[166,14],[[31,[41]]]],[[166,14],[[31,[41]]]],[[[154,[[0,[47,153]]]],14],[[31,[41]]]],[[208,14],[[31,[41]]]],[[183,14],[[31,[41]]]],[[184,14],[[31,[41]]]],[[209,14],[[31,[41]]]],[[209,14],[[31,[41]]]],[[[211,[[0,[47,147]]]],14],[[31,[41]]]],[[212,14],[[31,[41]]]],[[213,14],[[31,[41]]]],[[214,14],[[31,[41]]]],[[167,14],[[31,[41]]]],[[167,14],[[31,[41]]]],[[167,14],[[31,[41]]]],[[167,14],[[31,[41]]]],[[167,14],[[31,[41]]]],[[216,14],[[31,[41]]]],[[217,14],[[31,[41]]]],[156,2],[[158,2],158],0,0,0,[156,102],[[158,102],158],0,0,[[]],[[]],[[[154,[153]]],[[148,[168]]]],[173,[[148,[168]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[60,69],[[]],[[],67],[[]],[[]],[[]],[[]],[160,200],[[]],[159,200],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[48,165],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[176,208],[178,208],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[216,217],[[]],[[]],[[[128,[[127,[125,126]]]]],183],[48,[[30,[161]]]],[48,[[30,[162]]]],[185,[[30,[157]]]],[48,[[30,[163]]]],[48,[[30,[165]]]],[92,[[30,[166]]]],[92,[[30,[167]]]],[48,161],[48,162],[185,157],[48,163],[48,165],[92,166],[92,167],[48,161],[48,162],[185,157],[48,163],[48,165],[92,166],[92,167],[[2,191,2],193],[[[33,[[127,[125,126]]]]],[[30,[152]]]],[[[140,[[127,[125,126]],16]],[33,[[128,[48]]]]],[[30,[152]]]],[226,[[30,[206]]]],[55,161],[55,162],[55,157],[55,163],[55,165],[55,166],[55,167],[[48,48],65],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[227,[[30,[206]]]],[[22,65],[[30,[156]]]],[[22,65],[[30,[156]]]],[[22,48],30],[[22,48],30],0,0,0,0,[[[142,[[4,[2]]]]],158],[[[142,[[130,[125,126,126,[129,[125]]]]]]],177],0,[[124,[30,[63]],[33,[65]],[33,[65]],22,21,139]],0,[[161,57]],[[192,57]],[[195,57]],[[65,57]],[[162,57]],[[197,57]],[[157,57]],[[199,57]],[[200,57]],[[163,57]],[[164,57]],[[165,57]],[[206,57]],[[166,57]],[[167,57]],[[216,57]],[[217,57]],[[[228,[2]],[4,[2]]],158],[[[130,[125,133,133,[229,[125,133,133]]]],[130,[125,126,126,[129,[125]]]]],177],[[[154,[153]]]],[[],67],0,[65,12],[[22,46],156],[[22,65],156],[[[137,[219]],218],30],[[22,65],156],[[[148,[147]]]],[151,[[33,[[128,[48]]]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],0,[[161,161]],[[162,162]],[[157,157]],[[163,163]],[[165,165]],[[22,[132,[156]]],65],[[166,166]],[[167,167]],[[22,[132,[156]],29,21],65],[[[137,[219]],230,230],30],[[[137,[219]],230,230],30],[[[137,[219]]],49],[[[137,[219]],230],49],[[[137,[219]]],49],[[[137,[219]],230],49],0,[[161,161],161],[[162,162],162],[[157,157],157],[[163,163],163],[[165,165],165],[[166,166],166],[[167,167],167],[124,[[137,[65,202]]]],[[124,65,65],[[30,[13]]]],[[124,48,48],[[30,[13]]]],[124,49],[[[148,[168]],[143,[125,[142,[[141,[125]]]]]],13,149,13,125],[[30,[[148,[168]]]]]],[[[148,[168]],[143,[125,[142,[[141,[125]]]]]],13,173,[143,[125,[142,[[141,[125]]]]]],13,125],[[30,[[148,[168]]]]]],[[[148,[168]],13,173,[143,[125,[142,[[141,[125]]]]]],13,125],[[30,[[148,[168]]]]]],[[[148,[168]],[142,[[130,[125,126,126,[129,[125]]]]]],125,125],[[187,[151]]]],[[[148,[168]],[143,[125,[142,[[141,[125]]]]]],[142,[[130,[125,126,126,[129,[125]]]]]],125,125],[[187,[151]]]],[[124,65],49],[[124,48],49],[[161,161],13],[[162,162],13],[[157,157],13],[[163,163],13],[[165,165],13],[[166,166],13],[[167,167],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[158,156],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[65],[[],65],[[],65],[24,13],[161,13],[162,13],[157,13],[163,13],[165,13],[166,13],[167,13],[[[148,[147]],216],13],[204,13],[[],13],[150,13],[[[175,[176]]],13],[[[175,[172]]],13],[[[175,[152]]],13],[[[175,[173]]],13],[[[175,[174]]],13],[152,13],[[],13],[152,13],[217,13],[161,13],[162,13],[157,13],[163,13],[165,13],[22,13],[166,13],[167,13],[156,13],[217,13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[182,13],[196,13],[156,13],0,[217,13],[217,13],[22,231],[22,49],[22,49],[22,49],[22,12],[[[148,[147]]],149],[155,149],[150,149],[151,149],[152,149],[[[154,[153]]],149],[[[148,[168]]],186],[155,186],[150,186],[151,186],[152,186],[[[154,[153]]],186],0,0,[[[148,[168]],[142,[[130,[125,126,126,[129,[125]]]]]],125,125],[[188,[[148,[168]]]]]],[[[142,[[130,[125,126,126,[129,[125]]]]]],208]],[[152,[142,[[130,[125,126,126,[129,[125]]]]]],208]],[[[130,[125,126,126,[129,[125]]]]],[[127,[125,126]]]],[[[175,[179]],[130,[125,126,126,[129,[125]]]]],[[127,[125,126]]]],[[152,[130,[125,126,126,[129,[125]]]]],[[127,[125,126]]]],[[[142,[[130,[125,126,126,[129,[125]]]]]]],[[127,[125,126]]]],[[[175,[179]],[142,[[130,[125,126,126,[129,[125]]]]]]],[[127,[125,126]]]],[177,24],0,[[[154,[153]],149,27]],[[48,27]],[[[148,[168]],48,27]],[[155,48,27]],[[151,48,27]],[27],[[171,48,27]],[[[148,[147]],48,27]],[[155,48,27]],[[151,48,27]],[27],[[171,48,27]],[[[148,[147]],48,27]],[[155,48,27]],[[151,48,27]],[156,2],[[158,2],158],[125,60],[[[148,[168]],125],60],[[69,24],60],[156,60],[[158,60],158],[[155,125],60],[[150,125],60],[[151,125],60],[[[175,[176]],125],60],[[[175,[152]],125],60],[[[175,[173]],125],60],[[[175,[174]],125],60],[[[175,[172]],125],60],[[152,125],60],[[[154,[168]],125],60],0,[156,198],0,0,[191],0,[[[154,[153]]],12],[162,13],[162,13],[[[140,[[127,[125,126]],16]],[140,[[128,[48]],16]]],[[148,[168]]]],[[],194],[[65,65],195],[[2,2],198],[[],[[137,[219]]]],[[165,165],164],[[[127,[125,126]],[127,[125,126]],217,217,125],[[205,[[0,[45,219]]]]]],[[],124],[177,158],[[],22],[[[140,[16]]],155],[[[142,[[130,[125,126,126,[129,[125]]]]]]],150],[[[140,[[127,[125,126]],16]],[30,[[140,[[128,[48]],16]]]]],151],[[[130,[125,133,133,[229,[125,133,133]]]],[130,[125,126,126,[129,[125]]]]],[[154,[168]]]],[[],208],[[[127,[125,126]],[127,[125,126]],[127,[125,126]],[127,[125,126]]],183],[24,177],[[[232,[153]],125],[[30,[176]]]],0,[[],164],0,0,[161,161],[162,162],[157,157],[163,163],[165,165],[166,166],[167,167],[[[154,[153]]],12],[203,12],[[[154,[153]]]],[[[211,[147]]],12],[151,12],[[[148,[147]]],12],0,[156,[[30,[29]]]],[[161,161],[[30,[53]]]],[[162,162],[[30,[53]]]],[[157,157],[[30,[53]]]],[[163,163],[[30,[53]]]],[[165,165],[[30,[53]]]],[[166,166],[[30,[53]]]],[[167,167],[[30,[53]]]],0,[152,[[33,[[127,[125,126]]]]]],[[[140,[[3,[2]]]],[30,[[140,[[128,[48]]]]]]],158],[[[140,[[127,[125,126]],16]],[30,[[140,[[128,[48]],16]]]]],177],0,[156,[[25,[2]]]],[[158,[25,[2]]],158],0,[156,[[30,[[25,[2]]]]]],[[158,[25,[2]]],158],[[[148,[147]],[127,[125,126]],13],233],[[155,[127,[125,126]],13],233],[[150,[127,[125,126]],13],233],[[151,[127,[125,126]],13],233],[[[175,[179]],[127,[125,126]],13],233],[[152,[127,[125,126]],13],233],[[[154,[153]],[127,[125,126]],13],233],[[183,[127,[125,126]],13],233],[[[148,[147]],[127,[125,126]]]],[[155,[127,[125,126]]]],[[150,[127,[125,126]]]],[[151,[127,[125,126]]]],[[[175,[179]],[127,[125,126]]]],[[152,[127,[125,126]]]],[[[154,[153]],[127,[125,126]]]],[[183,[127,[125,126]]]],[[[148,[147]],[127,[125,126]],13]],[[151,[127,[125,126]],13]],[[[154,[153]],[127,[125,126]],13]],[[183,[127,[125,126]],13]],[[[148,[147]],[127,[125,126]],13,125],30],[[151,[127,[125,126]],92]],[[[148,[147]],[127,[125,126]],13,125],[[30,[233]]]],[[[154,[153]],[127,[125,126]],13,125],[[30,[233]]]],[[[148,[147]]],[[30,[[210,[147]]]]]],[[],[[234,[48,168]]]],[[[148,[147]]],[[234,[48]]]],[[[148,[168]]],[[234,[48,168]]]],[155,[[234,[48,168]]]],[155,[[234,[48,168]]]],[151,[[234,[48,168]]]],[124,235],0,[[[137,[219]]],[[0,[219]]]],0,[[161,161]],[[162,162]],[[157,157]],[[163,163]],[[165,165]],[[22,65,63,21,13],[[30,[156]]]],[[166,166]],[[167,167]],[192,13],[156,2],[[158,2],158],0,0,0,[156,102],[[158,102],158],0,0,[[[148,[168]]]],[151],0,0,[[[154,[153]]],149],[156,[[135,[2]]]],[[158,[74,[2]]],158],[[2,2,2],158],[[125,125,125],177],[[[33,[[3,[2]]]],[33,[[128,[48]]]],2],158],[[[33,[[127,[125,126]]]],[33,[[128,[48]]]],125],177],[[[33,[[3,[2]]]],[33,[[128,[48]]]],221,2],158],[[[33,[[127,[125,126]]]],[33,[[128,[48]]]],221,125],177],[[[33,[[3,[2]]]],2],[[30,[158]]]],[[[33,[[127,[125,126]]]],125],[[30,[177]]]],[[[140,[[3,[2]]]],[33,[[128,[48]]]],2],[[30,[158]]]],[[[140,[[127,[125,126]],16]],[33,[[128,[48]]]],125],[[30,[177]]]],[[2,2,2,2],158],[[125,125,125,125],177],[[2,2,2],158],[[125,125,125],177],[[[3,[2]],[3,[2]],[3,[2]],2],158],[[[127,[125,126]],[127,[125,126]],[127,[125,126]],125],177],[[184,184],13],[[[154,[153]]],[[130,[125,126,126,[129,[125]]]]]],[[[148,[168]],[130,[125,126,126,[129,[125]]]]],[[148,[168]]]],[[150,[130,[125,126,126,[129,[125]]]]],[[30,[150]]]],[[151,[130,[125,126,126,[129,[125]]]]],151],[[152,[130,[125,126,126,[129,[125]]]]],[[30,[152]]]],[[[154,[153]],[130,[125,126,126,[129,[125]]]]],[[154,[153]]]],[[[3,[2]],[3,[2]]],158],[[151,48],178],[[[127,[125,126]],[127,[125,126]]],177],[[151,48,216],216],[151,231],[192,13],[[158,13],158],[[161,161,13]],[[162,162,13]],[[157,157,13]],[[163,163,13]],[[165,165,13]],[[166,166,13]],[[167,167,13]],[[156,157]],[[156,159]],[[156,160]],[[[154,[153]],12,12,166]],[[156,164]],[[156,2]],[[156,2]],[[156,13]],[[[148,[168]],167],[[31,[209]]]],[[156,2]],[[156,102]],[[156,2]],[[156,60]],[[22,65,[30,[29]],21]],[[156,[25,[2]]]],[[156,[25,[2]]]],[[156,2]],[[156,102]],[[156,[135,[2]]]],[[156,[74,[2]]]],[[[154,[153]],[130,[125,126,126,[129,[125]]]]]],[[156,13]],[[156,177]],[[156,164]],[[156,[4,[2]]]],[[156,[4,[2]]]],[156,24],0,[156,24],[[],206],[[[148,[168]]],206],[155,206],[150,206],[151,206],[[[175,[172]]],206],[[[175,[176]]],206],[[[175,[173]]],206],[[[175,[152]]],206],[[[175,[174]]],206],[152,206],[[[154,[168]]],206],[155,33],[156,177],[183,125],[[[154,[153]],236],125],[[[154,[153]],236],125],0,0,[156,164],[[158,164],158],0,0,[[[148,[168]],[143,[125,[142,[[141,[125]]]]]],[142,[[130,[125,126,126,[129,[125]]]]]],125,125],[[188,[[148,[168]]]]]],[192,13],[192,13],[[161,161],161],[[162,162],162],[[157,157],157],[[163,163],163],[[165,165],165],[[166,166],166],[[167,167],167],[[161,161]],[[162,162]],[[157,157]],[[163,163]],[[165,165]],[[166,166]],[[167,167]],[[152,[142,[[130,[125,126,126,[129,[125]]]]]]],216],[[[143,[125,[142,[[141,[125]]]]]],[130,[125,126,126,[129,[125]]]]],[[127,[125,126]]]],[[[143,[125,[142,[[141,[125]]]]]],[142,[[130,[125,126,126,[129,[125]]]]]]],[[127,[125,126]]]],[195,195],[[161,161],161],[[162,162],162],[[157,157],157],[[163,163],163],[[165,165],165],[[166,166],166],[[167,167],167],0,0,[[157,93,93],13],[[164,164],13],[[[175,[174]],48,48]],[[[175,[173]],48]],[[[175,[152]],48]],[[[175,[172]],48,48]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],42],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[152],[[[154,[153]]]],[[161,161]],[[162,162]],[[157,157]],[[163,163]],[[165,165]],[[166,166]],[[167,167]],[[[148,[147]]],[[30,[[215,[147]]]]]],0,0,[191,[[4,[2]]]],[191,2],[[208,[143,[125,[142,[[141,[125]]]]]]]],[[[148,[168]],[143,[125,[142,[[141,[125]]]]]]]],[156,[[4,[2]]]],[[158,[4,[2]]],158],[[[148,[147]],48],176],[[[3,[2]],[3,[2]],[3,[2]]],158],[[[127,[125,126]],[127,[125,126]],[127,[125,126]]],177],[[[154,[153]],48],[[30,[176]]]],[[[154,[153]],48],[[30,[[128,[48]]]]]],[[[148,[168]]],231],[[[154,[153]]],49],[[[154,[153]],[127,[125,126]]],[[232,[153]]]],[[[154,[153]],12,12]],[[[154,[153]],12,12]],[[[140,[[3,[2]]]],[140,[[128,[48]]]]],158],[[[140,[[127,[125,126]],16]],[140,[[128,[48]],16]]],177],[[[140,[[3,[2]]]],[140,[[128,[48]]]],167],158],[[[140,[[127,[125,126]],16]],[140,[[128,[48]],16]],167],177],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],0,[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],234],[171,234],[[[148,[147]]],[[234,[48]]]],[155,[[234,[48,168]]]],[151,[[234,[48,168]]]],[[[154,[153]],[127,[125,126]]]],[[[154,[153]],149]],[[161,161],161],[[162,162],162],[[157,157],157],[[163,163],163],[[165,165],165],[[166,166],166],[[167,167],167],[[[154,[153]]],125],[[[154,[153]]],125],[217,216],[216,48],[216,48],[216,48],[[194,2,22,[33,[65]],[33,[65]],[140,[237]]]],[[158,144],158],0,0,0,[48,217],0,[[[148,[147]]]],[151,[[33,[[127,[125,126]]]]]],[152,[[33,[238]]]],0,0,[152,[[33,[48]]]],0,0,[156,2],[183,125],[[164,165],164],[[[140,[[127,[125,126]],16]],[140,[[128,[48]],16]],167],[[148,[168]]]],[[164,165],164],[[[235,[203,201]]],124],[[[154,[153]],12],125],[[[154,[153]],12],125],[[],195],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[2,2],2],[[239,239],239],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],159],[[],160],[[],240],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[159,159],159],[[160,160],160],[[240,240],240],[[159,159]],[[160,160]],[[240,240]],[[159,159],159],[[160,160],160],[[240,240],240],[[159,159]],[[160,160]],[[240,240]],[159,48],[160,48],[240,48],[[159,159],159],[[160,160],160],[[240,240],240],[[159,159]],[[160,160]],[[240,240]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[23,21,22,241,2,13,26],30],[[23,21,22,241,2,13,26],30],[[23,21,22,[25,[2]],[4,[2]],24,2,13,26],30],[159,159],[160,160],[23,23],[240,240],[26,26],[[]],[[]],[[]],[[]],[[]],[[159,159],53],[[160,160],53],[[240,240],53],0,0,0,0,0,0,[[23,242,27]],[159,159],[160,160],[240,240],[[159,159],13],[[160,160],13],[[240,240],13],0,[[],243],[[],244],[[],159],[[],160],[[],23],[[],240],[[],26],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[[159,159],159],[[160,160],160],[[240,240],240],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[[],159],[[],160],[[],240],[[159,159],13],[[160,160],13],[[240,240],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[26,65],26],0,[[],26],[[],26],[[],26],[[26,29],26],0,[26,26],[26,26],[[159,55]],[[160,55]],[[240,55]],[245,[[30,[163]]]],[245,[[30,[163]]]],[245,13],[245,13],0,[[159,14],15],[[159,14],15],[[159,14],15],[[159,14],15],[[159,14],15],[[160,14],15],[[160,14],15],[[160,14],15],[[160,14],15],[[160,14],15],[[240,14],15],[[240,14],15],[[240,14],15],[[240,14],15],[[240,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[240,26],[164,26],[[]],[48,[[30,[159]]]],[48,[[30,[160]]]],[48,[[30,[240]]]],[48,159],[48,160],[48,240],[48,159],[48,160],[48,240],[55,159],[55,160],[55,240],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[26,164],26],0,[[21,22,192,[30,[191]]]],[[246,21,22,192,[30,[191]]]],[[2,21,22,191,2]],[[246,2,21,22,191,2]],[[159,57]],[[160,57]],[[240,57]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[159,159]],[[160,160]],[[240,240]],[[159,159],159],[[160,160],160],[[240,240],240],[[23,21,22,[25,[2]],24,26],[[30,[65]]]],[[23,21,22,[3,[2]],26,27]],[[23,21,22,241,2,13,26,27]],[[23,21,22,[25,[2]],24,26,27]],[[159,159],13],[[160,160],13],[[240,240],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[17,[16]]],[[17,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[18,[16]]],[[18,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[[[19,[16]]],[[19,[7,16]]]],[159,13],[160,13],[240,13],[159,13],[160,13],[240,13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[247],[247],[[],243],[[[248,[192]],[248,[193]]],246],[[],244],[[],23],[[],26],[[23,21,22,249,24,2,2,13,26],30],0,[159,159],[160,160],[240,240],[[],26],[[],26],[[],26],[[159,159],[[30,[53]]]],[[160,160],[[30,[53]]]],[[240,240],[[30,[53]]]],[[26,250],26],0,[[23,21,22,[3,[2]],13,26],30],[[23,21,22,[3,[2]],26],30],[23,145],[[159,159]],[[160,160]],[[240,240]],0,0,0,0,[[159,159,13]],[[160,160,13]],[[240,240,13]],0,[[243,2,194,124,21,22,[30,[23]],251,139]],[[244,[4,[2]],100,63,194,124,21,22,91,90,101,[30,[23]],251,139]],[[159,159],159],[[160,160],160],[[240,240],240],[[159,159]],[[160,160]],[[240,240]],[[159,159],159],[[160,160],160],[[240,240],240],[[240,21,156],13],[[26,21,65,156],13],[[]],[[]],[[]],[[]],[[]],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[159,159]],[[160,160]],[[240,240]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[159,159],159],[[160,160],160],[[240,240],240],[[23,21,22]],[[247,[4,[2]],2]],[[23,22,[33,[65]],[33,[65]],13]],[[23,21,22,252]],0,[145,23],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[12,12]],[[12,12]],[[]],[[]]],"c":[829,2462,2463,2464,2504,2505,2506,2507,2529,3922,5076],"p":[[3,"DynamicRayCastVehicleController"],[6,"Real"],[6,"Point"],[6,"Vector"],[3,"WheelTuning"],[3,"Wheel"],[8,"Any"],[4,"CharacterLength"],[3,"CharacterAutostep"],[3,"CharacterCollision"],[3,"KinematicCharacterController"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[8,"FnOnce"],[3,"RigidBodySet"],[3,"ColliderSet"],[3,"QueryPipeline"],[8,"Shape"],[6,"Isometry"],[3,"QueryFilter"],[8,"FnMut"],[3,"EffectiveCharacterMovement"],[3,"RigidBodyHandle"],[4,"Option"],[4,"Result"],[3,"TypeId"],[15,"slice"],[3,"Counters"],[15,"f64"],[3,"CCDCounters"],[3,"CollisionDetectionCounters"],[3,"SolverCounters"],[3,"StagesCounters"],[3,"Timer"],[3,"Error"],[3,"String"],[8,"Clone"],[3,"Coarena"],[8,"Default"],[3,"Index"],[8,"Debug"],[15,"u32"],[8,"Iterator"],[3,"Arena"],[3,"IntoIter"],[3,"Iter"],[4,"Ordering"],[3,"Drain"],[8,"IntoIterator"],[3,"IterMut"],[8,"Hasher"],[3,"PubSub"],[3,"Subscription"],[3,"MassProperties"],[3,"RigidBody"],[3,"RigidBodyActivation"],[3,"IslandManager"],[3,"RigidBodyVelocity"],[3,"ColliderHandle"],[3,"ColliderParent"],[3,"ColliderPosition"],[6,"ColliderShape"],[4,"ColliderMassProps"],[3,"RigidBodyBuilder"],[3,"JointAxesMask"],[3,"RigidBodyChanges"],[3,"LockedAxes"],[6,"AngVector"],[3,"RigidBodyDamping"],[3,"MultibodyJoint"],[3,"Multibody"],[3,"RigidBodyForces"],[3,"RigidBodyMassProps"],[3,"GenericJoint"],[3,"FixedJoint"],[3,"PrismaticJoint"],[3,"RevoluteJoint"],[3,"RopeJoint"],[3,"SphericalJoint"],[6,"Vector6"],[3,"RigidBodyColliders"],[3,"RigidBodyCcd"],[3,"RigidBodyPosition"],[3,"MultibodyJointSet"],[3,"ImpulseJointSet"],[15,"u8"],[4,"RigidBodyType"],[3,"FixedJointBuilder"],[3,"GenericJointBuilder"],[3,"PrismaticJointBuilder"],[3,"RevoluteJointBuilder"],[3,"RopeJointBuilder"],[3,"SphericalJointBuilder"],[3,"IntegrationParameters"],[3,"CCDSolver"],[4,"CoefficientCombineRule"],[4,"JointAxis"],[3,"JointLimits"],[3,"JointMotor"],[4,"JointEnabled"],[3,"ImpulseJoint"],[3,"ImpulseJointHandle"],[4,"MotorModel"],[3,"MultibodyJointHandle"],[3,"MultibodyIndex"],[3,"MultibodyLink"],[4,"RigidBodyAdditionalMassProps"],[3,"RigidBodyIds"],[3,"RigidBodyDominance"],[3,"BodyPair"],[6,"DVector"],[8,"WReal"],[6,"DVectorViewMut"],[15,"i8"],[6,"AngularInertia"],[15,"i16"],[8,"PartialEq"],[3,"NarrowPhase"],[15,"f32"],[3,"Const"],[3,"OPoint"],[15,"array"],[3,"ArrayStorage"],[3,"Matrix"],[6,"DVectorView"],[8,"Into"],[3,"Dyn"],[3,"LU"],[6,"Rotation"],[6,"JacobianViewMut"],[3,"InteractionGraph"],[6,"UnitVector"],[8,"EventHandler"],[3,"Vec"],[3,"Quaternion"],[3,"Unit"],[3,"Isometry"],[15,"u128"],[8,"QueryDispatcher"],[3,"SdpMatrix3"],[8,"TriMeshStorage"],[3,"GenericTriMesh"],[3,"Aabb"],[3,"HalfSpace"],[3,"Polyline"],[3,"ConvexPolyhedron"],[8,"HeightFieldStorage"],[3,"GenericHeightField"],[3,"Compound"],[3,"Collider"],[3,"ActiveCollisionTypes"],[3,"ColliderBuilder"],[3,"ActiveEvents"],[3,"ActiveHooks"],[3,"CollisionEventFlags"],[3,"ColliderChanges"],[3,"SolverFlags"],[3,"InteractionGroups"],[3,"Group"],[3,"HeightFieldCellStatus"],[3,"TriMeshFlags"],[3,"DefaultStorage"],[3,"Ball"],[3,"Capsule"],[8,"SimdCompositeShape"],[3,"Cone"],[3,"Cuboid"],[3,"Cylinder"],[3,"RoundShape"],[3,"Triangle"],[3,"SharedShape"],[3,"Segment"],[8,"SupportMap"],[4,"TypedShape"],[4,"SegmentPointLocation"],[4,"TrianglePointLocation"],[3,"Tetrahedron"],[4,"TetrahedronPointLocation"],[15,"u16"],[3,"BoundingSphere"],[4,"IntersectResult"],[4,"SplitResult"],[3,"Ray"],[3,"RayIntersection"],[3,"ContactPair"],[4,"CollisionEvent"],[3,"ContactForceEvent"],[3,"BroadPhase"],[3,"ColliderPair"],[4,"ColliderType"],[3,"ColliderBroadPhaseData"],[3,"ColliderMaterial"],[4,"ColliderEnabled"],[3,"ColliderFlags"],[3,"ContactData"],[3,"IntersectionPair"],[3,"ContactManifoldData"],[3,"SolverContact"],[3,"TrackedContact"],[4,"ShapeType"],[4,"TriangleOrientation"],[3,"PolygonalFeature"],[4,"TopologyError"],[3,"TriMeshPseudoNormals"],[3,"TriMeshConnectedComponents"],[3,"TopoVertex"],[3,"TopoFace"],[3,"TopoHalfEdge"],[3,"TriMeshTopology"],[4,"FeatureId"],[3,"PackedFeatureId"],[6,"TemporaryInteractionIndex"],[8,"Copy"],[3,"ContactManifold"],[3,"VHACDParameters"],[8,"Send"],[8,"Sync"],[3,"Edge"],[3,"Face"],[15,"i64"],[15,"u64"],[6,"DMatrix"],[3,"VecStorage"],[6,"ColliderGraphIndex"],[8,"ExactSizeIterator"],[3,"HeightFieldRadialTriangles"],[3,"PointProjection"],[3,"GenericQbvh"],[8,"PersistentQueryDispatcher"],[15,"isize"],[4,"BroadPhasePairEvent"],[3,"Vertex"],[6,"SimdReal"],[3,"QueryFilterFlags"],[6,"Ray"],[6,"Aabb"],[3,"CollisionPipeline"],[3,"PhysicsPipeline"],[3,"PairFilterContext"],[3,"ChannelEventCollector"],[3,"ContactModificationContext"],[3,"Sender"],[3,"NonlinearRigidMotion"],[8,"Fn"],[8,"PhysicsHooks"],[4,"QueryPipelineMode"],[8,"TypedSimdCompositeShape"],[8,"PolygonalFeatureMap"],[13,"BadAdjascentTrianglesOrientation"],[13,"SweepTestWithPredictedPosition"],[8,"WBasis"],[8,"WQuat"],[8,"WSign"],[8,"IndexMut2"]]},\
"rawpointer":{"doc":"Rawpointer adds extra utility methods to raw pointers …","t":"ILLLKLLLLFLL","n":["PointerExt","add","dec","inc","offset","post_dec","post_inc","pre_dec","pre_inc","ptrdistance","stride_offset","sub"],"q":[[0,"rawpointer"]],"d":["Extension methods for raw pointers","","Decrement by 1","Increment by 1","","Decrement the pointer by 1, but return its old value.","Increment the pointer by 1, but return its old value.","Decrement the pointer by 1, and return its new value.","Increment the pointer by 1, and return its new value.","Return the number of elements of <code>T</code> from <code>start</code> to <code>end</code>. …","Offset the pointer by <code>s</code> multiplied by <code>index</code>.",""],"i":[0,3,3,3,3,3,3,3,3,0,3,3],"f":[0,[1],[[]],[[]],[2],[[]],[[]],[[]],[[]],[[],1],[[2,1]],[1]],"c":[],"p":[[15,"usize"],[15,"isize"],[8,"PointerExt"]]},\
"robust":{"doc":"Adaptive Precision Floating-Point Arithmetic and Fast …","t":"DDLLLLLLLLLLLLLLFFLLFFLLLLLLLLMMMMM","n":["Coord","Coord3D","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","incircle","insphere","into","into","orient2d","orient3d","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","x","y","y","z"],"q":[[0,"robust"]],"d":["A two dimensional coordinate.","A three dimensional coordinate.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a positive value if the coordinate <code>pd</code> lies <strong>inside</strong> …","Returns a positive value if the point <code>pe</code> lies inside the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a positive value if the coordinates <code>pa</code>, <code>pb</code>, and <code>pc</code> …","Returns a positive value if the point <code>pd</code> lies below the …","","","","","","","","","","","","",""],"i":[0,0,4,5,4,5,4,5,4,5,4,5,4,5,4,5,0,0,4,5,0,0,4,5,4,5,4,5,4,5,4,5,4,5,5],"f":[0,0,[[]],[[]],[[]],[[]],[[[4,[[0,[1,[3,[2]]]]]]],[[4,[[0,[1,[3,[2]]]]]]]],[[[5,[[0,[1,[3,[2]]]]]]],[[5,[[0,[1,[3,[2]]]]]]]],[[]],[[]],[[[4,[[0,[6,[3,[2]]]]]],[4,[[0,[6,[3,[2]]]]]]],7],[[[5,[[0,[6,[3,[2]]]]]],[5,[[0,[6,[3,[2]]]]]]],7],[[[4,[[0,[8,[3,[2]]]]]],9],10],[[[5,[[0,[8,[3,[2]]]]]],9],10],[[]],[[]],[[[4,[[3,[2]]]],[4,[[3,[2]]]],[4,[[3,[2]]]],[4,[[3,[2]]]]],2],[[[5,[[3,[2]]]],[5,[[3,[2]]]],[5,[[3,[2]]]],[5,[[3,[2]]]],[5,[[3,[2]]]]],2],[[]],[[]],[[[4,[[3,[2]]]],[4,[[3,[2]]]],[4,[[3,[2]]]]],2],[[[5,[[3,[2]]]],[5,[[3,[2]]]],[5,[[3,[2]]]],[5,[[3,[2]]]]],2],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,0,0,0],"c":[],"p":[[8,"Clone"],[15,"f64"],[8,"Into"],[3,"Coord"],[3,"Coord3D"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"rustc_hash":{"doc":"Fast, non-cryptographic hash used by rustc and Firefox.","t":"GGDLLLLLLLLLLLLLLL","n":["FxHashMap","FxHashSet","FxHasher","borrow","borrow_mut","default","finish","from","into","try_from","try_into","type_id","write","write_u16","write_u32","write_u64","write_u8","write_usize"],"q":[[0,"rustc_hash"]],"d":["Type alias for a hashmap using the <code>fx</code> hash algorithm.","Type alias for a hashmap using the <code>fx</code> hash algorithm.","A speedy hash algorithm for use within rustc. The hashmap …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,[[]],[[]],[[],1],[1,2],[[]],[[]],[[],3],[[],3],[[],4],[[1,[6,[5]]]],[[1,7]],[[1,8]],[[1,2]],[[1,5]],[[1,9]]],"c":[],"p":[[3,"FxHasher"],[15,"u64"],[4,"Result"],[3,"TypeId"],[15,"u8"],[15,"slice"],[15,"u16"],[15,"u32"],[15,"usize"]]},\
"safe_arch":{"doc":"A crate that safely exposes arch intrinsics via <code>#[cfg()]</code>.","t":"LLLLFFFFFFFFFFFFFFLLLLLLFFFFFFLLLLLLFFFLLLLLLFFFLLLLLLLLLLLLFFFFFFFFFFLLLLLLFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFLLLLLLLLLLFFFFLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFLLLLLLLLLLLLFFFFFFFFFFFFFFFDDDDDDFFFFFFFFFFFFFFFFFFLLLLFFFFFFFFFALLLLLFFFFFFFFFFFFFFFOOFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFLLLLFFFFFFFFFFFFFLLLLLLLLFFFFFLLLLLLLLLLLLLLLLLLFFFFFFFFFFFFFFF","n":["add","add","add_assign","add_assign","add_i16_m128i","add_i32_m128i","add_i64_m128i","add_i8_m128i","add_m128","add_m128_s","add_m128d","add_m128d_s","add_saturating_i16_m128i","add_saturating_i8_m128i","add_saturating_u16_m128i","add_saturating_u8_m128i","average_u16_m128i","average_u8_m128i","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_m128","bitand_m128d","bitand_m128i","bitandnot_m128","bitandnot_m128d","bitandnot_m128i","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_m128","bitor_m128d","bitor_m128i","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_m128","bitxor_m128d","bitxor_m128i","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_shl_imm_u128_m128i","byte_shr_imm_u128_m128i","byte_swap_i32","byte_swap_i64","cast_to_m128_from_m128d","cast_to_m128_from_m128i","cast_to_m128d_from_m128","cast_to_m128d_from_m128i","cast_to_m128i_from_m128","cast_to_m128i_from_m128d","clone","clone","clone","clone","clone","clone","cmp_eq_i32_m128_s","cmp_eq_i32_m128d_s","cmp_eq_mask_i16_m128i","cmp_eq_mask_i32_m128i","cmp_eq_mask_i8_m128i","cmp_eq_mask_m128","cmp_eq_mask_m128_s","cmp_eq_mask_m128d","cmp_eq_mask_m128d_s","cmp_ge_i32_m128_s","cmp_ge_i32_m128d_s","cmp_ge_mask_m128","cmp_ge_mask_m128_s","cmp_ge_mask_m128d","cmp_ge_mask_m128d_s","cmp_gt_i32_m128_s","cmp_gt_i32_m128d_s","cmp_gt_mask_i16_m128i","cmp_gt_mask_i32_m128i","cmp_gt_mask_i8_m128i","cmp_gt_mask_m128","cmp_gt_mask_m128_s","cmp_gt_mask_m128d","cmp_gt_mask_m128d_s","cmp_le_i32_m128_s","cmp_le_i32_m128d_s","cmp_le_mask_m128","cmp_le_mask_m128_s","cmp_le_mask_m128d","cmp_le_mask_m128d_s","cmp_lt_i32_m128_s","cmp_lt_i32_m128d_s","cmp_lt_mask_i16_m128i","cmp_lt_mask_i32_m128i","cmp_lt_mask_i8_m128i","cmp_lt_mask_m128","cmp_lt_mask_m128_s","cmp_lt_mask_m128d","cmp_lt_mask_m128d_s","cmp_neq_i32_m128_s","cmp_neq_i32_m128d_s","cmp_neq_mask_m128","cmp_neq_mask_m128_s","cmp_neq_mask_m128d","cmp_neq_mask_m128d_s","cmp_nge_mask_m128","cmp_nge_mask_m128_s","cmp_nge_mask_m128d","cmp_nge_mask_m128d_s","cmp_ngt_mask_m128","cmp_ngt_mask_m128_s","cmp_ngt_mask_m128d","cmp_ngt_mask_m128d_s","cmp_nle_mask_m128","cmp_nle_mask_m128_s","cmp_nle_mask_m128d","cmp_nle_mask_m128d_s","cmp_nlt_mask_m128","cmp_nlt_mask_m128_s","cmp_nlt_mask_m128d","cmp_nlt_mask_m128d_s","cmp_ordered_mask_m128","cmp_ordered_mask_m128_s","cmp_ordered_mask_m128d","cmp_ordered_mask_m128d_s","cmp_unord_mask_m128","cmp_unord_mask_m128_s","cmp_unord_mask_m128d","cmp_unord_mask_m128d_s","convert_i32_replace_m128_s","convert_i32_replace_m128d_s","convert_i64_replace_m128d_s","convert_m128_s_replace_m128d_s","convert_m128d_s_replace_m128_s","convert_to_i32_m128i_from_m128","convert_to_i32_m128i_from_m128d","convert_to_m128_from_i32_m128i","convert_to_m128_from_m128d","convert_to_m128d_from_lower2_i32_m128i","convert_to_m128d_from_lower2_m128","copy_i64_m128i_s","copy_replace_low_f64_m128d","default","default","default","default","default","default","div","div","div_assign","div_assign","div_m128","div_m128_s","div_m128d","div_m128d_s","eq","eq","eq","extract_i16_as_i32_m128i","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_array","from_bits","from_bits","from_bits","from_bits","get_f32_from_m128_s","get_f64_from_m128d_s","get_i32_from_m128_s","get_i32_from_m128d_s","get_i32_from_m128i_s","get_i64_from_m128d_s","get_i64_from_m128i_s","insert_i16_from_i32_m128i","into","into","into","into","into","into","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","load_f32_m128_s","load_f32_splat_m128","load_f64_m128d_s","load_f64_splat_m128d","load_i64_m128i_s","load_m128","load_m128d","load_m128i","load_replace_high_m128d","load_replace_low_m128d","load_reverse_m128","load_reverse_m128d","load_unaligned_m128","load_unaligned_m128d","load_unaligned_m128i","m128","m128d","m128i","m256","m256d","m256i","max_i16_m128i","max_m128","max_m128_s","max_m128d","max_m128d_s","max_u8_m128i","min_i16_m128i","min_m128","min_m128_s","min_m128d","min_m128d_s","min_u8_m128i","move_high_low_m128","move_low_high_m128","move_m128_s","move_mask_i8_m128i","move_mask_m128","move_mask_m128d","mul","mul","mul_assign","mul_assign","mul_i16_horizontal_add_m128i","mul_i16_keep_high_m128i","mul_i16_keep_low_m128i","mul_m128","mul_m128_s","mul_m128d","mul_m128d_s","mul_u16_keep_high_m128i","mul_widen_u32_odd_m128i","naming_conventions","neg","neg","not","not","not","pack_i16_to_i8_m128i","pack_i16_to_u8_m128i","pack_i32_to_i16_m128i","prefetch_et0","prefetch_et1","prefetch_nta","prefetch_t0","prefetch_t1","prefetch_t2","read_timestamp_counter","read_timestamp_counter_p","reciprocal_m128","reciprocal_m128_s","reciprocal_sqrt_m128","reciprocal_sqrt_m128_s","round_op","round_op","set_i16_m128i","set_i32_m128i","set_i32_m128i_s","set_i64_m128i","set_i64_m128i_s","set_i8_m128i","set_m128","set_m128_s","set_m128d","set_m128d_s","set_reversed_i16_m128i","set_reversed_i32_m128i","set_reversed_i8_m128i","set_reversed_m128","set_reversed_m128d","set_splat_i16_m128i","set_splat_i32_m128i","set_splat_i64_m128i","set_splat_i8_m128i","set_splat_m128","set_splat_m128d","shl_all_u16_m128i","shl_all_u32_m128i","shl_all_u64_m128i","shl_imm_u16_m128i","shl_imm_u32_m128i","shl_imm_u64_m128i","shr_all_i16_m128i","shr_all_i32_m128i","shr_all_u16_m128i","shr_all_u32_m128i","shr_all_u64_m128i","shr_imm_i16_m128i","shr_imm_i32_m128i","shr_imm_u16_m128i","shr_imm_u32_m128i","shr_imm_u64_m128i","shuffle_abi_f32_all_m128","shuffle_abi_f64_all_m128d","shuffle_ai_f32_all_m128i","shuffle_ai_i16_h64all_m128i","shuffle_ai_i16_l64all_m128i","sqrt_m128","sqrt_m128_s","sqrt_m128d","sqrt_m128d_s","store_high_m128d_s","store_i64_m128i_s","store_m128","store_m128_s","store_m128d","store_m128d_s","store_m128i","store_reverse_m128","store_reversed_m128d","store_splat_m128","store_splat_m128d","store_unaligned_m128","store_unaligned_m128d","store_unaligned_m128i","sub","sub","sub_assign","sub_assign","sub_i16_m128i","sub_i32_m128i","sub_i64_m128i","sub_i8_m128i","sub_m128","sub_m128_s","sub_m128d","sub_m128d_s","sub_saturating_i16_m128i","sub_saturating_i8_m128i","sub_saturating_u16_m128i","sub_saturating_u8_m128i","sum_of_u8_abs_diff_m128i","to_array","to_array","to_array","to_array","to_bits","to_bits","to_bits","to_bits","transpose_four_m128","truncate_m128_to_m128i","truncate_m128d_to_m128i","truncate_to_i32_m128d_s","truncate_to_i64_m128d_s","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unpack_high_i16_m128i","unpack_high_i32_m128i","unpack_high_i64_m128i","unpack_high_i8_m128i","unpack_high_m128","unpack_high_m128d","unpack_low_i16_m128i","unpack_low_i32_m128i","unpack_low_i64_m128i","unpack_low_i8_m128i","unpack_low_m128","unpack_low_m128d","zeroed_m128","zeroed_m128d","zeroed_m128i"],"q":[[0,"safe_arch"]],"d":["","","","","Lanewise <code>a + b</code> with lanes as <code>i16</code>.","Lanewise <code>a + b</code> with lanes as <code>i32</code>.","Lanewise <code>a + b</code> with lanes as <code>i64</code>.","Lanewise <code>a + b</code> with lanes as <code>i8</code>.","Lanewise <code>a + b</code>.","Low lane <code>a + b</code>, other lanes unchanged.","Lanewise <code>a + b</code>.","Lowest lane <code>a + b</code>, high lane unchanged.","Lanewise saturating <code>a + b</code> with lanes as <code>i16</code>.","Lanewise saturating <code>a + b</code> with lanes as <code>i8</code>.","Lanewise saturating <code>a + b</code> with lanes as <code>u16</code>.","Lanewise saturating <code>a + b</code> with lanes as <code>u8</code>.","Lanewise average of the <code>u16</code> values.","Lanewise average of the <code>u8</code> values.","","","","","","","Bitwise <code>a &amp; b</code>.","Bitwise <code>a &amp; b</code>.","Bitwise <code>a &amp; b</code>.","Bitwise <code>(!a) &amp; b</code>.","Bitwise <code>(!a) &amp; b</code>.","Bitwise <code>(!a) &amp; b</code>.","","","","","","","Bitwise <code>a | b</code>.","Bitwise <code>a | b</code>.","Bitwise <code>a | b</code>.","","","","","","","Bitwise <code>a ^ b</code>.","Bitwise <code>a ^ b</code>.","Bitwise <code>a ^ b</code>.","","","","","","","","","","","","","Shifts all bits in the entire register left by a number of …","Shifts all bits in the entire register right by a number …","Swap the bytes of the given 32-bit value.","Swap the bytes of the given 64-bit value.","Bit-preserving cast to <code>m128</code> from <code>m128d</code>","Bit-preserving cast to <code>m128</code> from <code>m128i</code>","Bit-preserving cast to <code>m128d</code> from <code>m128</code>","Bit-preserving cast to <code>m128d</code> from <code>m128i</code>","Bit-preserving cast to <code>m128i</code> from <code>m128</code>","Bit-preserving cast to <code>m128i</code> from <code>m128d</code>","","","","","","","Low lane equality.","Low lane <code>f64</code> equal to.","Lanewise <code>a == b</code> with lanes as <code>i16</code>.","Lanewise <code>a == b</code> with lanes as <code>i32</code>.","Lanewise <code>a == b</code> with lanes as <code>i8</code>.","Lanewise <code>a == b</code>.","Low lane <code>a == b</code>, other lanes unchanged.","Lanewise <code>a == b</code>, mask output.","Low lane <code>a == b</code>, other lanes unchanged.","Low lane greater than or equal to.","Low lane <code>f64</code> greater than or equal to.","Lanewise <code>a &gt;= b</code>.","Low lane <code>a &gt;= b</code>, other lanes unchanged.","Lanewise <code>a &gt;= b</code>.","Low lane <code>a &gt;= b</code>, other lanes unchanged.","Low lane greater than.","Low lane <code>f64</code> greater than.","Lanewise <code>a &gt; b</code> with lanes as <code>i16</code>.","Lanewise <code>a &gt; b</code> with lanes as <code>i32</code>.","Lanewise <code>a &gt; b</code> with lanes as <code>i8</code>.","Lanewise <code>a &gt; b</code>.","Low lane <code>a &gt; b</code>, other lanes unchanged.","Lanewise <code>a &gt; b</code>.","Low lane <code>a &gt; b</code>, other lanes unchanged.","Low lane less than or equal to.","Low lane <code>f64</code> less than or equal to.","Lanewise <code>a &lt;= b</code>.","Low lane <code>a &lt;= b</code>, other lanes unchanged.","Lanewise <code>a &lt;= b</code>.","Low lane <code>a &lt;= b</code>, other lanes unchanged.","Low lane less than.","Low lane <code>f64</code> less than.","Lanewise <code>a &lt; b</code> with lanes as <code>i16</code>.","Lanewise <code>a &lt; b</code> with lanes as <code>i32</code>.","Lanewise <code>a &lt; b</code> with lanes as <code>i8</code>.","Lanewise <code>a &lt; b</code>.","Low lane <code>a &lt; b</code>, other lanes unchanged.","Lanewise <code>a &lt; b</code>.","Low lane <code>a &lt; b</code>, other lane unchanged.","Low lane not equal to.","Low lane <code>f64</code> less than.","Lanewise <code>a != b</code>.","Low lane <code>a != b</code>, other lanes unchanged.","Lanewise <code>a != b</code>.","Low lane <code>a != b</code>, other lane unchanged.","Lanewise <code>!(a &gt;= b)</code>.","Low lane <code>!(a &gt;= b)</code>, other lanes unchanged.","Lanewise <code>!(a &gt;= b)</code>.","Low lane <code>!(a &gt;= b)</code>, other lane unchanged.","Lanewise <code>!(a &gt; b)</code>.","Low lane <code>!(a &gt; b)</code>, other lanes unchanged.","Lanewise <code>!(a &gt; b)</code>.","Low lane <code>!(a &gt; b)</code>, other lane unchanged.","Lanewise <code>!(a &lt;= b)</code>.","Low lane <code>!(a &lt;= b)</code>, other lanes unchanged.","Lanewise <code>!(a &lt;= b)</code>.","Low lane <code>!(a &lt;= b)</code>, other lane unchanged.","Lanewise <code>!(a &lt; b)</code>.","Low lane <code>!(a &lt; b)</code>, other lanes unchanged.","Lanewise <code>!(a &lt; b)</code>.","Low lane <code>!(a &lt; b)</code>, other lane unchanged.","Lanewise <code>(!a.is_nan()) &amp; (!b.is_nan())</code>.","Low lane <code>(!a.is_nan()) &amp; (!b.is_nan())</code>, other lanes …","Lanewise <code>(!a.is_nan()) &amp; (!b.is_nan())</code>.","Low lane <code>(!a.is_nan()) &amp; (!b.is_nan())</code>, other lane …","Lanewise <code>a.is_nan() | b.is_nan()</code>.","Low lane <code>a.is_nan() | b.is_nan()</code>, other lanes unchanged.","Lanewise <code>a.is_nan() | b.is_nan()</code>.","Low lane <code>a.is_nan() | b.is_nan()</code>, other lane unchanged.","Convert <code>i32</code> to <code>f32</code> and replace the low lane of the input.","Convert <code>i32</code> to <code>f64</code> and replace the low lane of the input.","Convert <code>i64</code> to <code>f64</code> and replace the low lane of the input.","Converts the lower <code>f32</code> to <code>f64</code> and replace the low lane of …","Converts the low <code>f64</code> to <code>f32</code> and replaces the low lane of …","Rounds the <code>f32</code> lanes to <code>i32</code> lanes.","Rounds the two <code>f64</code> lanes to the low two <code>i32</code> lanes.","Rounds the four <code>i32</code> lanes to four <code>f32</code> lanes.","Rounds the two <code>f64</code> lanes to the low two <code>f32</code> lanes.","Rounds the lower two <code>i32</code> lanes to two <code>f64</code> lanes.","Rounds the two <code>f64</code> lanes to the low two <code>f32</code> lanes.","Copy the low <code>i64</code> lane to a new register, upper bits 0.","Copies the <code>a</code> value and replaces the low lane with the low <code>b</code>…","","","","","","","","","","","Lanewise <code>a / b</code>.","Low lane <code>a / b</code>, other lanes unchanged.","Lanewise <code>a / b</code>.","Lowest lane <code>a / b</code>, high lane unchanged.","Not a direct intrinsic, this is a <code>cmp_eq_mask</code> and then a …","Not a direct intrinsic, this is a <code>cmp_eq_mask</code> and then a …","Not a direct intrinsic, this is a <code>cmp_eq_mask_i8_m128i</code> and …","Gets an <code>i16</code> value out of an <code>m128i</code>, returns as <code>i32</code>.","Debug formats each float.","Octal formats each float’s bit pattern (via <code>f32::to_bits</code>…","UpperHex formats each float’s bit pattern (via …","LowerHex formats each float’s bit pattern (via …","Binary formats each float’s bit pattern (via <code>f32::to_bits</code>…","LowerExp formats each float.","Display formats each float, and leaves the type name off …","UpperExp formats each float.","LowerHex formats each double’s bit pattern (via …","Octal formats each double’s bit pattern (via <code>f64::to_bits</code>…","Binary formats each double’s bit pattern (via …","LowerExp formats each double.","UpperExp formats each double.","UpperHex formats each double’s bit pattern (via …","Display formats each double, and leaves the type name off …","Debug formats each double.","UpperHex formats each <code>i32</code>.","Octal formats each <code>i32</code>.","LowerExp formats each <code>i32</code>.","UpperExp formats each <code>i32</code>.","Display formats each <code>i32</code>, and leaves the type name off of …","Debug formats each <code>i32</code>.","Binary formats each <code>i32</code>.","LowerHex formats each <code>i32</code>.","LowerHex formats each float’s bit pattern (via …","UpperHex formats each float’s bit pattern (via …","Octal formats each float’s bit pattern (via <code>f32::to_bits</code>…","UpperExp formats each float.","Debug formats each float.","LowerExp formats each float.","Display formats each float, and leaves the type name off …","Binary formats each float’s bit pattern (via <code>f32::to_bits</code>…","LowerHex formats each double’s bit pattern (via …","UpperHex formats each double’s bit pattern (via …","LowerExp formats each double.","Octal formats each double’s bit pattern (via <code>f64::to_bits</code>…","Debug formats each double.","Binary formats each double’s bit pattern (via …","Display formats each double, and leaves the type name off …","UpperExp formats each double.","UpperExp formats each <code>i32</code>.","UpperHex formats each <code>i32</code>.","LowerHex formats each <code>i32</code>.","Octal formats each <code>i32</code>.","LowerExp formats each <code>i32</code>.","Binary formats each <code>i32</code>.","Display formats each <code>i32</code>, and leaves the type name off of …","Debug formats each <code>i32</code>.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","Transmutes an array into <code>m128</code>.","Transmutes an array into <code>m128d</code>.","Transmutes an array into <code>m256</code>.","Transmutes an array into <code>m256d</code>.","Converts from the bit patterns of these floats (<code>[u32;4]</code>).","Converts from the bit patterns of these doubles (<code>[u64;2]</code>).","Converts from the bit patterns of these floats (<code>[u32;8]</code>).","Converts from the bit patterns of these doubles (<code>[u64;4]</code>).","Gets the low lane as an individual <code>f32</code> value.","Gets the lower lane as an <code>f64</code> value.","Converts the low lane to <code>i32</code> and extracts as an individual …","Converts the lower lane to an <code>i32</code> value.","Converts the lower lane to an <code>i32</code> value.","Converts the lower lane to an <code>i64</code> value.","Converts the lower lane to an <code>i64</code> value.","Inserts the low 16 bits of an <code>i32</code> value into an <code>m128i</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Loads the <code>f32</code> reference into the low lane of the register.","Loads the <code>f32</code> reference into all lanes of a register.","Loads the reference into the low lane of the register.","Loads the <code>f64</code> reference into all lanes of a register.","Loads the low <code>i64</code> into a register.","Loads the reference into a register.","Loads the reference into a register.","Loads the reference into a register.","Loads the reference into a register, replacing the high …","Loads the reference into a register, replacing the low …","Loads the reference into a register with reversed order.","Loads the reference into a register with reversed order.","Loads the reference into a register.","Loads the reference into a register.","Loads the reference into a register.","The data for a 128-bit SSE register of four <code>f32</code> lanes.","The data for a 128-bit SSE register of two <code>f64</code> values.","The data for a 128-bit SSE register of integer data.","The data for a 256-bit AVX register of eight <code>f32</code> lanes.","The data for a 256-bit AVX register of four <code>f64</code> values.","The data for a 256-bit AVX register of integer data.","Lanewise <code>max(a, b)</code> with lanes as <code>i16</code>.","Lanewise <code>max(a, b)</code>.","Low lane <code>max(a, b)</code>, other lanes unchanged.","Lanewise <code>max(a, b)</code>.","Low lane <code>max(a, b)</code>, other lanes unchanged.","Lanewise <code>max(a, b)</code> with lanes as <code>u8</code>.","Lanewise <code>min(a, b)</code> with lanes as <code>i16</code>.","Lanewise <code>min(a, b)</code>.","Low lane <code>min(a, b)</code>, other lanes unchanged.","Lanewise <code>min(a, b)</code>.","Low lane <code>min(a, b)</code>, other lanes unchanged.","Lanewise <code>min(a, b)</code> with lanes as <code>u8</code>.","Move the high lanes of <code>b</code> to the low lanes of <code>a</code>, other …","Move the low lanes of <code>b</code> to the high lanes of <code>a</code>, other …","Move the low lane of <code>b</code> to <code>a</code>, other lanes unchanged.","Gathers the <code>i8</code> sign bit of each lane.","Gathers the sign bit of each lane.","Gathers the sign bit of each lane.","","","","","Multiply <code>i16</code> lanes producing <code>i32</code> values, horizontal add …","Lanewise <code>a * b</code> with lanes as <code>i16</code>, keep the high bits of …","Lanewise <code>a * b</code> with lanes as <code>i16</code>, keep the low bits of the …","Lanewise <code>a * b</code>.","Low lane <code>a * b</code>, other lanes unchanged.","Lanewise <code>a * b</code>.","Lowest lane <code>a * b</code>, high lane unchanged.","Lanewise <code>a * b</code> with lanes as <code>u16</code>, keep the high bits of …","Multiplies the odd <code>u32</code> lanes and gives the widened (<code>u64</code>) …","An explanation of the crate’s naming conventions.","","","Not a direct intrinsic, but it’s very useful and the …","Not a direct intrinsic, but it’s very useful and the …","Not a direct intrinsic, but it’s very useful and the …","Saturating convert <code>i16</code> to <code>i8</code>, and pack the values.","Saturating convert <code>i16</code> to <code>u8</code>, and pack the values.","Saturating convert <code>i32</code> to <code>i16</code>, and pack the values.","Fetches the cache line containing <code>addr</code> into all levels of …","Fetches into L2 and higher, anticipating write","Fetch data using the non-temporal access (NTA) hint. It …","Fetches the cache line containing <code>addr</code> into all levels of …","Fetches into L2 and higher.","Fetches into L3 and higher or an implementation-specific …","Reads the CPU’s timestamp counter value.","Reads the CPU’s timestamp counter value and store the …","Lanewise <code>1.0 / a</code> approximation.","Low lane <code>1.0 / a</code> approximation, other lanes unchanged.","Lanewise <code>1.0 / sqrt(a)</code> approximation.","Low lane <code>1.0 / sqrt(a)</code> approximation, other lanes …","Turns a round operator token to the correct constant value.","Turns a round operator token to the correct constant value.","Sets the args into an <code>m128i</code>, first arg is the high lane.","Sets the args into an <code>m128i</code>, first arg is the high lane.","Set an <code>i32</code> as the low 32-bit lane of an <code>m128i</code>, other lanes …","Sets the args into an <code>m128i</code>, first arg is the high lane.","Set an <code>i64</code> as the low 64-bit lane of an <code>m128i</code>, other lanes …","Sets the args into an <code>m128i</code>, first arg is the high lane.","Sets the args into an <code>m128</code>, first arg is the high lane.","Sets the args into an <code>m128</code>, first arg is the high lane.","Sets the args into an <code>m128d</code>, first arg is the high lane.","Sets the args into the low lane of a <code>m128d</code>.","Sets the args into an <code>m128i</code>, first arg is the low lane.","Sets the args into an <code>m128i</code>, first arg is the low lane.","Sets the args into an <code>m128i</code>, first arg is the low lane.","Sets the args into an <code>m128</code>, first arg is the low lane.","Sets the args into an <code>m128d</code>, first arg is the low lane.","Splats the <code>i16</code> to all lanes of the <code>m128i</code>.","Splats the <code>i32</code> to all lanes of the <code>m128i</code>.","Splats the <code>i64</code> to both lanes of the <code>m128i</code>.","Splats the <code>i8</code> to all lanes of the <code>m128i</code>.","Splats the value to all lanes.","Splats the args into both lanes of the <code>m128d</code>.","Shift all <code>u16</code> lanes to the left by the <code>count</code> in the lower …","Shift all <code>u32</code> lanes to the left by the <code>count</code> in the lower …","Shift all <code>u64</code> lanes to the left by the <code>count</code> in the lower …","Shifts all <code>u16</code> lanes left by an immediate.","Shifts all <code>u32</code> lanes left by an immediate.","Shifts both <code>u64</code> lanes left by an immediate.","Shift each <code>i16</code> lane to the right by the <code>count</code> in the lower …","Shift each <code>i32</code> lane to the right by the <code>count</code> in the lower …","Shift each <code>u16</code> lane to the right by the <code>count</code> in the lower …","Shift each <code>u32</code> lane to the right by the <code>count</code> in the lower …","Shift each <code>u64</code> lane to the right by the <code>count</code> in the lower …","Shifts all <code>i16</code> lanes right by an immediate.","Shifts all <code>i32</code> lanes right by an immediate.","Shifts all <code>u16</code> lanes right by an immediate.","Shifts all <code>u32</code> lanes right by an immediate.","Shifts both <code>u64</code> lanes right by an immediate.","Shuffle the <code>f32</code> lanes from <code>$a</code> and <code>$b</code> together using an …","Shuffle the <code>f64</code> lanes from <code>$a</code> and <code>$b</code> together using an …","Shuffle the <code>i32</code> lanes in <code>$a</code> using an immediate control …","Shuffle the high <code>i16</code> lanes in <code>$a</code> using an immediate …","Shuffle the low <code>i16</code> lanes in <code>$a</code> using an immediate control …","Lanewise <code>sqrt(a)</code>.","Low lane <code>sqrt(a)</code>, other lanes unchanged.","Lanewise <code>sqrt(a)</code>.","Low lane <code>sqrt(b)</code>, upper lane is unchanged from <code>a</code>.","Stores the high lane value to the reference given.","Stores the value to the reference given.","Stores the value to the reference given.","Stores the low lane value to the reference given.","Stores the value to the reference given.","Stores the low lane value to the reference given.","Stores the value to the reference given.","Stores the value to the reference given in reverse order.","Stores the value to the reference given.","Stores the low lane value to all lanes of the reference …","Stores the low lane value to all lanes of the reference …","Stores the value to the reference given.","Stores the value to the reference given.","Stores the value to the reference given.","","","","","Lanewise <code>a - b</code> with lanes as <code>i16</code>.","Lanewise <code>a - b</code> with lanes as <code>i32</code>.","Lanewise <code>a - b</code> with lanes as <code>i64</code>.","Lanewise <code>a - b</code> with lanes as <code>i8</code>.","Lanewise <code>a - b</code>.","Low lane <code>a - b</code>, other lanes unchanged.","Lanewise <code>a - b</code>.","Lowest lane <code>a - b</code>, high lane unchanged.","Lanewise saturating <code>a - b</code> with lanes as <code>i16</code>.","Lanewise saturating <code>a - b</code> with lanes as <code>i8</code>.","Lanewise saturating <code>a - b</code> with lanes as <code>u16</code>.","Lanewise saturating <code>a - b</code> with lanes as <code>u8</code>.","Compute “sum of <code>u8</code> absolute differences”.","Transmutes the <code>m128</code> to an array.","Transmutes the <code>m128d</code> to an array.","Transmutes the <code>m256</code> to an array.","Transmutes the <code>m256d</code> to an array.","Converts into the bit patterns of these floats (<code>[u32;4]</code>).","Converts into the bit patterns of these doubles (<code>[u64;2]</code>).","Converts into the bit patterns of these floats (<code>[u32;8]</code>).","Converts into the bit patterns of these doubles (<code>[u64;4]</code>).","Transpose four <code>m128</code> as if they were a 4x4 matrix.","Truncate the <code>f32</code> lanes to <code>i32</code> lanes.","Truncate the <code>f64</code> lanes to the lower <code>i32</code> lanes (upper <code>i32</code> …","Truncate the lower lane into an <code>i32</code>.","Truncate the lower lane into an <code>i64</code>.","","","","","","","","","","","","","","","","","","","Unpack and interleave high <code>i16</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave high <code>i32</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave high <code>i64</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave high <code>i8</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave high lanes of <code>a</code> and <code>b</code>.","Unpack and interleave high lanes of <code>a</code> and <code>b</code>.","Unpack and interleave low <code>i16</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave low <code>i32</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave low <code>i64</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave low <code>i8</code> lanes of <code>a</code> and <code>b</code>.","Unpack and interleave low lanes of <code>a</code> and <code>b</code>.","Unpack and interleave low lanes of <code>a</code> and <code>b</code>.","All lanes zero.","Both lanes zero.","All lanes zero."],"i":[1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,0,0,0,0,0,0,1,2,3,1,2,3,0,0,0,1,2,3,1,2,3,0,0,0,1,2,3,6,7,8,1,2,3,6,7,8,0,0,0,0,0,0,0,0,0,0,1,2,3,6,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,6,7,8,1,2,1,2,0,0,0,0,1,2,3,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,6,6,7,7,8,8,8,8,8,8,8,8,8,8,8,1,2,6,7,1,2,6,7,0,0,0,0,0,0,0,0,1,2,3,6,7,8,1,2,3,6,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,0,0,0,0,0,0,0,0,0,0,1,2,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,6,7,1,2,6,7,0,0,0,0,0,1,2,3,6,7,8,1,2,3,6,7,8,1,2,3,6,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[[[1,1],1],[[2,2],2],[[1,1]],[[2,2]],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1]],[[2,2]],[[3,3]],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1]],[[2,2]],[[3,3]],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1]],[[2,2]],[[3,3]],[[1,1],1],[[2,2],2],[[3,3],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[3,3],[4,4],[5,5],[2,1],[3,1],[1,2],[3,2],[1,3],[2,3],[1,1],[2,2],[3,3],[6,6],[7,7],[8,8],[[1,1],4],[[2,2],4],[[3,3],3],[[3,3],3],[[3,3],3],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],4],[[2,2],4],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],4],[[2,2],4],[[3,3],3],[[3,3],3],[[3,3],3],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],4],[[2,2],4],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],4],[[2,2],4],[[3,3],3],[[3,3],3],[[3,3],3],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],4],[[2,2],4],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,4],1],[[2,4],2],[[2,5],2],[[2,1],2],[[1,2],1],[1,3],[2,3],[3,1],[2,1],[3,2],[1,2],[3,3],[[2,2],2],[[],1],[[],2],[[],3],[[],6],[[],7],[[],8],[[1,1],1],[[2,2],2],[[1,1]],[[2,2]],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[1,1],9],[[2,2],9],[[3,3],9],[3,4],[[1,10],11],[[1,10],11],[[1,10],11],[[1,10],11],[[1,10],11],[[1,10],11],[[1,10],11],[[1,10],11],[[2,10],11],[[2,10],11],[[2,10],11],[[2,10],11],[[2,10],11],[[2,10],11],[[2,10],11],[[2,10],11],[[3,10],11],[[3,10],11],[[3,10],11],[[3,10],11],[[3,10],11],[[3,10],11],[[3,10],11],[[3,10],11],[[6,10],11],[[6,10],11],[[6,10],11],[[6,10],11],[[6,10],11],[[6,10],11],[[6,10],11],[[6,10],11],[[7,10],11],[[7,10],11],[[7,10],11],[[7,10],11],[[7,10],11],[[7,10],11],[[7,10],11],[[7,10],11],[[8,10],11],[[8,10],11],[[8,10],11],[[8,10],11],[[8,10],11],[[8,10],11],[[8,10],11],[[8,10],11],[[[13,[12]]],1],[[]],[[]],[[[13,[14]]],2],[15,3],[[[13,[4]]],3],[16,3],[[[13,[17]]],3],[[[13,[18]]],3],[[[13,[5]]],3],[[]],[[[13,[19]]],3],[[[13,[20]]],3],[[[13,[21]]],3],[[[13,[22]]],3],[[]],[[[13,[12]]],6],[[]],[[[13,[14]]],7],[[[13,[18]]],8],[[]],[[[13,[17]]],8],[[[13,[16]]],8],[[[13,[4]]],8],[[[13,[19]]],8],[[[13,[15]]],8],[[[13,[20]]],8],[[[13,[22]]],8],[[[13,[21]]],8],[[[13,[5]]],8],[[[13,[12]]],1],[[[13,[14]]],2],[[[13,[12]]],6],[[[13,[14]]],7],[[[13,[21]]],1],[[[13,[20]]],2],[[[13,[21]]],6],[[[13,[20]]],7],[1,12],[2,14],[1,4],[2,4],[3,4],[2,5],[3,5],[[3,4],3],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[12,1],[12,1],[14,2],[14,2],[3,3],[1,1],[2,2],[3,3],[[2,14],2],[[2,14],2],[1,1],[2,2],[[[13,[12]]],1],[[[13,[14]]],2],[[[13,[19]]],3],0,0,0,0,0,0,[[3,3],3],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[3,3],3],[[3,3],3],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[3,3],3],[[1,1],1],[[1,1],1],[[1,1],1],[3,4],[1,4],[2,4],[[1,1],1],[[2,2],2],[[1,1]],[[2,2]],[[3,3],3],[[3,3],3],[[3,3],3],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[3,3],3],[[3,3],3],0,[1,1],[2,2],[1,1],[2,2],[3,3],[[3,3],3],[[3,3],3],[[3,3],3],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[21,20],[1,1],[1,1],[1,1],[1,1],0,0,[[17,17,17,17,17,17,17,17],3],[[4,4,4,4],3],[4,3],[[5,5],3],[5,3],[[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18],3],[[12,12,12,12],1],[12,1],[[14,14],2],[14,2],[[17,17,17,17,17,17,17,17],3],[[4,4,4,4],3],[[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18],3],[[12,12,12,12],1],[[14,14],2],[17,3],[4,3],[5,3],[18,3],[12,1],[14,2],[[3,3],3],[[3,3],3],[[3,3],3],[3,3],[3,3],[3,3],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[3,3],[3,3],[3,3],[3,3],[3,3],[[1,1],1],[[2,2],2],[3,3],[3,3],[3,3],[1,1],[1,1],[2,2],[[2,2],2],[[14,2]],[[5,3]],[[1,1]],[[12,1]],[[2,2]],[[14,2]],[[3,3]],[[1,1]],[[2,2]],[[1,1]],[[2,2]],[[[13,[12]],1]],[[[13,[14]],2]],[[[13,[19]],3]],[[1,1],1],[[2,2],2],[[1,1]],[[2,2]],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[1,[[13,[12]]]],[2,[[13,[14]]]],[6,[[13,[12]]]],[7,[[13,[14]]]],[1,[[13,[21]]]],[2,[[13,[20]]]],[6,[[13,[21]]]],[7,[[13,[20]]]],[[1,1,1,1]],[1,3],[2,3],[2,4],[2,5],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[3,3],3],[[3,3],3],[[3,3],3],[[1,1],1],[[2,2],2],[[],1],[[],2],[[],3]],"c":[],"p":[[3,"m128"],[3,"m128d"],[3,"m128i"],[15,"i32"],[15,"i64"],[3,"m256"],[3,"m256d"],[3,"m256i"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"f32"],[15,"array"],[15,"f64"],[15,"u128"],[15,"i128"],[15,"i16"],[15,"i8"],[15,"u8"],[15,"u64"],[15,"u32"],[15,"u16"],[4,"Result"],[3,"TypeId"]]},\
"scopeguard":{"doc":"A scope guard will run a given closure when it goes out of …","t":"EDILLLLOLLLLLLLFLLLKLLLLLLLL","n":["Always","ScopeGuard","Strategy","borrow","borrow","borrow_mut","borrow_mut","defer","deref","deref_mut","drop","fmt","fmt","from","from","guard","into","into","into_inner","should_run","should_run","try_from","try_from","try_into","try_into","type_id","type_id","with_strategy"],"q":[[0,"scopeguard"]],"d":["Always run on scope exit.","<code>ScopeGuard</code> is a scope guard that may own a protected value.","Controls in which cases the associated code should be run","","","","","Macro to create a <code>ScopeGuard</code> (always run).","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ScopeGuard</code> owning <code>v</code> and with deferred closure …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","“Defuse” the guard and extract the value without …","Return <code>true</code> if the guard’s associated code should run …","","","","","","","","Create a <code>ScopeGuard</code> that owns <code>v</code> (accessible through deref) …"],"i":[0,0,0,3,7,3,7,0,3,3,3,3,7,3,7,0,3,7,3,2,7,3,7,3,7,3,7,3],"f":[0,0,0,[[]],[[]],[[]],[[]],0,[[[3,[1,2]]]],[[[3,[1,2]]]],[[[3,[1,2]]]],[[[3,[4,1,2]],5],6],[[7,5],6],[[]],[[]],[1,[[3,[1,7]]]],[[]],[[]],[[[3,[1,2]]]],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[1,[[3,[1,2]]]]],"c":[],"p":[[8,"FnOnce"],[8,"Strategy"],[3,"ScopeGuard"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Always"],[15,"bool"],[4,"Result"],[3,"TypeId"]]},\
"simba":{"doc":"<strong>Simba</strong> is a crate defining a set of trait for writing code …","t":"AAIIIIIIIIQIIKKKKKKKKKKKKKKKLLKLLKKKKKKKKKKKKKKKKLLKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKLLKKLLKLLLLKKKLLLLLLKKKKKKDGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGDGGGGGGGGGGGGGGGGGGGGGGGQIIQIDIIQIIDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLLLKLLLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLLLKLLLLLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["scalar","simd","ClosedAdd","ClosedDiv","ClosedMul","ClosedNeg","ClosedSub","ComplexField","Field","RealField","RealField","SubsetOf","SupersetOf","abs","acos","acosh","argument","asin","asinh","atan","atan2","atanh","cbrt","ceil","clamp","conjugate","copysign","cos","cosc","cosc","cosh","coshc","coshc","e","exp","exp2","exp_m1","floor","frac_1_pi","frac_2_pi","frac_2_sqrt_pi","frac_pi_2","frac_pi_3","frac_pi_4","frac_pi_6","frac_pi_8","fract","from_real","from_subset","from_superset","from_superset","from_superset_unchecked","hypot","imaginary","is_finite","is_in_subset","is_in_subset","is_sign_negative","is_sign_positive","ln","ln_10","ln_1p","ln_2","log","log10","log10_e","log2","log2_e","max","max_value","min","min_value","modulus","modulus_squared","mul_add","norm1","pi","powc","powf","powi","real","recip","round","scale","signum","signum","sin","sin_cos","sinc","sinc","sinh","sinh_cosh","sinh_cosh","sinhc","sinhc","sqrt","tan","tanh","to_exp","to_exp","to_polar","to_polar","to_subset","to_subset","to_subset_unchecked","to_superset","trunc","try_sqrt","two_pi","unscale","AutoBoolSimd","AutoBoolx1","AutoBoolx16","AutoBoolx2","AutoBoolx32","AutoBoolx4","AutoBoolx8","AutoF32x16","AutoF32x2","AutoF32x4","AutoF32x8","AutoF64x2","AutoF64x4","AutoF64x8","AutoI128x1","AutoI128x2","AutoI128x4","AutoI16x16","AutoI16x2","AutoI16x32","AutoI16x4","AutoI16x8","AutoI32x16","AutoI32x2","AutoI32x4","AutoI32x8","AutoI64x2","AutoI64x4","AutoI64x8","AutoI8x16","AutoI8x2","AutoI8x32","AutoI8x4","AutoI8x8","AutoIsizex2","AutoIsizex4","AutoIsizex8","AutoSimd","AutoU128x1","AutoU128x2","AutoU128x4","AutoU16x16","AutoU16x2","AutoU16x32","AutoU16x4","AutoU16x8","AutoU32x16","AutoU32x2","AutoU32x4","AutoU32x8","AutoU64x2","AutoU64x4","AutoU64x8","AutoU8x16","AutoU8x2","AutoU8x32","AutoU8x4","AutoU8x8","AutoUsizex2","AutoUsizex4","AutoUsizex8","Element","PrimitiveSimdValue","SimdBool","SimdBool","SimdComplexField","SimdOption","SimdPartialOrd","SimdRealField","SimdRealField","SimdSigned","SimdValue","WideBoolF32x4","WideBoolF32x8","WideBoolF64x4","WideF32x4","WideF32x8","WideF64x4","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","all","all","all","all","all","all","all","all","all","all","and","and","and","and","and","and","and","and","and","and","any","any","any","any","any","any","any","any","any","any","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitmask","bitmask","bitmask","bitmask","bitmask","bitmask","bitmask","bitmask","bitmask","bitmask","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","if_else","if_else","if_else","if_else","if_else","if_else","if_else","if_else","if_else","if_else","if_else2","if_else2","if_else2","if_else2","if_else2","if_else2","if_else2","if_else2","if_else2","if_else2","if_else3","if_else3","if_else3","if_else3","if_else3","if_else3","if_else3","if_else3","if_else3","if_else3","into","into","into","into","into","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","map_lanes","map_lanes","mask","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","none","none","none","none","none","none","none","none","none","none","not","not","not","not","not","not","not","not","not","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","option","or","or","or","or","or","or","or","or","or","or","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cosc","simd_cosc","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_coshc","simd_coshc","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_e","simd_e","simd_e","simd_e","simd_e","simd_e","simd_e","simd_e","simd_e","simd_e","simd_e","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_pi","simd_pi","simd_pi","simd_pi","simd_pi","simd_pi","simd_pi","simd_pi","simd_pi","simd_pi","simd_pi","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sinc","simd_sinc","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh_cosh","simd_sinh_cosh","simd_sinhc","simd_sinhc","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_polar","simd_to_polar","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unwrap","simd_unwrap_or","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","xor","xor","xor","xor","xor","xor","xor","xor","xor","xor","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zip_map_lanes","zip_map_lanes"],"q":[[0,"simba"],[2,"simba::scalar"],[110,"simba::simd"]],"d":["Traits implemented by scalar, non-SIMD, types.","Traits implemented by SIMD types and non-SIMD types.","Trait <strong>alias</strong> for <code>Add</code> and <code>AddAssign</code> with result of type <code>Self</code>.","Trait <strong>alias</strong> for <code>Div</code> and <code>DivAssign</code> with result of type <code>Self</code>.","Trait <strong>alias</strong> for <code>Mul</code> and <code>MulAssign</code> with result of type <code>Self</code>.","Trait <strong>alias</strong> for <code>Neg</code> with result of type <code>Self</code>.","Trait <strong>alias</strong> for <code>Sub</code> and <code>SubAssign</code> with result of type <code>Self</code>.","Trait shared by all complex fields and its subfields (like …","Trait implemented by fields, i.e., complex numbers and …","Trait shared by all reals.","","Nested sets and conversions between them (using an …","Nested sets and conversions between them. Useful to work …","The absolute value of this complex number: …","","","The argument of this complex number.","","","","","","","","","","Copies the sign of <code>sign</code> to <code>self</code>.","","Cardinal cos","Cardinal cos","","","","","","","","","","","","","","","","","","Builds a pure-real complex number from the given value.","The inclusion map: converts <code>self</code> to the equivalent element …","The inverse inclusion map: attempts to construct <code>self</code> from …","The inverse inclusion map: attempts to construct <code>self</code> from …","Use with care! Same as <code>self.to_superset</code> but without any …","Computes (self.conjugate() * self + other.conjugate() * …","The imaginary part of this complex number.","","Checks if <code>element</code> is actually part of the subset <code>Self</code> (and …","Checks if <code>self</code> is actually part of its subset <code>T</code> (and can …","Is the sign of this real number negative?","Is the sign of this real number positive?","","","","","","","","","","","The largest finite positive value representable using this …","","The smallest finite positive value representable using …","The modulus of this complex number.","The squared modulus of this complex number.","","The sum of the absolute value of this complex number’s …","","","","","The real part of this complex number.","","","Multiplies this complex number by <code>factor</code>.","The exponential part of this complex number: …","The exponential part of this complex number: …","","","Cardinal sine","Cardinal sine","","","","","","","","","The exponential form of this complex number: (modulus, …","The exponential form of this complex number: (modulus, …","The polar form of this complex number: (modulus, arg)","The polar form of this complex number: (modulus, arg)","The inverse inclusion map: attempts to construct <code>self</code> from …","The inverse inclusion map: attempts to construct <code>self</code> from …","Use with care! Same as <code>self.to_subset</code> but without any …","The inclusion map: converts <code>self</code> to the equivalent element …","","","","Divides this complex number by <code>factor</code>.","A SIMD boolean structure that implements all the relevant …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A SIMD structure that implements all the relevant traits …","","","","","","","","","","","","","","","","","","","","","","","","The type of the elements of each lane of this SIMD value.","Marker trait implemented by SIMD and non-SIMD primitive …","Lane-wise generalization of <code>bool</code> for SIMD booleans.","Type of the result of comparing two SIMD values like <code>self</code>.","Lane-wise generalisation of <code>ComplexField</code> for SIMD complex …","Generalization of Option for SIMD computation.","Lane-wise generalization of the standard <code>PartialOrd</code> for …","Lanewise generalization of <code>RealField</code> for SIMD reals.","Type of the coefficients of a complex number.","A lane-wise generalization of <code>num::Signed</code> for SIMD values.","Base trait for every SIMD types.","An SIMD boolean structure associated to <code>wide::f32x4</code> that …","An SIMD boolean structure associated to <code>wide::f32x8</code> that …","An SIMD boolean structure associated to <code>wide::f64x4</code> that …","A wrapper type of <code>wide::f32x4</code> that implements all the …","A wrapper type of <code>wide::f32x8</code> that implements all the …","A wrapper type of <code>wide::f64x4</code> that implements all the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Are all vector lanes true?","","","","","","","","","","Lane-wise bitwise and of the vector elements.","","","","","","","","","","Is any vector lane true?","","","","","","","","","","","","","","","","","","","A bit mask representing the boolean state of each lanes of …xtracts the i-th lane of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts the i-th lane of <code>self</code> without bound-checking.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchangeduilds a pure-real complex number from the given valueerges the value of <code>if_value()</code> and <code>else_value()</code> depending …","","","","","","","","","","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","","","","","","","","","","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tests which lane is negative.","","","","","","","","","","","Tests which lane is positive.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of lanes of this SIMD value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies a function to each lane of <code>self</code>.","Applies a function to each lane of <code>self</code>.","Return the underlying SIMD boolean mask.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new SIMD option by combining a value and a mask …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Are all vector lanes false?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts this SIMD option to a strandard Option.","Lane-wise bitwise or of the vector elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Replaces the i-th lane of <code>self</code> by <code>val</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Replaces the i-th lane of <code>self</code> by <code>val</code> without …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Merges <code>self</code> and <code>other</code> depending on the lanes of <code>cond</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The absolute value of this complex number: …","The absolute value of each lane of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","The absolute difference of each lane of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The argument of this complex number.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clamps each lane of <code>self</code> between the corresponding lane of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Copies the sign of <code>sign</code> to <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","Cardinal cos","Cardinal cos","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>equal</em> <code>==</code> comparisonanewise <em>greater or equal</em> <code>&gt;=</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>greater than</em> <code>&gt;</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The max value among all lanes of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The min value among all lanes of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the product of all the lanes of <code>self</code>.","","","","","","","","","","","Computes the sum of all the lanes of <code>self</code>.","","","","","","","","","","","Computes (self.conjugate() * self + other.conjugate() * …","","","","","","","","","","","The imaginary part of this complex number.","","","","","","","","","","","Lanewise <em>less or equal</em> <code>&lt;=</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>less than</em> <code>&lt;</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise max value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise min value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The modulus of this complex number.","","","","","","","","","","","The squared modulus of this complex number.","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>not equal</em> <code>!=</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The sum of the absolute value of this complex number’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The real part of this complex number.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multiplies this complex number by <code>factor</code>.","","","","","","","","","","","The signum of each lane of <code>Self</code>.","The exponential part of this complex number: …","The exponential part of this complex number: …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cardinal sine","Cardinal sine","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The exponential form of this complex number: (modulus, …","The exponential form of this complex number: (modulus, …","","","","","","","","","","","The polar form of this complex number: (modulus, arg)","The polar form of this complex number: (modulus, arg)","","","","","","","","","","","","","","","","","","","","","","","Divides this complex number by <code>factor</code>.","","","","","","","","","","","Retrieve the underlying value if all the bits of <code>self.mask</code> …","Merges the value of <code>self</code> with the value of <code>other</code>.","Initializes an SIMD value with each lanes set to <code>val</codeeturn the underlying unfiltered value.","Lane-wise bitwise xor of the vector elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies a function to each lane of <code>self</code> paired with the …","Applies a function to each lane of <code>self</code> paired with the …"],"i":[0,0,0,0,0,0,0,0,0,0,39,0,0,39,39,39,39,39,39,39,40,39,39,39,40,39,40,39,39,39,39,39,39,40,39,39,39,39,40,40,40,40,40,40,40,40,39,39,41,42,42,42,39,39,39,42,41,40,40,39,40,39,40,39,39,40,39,40,40,40,40,40,39,39,39,39,40,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,41,41,41,42,39,39,40,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,0,0,34,0,0,0,0,43,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,44,6,6,6,6,6,6,22,23,24,44,6,6,6,6,6,6,22,23,24,44,6,6,6,6,6,6,22,23,24,6,6,6,6,6,6,22,23,24,44,6,6,6,6,6,6,22,23,24,6,6,6,6,6,6,22,23,24,6,6,6,6,6,6,22,23,24,36,6,26,19,22,20,23,21,24,36,6,26,19,22,20,23,21,24,6,26,19,22,20,23,21,24,6,26,19,22,20,23,21,24,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,6,26,19,22,20,23,21,24,6,26,34,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,22,20,23,21,24,34,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,22,20,23,21,24,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,26,19,22,20,23,21,24,36,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,26,19,19,22,22,20,20,23,23,21,21,24,24,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,36,6,26,19,22,20,23,21,24,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,22,20,23,21,24,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,22,20,23,21,24,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,44,6,6,6,6,6,6,22,23,24,44,6,6,6,6,6,6,22,23,24,44,6,6,6,6,6,6,22,23,24,36,6,26,19,22,20,23,21,24,36,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,26,19,19,22,22,20,20,23,23,21,21,24,24,45,6,6,6,6,6,6,6,19,20,21,45,6,6,6,6,6,6,6,19,20,21,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,34,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,22,20,23,21,24,34,34,36,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,36,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,44,6,6,6,6,6,6,22,23,24,6,6,6,6,6,6,22,23,24,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,36,44,6,6,6,6,6,6,22,23,24,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,34,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,22,20,23,21,24,34,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,22,20,23,21,24,34,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,22,20,23,21,24,43,45,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,19,20,20,21,21,45,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,46,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,47,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,46,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,43,43,6,6,6,6,6,6,6,19,20,21,43,43,46,6,6,6,6,6,6,6,19,20,21,46,6,6,6,6,6,6,6,19,20,21,47,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,46,6,6,6,6,6,6,6,19,20,21,46,6,6,6,6,6,6,6,19,20,21,46,6,6,6,6,6,6,6,19,20,21,46,6,6,6,6,6,6,6,19,20,21,46,6,6,6,6,6,6,6,19,20,21,46,6,6,6,6,6,6,6,19,20,21,46,6,6,6,6,6,6,6,19,20,21,46,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,47,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,47,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,47,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,47,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,47,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,46,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,46,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,46,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,46,6,6,6,6,6,6,6,19,20,21,47,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,47,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,47,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,47,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,46,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,45,43,43,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,19,20,20,21,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,43,43,6,6,6,6,6,6,6,19,20,21,43,43,43,43,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,43,43,6,6,6,6,6,6,6,19,20,21,43,43,43,6,6,6,6,6,6,6,19,20,21,46,6,6,6,6,6,6,6,19,20,21,43,6,6,6,6,6,6,6,19,20,21,36,36,34,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,22,20,23,21,24,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,6,26,19,22,20,23,21,24,6,36,6,26,19,22,20,23,21,24,36,6,26,19,22,20,23,21,24,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,22,20,23,21,24,36,6,26,19,22,20,23,21,24,36,6,26,19,22,20,23,21,24,36,6,26,19,22,20,23,21,24,36,44,6,6,6,6,6,6,22,23,24,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,20,21,34,34],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[]],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[]],[[]],[[]],[[],1],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[19,19],19],[[20,20],20],[[21,21],21],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[19,19]],[[20,20]],[[21,21]],[[],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[22,2],[23,2],[24,2],[[],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[22,2],[23,2],[24,2],[[],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[22,2],[23,2],[24,2],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[22,22],22],[[23,23],23],[[24,24],24],[[],17],[[[6,[[5,[2]]]]],17],[[[6,[[5,[2]]]]],17],[[[6,[[5,[2]]]]],17],[[[6,[[5,[2]]]]],17],[[[6,[[5,[2]]]]],17],[[[6,[[5,[2]]]]],17],[22,17],[23,17],[24,17],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[22,22],22],[[23,23],23],[[24,24],24],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[22,22],22],[[23,23],23],[[24,24],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[25]]],[[6,[25]]]],[[[26,[25]]],[[26,[25]]]],[19,19],[22,22],[20,20],[23,23],[21,21],[24,24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[19,19],19],[[20,20],20],[[21,21],21],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[19,19]],[[20,20]],[[21,21]],[[[6,[27]],[6,[27]]],2],[[[26,[27]],[26,[27]]],2],[[19,19],2],[[22,22],2],[[20,20],2],[[23,23],2],[[21,21],2],[[24,24],2],[[],2],[[],2],[16],[[[6,[[5,[9]]]],16]],[[[6,[[5,[3]]]],16]],[[[6,[[5,[8]]]],16]],[[[6,[[5,[9]]]],16]],[[[6,[[5,[4]]]],16]],[[[6,[[5,[4]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[16]]]],16]],[[[6,[[5,[8]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[9]]]],16]],[[[6,[[5,[18]]]],16]],[[[6,[[5,[16]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[4]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[7]]]],16]],[[[6,[[5,[9]]]],16]],[[[6,[[5,[7]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[13]]]],16]],[[[6,[[5,[3]]]],16]],[[[6,[[5,[8]]]],16]],[[[6,[[5,[7]]]],16]],[[[6,[[5,[11]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[10]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[17]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[13]]]],16]],[[[6,[[5,[13]]]],16]],[[[6,[[5,[12]]]],16]],[[[6,[[5,[8]]]],16]],[[[6,[[5,[17]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[18]]]],16]],[[[6,[[5,[17]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[10]]]],16]],[[[6,[[5,[3]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[12]]]],16]],[[[6,[[5,[16]]]],16]],[[[6,[[5,[10]]]],16]],[[[6,[[5,[4]]]],16]],[[[6,[[5,[11]]]],16]],[[[6,[[5,[11]]]],16]],[[[6,[[5,[18]]]],16]],[[[6,[[5,[12]]]],16]],[[[6,[[5,[7]]]],16]],[[[6,[[5,[9]]]],16]],[[[6,[[5,[3]]]],16]],[[[6,[[5,[4]]]],16]],[[19,16]],[[22,16]],[[20,16]],[[23,16]],[[21,16]],[[24,16]],[16],[[[6,[[5,[7]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[8]]]],16]],[[[6,[[5,[9]]]],16]],[[[6,[[5,[4]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[9]]]],16]],[[[6,[[5,[4]]]],16]],[[[6,[[5,[8]]]],16]],[[[6,[[5,[10]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[7]]]],16]],[[[6,[[5,[12]]]],16]],[[[6,[[5,[17]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[3]]]],16]],[[[6,[[5,[7]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[18]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[18]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[17]]]],16]],[[[6,[[5,[7]]]],16]],[[[6,[[5,[17]]]],16]],[[[6,[[5,[4]]]],16]],[[[6,[[5,[9]]]],16]],[[[6,[[5,[16]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[13]]]],16]],[[[6,[[5,[8]]]],16]],[[[6,[[5,[3]]]],16]],[[[6,[[5,[9]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[4]]]],16]],[[[6,[[5,[11]]]],16]],[[[6,[[5,[16]]]],16]],[[[6,[[5,[11]]]],16]],[[[6,[[5,[4]]]],16]],[[[6,[[5,[10]]]],16]],[[[6,[[5,[3]]]],16]],[[[6,[[5,[12]]]],16]],[[[6,[[5,[9]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[16]]]],16]],[[[6,[[5,[11]]]],16]],[[[6,[[5,[10]]]],16]],[[[6,[[5,[3]]]],16]],[[[6,[[5,[13]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[8]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[12]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[18]]]],16]],[[[6,[[5,[13]]]],16]],[[[6,[[5,[2]]]],16]],[[19,16]],[[22,16]],[[20,16]],[[23,16]],[[21,16]],[[24,16]],[[[6,[[5,[10]]]],28],29],[[[6,[[5,[17]]]],28],29],[[[6,[[5,[7]]]],28],29],[[[6,[[5,[9]]]],28],29],[[[6,[[5,[13]]]],28],29],[[[6,[[5,[8]]]],28],29],[[[6,[[5,[18]]]],28],29],[[[6,[[5,[18]]]],28],29],[[[6,[[5,[7]]]],28],29],[[[6,[[5,[3]]]],28],29],[[[6,[30]],28],29],[[[6,[[5,[4]]]],28],29],[[[6,[[5,[4]]]],28],29],[[[6,[[5,[2]]]],28],29],[[[6,[[5,[15]]]],28],29],[[[6,[[5,[15]]]],28],29],[[[6,[[5,[18]]]],28],29],[[[6,[[5,[2]]]],28],29],[[[6,[[5,[9]]]],28],29],[[[6,[[5,[7]]]],28],29],[[[6,[[5,[4]]]],28],29],[[[6,[[5,[8]]]],28],29],[[[6,[[5,[8]]]],28],29],[[[6,[[5,[14]]]],28],29],[[[6,[[5,[2]]]],28],29],[[[6,[[5,[2]]]],28],29],[[[6,[[5,[9]]]],28],29],[[[6,[[5,[16]]]],28],29],[[[6,[[5,[14]]]],28],29],[[[6,[[5,[4]]]],28],29],[[[6,[[5,[3]]]],28],29],[[[6,[[5,[12]]]],28],29],[[[6,[[5,[7]]]],28],29],[[[6,[[5,[15]]]],28],29],[[[6,[[5,[9]]]],28],29],[[[6,[[5,[10]]]],28],29],[[[6,[[5,[14]]]],28],29],[[[6,[[5,[11]]]],28],29],[[[6,[[5,[15]]]],28],29],[[[6,[[5,[15]]]],28],29],[[[6,[[5,[17]]]],28],29],[[[6,[[5,[8]]]],28],29],[[[6,[[5,[3]]]],28],29],[[[6,[[5,[13]]]],28],29],[[[6,[[5,[9]]]],28],29],[[[6,[[5,[11]]]],28],29],[[[6,[[5,[4]]]],28],29],[[[6,[[5,[12]]]],28],29],[[[6,[[5,[17]]]],28],29],[[[6,[[5,[16]]]],28],29],[[[6,[[5,[2]]]],28],29],[[[6,[[5,[16]]]],28],29],[[[6,[[5,[11]]]],28],29],[[[6,[[5,[2]]]],28],29],[[[6,[[5,[14]]]],28],29],[[[6,[[5,[13]]]],28],29],[[[6,[[5,[12]]]],28],29],[[[6,[[5,[3]]]],28],29],[[[6,[[5,[14]]]],28],29],[[[6,[[5,[10]]]],28],29],[[[26,[30]],28],29],[[19,28],29],[[22,28],29],[[20,28],29],[[23,28],29],[[21,28],29],[[24,28],29],[[]],[[[5,[14]]],[[6,[[5,[14]]]]]],[[[5,[3]]],[[6,[[5,[3]]]]]],[[[5,[18]]],[[6,[[5,[18]]]]]],[[[5,[18]]],[[6,[[5,[18]]]]]],[[[5,[13]]],[[6,[[5,[13]]]]]],[[[5,[4]]],[[6,[[5,[4]]]]]],[[[5,[14]]],[[6,[[5,[14]]]]]],[[[5,[4]]],[[6,[[5,[4]]]]]],[[[5,[8]]],[[6,[[5,[8]]]]]],[[[5,[15]]],[[6,[[5,[15]]]]]],[[[5,[8]]],[[6,[[5,[8]]]]]],[[[5,[8]]],[[6,[[5,[8]]]]]],[[[5,[11]]],[[6,[[5,[11]]]]]],[[[5,[3]]],[[6,[[5,[3]]]]]],[[[5,[8]]],[[6,[[5,[8]]]]]],[[[5,[12]]],[[6,[[5,[12]]]]]],[[[5,[7]]],[[6,[[5,[7]]]]]],[[[5,[10]]],[[6,[[5,[10]]]]]],[[[5,[17]]],[[6,[[5,[17]]]]]],[[]],[[[5,[14]]],[[6,[[5,[14]]]]]],[[[5,[4]]],[[6,[[5,[4]]]]]],[[[5,[9]]],[[6,[[5,[9]]]]]],[[[5,[15]]],[[6,[[5,[15]]]]]],[[[5,[2]]],[[6,[[5,[2]]]]]],[[[5,[10]]],[[6,[[5,[10]]]]]],[[[5,[9]]],[[6,[[5,[9]]]]]],[[[5,[12]]],[[6,[[5,[12]]]]]],[[[5,[4]]],[[6,[[5,[4]]]]]],[[[5,[2]]],[[6,[[5,[2]]]]]],[[[5,[15]]],[[6,[[5,[15]]]]]],[[[5,[13]]],[[6,[[5,[13]]]]]],[[[5,[7]]],[[6,[[5,[7]]]]]],[[[5,[2]]],[[6,[[5,[2]]]]]],[[[5,[13]]],[[6,[[5,[13]]]]]],[[[5,[2]]],[[6,[[5,[2]]]]]],[[[5,[18]]],[[6,[[5,[18]]]]]],[[[5,[10]]],[[6,[[5,[10]]]]]],[[[5,[2]]],[[6,[[5,[2]]]]]],[[[5,[3]]],[[6,[[5,[3]]]]]],[[[5,[15]]],[[6,[[5,[15]]]]]],[[[5,[14]]],[[6,[[5,[14]]]]]],[[[5,[16]]],[[6,[[5,[16]]]]]],[[[5,[3]]],[[6,[[5,[3]]]]]],[[[5,[9]]],[[6,[[5,[9]]]]]],[[[5,[9]]],[[6,[[5,[9]]]]]],[[[5,[15]]],[[6,[[5,[15]]]]]],[[[5,[16]]],[[6,[[5,[16]]]]]],[[[5,[17]]],[[6,[[5,[17]]]]]],[[[5,[17]]],[[6,[[5,[17]]]]]],[[[5,[12]]],[[6,[[5,[12]]]]]],[[[5,[11]]],[[6,[[5,[11]]]]]],[[[5,[7]]],[[6,[[5,[7]]]]]],[[[5,[4]]],[[6,[[5,[4]]]]]],[[[5,[9]]],[[6,[[5,[9]]]]]],[[[5,[7]]],[[6,[[5,[7]]]]]],[[[5,[2]]],[[6,[[5,[2]]]]]],[[[5,[16]]],[[6,[[5,[16]]]]]],[[[5,[11]]],[[6,[[5,[11]]]]]],[[[5,[14]]],[[6,[[5,[14]]]]]],[[]],[[]],[[[5,[8]]],19],[[]],[[[5,[2]]],22],[[[5,[8]]],20],[[]],[[[5,[2]]],23],[[]],[[]],[[[5,[13]]],21],[[[5,[2]]],24],[[]],[8,[[1,[[6,[[5,[15]]]]]]]],[8,[[1,[[6,[[5,[13]]]]]]]],[8,[[1,[[6,[[5,[10]]]]]]]],[8,[[1,[[6,[[5,[17]]]]]]]],[8,[[1,[[6,[[5,[9]]]]]]]],[8,[[1,[[6,[[5,[15]]]]]]]],[8,[[1,[[6,[[5,[8]]]]]]]],[8,[[1,[[6,[[5,[10]]]]]]]],[8,[[1,[[6,[[5,[11]]]]]]]],[8,[[1,[[6,[[5,[11]]]]]]]],[8,[[1,[[6,[[5,[9]]]]]]]],[8,[[1,[[6,[[5,[8]]]]]]]],[8,[[1,[[6,[[5,[14]]]]]]]],[8,[[1,[[6,[[5,[3]]]]]]]],[8,[[1,[[6,[[5,[8]]]]]]]],[8,[[1,[[6,[[5,[9]]]]]]]],[8,[[1,[[6,[[5,[12]]]]]]]],[8,[[1,[[6,[[5,[14]]]]]]]],[8,[[1,[[6,[[5,[14]]]]]]]],[8,[[1,[[6,[[5,[9]]]]]]]],[8,[[1,[[6,[[5,[10]]]]]]]],[8,[[1,[[6,[[5,[14]]]]]]]],[8,[[1,[[6,[[5,[16]]]]]]]],[8,[[1,[[6,[[5,[11]]]]]]]],[8,[[1,[[6,[[5,[17]]]]]]]],[8,[[1,[[6,[[5,[4]]]]]]]],[8,[[1,[[6,[[5,[18]]]]]]]],[8,[[1,[[6,[[5,[15]]]]]]]],[8,[[1,[[6,[[5,[8]]]]]]]],[8,[[1,[[6,[[5,[3]]]]]]]],[8,[[1,[[6,[[5,[7]]]]]]]],[8,[[1,[[6,[[5,[3]]]]]]]],[8,[[1,[[6,[[5,[3]]]]]]]],[8,[[1,[[6,[[5,[7]]]]]]]],[8,[[1,[[6,[[5,[7]]]]]]]],[8,[[1,[[6,[[5,[4]]]]]]]],[8,[[1,[[6,[[5,[9]]]]]]]],[8,[[1,[[6,[[5,[4]]]]]]]],[8,[[1,[[6,[[5,[16]]]]]]]],[8,[[1,[[6,[[5,[15]]]]]]]],[8,[[1,[[6,[[5,[18]]]]]]]],[8,[[1,[[6,[[5,[4]]]]]]]],[8,[[1,[[6,[[5,[12]]]]]]]],[8,[[1,[[6,[[5,[13]]]]]]]],[8,[[1,[[6,[[5,[17]]]]]]]],[8,[[1,[[6,[[5,[13]]]]]]]],[8,[[1,[[6,[[5,[18]]]]]]]],[8,[[1,[[6,[[5,[15]]]]]]]],[8,[[1,[[6,[[5,[12]]]]]]]],[8,[[1,[[6,[[5,[14]]]]]]]],[8,[[1,[[6,[[5,[7]]]]]]]],[8,[[1,[[6,[[5,[4]]]]]]]],[8,[[1,[[6,[[5,[16]]]]]]]],[8,[[1,[19]]]],[8,[[1,[20]]]],[8,[[1,[21]]]],[13,[[1,[[6,[[5,[18]]]]]]]],[13,[[1,[[6,[[5,[12]]]]]]]],[13,[[1,[[6,[[5,[15]]]]]]]],[13,[[1,[[6,[[5,[14]]]]]]]],[13,[[1,[[6,[[5,[8]]]]]]]],[13,[[1,[[6,[[5,[12]]]]]]]],[13,[[1,[[6,[[5,[9]]]]]]]],[13,[[1,[[6,[[5,[10]]]]]]]],[13,[[1,[[6,[[5,[8]]]]]]]],[13,[[1,[[6,[[5,[13]]]]]]]],[13,[[1,[[6,[[5,[13]]]]]]]],[13,[[1,[[6,[[5,[16]]]]]]]],[13,[[1,[[6,[[5,[14]]]]]]]],[13,[[1,[[6,[[5,[11]]]]]]]],[13,[[1,[[6,[[5,[13]]]]]]]],[13,[[1,[[6,[[5,[9]]]]]]]],[13,[[1,[[6,[[5,[14]]]]]]]],[13,[[1,[[6,[[5,[10]]]]]]]],[13,[[1,[[6,[[5,[18]]]]]]]],[13,[[1,[[6,[[5,[17]]]]]]]],[13,[[1,[[6,[[5,[10]]]]]]]],[13,[[1,[[6,[[5,[9]]]]]]]],[13,[[1,[[6,[[5,[9]]]]]]]],[13,[[1,[[6,[[5,[15]]]]]]]],[13,[[1,[[6,[[5,[15]]]]]]]],[13,[[1,[[6,[[5,[7]]]]]]]],[13,[[1,[[6,[[5,[4]]]]]]]],[13,[[1,[[6,[[5,[3]]]]]]]],[13,[[1,[[6,[[5,[15]]]]]]]],[13,[[1,[[6,[[5,[9]]]]]]]],[13,[[1,[[6,[[5,[17]]]]]]]],[13,[[1,[[6,[[5,[17]]]]]]]],[13,[[1,[[6,[[5,[11]]]]]]]],[13,[[1,[[6,[[5,[14]]]]]]]],[13,[[1,[[6,[[5,[15]]]]]]]],[13,[[1,[[6,[[5,[3]]]]]]]],[13,[[1,[[6,[[5,[7]]]]]]]],[13,[[1,[[6,[[5,[3]]]]]]]],[13,[[1,[[6,[[5,[12]]]]]]]],[13,[[1,[[6,[[5,[3]]]]]]]],[13,[[1,[[6,[[5,[7]]]]]]]],[13,[[1,[[6,[[5,[7]]]]]]]],[13,[[1,[[6,[[5,[16]]]]]]]],[13,[[1,[[6,[[5,[16]]]]]]]],[13,[[1,[[6,[[5,[11]]]]]]]],[13,[[1,[[6,[[5,[4]]]]]]]],[13,[[1,[[6,[[5,[14]]]]]]]],[13,[[1,[[6,[[5,[8]]]]]]]],[13,[[1,[[6,[[5,[4]]]]]]]],[13,[[1,[[6,[[5,[8]]]]]]]],[13,[[1,[[6,[[5,[18]]]]]]]],[13,[[1,[[6,[[5,[4]]]]]]]],[13,[[1,[[6,[[5,[4]]]]]]]],[13,[[1,[19]]]],[13,[[1,[20]]]],[13,[[1,[21]]]],[4,[[1,[[6,[[5,[16]]]]]]]],[4,[[1,[[6,[[5,[18]]]]]]]],[4,[[1,[[6,[[5,[13]]]]]]]],[4,[[1,[[6,[[5,[4]]]]]]]],[4,[[1,[[6,[[5,[12]]]]]]]],[4,[[1,[[6,[[5,[9]]]]]]]],[4,[[1,[[6,[[5,[10]]]]]]]],[4,[[1,[[6,[[5,[11]]]]]]]],[4,[[1,[[6,[[5,[7]]]]]]]],[4,[[1,[[6,[[5,[7]]]]]]]],[4,[[1,[[6,[[5,[8]]]]]]]],[4,[[1,[[6,[[5,[16]]]]]]]],[4,[[1,[[6,[[5,[4]]]]]]]],[4,[[1,[[6,[[5,[15]]]]]]]],[4,[[1,[[6,[[5,[17]]]]]]]],[4,[[1,[[6,[[5,[11]]]]]]]],[4,[[1,[[6,[[5,[4]]]]]]]],[4,[[1,[[6,[[5,[15]]]]]]]],[4,[[1,[[6,[[5,[14]]]]]]]],[4,[[1,[[6,[[5,[14]]]]]]]],[4,[[1,[[6,[[5,[7]]]]]]]],[4,[[1,[[6,[[5,[8]]]]]]]],[4,[[1,[[6,[[5,[10]]]]]]]],[4,[[1,[[6,[[5,[16]]]]]]]],[4,[[1,[[6,[[5,[10]]]]]]]],[4,[[1,[[6,[[5,[4]]]]]]]],[4,[[1,[[6,[[5,[13]]]]]]]],[4,[[1,[[6,[[5,[14]]]]]]]],[4,[[1,[[6,[[5,[14]]]]]]]],[4,[[1,[[6,[[5,[9]]]]]]]],[4,[[1,[[6,[[5,[13]]]]]]]],[4,[[1,[[6,[[5,[8]]]]]]]],[4,[[1,[[6,[[5,[12]]]]]]]],[4,[[1,[[6,[[5,[14]]]]]]]],[4,[[1,[[6,[[5,[9]]]]]]]],[4,[[1,[[6,[[5,[17]]]]]]]],[4,[[1,[[6,[[5,[11]]]]]]]],[4,[[1,[[6,[[5,[18]]]]]]]],[4,[[1,[[6,[[5,[9]]]]]]]],[4,[[1,[[6,[[5,[8]]]]]]]],[4,[[1,[[6,[[5,[3]]]]]]]],[4,[[1,[[6,[[5,[18]]]]]]]],[4,[[1,[[6,[[5,[3]]]]]]]],[4,[[1,[[6,[[5,[3]]]]]]]],[4,[[1,[[6,[[5,[15]]]]]]]],[4,[[1,[[6,[[5,[9]]]]]]]],[4,[[1,[[6,[[5,[15]]]]]]]],[4,[[1,[[6,[[5,[15]]]]]]]],[4,[[1,[[6,[[5,[4]]]]]]]],[4,[[1,[[6,[[5,[12]]]]]]]],[4,[[1,[[6,[[5,[7]]]]]]]],[4,[[1,[[6,[[5,[3]]]]]]]],[4,[[1,[[6,[[5,[17]]]]]]]],[4,[[1,[19]]]],[4,[[1,[20]]]],[4,[[1,[21]]]],[3,[[1,[[6,[[5,[11]]]]]]]],[3,[[1,[[6,[[5,[13]]]]]]]],[3,[[1,[[6,[[5,[4]]]]]]]],[3,[[1,[[6,[[5,[17]]]]]]]],[3,[[1,[[6,[[5,[4]]]]]]]],[3,[[1,[[6,[[5,[3]]]]]]]],[3,[[1,[[6,[[5,[15]]]]]]]],[3,[[1,[[6,[[5,[3]]]]]]]],[3,[[1,[[6,[[5,[8]]]]]]]],[3,[[1,[[6,[[5,[15]]]]]]]],[3,[[1,[[6,[[5,[3]]]]]]]],[3,[[1,[[6,[[5,[17]]]]]]]],[3,[[1,[[6,[[5,[9]]]]]]]],[3,[[1,[[6,[[5,[11]]]]]]]],[3,[[1,[[6,[[5,[14]]]]]]]],[3,[[1,[[6,[[5,[9]]]]]]]],[3,[[1,[[6,[[5,[12]]]]]]]],[3,[[1,[[6,[[5,[9]]]]]]]],[3,[[1,[[6,[[5,[14]]]]]]]],[3,[[1,[[6,[[5,[8]]]]]]]],[3,[[1,[[6,[[5,[12]]]]]]]],[3,[[1,[[6,[[5,[4]]]]]]]],[3,[[1,[[6,[[5,[7]]]]]]]],[3,[[1,[[6,[[5,[14]]]]]]]],[3,[[1,[[6,[[5,[9]]]]]]]],[3,[[1,[[6,[[5,[16]]]]]]]],[3,[[1,[[6,[[5,[13]]]]]]]],[3,[[1,[[6,[[5,[15]]]]]]]],[3,[[1,[[6,[[5,[18]]]]]]]],[3,[[1,[[6,[[5,[18]]]]]]]],[3,[[1,[[6,[[5,[16]]]]]]]],[3,[[1,[[6,[[5,[10]]]]]]]],[3,[[1,[[6,[[5,[14]]]]]]]],[3,[[1,[[6,[[5,[14]]]]]]]],[3,[[1,[[6,[[5,[7]]]]]]]],[3,[[1,[[6,[[5,[15]]]]]]]],[3,[[1,[[6,[[5,[4]]]]]]]],[3,[[1,[[6,[[5,[3]]]]]]]],[3,[[1,[[6,[[5,[10]]]]]]]],[3,[[1,[[6,[[5,[7]]]]]]]],[3,[[1,[[6,[[5,[8]]]]]]]],[3,[[1,[[6,[[5,[8]]]]]]]],[3,[[1,[[6,[[5,[4]]]]]]]],[3,[[1,[[6,[[5,[15]]]]]]]],[3,[[1,[[6,[[5,[16]]]]]]]],[3,[[1,[[6,[[5,[7]]]]]]]],[3,[[1,[[6,[[5,[18]]]]]]]],[3,[[1,[[6,[[5,[11]]]]]]]],[3,[[1,[[6,[[5,[10]]]]]]]],[3,[[1,[[6,[[5,[9]]]]]]]],[3,[[1,[[6,[[5,[12]]]]]]]],[3,[[1,[[6,[[5,[17]]]]]]]],[3,[[1,[[6,[[5,[13]]]]]]]],[3,[[1,[19]]]],[3,[[1,[20]]]],[3,[[1,[21]]]],[11,[[1,[[6,[[5,[3]]]]]]]],[11,[[1,[[6,[[5,[15]]]]]]]],[11,[[1,[[6,[[5,[10]]]]]]]],[11,[[1,[[6,[[5,[15]]]]]]]],[11,[[1,[[6,[[5,[16]]]]]]]],[11,[[1,[[6,[[5,[9]]]]]]]],[11,[[1,[[6,[[5,[10]]]]]]]],[11,[[1,[[6,[[5,[9]]]]]]]],[11,[[1,[[6,[[5,[3]]]]]]]],[11,[[1,[[6,[[5,[18]]]]]]]],[11,[[1,[[6,[[5,[14]]]]]]]],[11,[[1,[[6,[[5,[4]]]]]]]],[11,[[1,[[6,[[5,[15]]]]]]]],[11,[[1,[[6,[[5,[18]]]]]]]],[11,[[1,[[6,[[5,[4]]]]]]]],[11,[[1,[[6,[[5,[8]]]]]]]],[11,[[1,[[6,[[5,[13]]]]]]]],[11,[[1,[[6,[[5,[9]]]]]]]],[11,[[1,[[6,[[5,[12]]]]]]]],[11,[[1,[[6,[[5,[14]]]]]]]],[11,[[1,[[6,[[5,[3]]]]]]]],[11,[[1,[[6,[[5,[13]]]]]]]],[11,[[1,[[6,[[5,[8]]]]]]]],[11,[[1,[[6,[[5,[4]]]]]]]],[11,[[1,[[6,[[5,[17]]]]]]]],[11,[[1,[[6,[[5,[7]]]]]]]],[11,[[1,[[6,[[5,[11]]]]]]]],[11,[[1,[[6,[[5,[4]]]]]]]],[11,[[1,[[6,[[5,[7]]]]]]]],[11,[[1,[[6,[[5,[17]]]]]]]],[11,[[1,[[6,[[5,[7]]]]]]]],[11,[[1,[[6,[[5,[14]]]]]]]],[11,[[1,[[6,[[5,[3]]]]]]]],[11,[[1,[[6,[[5,[12]]]]]]]],[11,[[1,[[6,[[5,[15]]]]]]]],[11,[[1,[[6,[[5,[16]]]]]]]],[11,[[1,[[6,[[5,[9]]]]]]]],[11,[[1,[[6,[[5,[8]]]]]]]],[11,[[1,[[6,[[5,[13]]]]]]]],[11,[[1,[[6,[[5,[10]]]]]]]],[11,[[1,[[6,[[5,[8]]]]]]]],[11,[[1,[[6,[[5,[9]]]]]]]],[11,[[1,[[6,[[5,[15]]]]]]]],[11,[[1,[[6,[[5,[18]]]]]]]],[11,[[1,[[6,[[5,[7]]]]]]]],[11,[[1,[[6,[[5,[14]]]]]]]],[11,[[1,[[6,[[5,[12]]]]]]]],[11,[[1,[[6,[[5,[4]]]]]]]],[11,[[1,[[6,[[5,[16]]]]]]]],[11,[[1,[[6,[[5,[11]]]]]]]],[11,[[1,[[6,[[5,[14]]]]]]]],[11,[[1,[[6,[[5,[17]]]]]]]],[11,[[1,[[6,[[5,[11]]]]]]]],[11,[[1,[19]]]],[11,[[1,[20]]]],[11,[[1,[21]]]],[14,[[1,[[6,[[5,[11]]]]]]]],[14,[[1,[[6,[[5,[15]]]]]]]],[14,[[1,[[6,[[5,[4]]]]]]]],[14,[[1,[[6,[[5,[12]]]]]]]],[14,[[1,[[6,[[5,[7]]]]]]]],[14,[[1,[[6,[[5,[16]]]]]]]],[14,[[1,[[6,[[5,[14]]]]]]]],[14,[[1,[[6,[[5,[4]]]]]]]],[14,[[1,[[6,[[5,[8]]]]]]]],[14,[[1,[[6,[[5,[17]]]]]]]],[14,[[1,[[6,[[5,[18]]]]]]]],[14,[[1,[[6,[[5,[16]]]]]]]],[14,[[1,[[6,[[5,[16]]]]]]]],[14,[[1,[[6,[[5,[10]]]]]]]],[14,[[1,[[6,[[5,[3]]]]]]]],[14,[[1,[[6,[[5,[14]]]]]]]],[14,[[1,[[6,[[5,[3]]]]]]]],[14,[[1,[[6,[[5,[11]]]]]]]],[14,[[1,[[6,[[5,[8]]]]]]]],[14,[[1,[[6,[[5,[7]]]]]]]],[14,[[1,[[6,[[5,[12]]]]]]]],[14,[[1,[[6,[[5,[15]]]]]]]],[14,[[1,[[6,[[5,[7]]]]]]]],[14,[[1,[[6,[[5,[9]]]]]]]],[14,[[1,[[6,[[5,[14]]]]]]]],[14,[[1,[[6,[[5,[13]]]]]]]],[14,[[1,[[6,[[5,[13]]]]]]]],[14,[[1,[[6,[[5,[9]]]]]]]],[14,[[1,[[6,[[5,[15]]]]]]]],[14,[[1,[[6,[[5,[14]]]]]]]],[14,[[1,[[6,[[5,[11]]]]]]]],[14,[[1,[[6,[[5,[10]]]]]]]],[14,[[1,[[6,[[5,[12]]]]]]]],[14,[[1,[[6,[[5,[17]]]]]]]],[14,[[1,[[6,[[5,[7]]]]]]]],[14,[[1,[[6,[[5,[17]]]]]]]],[14,[[1,[[6,[[5,[9]]]]]]]],[14,[[1,[[6,[[5,[18]]]]]]]],[14,[[1,[[6,[[5,[4]]]]]]]],[14,[[1,[[6,[[5,[13]]]]]]]],[14,[[1,[[6,[[5,[9]]]]]]]],[14,[[1,[[6,[[5,[18]]]]]]]],[14,[[1,[[6,[[5,[10]]]]]]]],[14,[[1,[[6,[[5,[8]]]]]]]],[14,[[1,[[6,[[5,[8]]]]]]]],[14,[[1,[[6,[[5,[4]]]]]]]],[14,[[1,[[6,[[5,[4]]]]]]]],[14,[[1,[[6,[[5,[3]]]]]]]],[14,[[1,[[6,[[5,[14]]]]]]]],[14,[[1,[[6,[[5,[3]]]]]]]],[14,[[1,[[6,[[5,[15]]]]]]]],[14,[[1,[[6,[[5,[15]]]]]]]],[14,[[1,[[6,[[5,[9]]]]]]]],[14,[[1,[19]]]],[14,[[1,[20]]]],[14,[[1,[21]]]],[10,[[1,[[6,[[5,[4]]]]]]]],[10,[[1,[[6,[[5,[9]]]]]]]],[10,[[1,[[6,[[5,[10]]]]]]]],[10,[[1,[[6,[[5,[9]]]]]]]],[10,[[1,[[6,[[5,[7]]]]]]]],[10,[[1,[[6,[[5,[10]]]]]]]],[10,[[1,[[6,[[5,[15]]]]]]]],[10,[[1,[[6,[[5,[14]]]]]]]],[10,[[1,[[6,[[5,[3]]]]]]]],[10,[[1,[[6,[[5,[17]]]]]]]],[10,[[1,[[6,[[5,[4]]]]]]]],[10,[[1,[[6,[[5,[18]]]]]]]],[10,[[1,[[6,[[5,[8]]]]]]]],[10,[[1,[[6,[[5,[3]]]]]]]],[10,[[1,[[6,[[5,[9]]]]]]]],[10,[[1,[[6,[[5,[9]]]]]]]],[10,[[1,[[6,[[5,[4]]]]]]]],[10,[[1,[[6,[[5,[4]]]]]]]],[10,[[1,[[6,[[5,[14]]]]]]]],[10,[[1,[[6,[[5,[10]]]]]]]],[10,[[1,[[6,[[5,[13]]]]]]]],[10,[[1,[[6,[[5,[17]]]]]]]],[10,[[1,[[6,[[5,[18]]]]]]]],[10,[[1,[[6,[[5,[8]]]]]]]],[10,[[1,[[6,[[5,[3]]]]]]]],[10,[[1,[[6,[[5,[14]]]]]]]],[10,[[1,[[6,[[5,[9]]]]]]]],[10,[[1,[[6,[[5,[16]]]]]]]],[10,[[1,[[6,[[5,[13]]]]]]]],[10,[[1,[[6,[[5,[12]]]]]]]],[10,[[1,[[6,[[5,[8]]]]]]]],[10,[[1,[[6,[[5,[4]]]]]]]],[10,[[1,[[6,[[5,[18]]]]]]]],[10,[[1,[[6,[[5,[12]]]]]]]],[10,[[1,[[6,[[5,[15]]]]]]]],[10,[[1,[[6,[[5,[8]]]]]]]],[10,[[1,[[6,[[5,[16]]]]]]]],[10,[[1,[[6,[[5,[7]]]]]]]],[10,[[1,[[6,[[5,[17]]]]]]]],[10,[[1,[[6,[[5,[14]]]]]]]],[10,[[1,[[6,[[5,[12]]]]]]]],[10,[[1,[[6,[[5,[11]]]]]]]],[10,[[1,[[6,[[5,[11]]]]]]]],[10,[[1,[[6,[[5,[16]]]]]]]],[10,[[1,[[6,[[5,[11]]]]]]]],[10,[[1,[[6,[[5,[3]]]]]]]],[10,[[1,[[6,[[5,[7]]]]]]]],[10,[[1,[[6,[[5,[15]]]]]]]],[10,[[1,[[6,[[5,[15]]]]]]]],[10,[[1,[[6,[[5,[13]]]]]]]],[10,[[1,[[6,[[5,[15]]]]]]]],[10,[[1,[[6,[[5,[7]]]]]]]],[10,[[1,[[6,[[5,[14]]]]]]]],[10,[[1,[19]]]],[10,[[1,[20]]]],[10,[[1,[21]]]],[[]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],19],[[],20],[[],21],[[31,7],[[32,[[6,[[5,[15]]]]]]]],[[31,7],[[32,[[6,[[5,[15]]]]]]]],[[31,7],[[32,[[6,[[5,[8]]]]]]]],[[31,7],[[32,[[6,[[5,[13]]]]]]]],[[31,7],[[32,[[6,[[5,[18]]]]]]]],[[31,7],[[32,[[6,[[5,[10]]]]]]]],[[31,7],[[32,[[6,[[5,[7]]]]]]]],[[31,7],[[32,[[6,[[5,[15]]]]]]]],[[31,7],[[32,[[6,[[5,[3]]]]]]]],[[31,7],[[32,[[6,[[5,[14]]]]]]]],[[31,7],[[32,[[6,[[5,[13]]]]]]]],[[31,7],[[32,[[6,[[5,[7]]]]]]]],[[31,7],[[32,[[6,[[5,[12]]]]]]]],[[31,7],[[32,[[6,[[5,[9]]]]]]]],[[31,7],[[32,[[6,[[5,[4]]]]]]]],[[31,7],[[32,[[6,[[5,[11]]]]]]]],[[31,7],[[32,[[6,[[5,[14]]]]]]]],[[31,7],[[32,[[6,[[5,[8]]]]]]]],[[31,7],[[32,[[6,[[5,[18]]]]]]]],[[31,7],[[32,[[6,[[5,[12]]]]]]]],[[31,7],[[32,[[6,[[5,[3]]]]]]]],[[31,7],[[32,[[6,[[5,[14]]]]]]]],[[31,7],[[32,[[6,[[5,[9]]]]]]]],[[31,7],[[32,[[6,[[5,[4]]]]]]]],[[31,7],[[32,[[6,[[5,[15]]]]]]]],[[31,7],[[32,[[6,[[5,[9]]]]]]]],[[31,7],[[32,[[6,[[5,[18]]]]]]]],[[31,7],[[32,[[6,[[5,[7]]]]]]]],[[31,7],[[32,[[6,[[5,[8]]]]]]]],[[31,7],[[32,[[6,[[5,[16]]]]]]]],[[31,7],[[32,[[6,[[5,[7]]]]]]]],[[31,7],[[32,[[6,[[5,[8]]]]]]]],[[31,7],[[32,[[6,[[5,[4]]]]]]]],[[31,7],[[32,[[6,[[5,[10]]]]]]]],[[31,7],[[32,[[6,[[5,[17]]]]]]]],[[31,7],[[32,[[6,[[5,[9]]]]]]]],[[31,7],[[32,[[6,[[5,[12]]]]]]]],[[31,7],[[32,[[6,[[5,[11]]]]]]]],[[31,7],[[32,[[6,[[5,[13]]]]]]]],[[31,7],[[32,[[6,[[5,[16]]]]]]]],[[31,7],[[32,[[6,[[5,[11]]]]]]]],[[31,7],[[32,[[6,[[5,[10]]]]]]]],[[31,7],[[32,[[6,[[5,[16]]]]]]]],[[31,7],[[32,[[6,[[5,[15]]]]]]]],[[31,7],[[32,[[6,[[5,[17]]]]]]]],[[31,7],[[32,[[6,[[5,[17]]]]]]]],[[31,7],[[32,[[6,[[5,[4]]]]]]]],[[31,7],[[32,[[6,[[5,[14]]]]]]]],[[31,7],[[32,[[6,[[5,[9]]]]]]]],[[31,7],[[32,[[6,[[5,[3]]]]]]]],[[31,7],[[32,[[6,[[5,[4]]]]]]]],[[31,7],[[32,[[6,[[5,[3]]]]]]]],[[31,7],[[32,[[6,[[5,[14]]]]]]]],[[31,7],[[32,[19]]]],[[31,7],[[32,[20]]]],[[31,7],[[32,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[[5,[17]]]]],[[1,[[6,[[5,[17]]]]]]]],[[[6,[[5,[10]]]]],[[1,[[6,[[5,[10]]]]]]]],[[[6,[[5,[4]]]]],[[1,[[6,[[5,[4]]]]]]]],[[[6,[[5,[9]]]]],[[1,[[6,[[5,[9]]]]]]]],[[[6,[[5,[14]]]]],[[1,[[6,[[5,[14]]]]]]]],[[[6,[[5,[11]]]]],[[1,[[6,[[5,[11]]]]]]]],[[[6,[[5,[3]]]]],[[1,[[6,[[5,[3]]]]]]]],[[[6,[[5,[8]]]]],[[1,[[6,[[5,[8]]]]]]]],[[[6,[[5,[3]]]]],[[1,[[6,[[5,[3]]]]]]]],[[[6,[[5,[9]]]]],[[1,[[6,[[5,[9]]]]]]]],[[[6,[[5,[11]]]]],[[1,[[6,[[5,[11]]]]]]]],[[[6,[[5,[7]]]]],[[1,[[6,[[5,[7]]]]]]]],[[[6,[[5,[18]]]]],[[1,[[6,[[5,[18]]]]]]]],[[[6,[[5,[9]]]]],[[1,[[6,[[5,[9]]]]]]]],[[[6,[[5,[7]]]]],[[1,[[6,[[5,[7]]]]]]]],[[[6,[[5,[12]]]]],[[1,[[6,[[5,[12]]]]]]]],[[[6,[[5,[8]]]]],[[1,[[6,[[5,[8]]]]]]]],[[[6,[[5,[15]]]]],[[1,[[6,[[5,[15]]]]]]]],[[[6,[[5,[14]]]]],[[1,[[6,[[5,[14]]]]]]]],[[[6,[[5,[9]]]]],[[1,[[6,[[5,[9]]]]]]]],[[[6,[[5,[16]]]]],[[1,[[6,[[5,[16]]]]]]]],[[[6,[[5,[8]]]]],[[1,[[6,[[5,[8]]]]]]]],[[[6,[[5,[4]]]]],[[1,[[6,[[5,[4]]]]]]]],[[[6,[[5,[14]]]]],[[1,[[6,[[5,[14]]]]]]]],[[[6,[[5,[13]]]]],[[1,[[6,[[5,[13]]]]]]]],[[[6,[[5,[15]]]]],[[1,[[6,[[5,[15]]]]]]]],[[[6,[[5,[15]]]]],[[1,[[6,[[5,[15]]]]]]]],[[[6,[[5,[3]]]]],[[1,[[6,[[5,[3]]]]]]]],[[[6,[[5,[4]]]]],[[1,[[6,[[5,[4]]]]]]]],[[[6,[[5,[15]]]]],[[1,[[6,[[5,[15]]]]]]]],[[[6,[[5,[16]]]]],[[1,[[6,[[5,[16]]]]]]]],[[[6,[[5,[14]]]]],[[1,[[6,[[5,[14]]]]]]]],[[[6,[[5,[12]]]]],[[1,[[6,[[5,[12]]]]]]]],[[[6,[[5,[11]]]]],[[1,[[6,[[5,[11]]]]]]]],[[[6,[[5,[13]]]]],[[1,[[6,[[5,[13]]]]]]]],[[[6,[[5,[8]]]]],[[1,[[6,[[5,[8]]]]]]]],[[[6,[[5,[14]]]]],[[1,[[6,[[5,[14]]]]]]]],[[[6,[[5,[10]]]]],[[1,[[6,[[5,[10]]]]]]]],[[[6,[[5,[10]]]]],[[1,[[6,[[5,[10]]]]]]]],[[[6,[[5,[18]]]]],[[1,[[6,[[5,[18]]]]]]]],[[[6,[[5,[7]]]]],[[1,[[6,[[5,[7]]]]]]]],[[[6,[[5,[3]]]]],[[1,[[6,[[5,[3]]]]]]]],[[[6,[[5,[18]]]]],[[1,[[6,[[5,[18]]]]]]]],[[[6,[[5,[15]]]]],[[1,[[6,[[5,[15]]]]]]]],[[[6,[[5,[17]]]]],[[1,[[6,[[5,[17]]]]]]]],[[[6,[[5,[13]]]]],[[1,[[6,[[5,[13]]]]]]]],[[[6,[[5,[9]]]]],[[1,[[6,[[5,[9]]]]]]]],[[[6,[[5,[16]]]]],[[1,[[6,[[5,[16]]]]]]]],[[[6,[[5,[4]]]]],[[1,[[6,[[5,[4]]]]]]]],[[[6,[[5,[17]]]]],[[1,[[6,[[5,[17]]]]]]]],[[[6,[[5,[4]]]]],[[1,[[6,[[5,[4]]]]]]]],[[[6,[[5,[12]]]]],[[1,[[6,[[5,[12]]]]]]]],[[[6,[[5,[7]]]]],[[1,[[6,[[5,[7]]]]]]]],[19,[[1,[19]]]],[22,[[1,[22]]]],[20,[[1,[20]]]],[23,[[1,[23]]]],[21,[[1,[21]]]],[24,[[1,[24]]]],[[[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[19,19],[22,22],[20,20],[23,23],[21,21],[24,24],[9,[[1,[[6,[[5,[16]]]]]]]],[9,[[1,[[6,[[5,[18]]]]]]]],[9,[[1,[[6,[[5,[11]]]]]]]],[9,[[1,[[6,[[5,[3]]]]]]]],[9,[[1,[[6,[[5,[9]]]]]]]],[9,[[1,[[6,[[5,[9]]]]]]]],[9,[[1,[[6,[[5,[15]]]]]]]],[9,[[1,[[6,[[5,[14]]]]]]]],[9,[[1,[[6,[[5,[10]]]]]]]],[9,[[1,[[6,[[5,[11]]]]]]]],[9,[[1,[[6,[[5,[14]]]]]]]],[9,[[1,[[6,[[5,[8]]]]]]]],[9,[[1,[[6,[[5,[15]]]]]]]],[9,[[1,[[6,[[5,[9]]]]]]]],[9,[[1,[[6,[[5,[17]]]]]]]],[9,[[1,[[6,[[5,[7]]]]]]]],[9,[[1,[[6,[[5,[9]]]]]]]],[9,[[1,[[6,[[5,[11]]]]]]]],[9,[[1,[[6,[[5,[14]]]]]]]],[9,[[1,[[6,[[5,[16]]]]]]]],[9,[[1,[[6,[[5,[8]]]]]]]],[9,[[1,[[6,[[5,[12]]]]]]]],[9,[[1,[[6,[[5,[4]]]]]]]],[9,[[1,[[6,[[5,[8]]]]]]]],[9,[[1,[[6,[[5,[7]]]]]]]],[9,[[1,[[6,[[5,[4]]]]]]]],[9,[[1,[[6,[[5,[18]]]]]]]],[9,[[1,[[6,[[5,[12]]]]]]]],[9,[[1,[[6,[[5,[4]]]]]]]],[9,[[1,[[6,[[5,[17]]]]]]]],[9,[[1,[[6,[[5,[4]]]]]]]],[9,[[1,[[6,[[5,[4]]]]]]]],[9,[[1,[[6,[[5,[10]]]]]]]],[9,[[1,[[6,[[5,[7]]]]]]]],[9,[[1,[[6,[[5,[9]]]]]]]],[9,[[1,[[6,[[5,[7]]]]]]]],[9,[[1,[[6,[[5,[3]]]]]]]],[9,[[1,[[6,[[5,[16]]]]]]]],[9,[[1,[[6,[[5,[15]]]]]]]],[9,[[1,[[6,[[5,[18]]]]]]]],[9,[[1,[[6,[[5,[13]]]]]]]],[9,[[1,[[6,[[5,[17]]]]]]]],[9,[[1,[[6,[[5,[13]]]]]]]],[9,[[1,[[6,[[5,[15]]]]]]]],[9,[[1,[[6,[[5,[8]]]]]]]],[9,[[1,[[6,[[5,[15]]]]]]]],[9,[[1,[[6,[[5,[3]]]]]]]],[9,[[1,[[6,[[5,[13]]]]]]]],[9,[[1,[[6,[[5,[14]]]]]]]],[9,[[1,[[6,[[5,[10]]]]]]]],[9,[[1,[[6,[[5,[3]]]]]]]],[9,[[1,[[6,[[5,[12]]]]]]]],[9,[[1,[[6,[[5,[14]]]]]]]],[9,[[1,[19]]]],[9,[[1,[20]]]],[9,[[1,[21]]]],[7,[[1,[[6,[[5,[3]]]]]]]],[7,[[1,[[6,[[5,[9]]]]]]]],[7,[[1,[[6,[[5,[15]]]]]]]],[7,[[1,[[6,[[5,[11]]]]]]]],[7,[[1,[[6,[[5,[10]]]]]]]],[7,[[1,[[6,[[5,[9]]]]]]]],[7,[[1,[[6,[[5,[12]]]]]]]],[7,[[1,[[6,[[5,[15]]]]]]]],[7,[[1,[[6,[[5,[3]]]]]]]],[7,[[1,[[6,[[5,[9]]]]]]]],[7,[[1,[[6,[[5,[11]]]]]]]],[7,[[1,[[6,[[5,[14]]]]]]]],[7,[[1,[[6,[[5,[10]]]]]]]],[7,[[1,[[6,[[5,[7]]]]]]]],[7,[[1,[[6,[[5,[15]]]]]]]],[7,[[1,[[6,[[5,[9]]]]]]]],[7,[[1,[[6,[[5,[17]]]]]]]],[7,[[1,[[6,[[5,[16]]]]]]]],[7,[[1,[[6,[[5,[8]]]]]]]],[7,[[1,[[6,[[5,[12]]]]]]]],[7,[[1,[[6,[[5,[14]]]]]]]],[7,[[1,[[6,[[5,[8]]]]]]]],[7,[[1,[[6,[[5,[3]]]]]]]],[7,[[1,[[6,[[5,[13]]]]]]]],[7,[[1,[[6,[[5,[14]]]]]]]],[7,[[1,[[6,[[5,[13]]]]]]]],[7,[[1,[[6,[[5,[11]]]]]]]],[7,[[1,[[6,[[5,[13]]]]]]]],[7,[[1,[[6,[[5,[16]]]]]]]],[7,[[1,[[6,[[5,[17]]]]]]]],[7,[[1,[[6,[[5,[12]]]]]]]],[7,[[1,[[6,[[5,[14]]]]]]]],[7,[[1,[[6,[[5,[15]]]]]]]],[7,[[1,[[6,[[5,[18]]]]]]]],[7,[[1,[[6,[[5,[4]]]]]]]],[7,[[1,[[6,[[5,[8]]]]]]]],[7,[[1,[[6,[[5,[8]]]]]]]],[7,[[1,[[6,[[5,[16]]]]]]]],[7,[[1,[[6,[[5,[3]]]]]]]],[7,[[1,[[6,[[5,[15]]]]]]]],[7,[[1,[[6,[[5,[7]]]]]]]],[7,[[1,[[6,[[5,[14]]]]]]]],[7,[[1,[[6,[[5,[7]]]]]]]],[7,[[1,[[6,[[5,[4]]]]]]]],[7,[[1,[[6,[[5,[4]]]]]]]],[7,[[1,[[6,[[5,[18]]]]]]]],[7,[[1,[[6,[[5,[18]]]]]]]],[7,[[1,[[6,[[5,[7]]]]]]]],[7,[[1,[[6,[[5,[4]]]]]]]],[7,[[1,[[6,[[5,[17]]]]]]]],[7,[[1,[[6,[[5,[10]]]]]]]],[7,[[1,[[6,[[5,[4]]]]]]]],[7,[[1,[[6,[[5,[9]]]]]]]],[7,[[1,[19]]]],[7,[[1,[20]]]],[7,[[1,[21]]]],[17,[[1,[[6,[[5,[12]]]]]]]],[17,[[1,[[6,[[5,[10]]]]]]]],[17,[[1,[[6,[[5,[12]]]]]]]],[17,[[1,[[6,[[5,[4]]]]]]]],[17,[[1,[[6,[[5,[3]]]]]]]],[17,[[1,[[6,[[5,[10]]]]]]]],[17,[[1,[[6,[[5,[8]]]]]]]],[17,[[1,[[6,[[5,[13]]]]]]]],[17,[[1,[[6,[[5,[4]]]]]]]],[17,[[1,[[6,[[5,[13]]]]]]]],[17,[[1,[[6,[[5,[7]]]]]]]],[17,[[1,[[6,[[5,[17]]]]]]]],[17,[[1,[[6,[[5,[7]]]]]]]],[17,[[1,[[6,[[5,[3]]]]]]]],[17,[[1,[[6,[[5,[4]]]]]]]],[17,[[1,[[6,[[5,[18]]]]]]]],[17,[[1,[[6,[[5,[11]]]]]]]],[17,[[1,[[6,[[5,[15]]]]]]]],[17,[[1,[[6,[[5,[7]]]]]]]],[17,[[1,[[6,[[5,[7]]]]]]]],[17,[[1,[[6,[[5,[14]]]]]]]],[17,[[1,[[6,[[5,[16]]]]]]]],[17,[[1,[[6,[[5,[8]]]]]]]],[17,[[1,[[6,[[5,[9]]]]]]]],[17,[[1,[[6,[[5,[17]]]]]]]],[17,[[1,[[6,[[5,[16]]]]]]]],[17,[[1,[[6,[[5,[11]]]]]]]],[17,[[1,[[6,[[5,[3]]]]]]]],[17,[[1,[[6,[[5,[9]]]]]]]],[17,[[1,[[6,[[5,[12]]]]]]]],[17,[[1,[[6,[[5,[13]]]]]]]],[17,[[1,[[6,[[5,[8]]]]]]]],[17,[[1,[[6,[[5,[14]]]]]]]],[17,[[1,[[6,[[5,[17]]]]]]]],[17,[[1,[[6,[[5,[9]]]]]]]],[17,[[1,[[6,[[5,[4]]]]]]]],[17,[[1,[[6,[[5,[11]]]]]]]],[17,[[1,[[6,[[5,[14]]]]]]]],[17,[[1,[[6,[[5,[16]]]]]]]],[17,[[1,[[6,[[5,[15]]]]]]]],[17,[[1,[[6,[[5,[18]]]]]]]],[17,[[1,[[6,[[5,[8]]]]]]]],[17,[[1,[[6,[[5,[15]]]]]]]],[17,[[1,[[6,[[5,[4]]]]]]]],[17,[[1,[[6,[[5,[14]]]]]]]],[17,[[1,[[6,[[5,[9]]]]]]]],[17,[[1,[[6,[[5,[15]]]]]]]],[17,[[1,[[6,[[5,[9]]]]]]]],[17,[[1,[[6,[[5,[18]]]]]]]],[17,[[1,[[6,[[5,[14]]]]]]]],[17,[[1,[[6,[[5,[15]]]]]]]],[17,[[1,[[6,[[5,[10]]]]]]]],[17,[[1,[[6,[[5,[3]]]]]]]],[17,[[1,[19]]]],[17,[[1,[20]]]],[17,[[1,[21]]]],[15,[[1,[[6,[[5,[10]]]]]]]],[15,[[1,[[6,[[5,[16]]]]]]]],[15,[[1,[[6,[[5,[14]]]]]]]],[15,[[1,[[6,[[5,[10]]]]]]]],[15,[[1,[[6,[[5,[11]]]]]]]],[15,[[1,[[6,[[5,[9]]]]]]]],[15,[[1,[[6,[[5,[8]]]]]]]],[15,[[1,[[6,[[5,[4]]]]]]]],[15,[[1,[[6,[[5,[17]]]]]]]],[15,[[1,[[6,[[5,[18]]]]]]]],[15,[[1,[[6,[[5,[13]]]]]]]],[15,[[1,[[6,[[5,[18]]]]]]]],[15,[[1,[[6,[[5,[11]]]]]]]],[15,[[1,[[6,[[5,[7]]]]]]]],[15,[[1,[[6,[[5,[12]]]]]]]],[15,[[1,[[6,[[5,[17]]]]]]]],[15,[[1,[[6,[[5,[14]]]]]]]],[15,[[1,[[6,[[5,[12]]]]]]]],[15,[[1,[[6,[[5,[9]]]]]]]],[15,[[1,[[6,[[5,[4]]]]]]]],[15,[[1,[[6,[[5,[9]]]]]]]],[15,[[1,[[6,[[5,[14]]]]]]]],[15,[[1,[[6,[[5,[9]]]]]]]],[15,[[1,[[6,[[5,[16]]]]]]]],[15,[[1,[[6,[[5,[4]]]]]]]],[15,[[1,[[6,[[5,[13]]]]]]]],[15,[[1,[[6,[[5,[14]]]]]]]],[15,[[1,[[6,[[5,[7]]]]]]]],[15,[[1,[[6,[[5,[10]]]]]]]],[15,[[1,[[6,[[5,[17]]]]]]]],[15,[[1,[[6,[[5,[3]]]]]]]],[15,[[1,[[6,[[5,[7]]]]]]]],[15,[[1,[[6,[[5,[8]]]]]]]],[15,[[1,[[6,[[5,[15]]]]]]]],[15,[[1,[[6,[[5,[15]]]]]]]],[15,[[1,[[6,[[5,[12]]]]]]]],[15,[[1,[[6,[[5,[3]]]]]]]],[15,[[1,[[6,[[5,[4]]]]]]]],[15,[[1,[[6,[[5,[4]]]]]]]],[15,[[1,[[6,[[5,[18]]]]]]]],[15,[[1,[[6,[[5,[9]]]]]]]],[15,[[1,[[6,[[5,[8]]]]]]]],[15,[[1,[[6,[[5,[3]]]]]]]],[15,[[1,[[6,[[5,[14]]]]]]]],[15,[[1,[[6,[[5,[15]]]]]]]],[15,[[1,[[6,[[5,[15]]]]]]]],[15,[[1,[[6,[[5,[11]]]]]]]],[15,[[1,[[6,[[5,[7]]]]]]]],[15,[[1,[[6,[[5,[16]]]]]]]],[15,[[1,[[6,[[5,[13]]]]]]]],[15,[[1,[[6,[[5,[8]]]]]]]],[15,[[1,[[6,[[5,[15]]]]]]]],[15,[[1,[[6,[[5,[3]]]]]]]],[15,[[1,[19]]]],[15,[[1,[20]]]],[15,[[1,[21]]]],[16,[[1,[[6,[[5,[4]]]]]]]],[16,[[1,[[6,[[5,[14]]]]]]]],[16,[[1,[[6,[[5,[18]]]]]]]],[16,[[1,[[6,[[5,[4]]]]]]]],[16,[[1,[[6,[[5,[4]]]]]]]],[16,[[1,[[6,[[5,[14]]]]]]]],[16,[[1,[[6,[[5,[9]]]]]]]],[16,[[1,[[6,[[5,[7]]]]]]]],[16,[[1,[[6,[[5,[10]]]]]]]],[16,[[1,[[6,[[5,[8]]]]]]]],[16,[[1,[[6,[[5,[11]]]]]]]],[16,[[1,[[6,[[5,[11]]]]]]]],[16,[[1,[[6,[[5,[17]]]]]]]],[16,[[1,[[6,[[5,[18]]]]]]]],[16,[[1,[[6,[[5,[13]]]]]]]],[16,[[1,[[6,[[5,[10]]]]]]]],[16,[[1,[[6,[[5,[3]]]]]]]],[16,[[1,[[6,[[5,[18]]]]]]]],[16,[[1,[[6,[[5,[11]]]]]]]],[16,[[1,[[6,[[5,[7]]]]]]]],[16,[[1,[[6,[[5,[7]]]]]]]],[16,[[1,[[6,[[5,[15]]]]]]]],[16,[[1,[[6,[[5,[12]]]]]]]],[16,[[1,[[6,[[5,[17]]]]]]]],[16,[[1,[[6,[[5,[14]]]]]]]],[16,[[1,[[6,[[5,[7]]]]]]]],[16,[[1,[[6,[[5,[12]]]]]]]],[16,[[1,[[6,[[5,[4]]]]]]]],[16,[[1,[[6,[[5,[8]]]]]]]],[16,[[1,[[6,[[5,[9]]]]]]]],[16,[[1,[[6,[[5,[9]]]]]]]],[16,[[1,[[6,[[5,[15]]]]]]]],[16,[[1,[[6,[[5,[3]]]]]]]],[16,[[1,[[6,[[5,[4]]]]]]]],[16,[[1,[[6,[[5,[15]]]]]]]],[16,[[1,[[6,[[5,[12]]]]]]]],[16,[[1,[[6,[[5,[14]]]]]]]],[16,[[1,[[6,[[5,[16]]]]]]]],[16,[[1,[[6,[[5,[9]]]]]]]],[16,[[1,[[6,[[5,[13]]]]]]]],[16,[[1,[[6,[[5,[16]]]]]]]],[16,[[1,[[6,[[5,[14]]]]]]]],[16,[[1,[[6,[[5,[3]]]]]]]],[16,[[1,[[6,[[5,[13]]]]]]]],[16,[[1,[[6,[[5,[9]]]]]]]],[16,[[1,[[6,[[5,[15]]]]]]]],[16,[[1,[[6,[[5,[15]]]]]]]],[16,[[1,[[6,[[5,[16]]]]]]]],[16,[[1,[[6,[[5,[8]]]]]]]],[16,[[1,[[6,[[5,[8]]]]]]]],[16,[[1,[[6,[[5,[10]]]]]]]],[16,[[1,[[6,[[5,[17]]]]]]]],[16,[[1,[[6,[[5,[3]]]]]]]],[16,[[1,[19]]]],[16,[[1,[20]]]],[16,[[1,[21]]]],[[33,33],34],[[[6,[[5,[2]]]],33,33],34],[[[6,[[5,[2]]]],33,33],34],[[[6,[[5,[2]]]],33,33],34],[[[6,[[5,[2]]]],33,33],34],[[[6,[[5,[2]]]],33,33],34],[[[6,[[5,[2]]]],33,33],34],[[22,33,33],34],[[23,33,33],34],[[24,33,33],34],[[33,33],34],[[[6,[[5,[2]]]],33,33],34],[[[6,[[5,[2]]]],33,33],34],[[[6,[[5,[2]]]],33,33],34],[[[6,[[5,[2]]]],33,33],34],[[[6,[[5,[2]]]],33,33],34],[[[6,[[5,[2]]]],33,33],34],[[22,33,33],34],[[23,33,33],34],[[24,33,33],34],[[33,33],34],[[[6,[[5,[2]]]],33,33],34],[[[6,[[5,[2]]]],33,33],34],[[[6,[[5,[2]]]],33,33],34],[[[6,[[5,[2]]]],33,33],34],[[[6,[[5,[2]]]],33,33],34],[[[6,[[5,[2]]]],33,33],34],[[22,33,33],34],[[23,33,33],34],[[24,33,33],34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[[6,[[5,[14]]]]],2],[[[6,[[5,[12]]]]],2],[[[6,[[5,[18]]]]],2],[[[6,[[5,[9]]]]],2],[[[6,[[5,[9]]]]],2],[[[6,[[5,[16]]]]],2],[[[6,[[5,[8]]]]],2],[[[6,[[5,[11]]]]],2],[[[6,[[5,[3]]]]],2],[[[6,[[5,[4]]]]],2],[[[6,[[5,[15]]]]],2],[[[6,[[5,[3]]]]],2],[[[6,[[5,[15]]]]],2],[[[6,[[5,[3]]]]],2],[[[6,[[5,[8]]]]],2],[[[6,[[5,[13]]]]],2],[[[6,[[5,[14]]]]],2],[[[6,[[5,[9]]]]],2],[[[6,[[5,[14]]]]],2],[[[6,[[5,[10]]]]],2],[[[6,[[5,[18]]]]],2],[[[6,[[5,[17]]]]],2],[[[6,[[5,[4]]]]],2],[[[6,[[5,[12]]]]],2],[[[6,[[5,[10]]]]],2],[[[6,[[5,[17]]]]],2],[[[6,[[5,[9]]]]],2],[[[6,[[5,[11]]]]],2],[[[6,[[5,[3]]]]],2],[[[6,[[5,[7]]]]],2],[[[6,[[5,[12]]]]],2],[[[6,[[5,[17]]]]],2],[[[6,[[5,[13]]]]],2],[[[6,[[5,[7]]]]],2],[[[6,[[5,[8]]]]],2],[[[6,[[5,[16]]]]],2],[[[6,[[5,[16]]]]],2],[[[6,[[5,[15]]]]],2],[[[6,[[5,[18]]]]],2],[[[6,[[5,[15]]]]],2],[[[6,[[5,[14]]]]],2],[[],2],[[[6,[[5,[7]]]]],2],[[[6,[[5,[7]]]]],2],[[[6,[[5,[4]]]]],2],[[[6,[[5,[4]]]]],2],[[[6,[[5,[15]]]]],2],[[[6,[[5,[9]]]]],2],[[[6,[[5,[8]]]]],2],[[[6,[[5,[14]]]]],2],[[[6,[[5,[4]]]]],2],[[[6,[[5,[13]]]]],2],[[[6,[[5,[10]]]]],2],[[[6,[[5,[11]]]]],2],[[],2],[19,2],[[],2],[22,2],[[],2],[[],2],[20,2],[23,2],[[],2],[21,2],[[],2],[[],2],[24,2],[[]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[19],[20],[21],[[]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]]],[19],[20],[21],[[[6,[[5,[12]]]]],2],[[[6,[[5,[17]]]]],2],[[[6,[[5,[3]]]]],2],[[[6,[[5,[12]]]]],2],[[[6,[[5,[14]]]]],2],[[[6,[[5,[8]]]]],2],[[[6,[[5,[10]]]]],2],[[[6,[[5,[9]]]]],2],[[[6,[[5,[3]]]]],2],[[[6,[[5,[15]]]]],2],[[[6,[[5,[8]]]]],2],[[[6,[[5,[12]]]]],2],[[[6,[[5,[9]]]]],2],[[[6,[[5,[13]]]]],2],[[[6,[[5,[3]]]]],2],[[[6,[[5,[9]]]]],2],[[[6,[[5,[11]]]]],2],[[[6,[[5,[16]]]]],2],[[[6,[[5,[14]]]]],2],[[[6,[[5,[11]]]]],2],[[[6,[[5,[18]]]]],2],[[[6,[[5,[15]]]]],2],[[[6,[[5,[18]]]]],2],[[[6,[[5,[13]]]]],2],[[[6,[[5,[8]]]]],2],[[[6,[[5,[15]]]]],2],[[[6,[[5,[3]]]]],2],[[[6,[[5,[13]]]]],2],[[[6,[[5,[4]]]]],2],[[[6,[[5,[18]]]]],2],[[[6,[[5,[7]]]]],2],[[[6,[[5,[9]]]]],2],[[[6,[[5,[10]]]]],2],[[[6,[[5,[16]]]]],2],[[[6,[[5,[7]]]]],2],[[[6,[[5,[4]]]]],2],[[[6,[[5,[4]]]]],2],[[[6,[[5,[14]]]]],2],[[[6,[[5,[15]]]]],2],[[[6,[[5,[4]]]]],2],[[[6,[[5,[11]]]]],2],[[[6,[[5,[7]]]]],2],[[[6,[[5,[17]]]]],2],[[[6,[[5,[14]]]]],2],[[[6,[[5,[7]]]]],2],[[[6,[[5,[10]]]]],2],[[[6,[[5,[14]]]]],2],[[[6,[[5,[4]]]]],2],[[[6,[[5,[17]]]]],2],[[[6,[[5,[15]]]]],2],[[[6,[[5,[9]]]]],2],[[[6,[[5,[8]]]]],2],[[[6,[[5,[16]]]]],2],[19,2],[20,2],[21,2],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[25,35],25],[[25,35],25],[[[36,[34]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[19,19],19],[[20,20],20],[[21,21],21],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[19,19]],[[20,20]],[[21,21]],[[[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[19,19],[20,20],[21,21],[34,[[36,[34]]]],[[10,10],[[6,[[5,[10]]]]]],[[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],[[6,[[5,[9]]]]]],[[10,10,10,10,10,10,10,10],[[6,[[5,[10]]]]]],[[4,4,4,4,4,4,4,4],[[6,[[5,[4]]]]]],[[16,16,16,16,16,16,16,16],[[6,[[5,[16]]]]]],[2,[[6,[[5,[2]]]]]],[12,[[6,[[5,[12]]]]]],[[11,11],[[6,[[5,[11]]]]]],[[4,4,4,4],[[6,[[5,[4]]]]]],[[14,14,14,14,14,14,14,14],[[6,[[5,[14]]]]]],[[8,8,8,8,8,8,8,8],[[6,[[5,[8]]]]]],[[12,12],[[6,[[5,[12]]]]]],[[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[[6,[[5,[4]]]]]],[[11,11,11,11],[[6,[[5,[11]]]]]],[[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],[[6,[[5,[14]]]]]],[[4,4],[[6,[[5,[4]]]]]],[[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],[[6,[[5,[8]]]]]],[[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],[[6,[[5,[14]]]]]],[[12,12,12,12],[[6,[[5,[12]]]]]],[[2,2],[[6,[[5,[2]]]]]],[[8,8,8,8],[[6,[[5,[8]]]]]],[[15,15,15,15],[[6,[[5,[15]]]]]],[[2,2,2,2],[[6,[[5,[2]]]]]],[[3,3],[[6,[[5,[3]]]]]],[[11,11,11,11,11,11,11,11],[[6,[[5,[11]]]]]],[[2,2,2,2,2,2,2,2],[[6,[[5,[2]]]]]],[[18,18,18,18],[[6,[[5,[18]]]]]],[[8,8],[[6,[[5,[8]]]]]],[[17,17],[[6,[[5,[17]]]]]],[[16,16,16,16],[[6,[[5,[16]]]]]],[[18,18],[[6,[[5,[18]]]]]],[[9,9],[[6,[[5,[9]]]]]],[[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[[6,[[5,[2]]]]]],[[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[[6,[[5,[2]]]]]],[[16,16],[[6,[[5,[16]]]]]],[[9,9,9,9],[[6,[[5,[9]]]]]],[18,[[6,[[5,[18]]]]]],[[14,14,14,14],[[6,[[5,[14]]]]]],[[13,13],[[6,[[5,[13]]]]]],[[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],[[6,[[5,[7]]]]]],[[15,15],[[6,[[5,[15]]]]]],[[7,7,7,7,7,7,7,7],[[6,[[5,[7]]]]]],[[15,15,15,15,15,15,15,15],[[6,[[5,[15]]]]]],[[14,14],[[6,[[5,[14]]]]]],[[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[[6,[[5,[4]]]]]],[[3,3,3,3,3,3,3,3],[[6,[[5,[3]]]]]],[[7,7,7,7],[[6,[[5,[7]]]]]],[[10,10,10,10],[[6,[[5,[10]]]]]],[[13,13,13,13,13,13,13,13],[[6,[[5,[13]]]]]],[[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],[[6,[[5,[3]]]]]],[[7,7],[[6,[[5,[7]]]]]],[[9,9,9,9,9,9,9,9],[[6,[[5,[9]]]]]],[[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],[[6,[[5,[15]]]]]],[[17,17,17,17],[[6,[[5,[17]]]]]],[[13,13,13,13],[[6,[[5,[13]]]]]],[[3,3,3,3],[[6,[[5,[3]]]]]],[[17,17,17,17,17,17,17,17],[[6,[[5,[17]]]]]],[[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],[[6,[[5,[15]]]]]],[[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],[[6,[[5,[9]]]]]],[[],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[22,2],[23,2],[24,2],[[[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[22,22],[23,23],[24,24],[[],[[6,[[5,[3]]]]]],[[],[[6,[[5,[9]]]]]],[[],[[6,[[5,[17]]]]]],[[],[[6,[[5,[3]]]]]],[[],[[6,[[5,[16]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[14]]]]]],[[],[[6,[[5,[12]]]]]],[[],[[6,[[5,[17]]]]]],[[],[[6,[[5,[15]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[18]]]]]],[[],[[6,[[5,[10]]]]]],[[],[[6,[[5,[7]]]]]],[[],[[6,[[5,[10]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[14]]]]]],[[],[[6,[[5,[14]]]]]],[[],[[6,[[5,[14]]]]]],[[],[[6,[[5,[7]]]]]],[[],[[6,[[5,[17]]]]]],[[],[[6,[[5,[4]]]]]],[[],[[6,[[5,[15]]]]]],[[],[[6,[[5,[16]]]]]],[[],[[6,[[5,[11]]]]]],[[],[[6,[[5,[3]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[9]]]]]],[[],[[6,[[5,[14]]]]]],[[],[[6,[[5,[4]]]]]],[[],[[6,[[5,[16]]]]]],[[],[[6,[[5,[15]]]]]],[[],[[6,[[5,[4]]]]]],[[],[[6,[[5,[3]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[11]]]]]],[[],[[6,[[5,[15]]]]]],[[],[[6,[[5,[10]]]]]],[[],[[6,[[5,[9]]]]]],[[],[[6,[[5,[18]]]]]],[[],[[6,[[5,[9]]]]]],[[],[[6,[[5,[9]]]]]],[[],[[6,[[5,[12]]]]]],[[],[[6,[[5,[12]]]]]],[[],[[6,[[5,[4]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[4]]]]]],[[],[[6,[[5,[18]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[7]]]]]],[[],[[6,[[5,[11]]]]]],[[],[[6,[[5,[15]]]]]],[[],[[6,[[5,[7]]]]]],[[],19],[[],20],[[],21],[[[36,[34]]],[[1,[34]]]],[[],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[22,2],[23,2],[24,2],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[19,19],19],[[20,20],20],[[21,21],21],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[19,19]],[[20,20]],[[21,21]],[16],[[[6,[[5,[2]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[17]]]],16]],[[[6,[[5,[8]]]],16]],[[[6,[[5,[7]]]],16]],[[[6,[[5,[4]]]],16]],[[[6,[[5,[9]]]],16]],[[[6,[[5,[3]]]],16]],[[[6,[[5,[9]]]],16]],[[[6,[[5,[7]]]],16]],[[[6,[[5,[10]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[13]]]],16]],[[[6,[[5,[12]]]],16]],[[[6,[[5,[4]]]],16]],[[[6,[[5,[12]]]],16]],[[[6,[[5,[4]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[11]]]],16]],[[[6,[[5,[8]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[13]]]],16]],[[[6,[[5,[16]]]],16]],[[[6,[[5,[18]]]],16]],[[[6,[[5,[9]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[9]]]],16]],[[[6,[[5,[8]]]],16]],[[[6,[[5,[8]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[11]]]],16]],[[[6,[[5,[7]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[4]]]],16]],[[[6,[[5,[17]]]],16]],[[[6,[[5,[10]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[12]]]],16]],[[[6,[[5,[16]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[3]]]],16]],[[[6,[[5,[3]]]],16]],[[[6,[[5,[9]]]],16]],[[[6,[[5,[7]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[3]]]],16]],[[[6,[[5,[13]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[17]]]],16]],[[[6,[[5,[4]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[11]]]],16]],[[[6,[[5,[16]]]],16]],[[[6,[[5,[10]]]],16]],[[[6,[[5,[18]]]],16]],[[[6,[[5,[18]]]],16]],[[19,16]],[[22,16]],[[20,16]],[[23,16]],[[21,16]],[[24,16]],[16],[[[6,[[5,[4]]]],16]],[[[6,[[5,[8]]]],16]],[[[6,[[5,[7]]]],16]],[[[6,[[5,[18]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[10]]]],16]],[[[6,[[5,[13]]]],16]],[[[6,[[5,[10]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[16]]]],16]],[[[6,[[5,[4]]]],16]],[[[6,[[5,[9]]]],16]],[[[6,[[5,[13]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[7]]]],16]],[[[6,[[5,[7]]]],16]],[[[6,[[5,[17]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[3]]]],16]],[[[6,[[5,[3]]]],16]],[[[6,[[5,[3]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[8]]]],16]],[[[6,[[5,[10]]]],16]],[[[6,[[5,[11]]]],16]],[[[6,[[5,[12]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[16]]]],16]],[[[6,[[5,[16]]]],16]],[[[6,[[5,[9]]]],16]],[[[6,[[5,[8]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[18]]]],16]],[[[6,[[5,[9]]]],16]],[[[6,[[5,[11]]]],16]],[[[6,[[5,[11]]]],16]],[[[6,[[5,[8]]]],16]],[[[6,[[5,[2]]]],16]],[[[6,[[5,[12]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[4]]]],16]],[[[6,[[5,[4]]]],16]],[[[6,[[5,[4]]]],16]],[[[6,[[5,[17]]]],16]],[[[6,[[5,[9]]]],16]],[[[6,[[5,[7]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[13]]]],16]],[[[6,[[5,[14]]]],16]],[[[6,[[5,[3]]]],16]],[[[6,[[5,[18]]]],16]],[[[6,[[5,[9]]]],16]],[[[6,[[5,[12]]]],16]],[[[6,[[5,[15]]]],16]],[[[6,[[5,[17]]]],16]],[[19,16]],[[22,16]],[[20,16]],[[23,16]],[[21,16]],[[24,16]],[[]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[2]]]],[6,[[5,[2]]]]],[[6,[[5,[2]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[19,19],19],[[22,22],22],[[20,20],20],[[23,23],23],[[21,21],21],[[24,24],24],[[]],[[]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[19,19],[19,19],[20,20],[20,20],[21,21],[21,21],[[]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[19,19],19],[[20,20],20],[[21,21],21],[[]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[19,19],[20,20],[21,21],[[]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[20,20],[21,21],[[]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[19],[20],[21],[[]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[19,19],[20,20],[21,21],[[]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[20,20],[21,21],[[]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[19,19],[20,20],[21,21],[[]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[19,19],19],[[20,20],20],[[21,21],21],[[]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[19,19],[20,20],[21,21],[[]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[20,20],[21,21],[[]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[19,19],[20,20],[21,21],[[]],[[[6,[[5,[3]]]],[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[19,19,19],19],[[20,20,20],20],[[21,21,21],21],[[]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[20,20],[21,21],[[]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[19,19],19],[[20,20],20],[[21,21],21],[[]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[19,19],[20,20],[21,21],[[]],[[]],[[]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[19,19],[20,20],[21,21],[[]],[[]],[[]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],19],[[],20],[[],21],[[]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],19],[[],20],[[],21],[[]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[19,19]],[[20,20]],[[21,21]],[[]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[20,20],[21,21],[[]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[20,20],[21,21],[[]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[20,20],[21,21],[[]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[20,20],[21,21],[[]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[13]]]]]],[[],19],[[],20],[[],21],[[]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],19],[[],20],[[],21],[[]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[13]]]]]],[[],19],[[],20],[[],21],[[]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],19],[[],20],[[],21],[[]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],19],[[],20],[[],21],[[]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],19],[[],20],[[],21],[[]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],19],[[],20],[[],21],[[]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],19],[[],20],[[],21],[[]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[20,20],[21,21],[[]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[19,19]],[[20,20]],[[21,21]],[[]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[19,19]],[[20,20]],[[21,21]],[[]],[[[6,[[5,[8]]]]]],[[[6,[[5,[10]]]]]],[[[6,[[5,[16]]]]]],[[[6,[[5,[11]]]]]],[[[6,[[5,[4]]]]]],[[[6,[[5,[14]]]]]],[[[6,[[5,[15]]]]]],[[[6,[[5,[7]]]]]],[[[6,[[5,[11]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[3]]]]]],[[[6,[[5,[15]]]]]],[[[6,[[5,[11]]]]]],[[[6,[[5,[4]]]]]],[[[6,[[5,[15]]]]]],[[[6,[[5,[18]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[17]]]]]],[[[6,[[5,[17]]]]]],[[[6,[[5,[9]]]]]],[[[6,[[5,[18]]]]]],[[[6,[[5,[16]]]]]],[[[6,[[5,[14]]]]]],[[[6,[[5,[9]]]]]],[[[6,[[5,[3]]]]]],[[[6,[[5,[9]]]]]],[[[6,[[5,[12]]]]]],[[[6,[[5,[3]]]]]],[[[6,[[5,[14]]]]]],[[[6,[[5,[9]]]]]],[[[6,[[5,[15]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[18]]]]]],[[[6,[[5,[4]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[10]]]]]],[[[6,[[5,[7]]]]]],[[[6,[[5,[9]]]]]],[[[6,[[5,[17]]]]]],[[[6,[[5,[7]]]]]],[[[6,[[5,[15]]]]]],[[[6,[[5,[4]]]]]],[[[6,[[5,[16]]]]]],[[[6,[[5,[3]]]]]],[[[6,[[5,[7]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[12]]]]]],[[[6,[[5,[10]]]]]],[[[6,[[5,[12]]]]]],[[[6,[[5,[14]]]]]],[[[6,[[5,[4]]]]]],[[[6,[[5,[14]]]]]],[19],[20],[21],[[]],[[[6,[[5,[11]]]]]],[[[6,[[5,[12]]]]]],[[[6,[[5,[14]]]]]],[[[6,[[5,[12]]]]]],[[[6,[[5,[12]]]]]],[[[6,[[5,[10]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[16]]]]]],[[[6,[[5,[4]]]]]],[[[6,[[5,[16]]]]]],[[[6,[[5,[4]]]]]],[[[6,[[5,[7]]]]]],[[[6,[[5,[11]]]]]],[[[6,[[5,[10]]]]]],[[[6,[[5,[4]]]]]],[[[6,[[5,[7]]]]]],[[[6,[[5,[14]]]]]],[[[6,[[5,[3]]]]]],[[[6,[[5,[7]]]]]],[[[6,[[5,[10]]]]]],[[[6,[[5,[15]]]]]],[[[6,[[5,[17]]]]]],[[[6,[[5,[15]]]]]],[[[6,[[5,[7]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[9]]]]]],[[[6,[[5,[18]]]]]],[[[6,[[5,[9]]]]]],[[[6,[[5,[15]]]]]],[[[6,[[5,[14]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[16]]]]]],[[[6,[[5,[3]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[9]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[3]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[4]]]]]],[[[6,[[5,[9]]]]]],[[[6,[[5,[18]]]]]],[[[6,[[5,[17]]]]]],[[[6,[[5,[14]]]]]],[[[6,[[5,[18]]]]]],[[[6,[[5,[15]]]]]],[[[6,[[5,[14]]]]]],[[[6,[[5,[17]]]]]],[[[6,[[5,[9]]]]]],[[[6,[[5,[11]]]]]],[[[6,[[5,[3]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[4]]]]]],[[[6,[[5,[15]]]]]],[19],[20],[21],[[]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[19],[20],[21],[[]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[19],[20],[21],[[]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[19,19]],[[20,20]],[[21,21]],[[]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[19],[20],[21],[[]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[19,19]],[[20,20]],[[21,21]],[[]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[20,20],[21,21],[[]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],19],[[],20],[[],21],[[]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[20,20],[21,21],[[]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],19],[[],20],[[],21],[[]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[19,19],19],[[20,20],20],[[21,21],21],[[]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[20,20],[21,21],[[]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],19],[[],20],[[],21],[[]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[19,19],[20,20],[21,21],[[]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],19],[[],20],[[],21],[[]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[19,19]],[[20,20]],[[21,21]],[[]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[19,19],19],[[20,20],20],[[21,21],21],[[]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[19,19],19],[[20,20],20],[[21,21],21],[[]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[19],[20],[21],[[]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[19],[20],[21],[[]],[[[6,[[5,[8]]]],[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[19,19,19],19],[[20,20,20],20],[[21,21,21],21],[[]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[19,19]],[[20,20]],[[21,21]],[[]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[19],[20],[21],[[]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],19],[[],20],[[],21],[[]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[19,19],19],[[20,20],20],[[21,21],21],[[]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[19,19],19],[[20,20],20],[[21,21],21],[3],[[[6,[[5,[13]]]],3],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]],3],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]],3],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]],3],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],3],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],3],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]],3],[[6,[[5,[8]]]]]],[[19,3],19],[[20,3],20],[[21,3],21],[[]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[19],[20],[21],[[]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[20,20],[21,21],[[]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[19,19],[20,20],[21,21],[[]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[20,20],[21,21],[[]],[[]],[[]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[19,19],[20,20],[20,20],[21,21],[21,21],[[]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[20,20],[21,21],[[]],[[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[19],[20],[21],[[]],[[]],[[]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[19,19],[20,20],[21,21],[[]],[[]],[[]],[[]],[[]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[19,19],[20,20],[21,21],[[]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[20,20],[21,21],[[]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[20,20],[21,21],[[]],[[]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]]],[19],[20],[21],[[]],[[]],[[]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[20,20],[21,21],[[]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[13]]]]]],[[],19],[[],20],[[],21],[[]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[19,19],[20,20],[21,21],[[[36,[34]]],34],[[[36,[34]],33],34],[[]],[[],[[6,[[5,[17]]]]]],[[],[[6,[[5,[14]]]]]],[[],[[6,[[5,[2]]]]]],[[],[[6,[[5,[9]]]]]],[[],[[6,[[5,[4]]]]]],[[],[[6,[[5,[2]]]]]],[[],[[6,[[5,[2]]]]]],[[],[[6,[[5,[16]]]]]],[[],[[6,[[5,[10]]]]]],[[],[[6,[[5,[9]]]]]],[[],[[6,[[5,[9]]]]]],[[],[[6,[[5,[12]]]]]],[[],[[6,[[5,[7]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[7]]]]]],[[],[[6,[[5,[4]]]]]],[[],[[6,[[5,[7]]]]]],[[],[[6,[[5,[14]]]]]],[[],[[6,[[5,[12]]]]]],[[],[[6,[[5,[18]]]]]],[[],[[6,[[5,[15]]]]]],[[],[[6,[[5,[3]]]]]],[[],[[6,[[5,[10]]]]]],[[],[[6,[[5,[16]]]]]],[[],[[6,[[5,[11]]]]]],[[],[[6,[[5,[14]]]]]],[[],[[6,[[5,[15]]]]]],[[],[[6,[[5,[4]]]]]],[[],[[6,[[5,[14]]]]]],[[],[[6,[[5,[2]]]]]],[[],[[6,[[5,[3]]]]]],[[],[[6,[[5,[11]]]]]],[[],[[6,[[5,[15]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[14]]]]]],[[],[[6,[[5,[18]]]]]],[[],[[6,[[5,[15]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[10]]]]]],[[],[[6,[[5,[16]]]]]],[[],[[6,[[5,[17]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[15]]]]]],[[],[[6,[[5,[4]]]]]],[[],[[6,[[5,[7]]]]]],[[],[[6,[[5,[17]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[3]]]]]],[[],[[6,[[5,[3]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[2]]]]]],[[],[[6,[[5,[9]]]]]],[[],[[6,[[5,[12]]]]]],[[],[[6,[[5,[11]]]]]],[[],[[6,[[5,[18]]]]]],[[],[[6,[[5,[2]]]]]],[[],[[6,[[5,[4]]]]]],[[],[[6,[[5,[9]]]]]],[[],[[6,[[5,[13]]]]]],[[],19],[2,22],[[],20],[2,23],[[],21],[2,24],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[19,19],19],[[20,20],20],[[21,21],21],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[17]]]],[6,[[5,[17]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[14]]]],[6,[[5,[14]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[8]]]],[6,[[5,[8]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[4]]]],[6,[[5,[4]]]]]],[[[6,[[5,[11]]]],[6,[[5,[11]]]]]],[[[6,[[5,[3]]]],[6,[[5,[3]]]]]],[[[6,[[5,[12]]]],[6,[[5,[12]]]]]],[[[6,[[5,[10]]]],[6,[[5,[10]]]]]],[[[6,[[5,[7]]]],[6,[[5,[7]]]]]],[[[6,[[5,[9]]]],[6,[[5,[9]]]]]],[[[6,[[5,[13]]]],[6,[[5,[13]]]]]],[[[6,[[5,[16]]]],[6,[[5,[16]]]]]],[[[6,[[5,[15]]]],[6,[[5,[15]]]]]],[[[6,[[5,[18]]]],[6,[[5,[18]]]]]],[[19,19]],[[20,20]],[[21,21]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],37],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[[[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[7]]]]],[[6,[[5,[7]]]]]],[[[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[14]]]]],[[6,[[5,[14]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[4]]]]],[[6,[[5,[4]]]]]],[[[6,[[5,[10]]]]],[[6,[[5,[10]]]]]],[[[6,[[5,[15]]]]],[[6,[[5,[15]]]]]],[[[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[9]]]]],[[6,[[5,[9]]]]]],[[[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[3]]]]],[[6,[[5,[3]]]]]],[[[6,[[5,[17]]]]],[[6,[[5,[17]]]]]],[[[6,[[5,[12]]]]],[[6,[[5,[12]]]]]],[[[6,[[5,[18]]]]],[[6,[[5,[18]]]]]],[[[6,[[5,[8]]]]],[[6,[[5,[8]]]]]],[[[6,[[5,[16]]]]],[[6,[[5,[16]]]]]],[[[6,[[5,[11]]]]],[[6,[[5,[11]]]]]],[[[6,[[5,[13]]]]],[[6,[[5,[13]]]]]],[19,19],[22,22],[20,20],[23,23],[21,21],[24,24],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[[36,[34]]],34],[[],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[[[6,[[5,[2]]]]],2],[22,2],[23,2],[24,2],[[],[[6,[[5,[10]]]]]],[[],[[6,[[5,[11]]]]]],[[],[[6,[[5,[15]]]]]],[[],[[6,[[5,[14]]]]]],[[],[[6,[[5,[12]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[3]]]]]],[[],[[6,[[5,[17]]]]]],[[],[[6,[[5,[7]]]]]],[[],[[6,[[5,[11]]]]]],[[],[[6,[[5,[4]]]]]],[[],[[6,[[5,[4]]]]]],[[],[[6,[[5,[12]]]]]],[[],[[6,[[5,[14]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[4]]]]]],[[],[[6,[[5,[15]]]]]],[[],[[6,[[5,[17]]]]]],[[],[[6,[[5,[7]]]]]],[[],[[6,[[5,[9]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[18]]]]]],[[],[[6,[[5,[14]]]]]],[[],[[6,[[5,[9]]]]]],[[],[[6,[[5,[13]]]]]],[[],[[6,[[5,[14]]]]]],[[],[[6,[[5,[9]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[11]]]]]],[[],[[6,[[5,[18]]]]]],[[],[[6,[[5,[10]]]]]],[[],[[6,[[5,[12]]]]]],[[],[[6,[[5,[15]]]]]],[[],[[6,[[5,[17]]]]]],[[],[[6,[[5,[3]]]]]],[[],[[6,[[5,[15]]]]]],[[],[[6,[[5,[8]]]]]],[[],[[6,[[5,[16]]]]]],[[],[[6,[[5,[10]]]]]],[[],[[6,[[5,[18]]]]]],[[],[[6,[[5,[16]]]]]],[[],[[6,[[5,[3]]]]]],[[],[[6,[[5,[16]]]]]],[[],[[6,[[5,[9]]]]]],[[],[[6,[[5,[4]]]]]],[[],[[6,[[5,[9]]]]]],[[],[[6,[[5,[15]]]]]],[[],[[6,[[5,[4]]]]]],[[],[[6,[[5,[7]]]]]],[[],[[6,[[5,[7]]]]]],[[],[[6,[[5,[14]]]]]],[[],[[6,[[5,[3]]]]]],[[],[[6,[[5,[8]]]]]],[[],19],[[],20],[[],21],[[25,25,35],25],[[25,25,35],25]],"c":[],"p":[[4,"Option"],[15,"bool"],[15,"i32"],[15,"i16"],[15,"array"],[3,"AutoSimd"],[15,"u32"],[15,"f32"],[15,"u16"],[15,"isize"],[15,"i64"],[15,"u128"],[15,"f64"],[15,"i8"],[15,"u8"],[15,"usize"],[15,"u64"],[15,"i128"],[3,"WideF32x4"],[3,"WideF32x8"],[3,"WideF64x4"],[3,"WideBoolF32x4"],[3,"WideBoolF32x8"],[3,"WideBoolF64x4"],[8,"Clone"],[3,"AutoBoolSimd"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"str"],[4,"Result"],[8,"FnOnce"],[8,"SimdValue"],[8,"Fn"],[3,"SimdOption"],[3,"String"],[3,"TypeId"],[8,"ComplexField"],[8,"RealField"],[8,"SupersetOf"],[8,"SubsetOf"],[8,"SimdComplexField"],[8,"SimdBool"],[8,"SimdSigned"],[8,"SimdRealField"],[8,"SimdPartialOrd"]]},\
"simplelog":{"doc":"<code>simplelog</code> provides a series of logging facilities, that …","t":"NNNNNNNEEDNNDDNNNNNNENNNNNNNEEENNNNNNNNNNNNNNNIDNNEDEEENNNNNDNLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Always","AlwaysAnsi","Ansi256","Auto","Black","Blue","Both","Color","ColorChoice","CombinedLogger","Component","Compound","Config","ConfigBuilder","Cyan","Debug","Debug","Error","Error","First","FormatItem","Green","IDs","Info","Info","Left","Left","Left","Level","LevelFilter","LevelPadding","Literal","Magenta","Mixed","Names","Never","Off","Off","Off","Off","Optional","Red","Rgb","Right","Right","Right","SharedLogger","SimpleLogger","Stderr","Stdout","TargetPadding","TermLogger","TerminalMode","ThreadLogMode","ThreadPadding","Trace","Trace","Warn","Warn","White","WriteLogger","Yellow","add_filter_allow","add_filter_allow_str","add_filter_ignore","add_filter_ignore_str","as_log","as_log","as_log","as_log","as_log","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clear_filter_allow","clear_filter_ignore","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","config","config","config","config","config","default","default","default","enabled","enabled","enabled","enabled","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","flush","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format_description","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","hash","hash","hash","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","iter","iter","level","level","level","level","level","log","log","log","log","max","max","new","new","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_level_color","set_level_padding","set_location_level","set_max_level","set_target_level","set_target_padding","set_thread_level","set_thread_mode","set_thread_padding","set_time_format_custom","set_time_format_rfc2822","set_time_format_rfc3339","set_time_level","set_time_offset","set_time_offset_to_local","to_level","to_level_filter","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"simplelog"]],"d":["Try very hard to emit colors. This includes emitting ANSI …","AlwaysAnsi is like Always, except it never tries to use …","","Try to use colors, but don’t force the issue. If the …","","","If this thread is named, log the name. Otherwise, log the …","The set of available colors for the terminal …","ColorChoice represents the color preferences of an end …","The CombinedLogger struct. Provides a Logger …","A minimal representation of a single non-literal item.","A series of literals or components that collectively form …","Configuration for the Loggers","Builder for the Logger Configurations (<code>Config</code>)","","The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","A series of <code>FormatItem</code>s where, when parsing, the first …","A complete description of how to format and parse a type.","","Log thread ids only","The “info” level.","Corresponds to the <code>Info</code> log level.","Add spaces on the left side","Add spaces on the left side, up to usize many","Add spaces on the left side, up to usize many","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","Padding to be used for logging the level","Bytes that are formatted as-is.","","Use Stderr for Errors and Stdout otherwise","Log the thread names only","Never emit colors.","A level lower than all log levels.","Do not pad the level","Do not pad the thread id/name","Do not pad the thread id/name","A <code>FormatItem</code> that may or may not be present when parsing. …","","","Add spaces on the right side","Add spaces on the right side, up to usize many","Add spaces on the right side, up to usize many","Trait to have a common interface to obtain the Level of …","The SimpleLogger struct. Provides a very basic Logger …","Only use Stderr","Only use Stdout","Padding to be used for logging the thread id/name","The TermLogger struct. Provides a stderr/out based Logger …","Specifies which streams should be used when logging","Mode for logging the thread name or id or both.","Padding to be used for logging the thread id/name","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","","The WriteLogger struct. Provides a Logger implementation …","","Add allowed module filters. If any are specified, only …","Add allowed module filters. If any are specified, only …","Add denied module filters. If any are specified, records …","Add denied module filters. If any are specified, records …","Returns the logger as a Log trait object","","","","","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Build new <code>Config</code>","Clear allowed module filters. If none are specified, …","Clear ignore module filters. If none are specified, …","","","","","","","","","","","","","","","","","","","","","","","","","","","Inspect the config of a running Logger","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","init function. Globally initializes the CombinedLogger as …","init function. Globally initializes the SimpleLogger as …","init function. Globally initializes the TermLogger as the …","init function. Globally initializes the WriteLogger as the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","Iterate through all supported filtering levels.","Returns the set Level for this Logger","","","","","","","","","Returns the most verbose logging level.","Returns the most verbose logging level filter.","allows to create a new logger, that can be independently …","allows to create a new logger, that can be independently …","allows to create a new logger, that can be independently …","allows to create a new logger, that can be independently …","Create a new default ConfigBuilder","","","","","Set the color used for printing the level (if the logger …","Set how the levels should be padded, when logging (default …","Set at which level and above (more verbose) a source code …","Set at which level and above (more verbose) the level …","Set at which level and above (more verbose) the target …","Set how the thread should be padded","Set at which level and above (more verbose) the thread id …","Set the mode for logging the thread","Set how the thread should be padded","Sets the time format to a custom representation.","Set time format string to use rfc2822.","Set time format string to use rfc3339.","Set at which level and  above (more verbose) the current …","Set offset used for logging time (default is UTC)","Sets the offset used to the current local time offset …","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[19,19,21,19,21,21,18,0,0,0,22,22,0,0,21,12,13,12,13,22,0,21,18,12,13,15,16,17,0,0,0,22,21,20,18,19,13,15,16,17,22,21,21,15,16,17,0,0,20,20,0,0,0,0,0,12,13,12,13,21,0,21,1,1,1,1,35,6,7,8,11,12,13,6,7,8,12,11,13,15,16,17,18,19,14,1,20,21,22,6,7,8,12,11,13,15,16,17,18,19,14,1,20,21,22,1,1,1,12,13,15,16,17,18,19,14,1,20,21,22,12,13,15,16,17,18,19,14,1,20,21,22,12,13,35,6,7,8,11,14,1,20,6,7,8,11,12,12,13,13,18,19,20,21,22,22,22,12,13,19,20,21,22,6,7,8,11,12,12,13,13,15,16,17,18,19,14,1,20,21,22,0,6,7,8,12,11,13,15,16,17,18,19,14,1,20,21,22,22,22,12,13,21,12,13,20,6,7,8,11,6,7,8,12,11,13,15,16,17,18,19,14,1,20,21,22,12,13,35,6,7,8,11,6,7,8,11,12,13,6,7,8,11,1,12,12,13,13,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,13,12,12,13,15,16,17,18,19,14,1,20,21,22,12,13,6,7,8,12,11,13,15,16,17,18,19,14,1,20,21,22,22,6,7,8,12,11,13,15,16,17,18,19,14,1,20,21,22,6,7,8,12,11,13,15,16,17,18,19,14,1,20,21,22],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[[1,3],1],[[1,2],1],[[1,3],1],[4,[[4,[5]]]],[[[4,[6]]],[[4,[5]]]],[[[4,[7]]],[[4,[5]]]],[[[4,[8]]],[[4,[5]]]],[[[4,[[11,[[0,[9,10]]]]]]],[[4,[5]]]],[12,3],[13,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,14],[1,1],[1,1],[12,12],[13,13],[15,15],[16,16],[17,17],[18,18],[19,19],[14,14],[1,1],[20,20],[21,21],[22,22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[12,12],23],[[13,13],23],[[],[[24,[14]]]],[6,[[24,[14]]]],[7,[[24,[14]]]],[8,[[24,[14]]]],[[[11,[[0,[9,10]]]]],[[24,[14]]]],[[],14],[[],1],[[],20],[[6,25],26],[[7,25],26],[[8,25],26],[[[11,[[0,[9,10]]]],25],26],[[12,13],26],[[12,12],26],[[13,12],26],[[13,13],26],[[18,18],26],[[19,19],26],[[20,20],26],[[21,21],26],[[22,22],26],[[22,27],26],[[22,[28,[22]]],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[6],[7],[8],[[[11,[[0,[9,10]]]]]],[[12,29],[[31,[30]]]],[[12,29],[[31,[30]]]],[[13,29],[[31,[30]]]],[[13,29],[[31,[30]]]],[[15,29],32],[[16,29],32],[[17,29],32],[[18,29],32],[[19,29],[[31,[30]]]],[[14,29],32],[[1,29],32],[[20,29],32],[[21,29],[[31,[30]]]],[[22,29],[[31,[30]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[28,[22]]],22],[27,22],[[]],[3,[[31,[12]]]],[3,[[31,[13]]]],[3,[[31,[21,33]]]],[[12,34]],[[13,34]],[[20,34]],[[[36,[[4,[35]]]]],[[31,[37]]]],[[13,14],[[31,[37]]]],[[13,14,20,19],[[31,[37]]]],[[13,14,[0,[9,10]]],[[31,[37]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],38],[[],38],[[],13],[6,13],[7,13],[8,13],[[[11,[[0,[9,10]]]]],13],[[6,39]],[[7,39]],[[8,39]],[[[11,[[0,[9,10]]]],39]],[[],12],[[],13],[[[36,[[4,[35]]]]],[[4,[6]]]],[[13,14],[[4,[7]]]],[[13,14,20,19],[[4,[8]]]],[[13,14,[0,[9,10]]],[[4,[[11,[[0,[9,10]]]]]]]],[[],1],[[12,12],[[24,[23]]]],[[12,13],[[24,[23]]]],[[13,13],[[24,[23]]]],[[13,12],[[24,[23]]]],[[1,12,[24,[21]]],1],[[1,15],1],[[1,13],1],[[1,13],1],[[1,13],1],[[1,17],1],[[1,13],1],[[1,18],1],[[1,16],1],[[1,[28,[22]]],1],[1,1],[1,1],[[1,13],1],[[1,40],1],[1,[[31,[1,1]]]],[13,[[24,[12]]]],[12,13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[41,[[31,[22]]]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42]],"c":[],"p":[[3,"ConfigBuilder"],[3,"String"],[15,"str"],[3,"Box"],[8,"Log"],[3,"CombinedLogger"],[3,"SimpleLogger"],[3,"TermLogger"],[8,"Write"],[8,"Send"],[3,"WriteLogger"],[4,"Level"],[4,"LevelFilter"],[3,"Config"],[4,"LevelPadding"],[4,"ThreadPadding"],[4,"TargetPadding"],[4,"ThreadLogMode"],[4,"ColorChoice"],[4,"TerminalMode"],[4,"Color"],[4,"FormatItem"],[4,"Ordering"],[4,"Option"],[3,"Metadata"],[15,"bool"],[4,"Component"],[15,"slice"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[3,"ParseColorError"],[8,"Hasher"],[8,"SharedLogger"],[3,"Vec"],[3,"SetLoggerError"],[8,"Iterator"],[3,"Record"],[3,"UtcOffset"],[4,"Item"],[3,"TypeId"]]},\
"slab":{"doc":"Pre-allocated storage for a uniform data type.","t":"DDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Drain","IntoIter","Iter","IterMut","Slab","VacantEntry","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_from","clone_into","clone_into","compact","contains","default","drain","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_iter","get","get2_mut","get2_unchecked_mut","get_mut","get_unchecked","get_unchecked_mut","index","index_mut","insert","insert","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","iter_mut","key","key_of","len","len","len","len","len","new","next","next","next","next","next_back","next_back","next_back","next_back","remove","reserve","reserve_exact","retain","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_remove","type_id","type_id","type_id","type_id","type_id","type_id","vacant_entry","vacant_key","with_capacity"],"q":[[0,"slab"]],"d":["A draining iterator for <code>Slab</code>","A consuming iterator over the values stored in a <code>Slab</code>","An iterator over the values stored in the <code>Slab</code>","A mutable iterator over the values stored in the <code>Slab</code>","Pre-allocated storage for a uniform data type","A handle to a vacant entry in a <code>Slab</code>.","","","","","","","","","","","","","Return the number of values the slab can store without …","Clear the slab of all values.","","","","","","Reduce the capacity as much as possible, changing the key …","Return <code>true</code> if a value is associated with the given key.","","Return a draining iterator that removes all elements from …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Return a reference to the value associated with the given …","Return two mutable references to the values associated …","Return two mutable references to the values associated …","Return a mutable reference to the value associated with …","Return a reference to the value associated with the given …","Return a mutable reference to the value associated with …","","","Insert a value in the slab, returning key assigned to the …","Insert a value in the entry, returning a mutable reference …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Return <code>true</code> if there are no values stored in the slab.","Return an iterator over the slab.","Return an iterator that allows modifying each value.","Return the key associated with this entry.","Get the key for an element in the slab.","Return the number of stored values.","","","","","Construct a new, empty <code>Slab</code>.","","","","","","","","","Remove and return the value associated with the given key.","Reserve capacity for at least <code>additional</code> more values to be …","Reserve the minimum capacity required to store exactly …","Retain only the elements specified by the predicate.","Shrink the capacity of the slab as much as possible …","","","","","","","","","","","","","","","","","","","Tries to remove the value associated with the given key, …","","","","","","","Return a handle to a vacant entry allowing for further …","Returns the key of the next vacant entry.","Construct a new, empty <code>Slab</code> with the specified capacity."],"i":[0,0,0,0,0,0,1,11,4,12,7,13,1,11,4,12,7,13,1,1,1,4,1,1,4,1,1,1,1,1,11,4,12,7,13,1,11,4,12,7,13,1,1,1,1,1,1,1,1,1,1,13,1,11,4,12,7,13,1,1,1,11,4,12,7,1,1,1,13,1,1,11,4,12,7,1,11,4,12,7,11,4,12,7,1,1,1,1,1,11,4,12,7,1,4,1,11,4,12,7,13,1,11,4,12,7,13,1,1,11,4,12,7,13,1,1,1],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[1],[[[1,[3]]],[[1,[3]]]],[4,4],[[[1,[3]],[1,[3]]]],[[]],[[]],[[1,5]],[[1,2],6],[[],1],[1,7],[[[1,[8]],9],10],[[[11,[8]],9],10],[[[4,[8]],9],10],[[[12,[8]],9],10],[[7,9],10],[[[13,[8]],9],10],[[]],[[]],[[]],[[]],[[]],[[]],[14,1],[[1,2],15],[[1,2,2],15],[[1,2,2]],[[1,2],15],[[1,2]],[[1,2]],[[1,2]],[[1,2]],[1,2],[13],[[]],[[]],[[]],[[]],[[]],[[]],[1,4],[1,11],[1,12],[[]],[[]],[[]],[[]],[1,6],[1,4],[1,12],[13,2],[1,2],[1,2],[11,2],[4,2],[12,2],[7,2],[[],1],[11,15],[4,15],[12,15],[7,15],[11,15],[4,15],[12,15],[7,15],[[1,2]],[[1,2]],[[1,2]],[[1,5]],[1],[11],[4],[12],[7],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[1,2],15],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[1,13],[1,2],[2,1]],"c":[],"p":[[3,"Slab"],[15,"usize"],[8,"Clone"],[3,"Iter"],[8,"FnMut"],[15,"bool"],[3,"Drain"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"IntoIter"],[3,"IterMut"],[3,"VacantEntry"],[8,"IntoIterator"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"smallvec":{"doc":"Small vectors in various sizes. These store a certain …","t":"NINEDDQDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLOLLLLKLLLLLLLLLLLLLLLLLLM","n":["AllocErr","Array","CapacityOverflow","CollectionAllocErr","Drain","IntoIter","Item","SmallVec","ToSmallVec","append","as_mut","as_mut_ptr","as_mut_slice","as_mut_slice","as_ptr","as_ref","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_from","clone_into","clone_into","cmp","dedup","dedup_by","dedup_by_key","default","deref","deref_mut","drain","drop","drop","drop","eq","extend","extend_from_slice","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_buf","from_buf_and_len","from_buf_and_len_unchecked","from_elem","from_iter","from_raw_parts","from_slice","from_vec","grow","hash","index","index_mut","inline_size","insert","insert_from_slice","insert_many","into","into","into","into","into_boxed_slice","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_vec","is_empty","len","len","new","next","next","next_back","next_back","partial_cmp","pop","push","remove","reserve","reserve_exact","resize","resize_with","retain","retain_mut","set_len","shrink_to_fit","size","size_hint","size_hint","smallvec","spilled","swap_remove","to_owned","to_owned","to_smallvec","to_string","truncate","try_from","try_from","try_from","try_from","try_grow","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","with_capacity","layout"],"q":[[0,"smallvec"],[138,"smallvec::CollectionAllocErr"]],"d":["The allocator return an error","Types that can be used as the backing store for a <code>SmallVec</code>.","Overflow <code>usize::MAX</code> or other error during size computation","Error type for APIs with fallible heap allocation","An iterator that removes the items from a <code>SmallVec</code> and …","An iterator that consumes a <code>SmallVec</code> and yields its items …","The type of the array’s elements.","A <code>Vec</code>-like container that can store a small number of …","Convenience trait for constructing a <code>SmallVec</code>","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","","Returns a raw mutable pointer to the vector’s buffer.","Extracts a mutable slice of the entire vector.","Returns the remaining items of this iterator as a mutable …","Returns a raw pointer to the vector’s buffer.","","Extracts a slice containing the entire vector.","Returns the remaining items of this iterator as a slice.","","","","","","","","","","","The number of items the vector can hold without …","Remove all elements from the vector.","","","","","","","Removes consecutive duplicate elements.","Removes consecutive duplicate elements using the given …","Removes consecutive elements that map to the same key.","","","","Creates a draining iterator that removes the specified …","","","","","","Copy elements from a slice and append them to the vector.","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Creates a <code>SmallVec</code> with <code>n</code> copies of <code>elem</code>.","","Creates a <code>SmallVec</code> directly from the raw components of …","Copy the elements from a slice into a new <code>SmallVec</code>.","Construct a new <code>SmallVec</code> from a <code>Vec&lt;A::Item&gt;</code>.","Re-allocate to set the capacity to …","","","","The maximum number of elements this vector can hold inline","Insert an element at position <code>index</code>, shifting all elements …","Copy elements from a slice into the vector at position …","Insert multiple elements at position <code>index</code>, shifting all …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a <code>SmallVec</code> into a <code>Box&lt;[T]&gt;</code> without reallocating …","Convert the <code>SmallVec</code> into an <code>A</code> if possible. Otherwise …","","","","","","Convert a <code>SmallVec</code> to a <code>Vec</code>, without reallocating if the …","Returns <code>true</code> if the vector is empty","","The number of elements stored in the vector","Construct an empty vector","","","","","","Remove an item from the end of the vector and return it, …","Append an item to the vector.","Remove and return the element at position <code>index</code>, shifting …","Reserve capacity for <code>additional</code> more elements to be …","Reserve the minimum capacity for <code>additional</code> more elements …","Resizes the vector so that its length is equal to <code>len</code>.","Resizes the <code>SmallVec</code> in-place so that <code>len</code> is equal to …","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Sets the length of a vector.","Shrink the capacity of the vector as much as possible.","Returns the number of items the array can hold.","","","Creates a <code>SmallVec</code> containing the arguments.","Returns <code>true</code> if the data has spilled into a separate …","Remove the element at position <code>index</code>, replacing it with …","","","Construct a new <code>SmallVec</code> from a slice.","","Shorten the vector, keeping the first <code>len</code> elements and …","","","","","Re-allocate to set the capacity to …","","","","","Reserve capacity for <code>additional</code> more elements to be …","Reserve the minimum capacity for <code>additional</code> more elements …","","","","","Construct an empty vector with enough capacity …","The layout that was passed to the allocator"],"i":[15,0,15,0,0,0,1,0,0,2,2,2,2,4,2,2,2,4,10,2,2,4,15,10,2,2,4,15,2,2,2,4,2,2,4,2,2,2,2,2,2,2,2,10,2,4,2,2,2,10,2,4,15,15,10,2,2,2,2,2,4,15,15,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,10,2,4,15,2,2,10,2,2,2,4,2,2,10,2,2,10,4,10,4,2,2,2,2,2,2,2,2,2,2,2,2,1,10,4,0,2,2,2,4,27,15,2,10,2,4,15,2,10,2,4,15,2,2,10,2,4,15,2,28],"f":[0,0,0,0,0,0,0,0,0,[[[2,[1]],[2,[1]]]],[[[2,[1]]],3],[[[2,[1]]]],[[[2,[1]]],3],[[[4,[1]]],3],[[[2,[1]]]],[[[2,[1]]],3],[[[2,[1]]],3],[[[4,[1]]],3],[[]],[[[2,[1]]],3],[[]],[[]],[[]],[[]],[[[2,[1]]],3],[[]],[[]],[[]],[[[2,[1]]],5],[[[2,[1]]]],[[[2,[1]]],[[2,[1]]]],[[[4,[[0,[1,6]]]]],[[4,[[0,[1,6]]]]]],[[[2,[1]],[2,[1]]]],[[]],[[]],[[[2,[1]],[2,[1]]],7],[[[2,[1]]]],[[[2,[1]],8]],[[[2,[1]],8]],[[],[[2,[1]]]],[[[2,[1]]],3],[[[2,[1]]],3],[[[2,[1]],[9,[5]]],[[10,[1]]]],[[[10,[1]]]],[[[2,[1]]]],[[[4,[1]]]],[[[2,[1]],[2,[1]]],11],[[[2,[1]],12]],[[[2,[1]],3]],[[[10,[1]],13],14],[[[2,[1]],13],14],[[[4,[1]],13],14],[[15,13],14],[[15,13],14],[[]],[1,[[2,[1]]]],[16],[17,[[2,[1]]]],[[]],[3,[[2,[1]]]],[[]],[[]],[18,15],[1,[[2,[1]]]],[[1,5],[[2,[1]]]],[[[19,[1]],5],[[2,[1]]]],[5,[[2,[1]]]],[12,[[2,[1]]]],[[5,5],[[2,[1]]]],[3,[[2,[1]]]],[17,[[2,[1]]]],[[[2,[1]],5]],[[[2,[1]],20]],[[[2,[1]],[21,[3]]]],[[[2,[1]],[21,[3]]]],[[[2,[1]]],5],[[[2,[1]],5]],[[[2,[1]],5,3]],[[[2,[1]],5,12]],[[]],[[]],[[]],[[]],[[[2,[1]]],[[22,[3]]]],[[[2,[1]]],[[23,[1,[2,[1]]]]]],[[]],[[[2,[1]]]],[[[2,[1]]]],[[[2,[1]]]],[[]],[[[2,[1]]],17],[[[2,[1]]],11],[[[10,[1]]],5],[[[2,[1]]],5],[[],[[2,[1]]]],[[[10,[1]]],24],[[[4,[1]]],24],[[[10,[1]]],24],[[[4,[1]]],24],[[[2,[1]],[2,[1]]],[[24,[7]]]],[[[2,[1]]],24],[[[2,[1]]]],[[[2,[1]],5]],[[[2,[1]],5]],[[[2,[1]],5]],[[[2,[1]],5]],[[[2,[1]],5,8]],[[[2,[1]],8]],[[[2,[1]],8]],[[[2,[1]],5]],[[[2,[1]]]],[[],5],[[[10,[1]]]],[[[4,[1]]]],0,[[[2,[1]]],11],[[[2,[1]],5]],[[]],[[]],[[],2],[[],25],[[[2,[1]],5]],[[],23],[[],23],[[],23],[[],23],[[[2,[1]],5],[[23,[15]]]],[[],23],[[],23],[[],23],[[],23],[[[2,[1]],5],[[23,[15]]]],[[[2,[1]],5],[[23,[15]]]],[[],26],[[],26],[[],26],[[],26],[5,[[2,[1]]]],0],"c":[],"p":[[8,"Array"],[3,"SmallVec"],[15,"slice"],[3,"IntoIter"],[15,"usize"],[8,"Clone"],[4,"Ordering"],[8,"FnMut"],[8,"RangeBounds"],[3,"Drain"],[15,"bool"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[4,"CollectionAllocErr"],[15,"never"],[3,"Vec"],[6,"LayoutErr"],[19,"MaybeUninit"],[8,"Hasher"],[8,"SliceIndex"],[3,"Box"],[4,"Result"],[4,"Option"],[3,"String"],[3,"TypeId"],[8,"ToSmallVec"],[13,"AllocErr"]]},\
"spade":{"doc":"Spade","t":"DDDQQIIGCIQEDDRRNNNNNNDDEQINNIQQLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLALLLLKLLLLLLLALLLLLLLLLLLLLLLLLLLLALLLLLLLLFLLLLKLKLKLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLMMGGGGGGGNDRNDGGGGELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDGGDGGGGGGGDGGGDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["CdtEdge","ConstrainedDelaunayTriangulation","DelaunayTriangulation","DirectedEdge","Face","FloatTriangulation","HasPosition","HierarchyHintGenerator","HierarchyHintGeneratorWithBranchFactor","HintGenerator","HintGenerator","InsertionError","LastUsedVertexHintGenerator","LineSideInfo","MAX_ALLOWED_VALUE","MIN_ALLOWED_VALUE","NAN","NoTriangulation","OnEdge","OnFace","OnVertex","OutsideOfConvexHull","Point2","PointProjection","PositionInTriangulation","Scalar","SpadeNum","TooLarge","TooSmall","Triangulation","UndirectedEdge","Vertex","add_constraint","add_constraint_edge","all_faces","all_faces","all_vertices_on_line","all_vertices_on_line","as_mut","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bulk_load","bulk_load","can_add_constraint","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","convex_hull","convex_hull","convex_hull_size","convex_hull_size","data","data_mut","default","default","default","default","default","directed_edge","directed_edge","directed_edge_data_mut","directed_edge_data_mut","directed_edges","directed_edges","directed_voronoi_edges","directed_voronoi_edges","distance_2","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","exists_constraint","face","face","face_data_mut","face_data_mut","fixed_all_faces","fixed_all_faces","fixed_directed_edges","fixed_directed_edges","fixed_inner_faces","fixed_inner_faces","fixed_undirected_edges","fixed_undirected_edges","fixed_vertices","fixed_vertices","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","get_edge_from_neighbors","get_edge_from_neighbors","get_edges_in_circle","get_edges_in_circle","get_edges_in_rectangle","get_edges_in_rectangle","get_hint","get_hint","get_vertices_in_circle","get_vertices_in_circle","get_vertices_in_rectangle","get_vertices_in_rectangle","handles","hash","hash","hash","hash","initialize_from_triangulation","initialize_from_triangulation","inner_faces","inner_faces","insert","insert","insert_with_hint","insert_with_hint","internals","intersects_constraint","into","into","into","into","into","into","into","into","into","is_before_edge","is_behind_edge","is_constraint_edge","is_constraint_edge","is_on_edge","is_on_left_side","is_on_left_side_or_on_line","is_on_line","is_on_right_side","is_on_right_side_or_on_line","iterators","locate","locate","locate_and_remove","locate_and_remove","locate_vertex","locate_vertex","locate_with_hint","locate_with_hint","mitigate_underflow","nearest_neighbor","new","new","new","notify_vertex_inserted","notify_vertex_inserted","notify_vertex_lookup","notify_vertex_lookup","notify_vertex_removed","notify_vertex_removed","num_all_faces","num_all_faces","num_constraints","num_directed_edges","num_directed_edges","num_inner_faces","num_inner_faces","num_undirected_edges","num_undirected_edges","num_vertices","num_vertices","outer_face","outer_face","partial_cmp","partial_cmp","partial_cmp","partial_cmp","position","position","relative_position","remove","remove","remove","reversed","reversed","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","undirected_edge","undirected_edge","undirected_edge_data_mut","undirected_edge_data_mut","undirected_edges","undirected_edges","undirected_voronoi_edges","undirected_voronoi_edges","validate_coordinate","validate_vertex","vertex","vertex","vertex_data_mut","vertex_data_mut","vertices","vertices","voronoi_faces","voronoi_faces","with_capacity","with_capacity","x","y","DirectedEdgeHandle","DirectedVoronoiEdge","FaceHandle","FixedDirectedEdgeHandle","FixedFaceHandle","FixedUndirectedEdgeHandle","FixedVertexHandle","Inner","InnerTag","OUTER_FACE","Outer","PossiblyOuterTag","UndirectedEdgeHandle","UndirectedVoronoiEdge","VertexHandle","VoronoiFace","VoronoiVertex","adjacent_edge","adjacent_edge","adjacent_edges","adjacent_edges","area","as_delaunay_edge","as_delaunay_edge","as_delaunay_face","as_delaunay_vertex","as_directed","as_directed","as_directed","as_inner","as_inner","as_ref","as_ref","as_ref","as_ref","as_undirected","as_undirected","as_undirected","as_voronoi_edge","as_voronoi_edge","as_voronoi_face","barycentric_interpolation","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","ccw","center","center","center","circumcenter","circumcircle","clone","clone","clone_into","clone_into","cmp","cmp","cw","data","data","data","data","default","default","direction_vector","distance_2","distance_2","distance_2","eq","eq","equivalent","equivalent","equivalent","equivalent","face","face","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","hash","into","into","into","is_constraint_edge","is_constraint_edge","is_outer","is_outer","is_outer_edge","is_part_of_convex_hull","is_part_of_convex_hull","length_2","length_2","nearest_point","nearest_point","next","next","opposite_position","opposite_vertex","out_edge","out_edge","out_edges","out_edges","partial_cmp","partial_cmp","position","position","positions","positions","positions","prev","prev","project_point","rev","rev","rev","side_query","to","to","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vertices","vertices","vertices","vertices","DynamicHandleImpl","FixedHandleImpl","adjacent_edge","adjacent_edge","adjacent_edges","adjacent_edges","area","as_delaunay_edge","as_delaunay_edge","as_delaunay_vertex","as_directed","as_directed","as_directed","as_inner","as_inner","as_undirected","as_undirected","as_undirected","as_voronoi_edge","as_voronoi_edge","as_voronoi_face","barycentric_interpolation","borrow","borrow","borrow_mut","borrow_mut","ccw","center","center","center","circumcenter","circumcircle","clone","clone","clone_into","clone_into","cmp","cmp","cw","data","data","data","data","direction_vector","distance_2","distance_2","distance_2","eq","eq","equivalent","equivalent","equivalent","equivalent","face","face","fix","fmt","from","from","from","from","hash","hash","index","index","into","into","is_constraint_edge","is_constraint_edge","is_outer","is_outer","is_outer_edge","is_part_of_convex_hull","is_part_of_convex_hull","length_2","length_2","nearest_point","nearest_point","next","next","opposite_position","opposite_vertex","out_edge","out_edges","partial_cmp","partial_cmp","position","positions","positions","positions","prev","prev","project_point","rev","rev","rev","side_query","to","to","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vertices","vertices","vertices","vertices","CircleMetric","DirectedEdgeIterator","DirectedVoronoiEdgeIterator","EdgesInShapeIterator","FaceIterator","FixedDirectedEdgeIterator","FixedFaceIterator","FixedInnerFaceIterator","FixedUndirectedEdgeIterator","FixedVertexIterator","InnerFaceIterator","RectangleMetric","UndirectedEdgeIterator","UndirectedVoronoiEdgeIterator","VertexIterator","VerticesInShapeIterator","VoronoiFaceIterator","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","into","into","into","into","into_iter","into_iter","next","next","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"spade"],[299,"spade::handles"],[445,"spade::internals"],[556,"spade::iterators"]],"d":["Undirected edge type of a ConstrainedDelaunayTriangulation …","A two dimensional constrained Delaunay triangulation.","A two dimensional Delaunay triangulation.","The triangulation’s edge type. Any new edge is created …","The triangulation’s face type. Any new face is created …","Implements general functions for triangulations over …","An object with position.","A hint generator based on a hierarchy of triangulations …","","A structure used to speed up common operations on delaunay …","The hint generator used by the triangulation. See …","The error type used for inserting elements into a …","A hint generator that returns the last used vertex as hint.","Describes on which side of a line a a point lies.","The largest allowed coordinate value that can be inserted …","The smallest allowed coordinate value greater than zero …","A coordinate value was NaN.","The triangulation contains either no vertices or exactly …","A position lies exactly on an edge. The edge’s handle is …","A position lies in the interior of a face. The face’s …","A position lies exactly on an existing vertex. The …","A position lies outside the convex hull. The given edge …","A two dimensional point.","Indicates a point’s projected position relative to an …","Describes a position in a triangulation.","The number type used by this coordinate type.","A coordinate type that can be used with a triangulation.","A coordinate value was too large.","A coordinate value was too small.","Defines common operations on triangulations.","The triangulation’s undirected edge type. Any new edge …","The triangulation’s vertex type.","Adds a constraint edge between to vertices.","Insert two points and creates a constraint between them.","An iterator visiting all faces.","An iterator visiting all faces.","Returns <code>true</code> if all vertices lie on a single line.","Returns <code>true</code> if all vertices lie on a single line.","","","","","","","","","","","","","","","","","","","","","Creates a new triangulation populated with some vertices.","Creates a new triangulation populated with some vertices.","Checks if a constraint edge can be added.","Removes all edges, faces and vertices from the …","Removes all edges, faces and vertices from the …","","","","","","","","","","","","","","","","","","","","","Returns an iterator over all convex hull edges.","Returns an iterator over all convex hull edges.","Returns the number of edges of the convex hull.","Returns the number of edges of the convex hull.","Returns the wrapped undirected edge data type.","Returns the wrapped undirected edge data type.","","","","","","Converts a fixed directed edge handle handle to a …","Converts a fixed directed edge handle handle to a …","Returns a mutable reference to the associated data of a …","Returns a mutable reference to the associated data of a …","An iterator visiting all directed edges.","An iterator visiting all directed edges.","An iterator visiting all directed voronoi edges.","An iterator visiting all directed voronoi edges.","Returns the squared distance of this point and another …","","","","","","","","","","","","","","Checks if two vertices are connected by a constraint edge.","Converts a fixed face handle to a reference face handle.","Converts a fixed face handle to a reference face handle.","Returns a mutable reference to the associated data of a …","Returns a mutable reference to the associated data of a …","An iterator visiting all faces.","An iterator visiting all faces.","An iterator visiting all directed edges.","An iterator visiting all directed edges.","An iterator visiting all inner faces of the triangulation.","An iterator visiting all inner faces of the triangulation.","An iterator visiting all undirected edges.","An iterator visiting all undirected edges.","An iterator visiting all vertices.","An iterator visiting all vertices.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns an edge between two vertices.","Returns an edge between two vertices.","Returns all edges contained in a circle.","Returns all edges contained in a circle.","Returns all edges contained in a rectangle.","Returns all edges contained in a rectangle.","Returns a vertex handle that should be close to a given …","","Returns all vertices in a circle.","Returns all vertices in a circle.","Returns all vertices in a rectangle.","Returns all vertices in a rectangle.","Handle types used for traversal and modification of …","","","","","Creates a new hint generator initialized to give hints for …","","An iterator visiting all inner faces. The iterator type is …","An iterator visiting all inner faces. The iterator type is …","Inserts a new vertex into the triangulation.","Inserts a new vertex into the triangulation.","Inserts a new vertex into the triangulation.","Inserts a new vertex into the triangulation.","Internals that must be published due to technical reasons. …","Checks if a line intersects a constraint edge.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if a point’s projection is located before …","Returns <code>true</code> if a point’s projection is located behind …","Returns <code>true</code> if this edge is a constraint edge.","Returns <code>true</code> if a given edge is a constraint edge.","Returns <code>true</code> if a point’s projection is located on an …","Returns <code>true</code> if a point lies on the left side of a line.","Returns <code>true</code> if a point lies on the left side of a line or …","Returns <code>true</code> if a point lies exactly on this line.","Returns <code>true</code> if a point lies on the right side of a line.","Returns <code>true</code> if a point lies on the right side of a line …","Iterators over various elements of Delaunay triangulations.","Returns information about the location of a point in a …","Returns information about the location of a point in a …","Attempts to remove a vertex from the triangulation.","Attempts to remove a vertex from the triangulation.","Locates a vertex at a given position.","Locates a vertex at a given position.","Returns information about the location of a point in a …","Returns information about the location of a point in a …","Prevents underflow issues of a position by setting any …","Returns the nearest neighbor of a given input vertex.","Creates a new triangulation.","Creates a new triangulation.","Creates a new point.","Notifies the hint generator that a new vertex is inserted","","Notifies the hint generator that an element was looked up","","Notifies the hint generator that a vertex was removed","","Returns the number of all faces, including the single …","Returns the number of all faces, including the single …","Returns the number of constraint edges.","Returns the number of directed edges in this triangulation.","Returns the number of directed edges in this triangulation.","Returns the number of inner faces in this triangulation.","Returns the number of inner faces in this triangulation.","Returns the number of undirected edges in this …","Returns the number of undirected edges in this …","Returns the number vertices in this triangulation.","Returns the number vertices in this triangulation.","Returns a reference handle to the single outer face of …","Returns a reference handle to the single outer face of …","","","","","Returns the position of this object.","","Returns the relative position of the point used to create …","Removes a vertex from the triangulation.","Removes a vertex from the triangulation.","Removes a vertex from the triangulation.","Returns the inverse of this point projection.","Returns the opposite of this <code>LineSideInfo</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a fixed undirected edge handle to a reference …","Converts a fixed undirected edge handle to a reference …","Returns a mutable reference ot the associated data of an …","Returns a mutable reference ot the associated data of an …","An iterator over all undirected edges.","An iterator over all undirected edges.","An iterator visiting all undirected voronoi edges.","An iterator visiting all undirected voronoi edges.","Checks if a coordinate value is suitable for insertion …","Checks if a vertex is suitable for insertion into a …","Converts a fixed vertex handle to a reference vertex …","Converts a fixed vertex handle to a reference vertex …","Returns a mutable reference to the associated data of a …","Returns a mutable reference to the associated data of a …","An iterator visiting all vertices.","An iterator visiting all vertices.","An iterator visiting all faces of the Voronoi diagram.","An iterator visiting all faces of the Voronoi diagram.","Creates a new triangulation and pre-allocates some space …","Creates a new triangulation and pre-allocates some space …","The point’s x coordinate","The point’s y coordinate","Handle to a directed edge of a triangulation.","A handle to a directed edge of the Voronoi diagram.","Handle to a face of a triangulation.","Fixed handle to a directed edge.","“Fixed handle to a face.","Fixed handle to an undirected edge.","Fixed handle to a vertex.","Refers to an inner vertex of the voronoi diagram.","Marker type that signifies that a face is an inner faces.","Returns a reference to the single outer face.","Refers to an outer vertex of the voronoi diagram.","Marker type that signifies that a face can possibly be the …","Handle to an undirected edge of a triangulation.","A handle to an undirected edge of the Voronoi diagram.","Handle to a vertex of a triangulation.","A handle to a face of the voronoi diagram.","A handle to a vertex of the voronoi diagram.","Returns an edge that is adjacent to this face.","Returns an edge that is adjacent to this face.","Returns the three inner edges adjacent to this face.","Returns an iterator that returns all edges adjacent to …","Returns the triangle’s area.","Returns the directed dual edge of the underlying Delaunay …","Returns the dual edge of the Delaunay triangulation.","Returns the dual delaunay face of this voronoi vertex.","Converts this face into its dual vertex of the Delaunay …","Converts this directed edge into an undirected edge handle.","Converts this directed edge into an undirected edge handle.","Converts this undirected handle into a directed edge …","Converts this face handle to an inner face.","Converts this possibly outer face handle into an inner …","","","","","Converts this directed edge handle into an undirected edge …","Converts this directed edge handle into an undirected edge …","Converts this directed edge handle into an undirected edge …","Converts this edge into its dual voronoi edge.","Returns the dual edge in the Voronoi diagram.","Returns the voronoi face that corresponds to this vertex …","Returns the barycentric coordinates of a point relative to …","","","","","","","Returns the next edge in counter clockwise direction.","Returns the center of this edge","Returns the center of this edge.","Returns the face’s center point.","Returns the face’s circumcenter.","Returns the face’s circumcircle center and the <strong>squared</strong> …","","","","","","","Returns the next edge in clockwise direction.","Returns a reference to the data associated with this …","Returns a reference to the data associated with this …","Returns the data associated with this vertex.","Returns a reference to the data associated with this face.","","","Returns a vector that is parallel to the voronoi edge.","Returns the squared distance of a point to this edge.","Returns the squared distance of a point to this edge.","Returns the squared distance of a point to this triangle.","","","","","","","Returns the face located to the left of this edge.","Returns the Voronoi face to the left of this Voronoi edge","","","","","","","","Returns the edge’s origin vertex.","Returns the voronoi vertex from which this edge originates.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this edge is a constraint edge.","Returns <code>true</code> if this edge is a constraint edge.","Returns <code>true</code> if this face is the single outer face.","Returns <code>true</code> if this handle refers to the single outer …","Returns <code>true</code> if this edge is adjacent to the outer face.","Returns <code>true</code> if either this edge or its reversed edge is …","Returns <code>true</code> if the outer face is adjacent to any side of …","Returns the squared length of this edge.","Returns the squared length of this edge","Yields the nearest point on this edge.","Yields the nearest point on this edge.","Returns the oriented next edge.","Returns the edge that is connected to this edge in counter …","Returns the position of the vertex opposite of this edge.","Returns the vertex which lies opposite of this edge.","Returns an outgoing edge of this vertex.","Returns a voronoi edge going out of this vertex.","Returns all directed edges going out of this vertex.","Returns all directed voronoi edges going out of this …","","","Returns the position of this vertex.","The position of this voronoi vertex.","Returns the start and end position of this edge.","Returns the end positions of this edge.","Returns the positions of the face’s vertices","Returns the oriented previous edge.","Returns the edge that is connected to this edge in …","Indicates the position of a point being projected onto …","Returns this edge with its direction reversed.","Returns this edge in reversed direction.","Returns this edge with its direction reversed.","Identifies on which side of this edge a point lies.","Returns the edge’s destination vertex.","Returns the voronoi edge’s destination.","","","","","","","","","","","","Returns the edge’s two vertices.","Returns the edge’s two vertices.","Returns the face’s three vertices.","Returns the edge’s two vertices.","Internal type definition that is only exposed for …","Internal type definition that is only exposed for …","Returns an edge that is adjacent to this face.","Returns an edge that is adjacent to this face.","Returns an iterator that returns all edges adjacent to …","Returns the three inner edges adjacent to this face.","Returns the triangle’s area.","Returns the directed dual edge of the underlying Delaunay …","Returns the dual edge of the Delaunay triangulation.","Converts this face into its dual vertex of the Delaunay …","Converts this undirected handle into a directed edge …","Converts this directed edge into an undirected edge handle.","Converts this directed edge into an undirected edge handle.","Converts this possibly outer face handle into an inner …","Converts this face handle to an inner face.","Converts this directed edge handle into an undirected edge …","Converts this directed edge handle into an undirected edge …","Converts this directed edge handle into an undirected edge …","Converts this edge into its dual voronoi edge.","Returns the dual edge in the Voronoi diagram.","Returns the voronoi face that corresponds to this vertex …","Returns the barycentric coordinates of a point relative to …","","","","","Returns the next edge in counter clockwise direction.","Returns the face’s center point.","Returns the center of this edge","Returns the center of this edge.","Returns the face’s circumcenter.","Returns the face’s circumcircle center and the <strong>squared</strong> …","","","","","","","Returns the next edge in clockwise direction.","Returns the data associated with this vertex.","Returns a reference to the data associated with this …","Returns a reference to the data associated with this …","Returns a reference to the data associated with this face.","Returns a vector that is parallel to the voronoi edge.","Returns the squared distance of a point to this triangle.","Returns the squared distance of a point to this edge.","Returns the squared distance of a point to this edge.","","","","","","","Returns the Voronoi face to the left of this Voronoi edge","Returns the face located to the left of this edge.","Converts this dynamic handle to its fixed variant.","","Returns the voronoi vertex from which this edge originates.","Returns the edge’s origin vertex.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the internal index of this element.","Returns the internal index of this element.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this edge is a constraint edge.","Returns <code>true</code> if this edge is a constraint edge.","Returns <code>true</code> if this handle refers to the single outer …","Returns <code>true</code> if this face is the single outer face.","Returns <code>true</code> if this edge is adjacent to the outer face.","Returns <code>true</code> if the outer face is adjacent to any side of …","Returns <code>true</code> if either this edge or its reversed edge is …","Returns the squared length of this edge","Returns the squared length of this edge.","Yields the nearest point on this edge.","Yields the nearest point on this edge.","Returns the oriented next edge.","Returns the edge that is connected to this edge in counter …","Returns the position of the vertex opposite of this edge.","Returns the vertex which lies opposite of this edge.","Returns an outgoing edge of this vertex.","Returns all directed edges going out of this vertex.","","","Returns the position of this vertex.","Returns the positions of the face’s vertices","Returns the start and end position of this edge.","Returns the end positions of this edge.","Returns the edge that is connected to this edge in …","Returns the oriented previous edge.","Indicates the position of a point being projected onto …","Returns this edge in reversed direction.","Returns this edge with its direction reversed.","Returns this edge with its direction reversed.","Identifies on which side of this edge a point lies.","Returns the voronoi edge’s destination.","Returns the edge’s destination vertex.","","","","","","","","","Returns the face’s three vertices.","Returns the edge’s two vertices.","Returns the edge’s two vertices.","Returns the edge’s two vertices.","Defines the shape of circle.","An iterator over directed edges.","An iterator over directed voronoi edges.","An iterator over edges within a shape (e.g. a rectangle or …","An iterator over faces.","An iterator over fixed directed edges.","An iterator over fixed faces.","An iterator over fixed inner faces.","An iterator over fixed undirected edges.","An iterator over fixed vertices.","An iterator over inner faces.","Defines the shape of a rectangle.","An iterator over undirected edges.","An iterator over undirected voronoi edges.","An iterator over vertices.","An iterator over vertices within a shape (e.g. a rectangle …","An iterator over voronoi faces.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,45,45,0,0,0,0,0,45,0,0,0,0,0,7,17,17,17,17,17,0,0,0,1,0,7,7,0,45,45,4,4,45,45,45,45,10,10,47,10,4,13,14,7,15,16,17,47,10,4,13,14,7,15,16,17,45,45,4,45,45,4,10,4,13,14,7,15,16,17,10,4,13,14,7,15,16,17,10,7,17,45,45,45,45,10,10,10,4,13,15,16,45,45,45,45,45,45,45,45,16,10,14,7,16,17,10,10,7,7,16,16,17,17,4,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,13,14,7,7,15,16,17,47,10,4,13,14,7,15,16,16,16,17,45,45,70,70,70,70,3,13,70,70,70,70,0,10,7,16,17,3,13,45,45,45,45,45,45,0,4,47,10,4,13,14,7,15,16,17,47,47,10,4,47,14,14,14,14,14,0,45,45,45,45,45,45,45,45,0,15,45,45,16,3,13,3,13,3,13,45,45,4,45,45,45,45,45,45,45,45,45,45,10,7,16,17,1,16,47,45,45,4,47,14,10,4,13,14,7,15,16,17,7,47,10,4,13,14,7,15,16,17,47,10,4,13,14,7,15,16,17,47,10,4,13,14,7,15,16,17,45,45,45,45,45,45,45,45,0,0,45,45,45,45,45,45,45,45,45,45,16,16,0,0,0,0,0,0,0,66,0,0,66,0,0,0,0,0,0,28,28,28,62,28,64,65,66,62,48,56,65,27,28,22,56,49,28,21,22,64,22,56,49,28,66,61,51,66,61,51,22,22,56,28,28,28,61,51,61,51,61,51,22,22,56,49,28,61,51,64,22,56,28,61,51,61,61,51,51,22,64,22,56,49,28,28,61,51,22,64,66,61,51,61,51,66,61,51,22,56,27,28,22,22,56,22,56,22,56,22,64,22,22,49,66,49,66,61,51,49,66,22,56,28,22,64,22,21,22,64,22,22,64,61,51,66,61,51,66,61,51,66,61,51,22,56,28,65,0,0,67,67,67,67,67,67,67,67,67,67,68,67,68,67,67,68,67,67,67,67,67,68,67,68,67,67,67,67,67,67,67,68,67,68,67,68,67,67,67,67,67,67,67,67,67,67,68,67,67,68,68,67,67,67,68,67,67,67,68,67,68,67,68,67,68,67,67,67,68,67,67,67,67,67,67,67,67,67,67,67,67,67,67,68,67,67,67,67,67,67,67,67,67,68,67,67,67,67,68,67,68,67,68,67,68,67,67,67,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,41,42,40,39,41,42,40,39,41,42,40,39,41,42,40,39,41,42,40,42,42,40,40,39,41,42,40,39,41,42,40,39,41,39,41,42,40,42,40,42,40,39,41,39,41,42,40,39,41,42,40,39,41,42,40,39,41,42,40],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[4,[1,2,2,2,3]],5,5],6],[[[4,[1,2,2,2,3]],1,1],[[8,[6,7]]]],[[],9],[[],9],[[],6],[[],6],[10],[10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11,[[8,[7]]]],[11,[[8,[7]]]],[[[4,[1,2,2,2,3]],5,5],6],[[]],[[]],[[[4,[1,2,2,2,3]]]],[[[10,[12]]],[[10,[12]]]],[[[4,[[0,[1,12]],[0,[2,12]],[0,[2,12]],[0,[2,12]],[0,[3,12]]]]],[[4,[[0,[1,12]],[0,[2,12]],[0,[2,12]],[0,[2,12]],[0,[3,12]]]]]],[13,13],[14,14],[7,7],[[[15,[[0,[1,12]],[0,[2,12]],[0,[2,12]],[0,[2,12]],[0,[3,12]]]]],[[15,[[0,[1,12]],[0,[2,12]],[0,[2,12]],[0,[2,12]],[0,[3,12]]]]]],[[[16,[12]]],[[16,[12]]]],[17,17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[10,[18]],[10,[18]]],19],[[7,7],19],[[17,17],19],0,0,[[],20],[[],20],[10],[10],[[],[[10,[2]]]],[[],[[4,[1,2,2,2,3]]]],[[],13],[[],[[15,[1,2,2,2,3]]]],[[],[[16,[2]]]],[21,22],[21,22],[21],[21],[[],23],[[],23],[[],24],[[],24],[[[16,[25]],[16,[25]]],25],[[[10,[26]],[10,[26]]],6],[[14,14],6],[[7,7],6],[[[16,[26]],[16,[26]]],6],[[17,17],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[[4,[1,2,2,2,3]],5,5],6],[[[27,[0]]],[[28,[0]]]],[[[27,[0]]],[[28,[0]]]],[[[27,[0]]]],[[[27,[0]]]],[[],29],[[],29],[[],30],[[],30],[[],31],[[],31],[[],32],[[],32],[[],33],[[],33],[[[10,[34]],35],36],[[13,35],36],[[14,35],36],[[7,35],36],[[7,35],36],[[[15,[[0,[1,34]],[0,[2,34]],[0,[2,34]],[0,[2,34]],[0,[3,34]]]],35],36],[[[16,[34]],35],36],[[17,35],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[16,[25]]]],[[]],[[[37,[25]]],[[16,[25]]]],[[]],[[5,5],[[38,[22]]]],[[5,5],[[38,[22]]]],[16,[[40,[39]]]],[16,[[40,[39]]]],[[16,16],[[40,[41]]]],[[16,16],[[40,[41]]]],[16,5],[[13,[16,[25]]],5],[16,[[42,[39]]]],[16,[[42,[39]]]],[[16,16],[[42,[41]]]],[[16,16],[[42,[41]]]],0,[[[10,[43]],44]],[[7,44]],[[[16,[43]],44]],[[17,44]],[45],[45,13],[[],46],[[],46],[[],[[8,[5,7]]]],[[],[[8,[5,7]]]],[5,[[8,[5,7]]]],[5,[[8,[5,7]]]],0,[[[4,[1,2,2,2,3]],16,16],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[47,[25]]],6],[[[47,[25]]],6],[10,6],[[[4,[1,2,2,2,3]],48],6],[[[47,[25]]],6],[14,6],[14,6],[14,6],[14,6],[14,6],0,[16,17],[16,17],[16,38],[16,38],[16,[[38,[49]]]],[16,[[38,[49]]]],[[16,5],17],[[16,5],17],[[[16,[50]]],[[16,[50]]]],[[[15,[1,2,2,2,3]],16],[[38,[[49,[1,2,2,2]]]]]],[[]],[[]],[[],16],[[5,16]],[[13,5,[16,[25]]]],[5],[[13,5]],[[[38,[16]],5,16]],[[13,[38,[[16,[25]]]],5,[16,[25]]]],[[],20],[[],20],[[[4,[1,2,2,2,3]]],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],[[28,[51]]]],[[],[[28,[51]]]],[[[10,[52]],[10,[52]]],[[38,[19]]]],[[7,7],[[38,[19]]]],[[[16,[52]],[16,[52]]],[[38,[19]]]],[[17,17],[[38,[19]]]],[[],16],[[[16,[25]]],[[16,[25]]]],[[[47,[[0,[25,53]]]]],[[0,[25,53]]]],[5],[5],[[[4,[1,2,2,2,3]],5],1],[[[47,[25]]],[[47,[25]]]],[14,14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],54],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[48,56],[48,56],[48],[48],[[],57],[[],57],[[],58],[[],58],[25,[[8,[7]]]],[1,[[8,[7]]]],[5,49],[5,49],[5],[5],[[],59],[[],59],[[],60],[[],60],[[20,20,20]],[[20,20,20]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[28,[51]]],[[38,[22]]]],[[[28,[61]]],22],[[[28,[61]]],[[37,[22]]]],[62,63],[[[28,[61,1]]]],[64,22],[65,56],[[[66,[1]]],[[38,[[28,[61,1]]]]]],[62,49],[48,21],[56,22],[65,64],[[[27,[51]]],[[38,[[27,[61]]]]]],[[[28,[51]]],[[38,[[28,[61]]]]]],[22],[56],[49],[[[28,[0]]]],[21,48],[22,56],[64,65],[22,64],[56,65],[49,62],[[[28,[61,1]],16],37],[[]],[[]],[[]],[[]],[[]],[[]],[22,22],[[[22,[1]]],16],[[[56,[1]]],16],[[[28,[61,1]]],16],[[[28,[61,1]]],16],[[[28,[61,1]]]],[61,61],[51,51],[[]],[[]],[[61,61],19],[[51,51],19],[22,22],[22],[56],[49],[[[28,[0]]]],[[],61],[[],51],[[[64,[1]]],16],[[[22,[1]],16]],[[[56,[1]],16]],[[[28,[61,1]],16]],[[61,61],6],[[51,51],6],[[],6],[[],6],[[],6],[[],6],[22,[[28,[51]]]],[64,62],[[22,35],36],[[56,35],36],[[49,35],36],[[[28,[51]],35],36],[[[28,[61]],35],36],[[61,35],36],[[51,35],36],[22,49],[64,66],[[]],[[]],[[]],[[61,44]],[[51,44]],[[]],[[]],[[]],[[[22,[10]]],6],[[[56,[10]]],6],[[[27,[51]]],6],[[[28,[51]]],6],[22,6],[22,6],[56,6],[[[22,[1]]]],[[[56,[1]]]],[[[22,[1]],16],16],[[[56,[1]],16],16],[22,22],[64,64],[[[22,[1]]],[[38,[16]]]],[22,[[38,[49]]]],[49,[[38,[22]]]],[[[66,[1]]],[[64,[1]]]],[49,[[0,[0]]]],[[[66,[1]]],[[38,[[37,[[64,[1]]]]]]]],[[61,61],[[38,[19]]]],[[51,51],[[38,[19]]]],[[[49,[1]]],16],[[[66,[1]]],[[38,[16]]]],[[[22,[1]]],[[37,[16]]]],[[[56,[1]]],[[37,[16]]]],[[[28,[61,1]]],[[37,[16]]]],[22,22],[64,64],[[[22,[1]],16],47],[21,21],[22,22],[64,64],[[[22,[1]],16],14],[22,49],[64,66],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],55],[[],55],[[],55],[22,[[37,[49]]]],[56,[[37,[49]]]],[[[28,[61]]],[[37,[49]]]],[65,[[37,[66]]]],0,0,[[[67,[0,61]]],22],[[[67,[0,51]]],[[38,[22]]]],[[[67,[0,51]]],63],[[[67,[0,61]]],[[37,[22]]]],[[[67,[1,0,61]]]],[[[67,[0,61]]],22],[[[67,[0,61]]],56],[[[67,[0,51]]],49],[[[67,[0,61]]],64],[[[67,[0,61]]],22],[[[68,[0,61]]],21],[[[67,[0,51]]],[[38,[[28,[61]]]]]],[[[68,[0,51]]],[[38,[[27,[61]]]]]],[[[67,[0,61]]],65],[[[67,[0,61]]],56],[[[68,[0,61]]],48],[[[67,[0,61]]],64],[[[67,[0,61]]],65],[[[67,[0,61]]],62],[[[67,[1,0,61]],16],37],[[]],[[]],[[]],[[]],[[[67,[0,61]]],22],[[[67,[1,0,61]]],16],[[[67,[1,0,61]]],16],[[[67,[1,0,61]]],16],[[[67,[1,0,61]]],16],[[[67,[1,0,61]]]],[[[67,[69,0]]],[[67,[69,0]]]],[[[68,[12,[0,[12,0]]]]],[[68,[12,[0,[12,0]]]]]],[[]],[[]],[[[67,[18,0]],[67,[18,0]]],19],[[[68,[18,[0,[18,0]]]],[68,[18,[0,[18,0]]]]],19],[[[67,[0,61]]],22],[[[67,[0,61]]]],[[[67,[0,61]]]],[[[67,[0,61]]]],[[[67,[0,0]]]],[[[67,[1,0,61]]],16],[[[67,[1,0,61]],16]],[[[67,[1,0,61]],16]],[[[67,[1,0,61]],16]],[[[67,[26,0]],[67,[26,0]]],6],[[[68,[26,[0,[26,0]]]],[68,[26,[0,[26,0]]]]],6],[[],6],[[],6],[[],6],[[],6],[[[67,[0,61]]],62],[[[67,[0,61]]],[[28,[51]]]],[[[67,[[0,[69,2]],0]]],[[68,[[0,[69,2]],0]]]],[[[68,[0]],35],36],[[[67,[0,61]]],66],[[[67,[0,61]]],49],[[]],[[]],[[[67,[43,0]],44]],[[[68,[43,[0,[43,0]]]],44]],[[[67,[[0,[69,2]],0]]],20],[[[68,[2,0]]],20],[[]],[[]],[[[67,[10,0,61]]],6],[[[67,[10,0,61]]],6],[[[67,[0,51]]],6],[[[68,[0,51]]],6],[[[67,[0,61]]],6],[[[67,[0,61]]],6],[[[67,[0,61]]],6],[[[67,[1,0,61]]]],[[[67,[1,0,61]]]],[[[67,[1,0,61]],16],16],[[[67,[1,0,61]],16],16],[[[67,[0,61]]],22],[[[67,[0,61]]],64],[[[67,[1,0,61]]],[[38,[16]]]],[[[67,[0,61]]],[[38,[49]]]],[[[67,[0,61]]],[[38,[22]]]],[[[67,[0,61]]],[[0,[0]]]],[[[67,[52,0]],[67,[52,0]]],[[38,[19]]]],[[[68,[52,[0,[52,0]]]],[68,[52,[0,[52,0]]]]],[[38,[19]]]],[[[67,[1,0,61]]],16],[[[67,[1,0,61]]],[[37,[16]]]],[[[67,[1,0,61]]],[[37,[16]]]],[[[67,[1,0,61]]],[[37,[16]]]],[[[67,[0,61]]],64],[[[67,[0,61]]],22],[[[67,[1,0,61]],16],47],[[[67,[0,61]]],[[67,[0,61]]]],[[[67,[0,61]]],[[67,[0,61]]]],[[[68,[0,61]]],[[68,[0,61]]]],[[[67,[1,0,61]],16],14],[[[67,[0,61]]],66],[[[67,[0,61]]],49],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],55],[[],55],[[[67,[0,61]]],[[37,[49]]]],[[[67,[0,61]]],[[37,[66]]]],[[[67,[0,61]]],[[37,[49]]]],[[[67,[0,61]]],[[37,[49]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[39,[[0,[12,25]]]]],[[39,[[0,[12,25]]]]]],[[[41,[[0,[25,12]]]]],[[41,[[0,[25,12]]]]]],[[[42,[[0,[45,12]],[0,[0,12]]]]],[[42,[[0,[45,12]],[0,[0,12]]]]]],[[[40,[[0,[45,12]],[0,[0,12]]]]],[[40,[[0,[45,12]],[0,[0,12]]]]]],[[]],[[]],[[]],[[]],[[[39,[[0,[26,25]]]],[39,[[0,[26,25]]]]],6],[[[41,[[0,[25,26]]]],[41,[[0,[25,26]]]]],6],[[[42,[[0,[45,26]],[0,[0,26]]]],[42,[[0,[45,26]],[0,[0,26]]]]],6],[[[40,[[0,[45,26]],[0,[0,26]]]],[40,[[0,[45,26]],[0,[0,26]]]]],6],[[],6],[[],6],[[],6],[[],6],[[[39,[[0,[34,25]]]],35],36],[[[41,[[0,[25,34]]]],35],36],[[[42,[[0,[45,34]],[0,[0,34]]]],35],36],[[[40,[[0,[45,34]],[0,[0,34]]]],35],36],[[]],[[]],[[]],[[]],[[[39,[[0,[43,25]]]],44]],[[[41,[[0,[25,43]]]],44]],[[]],[[]],[[]],[[]],[[]],[[]],[[[42,[45,0]]],38],[[[40,[45,0]]],38],[[[39,[[0,[52,25]]]],[39,[[0,[52,25]]]]],[[38,[19]]]],[[[41,[[0,[25,52]]]],[41,[[0,[25,52]]]]],[[38,[19]]]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],55],[[],55],[[],55],[[],55]],"c":[],"p":[[8,"HasPosition"],[8,"Default"],[8,"HintGenerator"],[3,"ConstrainedDelaunayTriangulation"],[6,"FixedVertexHandle"],[15,"bool"],[4,"InsertionError"],[4,"Result"],[6,"FaceIterator"],[3,"CdtEdge"],[3,"Vec"],[8,"Clone"],[3,"LastUsedVertexHintGenerator"],[3,"LineSideInfo"],[3,"DelaunayTriangulation"],[3,"Point2"],[4,"PositionInTriangulation"],[8,"Ord"],[4,"Ordering"],[15,"usize"],[6,"FixedDirectedEdgeHandle"],[6,"DirectedEdgeHandle"],[6,"DirectedEdgeIterator"],[6,"DirectedVoronoiEdgeIterator"],[8,"SpadeNum"],[8,"PartialEq"],[6,"FixedFaceHandle"],[6,"FaceHandle"],[6,"FixedFaceIterator"],[6,"FixedDirectedEdgeIterator"],[6,"FixedInnerFaceIterator"],[6,"FixedUndirectedEdgeIterator"],[6,"FixedVertexIterator"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"array"],[4,"Option"],[3,"CircleMetric"],[3,"EdgesInShapeIterator"],[3,"RectangleMetric"],[3,"VerticesInShapeIterator"],[8,"Hash"],[8,"Hasher"],[8,"Triangulation"],[6,"InnerFaceIterator"],[3,"PointProjection"],[6,"FixedUndirectedEdgeHandle"],[6,"VertexHandle"],[15,"f64"],[3,"PossiblyOuterTag"],[8,"PartialOrd"],[8,"Float"],[3,"String"],[3,"TypeId"],[6,"UndirectedEdgeHandle"],[6,"UndirectedEdgeIterator"],[6,"UndirectedVoronoiEdgeIterator"],[6,"VertexIterator"],[6,"VoronoiFaceIterator"],[3,"InnerTag"],[6,"VoronoiFace"],[8,"DoubleEndedIterator"],[6,"DirectedVoronoiEdge"],[6,"UndirectedVoronoiEdge"],[4,"VoronoiVertex"],[3,"DynamicHandleImpl"],[3,"FixedHandleImpl"],[8,"Copy"],[8,"FloatTriangulation"]],"a":{"cdt":[1],"delaunay":[2],"voronoi":[2],"voronoi diagram":[2]}},\
"syn":{"doc":"github crates-io docs-rs","t":"DNNNNDDNNNNNEDGNNDENDNNNNNNNDNNDNNNNNNNNNNNNNNNNNNDDNNNNEDDDNNDNNNNNNDENDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDNDNDDEDDDNNNENEDDDDNNEEEDNNNNNNCDDNNNDEDDDDNDNNNNNENDDDDDDDDDDDDDDDDDNNCCDNNNNDNCCENNNCCDCCDCCDCCDCCDCCDCCDDNNNDNNNNNNNNENNEENDDNNNDNNNNNNNNNENNNNNNNNNNNDEDDDDDDDDDDDDDDDDNNNNNEDDDDNNDNNENDNNNNNNNNNNGNENNNNNDNNNNENENNNNNNONNNDEEDDDDNNNNNNNDENNNNNNNNNNNDDDDDDDDDEDDDDDDDNENNNNNNNNDDDDDEDDNNNNNNNNDDDEDENNNMMMMMMMMMMMMMMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMOMMMMMMMOMAMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMLLMMMMMMMMMMOOMLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLMMMMMMMMMMMMMLLLLMMMMMMMMMMMMMMMMMMMMMAMMMMMMMMMMLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMLMMMMMMMMLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLMMMMMMMMMMMMLMMMMMLMMMLMMMMLMMMMMMMMMMMMMMMMMMMLMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMOAFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLFLOLLLLOOFLLLLLLMMMMMMMMMLMMMMMMMMMMMMMMMMMAMMMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMALMMMMMMMMMLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLMMMMMMLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLMDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKSKDDDQIDGIIGDLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKNDDDDEDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDIDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Abi","Add","AddEq","And","AngleBracketed","AngleBracketedGenericArguments","Arm","Array","Array","Assign","AssignOp","Async","AttrStyle","Attribute","AttributeArgs","Await","BareFn","BareFnArg","BinOp","Binary","Binding","Binding","BitAnd","BitAndEq","BitOr","BitOrEq","BitXor","BitXorEq","Block","Block","Bool","BoundLifetimes","Box","Box","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closed","Closure","Const","Const","Const","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Crate","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivEq","Enum","Enum","Eq","Eq","Error","Expr","Expr","ExprArray","ExprAssign","ExprAssignOp","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBox","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprType","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","ExternCrate","Field","Field","FieldPat","FieldValue","Fields","FieldsNamed","FieldsUnnamed","File","Float","Fn","Fn","FnArg","ForLoop","ForeignItem","ForeignItemFn","ForeignItemMacro","ForeignItemStatic","ForeignItemType","ForeignMod","Ge","GenericArgument","GenericMethodArgument","GenericParam","Generics","Glob","Group","Group","Group","Gt","HalfOpen","Ident","Ident","Ident","Ident","If","Impl","ImplGenerics","ImplItem","ImplItemConst","ImplItemMacro","ImplItemMethod","ImplItemType","ImplTrait","Index","Index","Infer","Inherited","Inner","Int","Item","Item","ItemConst","ItemEnum","ItemExternCrate","ItemFn","ItemForeignMod","ItemImpl","ItemMacro","ItemMacro2","ItemMod","ItemStatic","ItemStruct","ItemTrait","ItemTraitAlias","ItemType","ItemUnion","ItemUse","Label","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeDef","List","Lit","Lit","Lit","Lit","Lit","Lit","LitBool","LitBool","LitBool","LitByte","LitByte","LitByte","LitByteStr","LitByteStr","LitByteStr","LitChar","LitChar","LitChar","LitFloat","LitFloat","LitFloat","LitInt","LitInt","LitInt","LitStr","LitStr","LitStr","Local","Local","Loop","Lt","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro2","MacroDelimiter","Match","Maybe","Member","Meta","Meta","MetaList","MetaNameValue","Method","Method","MethodCall","MethodTurbofish","Mod","Mul","MulEq","Name","NameValue","Named","Named","Ne","Neg","NestedMeta","Never","None","None","Not","Or","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Pat","PatBox","PatIdent","PatLit","PatMacro","PatOr","PatPath","PatRange","PatReference","PatRest","PatSlice","PatStruct","PatTuple","PatTupleStruct","PatType","PatWild","Path","Path","Path","Path","Path","Path","PathArguments","PathSegment","PredicateEq","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Range","RangeLimits","Raw","Receiver","Receiver","Reference","Reference","Reference","Rem","RemEq","Rename","Repeat","Rest","Restricted","Result","Return","ReturnType","Semi","Shl","ShlEq","Shr","ShrEq","Signature","Slice","Slice","Static","Static","Stmt","Str","StrStyle","Struct","Struct","Struct","Struct","Sub","SubEq","Token","Trait","Trait","TraitAlias","TraitBound","TraitBoundModifier","TraitItem","TraitItemConst","TraitItemMacro","TraitItemMethod","TraitItemType","TraitObject","Try","TryBlock","Tuple","Tuple","Tuple","TupleStruct","Turbofish","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","Typed","UnOp","Unary","Union","Union","Unit","Unnamed","Unnamed","Unsafe","Use","UseGlob","UseGroup","UseName","UsePath","UseRename","UseTree","Variadic","Variant","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","VisCrate","VisPublic","VisRestricted","Visibility","WhereClause","WherePredicate","While","Wild","Yield","abi","abi","abi","and_token","and_token","and_token","apostrophe","args","args","args","args","arguments","arms","as_token","as_token","as_token","as_turbofish","async_token","asyncness","asyncness","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","auto_token","await_token","bang_token","bang_token","base","base","base10_digits","base10_digits","base10_parse","base10_parse","block","block","block","block","block","block","body","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","box_token","box_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","break_token","buffer","by_ref","capture","capture","cases","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon2_token","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","cond","cond","const_params","const_params_mut","const_token","const_token","const_token","const_token","const_token","constness","content","continue_token","crate_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","default","default","default","defaultness","defaultness","defaultness","defaultness","delimiter","discriminant","dot2_token","dot2_token","dot2_token","dot_token","dot_token","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","elems","elems","elems","elems","else_branch","enum_token","enum_token","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","equivalent","equivalent","equivalent","equivalent","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","ext","extern_token","extern_token","fat_arrow_token","fields","fields","fields","fields","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","fn_token","for_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","gt_token","guard","hash","hash","hash","hash","hi","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","if_token","impl_token","impl_token","in_token","in_token","index","index","init","inputs","inputs","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","is_none","items","items","items","items","items","iter","iter_mut","label","label","label","label","label","label","leading_colon","leading_colon","leading_vert","left","left","left","len","len","len","let_token","let_token","lhs_ty","lifetime","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","limits","limits","lit","lit","lo","loop_token","lt_token","lt_token","lt_token","lt_token","lt_token","mac","mac","mac","mac","mac","mac","mac","macro_token","make_where_clause","match_token","member","member","member","method","mod_token","modifier","movability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","name","name","name","named","nested","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","op","or1_token","or2_token","output","output","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args_with","parse_body","parse_body_with","parse_file","parse_inner","parse_macro_input","parse_meta","parse_mod_style","parse_named","parse_outer","parse_quote","parse_quote_spanned","parse_str","parse_unnamed","parse_with","parse_within","parse_without_eager_brace","partial_cmp","partial_cmp","pat","pat","pat","pat","pat","pat","pat","pat","pat","path","path","path","path","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","pub_token","punctuated","qself","qself","qself","question_token","raw","receiver","receiver","reference","rename","rename","rest","return_token","rhs_ty","right","right","right","rules","segments","self_token","self_ty","semi","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","shebang","sig","sig","sig","sig","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","star_token","static_token","static_token","stmts","struct_token","struct_token","style","subpat","suffix","suffix","suffix","suffix","suffix","suffix","suffix","supertraits","then_branch","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","trait_","trait_token","trait_token","tree","tree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_token","turbofish","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","type_token","type_token","type_token","type_token","underscore_token","underscore_token","union_token","union_token","unnamed","unraw","unsafe_token","unsafety","unsafety","unsafety","unsafety","use_token","value","value","value","value","value","value","variadic","variadic","variants","variants","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","where_clause","where_token","while_token","without_plus","without_plus","without_plus","without_plus","yield_token","Cursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","equivalent","from","from","group","ident","into","into","lifetime","literal","new","new2","partial_cmp","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","Error","Lookahead1","Nothing","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","error","error","error","extend","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_str","parse_terminated","peek","peek","peek2","peek3","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Speculative","advance_to","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","empty_or_trailing","extend","extend","first","first_mut","from","from","from","from","from","from","from","from","from_iter","from_iter","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","Spanned","span","Abstract","Add","AddEq","And","AndAnd","AndEq","As","Async","At","Auto","Await","Bang","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Colon2","Comma","Const","Continue","Crate","Default","Div","DivEq","Do","Dollar","Dot","Dot2","Dot3","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Mod","Move","MulEq","Mut","Ne","Or","OrEq","OrOr","Override","Paren","Pound","Priv","Pub","Question","RArrow","Ref","Rem","RemEq","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Star","Static","Struct","Sub","SubEq","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"syn"],[3722,"syn::buffer"],[3757,"syn::ext"],[3761,"syn::parse"],[3854,"syn::parse::discouraged"],[3856,"syn::punctuated"],[4015,"syn::spanned"],[4017,"syn::token"]],"d":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","One arm of a <code>match</code> expression: <code>0...10 =&gt; { return true; }</code>.","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute like <code>#[repr(transparent)]</code>.","Conventional argument type associated with an invocation …","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A binding (equality constraint) on an associated type: …","A binding (equality constraint) on an associated type: the …","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A braced block containing Rust statements.","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","A box expression: <code>box f</code>.","A box pattern: <code>box v</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","Inclusive at the beginning and end.","A closure expression: <code>|a, b| a + b</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","A constant item: <code>const MAX: u16 = 65535</code>.","An associated constant within the definition of a trait.","An associated constant within an impl block.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>&quot;data&quot;</code>.","A crate-level visibility: <code>crate</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An enum input to a <code>proc_macro_derive</code> macro.","An equality predicate in a <code>where</code> clause (unsupported).","The <code>==</code> operator (equality)","Error returned when a Syn parser cannot parse the input …","A Rust expression.","Expr without trailing semicolon.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A single field in a struct pattern.","A field-value pair in a struct literal.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A complete file of Rust source code.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A free-standing function: …","A foreign function in an <code>extern</code> block.","An argument in a function signature: the <code>n: usize</code> in …","A for loop: <code>for pat in expr { ... }</code>.","An item within an <code>extern</code> block.","A foreign function in an <code>extern</code> block.","A macro invocation within an extern block.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A foreign type in an <code>extern</code> block: <code>type void</code>.","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","An individual generic argument to a method, like <code>T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","A glob import in a <code>use</code> item: <code>*</code>.","An expression contained within invisible delimiters.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","Inclusive at the beginning, exclusive at the end.","","A word of Rust code, which may be a keyword or legal …","A word of Rust code, which may be a keyword or legal …","A pattern that binds a new variable: …","An <code>if</code> expression with an optional <code>else</code> block: …","An impl block providing trait or associated items: …","Returned by <code>Generics::split_for_impl</code>.","An item within an impl block.","An associated constant within an impl block.","A macro invocation within an impl block.","A method within an impl block.","An associated type within an impl block.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","Things that can appear directly inside of a module or …","An item definition.","A constant item: <code>const MAX: u16 = 65535</code>.","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A free-standing function: …","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","An impl block providing trait or associated items: …","A macro invocation, which includes <code>macro_rules!</code> …","A 2.0-style declarative macro introduced by the <code>macro</code> …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A type alias: …","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A lifetime labeling a <code>for</code>, <code>while</code>, or <code>loop</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","","","A Rust lifetime: <code>&#39;a</code>.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","","","A Rust literal such as a string or integer or boolean.","A Rust literal, like the <code>&quot;new_name&quot;</code> in …","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A literal pattern: <code>0</code>.","","","A boolean literal: <code>true</code> or <code>false</code>.","","","A byte literal: <code>b&#39;f&#39;</code>.","","","A byte string literal: <code>b&quot;foo&quot;</code>.","","","A character literal: <code>&#39;a&#39;</code>.","","","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","","","An integer literal: <code>1</code> or <code>1u16</code>.","","","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","A local <code>let</code> binding: <code>let x: u64 = s.parse()?</code>.","A local (let) binding.","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro invocation, which includes <code>macro_rules!</code> …","A macro invocation within an extern block.","A macro invocation within the definition of a trait.","A macro invocation within an impl block.","A macro in the type position.","A macro in pattern position.","A 2.0-style declarative macro introduced by the <code>macro</code> …","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> …","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A trait method within the definition of a trait.","A method within an impl block.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","The <code>::&lt;&gt;</code> explicit type parameters passed to a method call: …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","Element of a compile-time attribute list.","The never type: <code>!</code>.","","","The <code>!</code> operator for logical inversion","The <code>||</code> operator (logical or)","A pattern that matches any one of a set of cases.","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A pattern in a local binding, function signature, match …","A box pattern: <code>box v</code>.","A pattern that binds a new variable: …","A literal pattern: <code>0</code>.","A macro in pattern position.","A pattern that matches any one of a set of cases.","A path pattern like <code>Color::Red</code>, optionally qualified with a","A range pattern: <code>1..=2</code>.","A reference pattern: <code>&amp;mut var</code>.","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","A type ascription pattern: <code>foo: f64</code>.","A pattern that matches any value: <code>_</code>.","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A path pattern like <code>Color::Red</code>, optionally qualified with a","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","An equality predicate in a <code>where</code> clause (unsupported).","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A range pattern: <code>1..=2</code>.","Limit types of a range, inclusive or exclusive.","A raw string like <code>r##&quot;data&quot;##</code>.","The <code>self</code> argument of an associated method, whether taken …","The <code>self</code> argument of an associated method, whether taken …","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A reference pattern: <code>&amp;mut var</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An renamed identifier imported by a <code>use</code> item: …","An array literal constructed from one repeated element: …","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","Expression with trailing semicolon.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A function signature in a trait or implementation: …","A dynamically sized slice type: <code>[T]</code>.","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A statement, usually ending in a semicolon.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","The style of a string literal, either plain quoted or a …","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A struct input to a <code>proc_macro_derive</code> macro.","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","An item declaration within the definition of a trait.","An associated constant within the definition of a trait.","A macro invocation within the definition of a trait.","A trait method within the definition of a trait.","An associated type within the definition of a trait.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A type ascription expression: <code>foo: f64</code>.","A type argument.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type alias: …","A foreign type in an <code>extern</code> block: <code>type void</code>.","An associated type within the definition of a trait.","An associated type within an impl block.","A particular type is returned.","A type ascription pattern: <code>foo: f64</code>.","A type argument.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A function argument accepted by pattern and type.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","An untagged union input to a <code>proc_macro_derive</code> macro.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A glob import in a <code>use</code> item: <code>*</code>.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","An renamed identifier imported by a <code>use</code> item: …","A suffix of an import tree in a <code>use</code> item: <code>Type as Renamed</code> …","The variadic argument of a foreign function.","An enum variant.","Tokens in expression position not interpreted by Syn.","Tokens forming an item not interpreted by Syn.","Tokens in an <code>extern</code> block not interpreted by Syn.","Tokens within the definition of a trait not interpreted by …","Tokens within an impl block not interpreted by Syn.","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","Tokens in pattern position not interpreted by Syn.","A crate-level visibility: <code>crate</code>.","A public visibility level: <code>pub</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A pattern that matches any value: <code>_</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","Attributes tagged on the variant.","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the whole struct or enum.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type being bounded","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","","","","","","","","","","","","","","Parse a set of curly braces and expose their content to …","","","","","","","","Parse a set of square brackets and expose their content to …","","A stably addressed token buffer supporting efficient …he colon in <code>Struct { x: x }</code>. If written in shorthand like …","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","","","","","","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","Data within the struct or enum.","","","","","","","","","","","","","","Explicit discriminant: <code>Variant = 1</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Value of the field.","","","","","Extension traits to provide parsing methods on foreign …","","","","Content stored in the variant.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Generics required to complete the definition.","If this path consists of a single ident, returns the ident.","","","","","","","","","","","","","","","Name of the variant.","Name of the field, if any.","","","","","","The <code>example</code> in <code>macro_rules! example { ... }</code>.","","","","","","","","","","","","","","","","","","","Name of the struct or enum.","","","","","","","","","","","","","","","","<code>(A, B)</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","","","","","","","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","","","","","","","","","","","Returns the number of fields.","","","","","","","","","","Returns an Iterator&lt;Item = &amp;LifetimeDef&gt; over the lifetime …","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeDef&gt; over the …","","","","","","","","","","","","","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","Name or index of the field.","","","","","","","","","","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","","","","","","","<code>C</code>","","","","","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","Parse the arguments to the attribute using the given …","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parse the content of a file of Rust code.","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parses the content of the attribute, consisting of the …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","Parse the body of a block as zero or more statements, …","An alternative to the primary <code>Expr::parse</code> parser (from the …","","","","","","","","","","","","Returns the identifier that begins this structured meta …","","","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","A method’s <code>self</code> receiver, such as <code>&amp;self</code> or …","","","","","","","","","","","","","","The Self type of the impl.","","","","","","","","","","","","","","","","","","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","","","","","Returns the span of this <code>Ident</codetrait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…","","","","","Statements in a blockokens representing Rust punctuation, keywords, and …","","","","","","","","","","Trait this impl implementsype of the fieldeturns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","","","","","","","","","","","","","","Visibility of the field.","","","","","","","","","","","","","","","","","","","","Visibility of the struct or enum.","","","","In some positions, types may not contain the <code>+</code> character, …","","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","Forks a parse stream so that parsing tokens out of either …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","Returns the <code>Span</code> of the next token in the parse stream, or …","The source location of the error.","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","A punctuated sequence of syntax tree nodes of type <code>T</code> …","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>+</code>","<code>+=</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>!</code>","<code>become</code>","<code>box</code>","<code>{...}</code>","<code>[...]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>::</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>/</code>","<code>/=</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>mod</code>","<code>move</code>","<code>*=</code>","<code>mut</code>","<code>!=</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(...)</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>%</code>","<code>%=</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>*</code>","<code>static</code>","<code>struct</code>","<code>-</code>","<code>-=</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,143,143,143,186,0,0,26,148,26,26,26,0,0,0,26,148,0,0,26,0,187,143,143,143,143,143,143,0,26,130,0,26,167,137,137,26,130,130,26,26,130,73,26,69,75,88,116,121,187,0,0,187,26,346,22,0,0,0,0,166,144,0,143,143,88,139,84,143,0,0,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,0,26,0,0,0,0,0,0,130,88,111,0,26,0,0,0,0,0,88,143,0,0,0,0,105,26,105,148,143,73,0,0,0,167,26,88,0,0,0,0,0,0,148,0,26,148,22,12,130,0,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,26,0,0,0,75,80,84,187,0,13,0,0,0,16,26,167,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,146,26,143,0,26,88,111,116,121,148,167,88,0,26,82,0,0,16,0,0,116,121,26,0,88,143,143,105,13,18,66,143,144,0,148,82,186,144,143,167,12,26,137,148,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,26,105,148,167,0,0,0,0,0,148,22,0,26,167,0,346,0,127,26,148,167,143,143,105,26,167,22,0,26,0,146,143,143,143,143,0,148,167,88,111,0,130,0,26,88,139,167,143,143,0,80,88,88,0,0,0,0,0,0,0,148,26,26,26,148,167,167,0,0,26,69,75,84,88,111,116,121,166,167,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,0,26,88,139,18,18,66,26,88,0,0,0,0,0,0,0,0,26,88,111,116,121,130,148,167,0,0,0,0,0,0,26,167,26,93,126,150,54,159,175,10,36,50,68,188,185,49,37,108,192,1,30,38,126,17,21,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,70,72,76,77,78,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,112,113,114,115,117,118,119,120,122,123,124,125,128,129,138,147,164,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,100,31,136,155,31,40,3,5,3,5,30,33,59,63,92,123,38,41,47,64,72,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,346,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,346,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,85,76,77,85,86,101,119,152,161,190,34,168,19,49,57,90,93,94,100,110,141,145,178,0,11,27,44,55,149,160,177,0,35,0,169,30,38,172,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,9,10,68,106,188,21,61,70,71,76,77,78,85,86,89,98,100,113,117,119,122,181,183,190,72,43,64,74,74,78,89,117,122,158,126,97,39,24,91,0,0,138,74,79,186,76,78,117,118,119,94,122,123,124,136,17,57,176,178,31,40,50,165,161,149,151,156,158,159,160,27,60,162,177,179,43,90,141,9,9,10,66,67,15,28,45,76,78,87,89,98,101,102,122,124,189,9,10,66,67,34,35,37,41,42,44,45,49,51,54,55,56,58,61,62,65,70,89,98,122,170,0,91,163,72,17,57,99,103,140,142,178,9,9,9,10,66,67,3,5,126,150,41,79,8,1,2,9,9,9,9,9,9,9,10,11,12,13,13,13,13,14,15,16,16,16,17,18,18,18,19,20,21,22,22,22,22,23,24,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,66,66,66,67,67,68,69,70,71,72,73,74,75,75,75,75,76,76,77,78,79,80,80,80,81,82,83,84,84,84,84,85,86,87,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,105,105,105,105,105,106,107,108,109,110,111,111,111,111,111,112,113,114,115,116,116,116,116,116,117,118,119,120,121,121,121,121,121,122,123,124,125,126,127,127,127,128,129,130,130,130,130,130,130,130,130,131,132,133,134,3,3,5,5,135,346,136,137,138,138,138,138,139,139,139,139,140,141,142,143,144,145,146,147,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,184,185,185,186,187,188,189,190,191,192,53,36,90,94,99,100,101,102,103,119,124,126,138,184,42,151,68,74,79,188,192,72,9,10,66,67,174,10,17,21,76,78,89,90,91,95,96,97,98,99,100,101,102,103,106,107,108,113,114,117,119,122,124,126,138,169,185,189,190,43,94,152,25,41,44,67,147,38,126,150,191,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,346,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,18,18,18,18,186,184,186,93,94,100,110,129,18,18,33,35,39,41,47,64,104,184,172,28,29,32,18,55,149,45,147,87,128,77,86,159,74,79,81,85,150,74,53,174,15,46,174,47,68,74,79,188,192,48,95,115,120,125,154,171,96,74,49,40,70,183,50,97,81,38,54,98,113,128,158,159,169,175,71,163,164,19,14,9,10,77,130,131,132,133,134,3,5,135,9,29,32,62,38,38,38,126,150,191,74,14,20,25,36,50,51,60,81,126,150,156,162,179,191,0,0,0,9,10,13,14,15,16,17,19,20,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,131,132,133,134,3,5,135,136,138,143,144,145,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,166,167,184,185,187,188,189,190,191,0,9,11,11,136,136,0,11,0,11,184,21,11,0,0,0,21,131,145,26,9,10,41,45,72,147,168,175,180,181,183,13,11,14,15,25,52,57,81,136,157,173,178,180,192,11,83,23,25,0,52,157,173,58,54,126,50,128,91,108,57,56,87,28,29,32,96,184,128,94,97,55,89,91,95,98,99,101,102,104,112,113,114,115,117,118,119,120,122,124,125,140,147,149,9,10,130,131,132,133,134,3,5,135,129,92,112,118,123,8,1,2,9,9,9,10,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,66,67,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,130,131,131,132,132,133,133,134,134,3,3,5,5,135,135,136,138,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,67,135,0,74,109,158,98,113,145,99,140,11,169,130,131,132,133,134,3,5,100,43,53,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,9,10,3,5,8,1,2,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,136,138,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,0,131,132,133,134,3,5,135,11,136,94,100,101,104,106,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,346,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,346,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,59,50,21,37,61,78,89,98,102,113,117,122,124,164,181,189,192,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,3,5,135,346,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,74,74,102,114,119,124,153,182,103,142,20,9,63,94,100,126,150,104,131,132,133,134,135,135,126,150,90,141,21,89,90,91,92,96,97,98,99,100,101,102,103,104,112,113,114,122,123,124,138,74,83,64,148,152,161,166,65,0,0,226,226,227,226,227,227,227,227,227,227,227,226,227,227,227,226,227,227,227,226,226,227,227,227,227,227,227,226,227,226,227,226,227,0,347,347,347,0,0,0,222,0,0,0,0,0,0,0,229,232,229,230,237,231,232,229,230,237,231,229,230,231,230,231,231,229,230,0,229,232,229,230,231,229,229,231,231,229,232,229,230,237,231,231,232,229,230,237,231,231,231,231,229,229,231,231,219,229,222,237,222,222,229,232,229,229,229,229,231,229,231,230,231,229,231,232,229,230,237,231,232,229,230,237,231,232,229,230,237,231,0,348,245,0,0,0,0,0,0,0,0,245,238,242,247,243,244,212,213,245,238,242,247,243,244,212,213,245,238,238,242,243,244,212,245,238,242,243,244,212,245,238,238,238,238,238,238,238,242,247,243,244,212,213,245,238,238,238,238,238,238,242,247,243,244,212,213,245,238,238,238,242,247,243,244,212,213,238,245,245,238,238,238,238,238,238,242,247,243,244,212,213,238,245,242,247,243,244,212,213,242,247,243,244,212,213,238,238,238,238,238,238,238,245,245,238,238,238,242,247,243,244,212,213,238,245,238,242,243,244,212,245,238,245,238,238,242,247,243,244,212,213,245,238,242,247,243,244,212,213,245,238,242,247,243,244,212,213,245,245,245,0,349,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,249,250,251,252,253,254,255,256,257,258,204,259,260,261,262,263,205,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,202,201,282,283,206,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,203,249,250,251,252,253,254,255,256,257,258,204,259,260,261,262,263,205,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,202,201,282,283,206,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,203,249,250,251,252,253,254,255,256,257,258,204,259,260,261,262,263,205,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,202,201,282,283,206,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,203,249,250,251,252,253,254,255,256,257,258,204,259,260,261,262,263,205,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,202,201,282,283,206,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,203,249,250,251,252,253,254,255,256,257,258,204,259,260,261,262,263,205,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,202,201,282,283,206,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,203,296,298,301,302,303,305,307,308,310,311,315,318,320,323,326,327,330,333,338,339,341,203,296,298,301,302,303,305,307,308,310,311,315,318,320,323,326,327,330,333,338,339,341,203,249,250,251,252,253,254,255,256,257,258,204,259,260,261,262,263,205,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,202,201,282,283,206,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,203,249,250,251,252,253,254,255,256,257,258,204,259,260,261,262,263,205,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,202,201,282,283,206,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,203,249,250,251,252,253,254,255,256,257,258,204,259,260,261,262,263,205,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,202,201,282,283,206,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,203,249,250,251,252,253,254,255,256,257,258,204,259,260,261,262,263,205,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,202,201,282,283,206,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,249,250,251,252,253,254,255,256,257,258,204,259,260,261,262,263,205,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,202,201,282,283,206,284,285,286,287,288,289,290,291,292,293,294,295,342,343,344,345,203,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,203,249,250,251,252,253,254,255,256,257,258,204,259,260,261,262,263,205,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,202,201,282,283,206,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,203,249,250,251,252,253,254,255,256,257,258,204,259,260,261,262,263,205,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,202,201,282,283,206,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,203,249,250,251,252,253,254,255,256,257,258,204,259,260,261,262,263,205,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,202,201,282,283,206,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,203,249,250,251,252,253,254,255,256,257,258,204,259,260,261,262,263,205,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,202,201,282,283,206,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,203,249,250,251,252,253,254,255,256,257,258,204,259,260,261,262,263,205,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,202,201,282,283,206,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345],"fc":[],"p":[[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitInt"],[15,"str"],[3,"LitFloat"],[8,"FromStr"],[6,"Result"],[3,"ImplGenerics"],[3,"Ident"],[3,"Lifetime"],[3,"Attribute"],[4,"AttrStyle"],[4,"Meta"],[3,"MetaList"],[3,"MetaNameValue"],[4,"NestedMeta"],[3,"Variant"],[4,"Fields"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Field"],[4,"Visibility"],[3,"VisPublic"],[3,"VisCrate"],[3,"VisRestricted"],[4,"Expr"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprAwait"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIndex"],[3,"ExprLet"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[4,"Member"],[3,"Index"],[3,"MethodTurbofish"],[4,"GenericMethodArgument"],[3,"FieldValue"],[3,"Label"],[3,"Arm"],[4,"RangeLimits"],[3,"Generics"],[4,"GenericParam"],[3,"TypeParam"],[3,"LifetimeDef"],[3,"ConstParam"],[3,"BoundLifetimes"],[4,"TypeParamBound"],[3,"TraitBound"],[4,"TraitBoundModifier"],[3,"WhereClause"],[4,"WherePredicate"],[3,"PredicateType"],[3,"PredicateLifetime"],[3,"PredicateEq"],[4,"Item"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemTraitAlias"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[4,"UseTree"],[3,"UsePath"],[3,"UseName"],[3,"UseRename"],[3,"UseGlob"],[3,"UseGroup"],[4,"ForeignItem"],[3,"ForeignItemFn"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ForeignItemMacro"],[4,"TraitItem"],[3,"TraitItemConst"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"TraitItemMacro"],[4,"ImplItem"],[3,"ImplItemConst"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ImplItemMacro"],[3,"Signature"],[4,"FnArg"],[3,"Receiver"],[3,"File"],[4,"Lit"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitBool"],[3,"Macro"],[4,"MacroDelimiter"],[3,"DeriveInput"],[4,"Data"],[3,"DataStruct"],[3,"DataEnum"],[3,"DataUnion"],[4,"BinOp"],[4,"UnOp"],[3,"Block"],[4,"Stmt"],[3,"Local"],[4,"Type"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Abi"],[3,"BareFnArg"],[3,"Variadic"],[4,"ReturnType"],[4,"Pat"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatOr"],[3,"PatPath"],[3,"PatRange"],[3,"PatReference"],[3,"PatRest"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatType"],[3,"PatWild"],[3,"FieldPat"],[3,"Path"],[3,"PathSegment"],[4,"PathArguments"],[4,"GenericArgument"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"QSelf"],[4,"Ordering"],[15,"bool"],[8,"AsRef"],[8,"Sized"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[3,"SelfValue"],[3,"SelfType"],[3,"Underscore"],[3,"Crate"],[3,"Extern"],[3,"Super"],[15,"usize"],[3,"Literal"],[8,"Into"],[4,"Option"],[8,"Hasher"],[3,"Iter"],[3,"IterMut"],[3,"Span"],[15,"u8"],[15,"slice"],[15,"char"],[3,"TokenStream"],[8,"Parse"],[6,"ParseStream"],[3,"TokenStream"],[8,"Parser"],[3,"Vec"],[3,"String"],[3,"TypeId"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Delimiter"],[3,"ParseBuffer"],[3,"StepCursor"],[3,"Error"],[3,"Lookahead1"],[8,"Display"],[8,"IntoIterator"],[3,"LexError"],[8,"ToTokens"],[3,"Nothing"],[3,"Punctuated"],[8,"Peek"],[8,"FnOnce"],[8,"Clone"],[3,"Pairs"],[3,"IntoPairs"],[3,"IntoIter"],[4,"Pair"],[8,"Default"],[3,"PairsMut"],[8,"Token"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Static"],[3,"Struct"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[4,"StrStyle"],[8,"IdentExt"],[8,"Speculative"],[8,"Spanned"]]},\
"termcolor":{"doc":"This crate provides a cross platform abstraction for …","t":"NNDNNNNDDDEEDNNNNDDNNDDNINLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Always","AlwaysAnsi","Ansi","Ansi256","Auto","Black","Blue","Buffer","BufferWriter","BufferedStandardStream","Color","ColorChoice","ColorSpec","Cyan","Green","Magenta","Never","NoColor","ParseColorError","Red","Rgb","StandardStream","StandardStreamLock","White","WriteColor","Yellow","ansi","as_mut_slice","as_slice","bg","bold","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","clear","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","description","dimmed","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fg","flush","flush","flush","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_str","get_mut","get_mut","get_ref","get_ref","intense","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","invalid","is_empty","is_none","is_synchronous","is_synchronous","is_synchronous","is_synchronous","is_synchronous","is_synchronous","is_synchronous","italic","len","lock","new","new","new","no_color","print","reset","reset","reset","reset","reset","reset","reset","reset","separator","set_bg","set_bold","set_color","set_color","set_color","set_color","set_color","set_color","set_color","set_dimmed","set_fg","set_intense","set_italic","set_reset","set_underline","stderr","stderr","stderr","stdout","stdout","stdout","supports_color","supports_color","supports_color","supports_color","supports_color","supports_color","supports_color","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","underline","write","write","write","write","write","write"],"q":[[0,"termcolor"]],"d":["Try very hard to emit colors. This includes emitting ANSI …","AlwaysAnsi is like Always, except it never tries to use …","Satisfies <code>WriteColor</code> using standard ANSI escape sequences.","","Try to use colors, but don’t force the issue. If the …","","","Write colored text to memory.","Writes colored buffers to stdout or stderr.","Like <code>StandardStream</code>, but does buffered writing.","The set of available colors for the terminal …","ColorChoice represents the color preferences of an end …","A color specification.","","","","Never emit colors.","Satisfies <code>WriteColor</code> but ignores all color options.","An error from parsing an invalid color specification.","","","Satisfies <code>io::Write</code> and <code>WriteColor</code>, and supports optional …","<code>StandardStreamLock</code> is a locked reference to a …","","This trait describes the behavior of writers that support …","","Create a buffer that uses ANSI escape sequences.","Return the underlying data of the buffer as a mutable …","Return the underlying data of the buffer.","Get the background color.","Get whether this is bold or not.","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>Buffer</code> with the current color preferences.","Clears this buffer.","Clears this color specification so that it has no …","","","","","","","","","","","Get whether this is dimmed or not.","","","","","","","","","Get the foreground color.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Return a mutable reference to the inner writer.","Return a mutable reference to the inner writer.","Return a reference to the inner writer.","Return a reference to the inner writer.","Get whether this is intense or not.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume this buffer and return the underlying raw data.","Consume this <code>NoColor</code> value and return the inner writer.","Consume this <code>Ansi</code> value and return the inner writer.","Return the string that couldn’t be parsed as a valid …","Returns true if and only if this buffer is empty.","Returns true if this color specification has no colors or …","Returns true if and only if the underlying writer must …","","","","","","","Get whether this is italic or not.","Returns the length of this buffer in bytes.","Lock the underlying writer.","Create a new writer that satisfies <code>WriteColor</code> but drops …","Create a new writer that satisfies <code>WriteColor</code> using …","Create a new color specification that has no colors or …","Create a buffer that drops all color information.","Prints the contents of the given buffer.","Reset the current color settings to their original …","","","","","","","Get whether reset is enabled or not.","If set, the separator given is printed between buffers. By …","Set the background color.","Set whether the text is bolded or not.","Set the color settings of the writer.","","","","","","","Set whether the text is dimmed or not.","Set the foreground color.","Set whether the text is intense or not.","Set whether the text is italicized or not.","Set whether to reset the terminal whenever color settings …","Set whether the text is underlined or not.","Create a new <code>StandardStream</code> with the given color …","Create a new <code>BufferedStandardStream</code> with the given color …","Create a new <code>BufferWriter</code> that writes to stderr with the …","Create a new <code>StandardStream</code> with the given color …","Create a new <code>BufferedStandardStream</code> with the given color …","Create a new <code>BufferWriter</code> that writes to stdout with the …","Returns true if and only if the underlying writer supports …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get whether this is underline or not.","","","","","",""],"i":[9,9,0,5,9,5,5,0,0,0,0,0,0,5,5,5,9,0,0,5,5,0,0,5,0,5,1,1,1,4,4,12,14,15,8,1,17,18,9,4,5,10,12,14,15,8,1,17,18,9,4,5,10,8,1,4,9,4,5,10,9,4,5,10,4,10,4,9,4,5,10,9,4,5,10,4,12,14,15,1,17,18,9,4,5,10,10,12,14,15,8,1,17,18,9,4,5,10,5,17,18,17,18,4,12,14,15,8,1,17,18,9,4,5,10,1,17,18,10,1,4,26,12,14,15,1,17,18,4,1,12,17,18,4,1,8,26,12,14,15,1,17,18,4,8,4,4,26,12,14,15,1,17,18,4,4,4,4,4,4,12,15,8,12,15,8,26,12,14,15,1,17,18,9,4,5,10,10,12,14,15,8,1,17,18,9,4,5,10,12,14,15,8,1,17,18,9,4,5,10,12,14,15,8,1,17,18,9,4,5,10,4,12,14,15,1,17,18],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[1,[[3,[2]]]],[1,[[3,[2]]]],[4,[[6,[5]]]],[4,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,1],[1],[4],[9,9],[4,4],[5,5],[10,10],[[]],[[]],[[]],[[]],[[],4],[10,11],[4,7],[[9,9],7],[[4,4],7],[[5,5],7],[[10,10],7],[[],7],[[],7],[[],7],[[],7],[4,[[6,[5]]]],[12,13],[14,13],[15,13],[1,13],[[[17,[16]]],13],[[[18,[16]]],13],[[9,19],20],[[4,19],20],[[5,19],20],[[10,19],20],[[10,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11,[[21,[5,10]]]],[[[17,[16]]],16],[[[18,[16]]],16],[[[17,[16]]],16],[[[18,[16]]],16],[4,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[22,[2]]]],[[[17,[16]]],16],[[[18,[16]]],16],[10,11],[1,7],[4,7],[[],7],[12,7],[14,7],[15,7],[1,7],[[[17,[16]]],7],[[[18,[16]]],7],[4,7],[1,23],[12,14],[16,[[17,[16]]]],[16,[[18,[16]]]],[[],4],[[],1],[[8,1],13],[[],13],[12,13],[14,13],[15,13],[1,13],[[[17,[16]]],13],[[[18,[16]]],13],[4,7],[[8,[6,[[22,[2]]]]]],[[4,[6,[5]]],4],[[4,7],4],[4,13],[[12,4],13],[[14,4],13],[[15,4],13],[[1,4],13],[[[17,[16]],4],13],[[[18,[16]],4],13],[[4,7],4],[[4,[6,[5]]],4],[[4,7],4],[[4,7],4],[[4,7],4],[[4,7],4],[9,12],[9,15],[9,8],[9,12],[9,15],[9,8],[[],7],[12,7],[14,7],[15,7],[1,7],[[[17,[16]]],7],[[[18,[16]]],7],[[]],[[]],[[]],[[]],[[],24],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[4,7],[[12,[3,[2]]],[[13,[23]]]],[[14,[3,[2]]],[[13,[23]]]],[[15,[3,[2]]],[[13,[23]]]],[[1,[3,[2]]],[[13,[23]]]],[[[17,[16]],[3,[2]]],[[13,[23]]]],[[[18,[16]],[3,[2]]],[[13,[23]]]]],"c":[],"p":[[3,"Buffer"],[15,"u8"],[15,"slice"],[3,"ColorSpec"],[4,"Color"],[4,"Option"],[15,"bool"],[3,"BufferWriter"],[4,"ColorChoice"],[3,"ParseColorError"],[15,"str"],[3,"StandardStream"],[6,"Result"],[3,"StandardStreamLock"],[3,"BufferedStandardStream"],[8,"Write"],[3,"NoColor"],[3,"Ansi"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"Vec"],[15,"usize"],[3,"String"],[3,"TypeId"],[8,"WriteColor"]]},\
"time":{"doc":"Feature flags","t":"NNSDNDCNNSDNNNSSSSSSSSSSNNNESNNDDGSNNNNDNSSDSNESLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDNDNDNENENDNNNNENNDNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMIIKKKKKKKKKKKKKKKKENNNNNNNNENNNNNNNNNNNNENNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAFFFLLLLLLLLLLLLLLADNDNNNDDNNNNNNDNNDENNNNDDDNNDEDDNNNNNNDENNNNDEDEDEDENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLNDSSSSSNENNGENNDNNNSNENSNSSNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMIOOOOOFFFAFNENLLLLLLLLFLFLLLL","n":["April","August","DAY","Date","December","Duration","Error","February","Friday","HOUR","Instant","January","July","June","MAX","MAX","MAX","MICROSECOND","MIDNIGHT","MILLISECOND","MIN","MIN","MIN","MINUTE","March","May","Monday","Month","NANOSECOND","November","October","OffsetDateTime","PrimitiveDateTime","Result","SECOND","Saturday","September","Sunday","Thursday","Time","Tuesday","UNIX_EPOCH","UTC","UtcOffset","WEEK","Wednesday","Weekday","ZERO","abs","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_hms","as_hms","as_hms","as_hms_micro","as_hms_micro","as_hms_milli","as_hms_milli","as_hms_nano","as_hms_nano","as_ref","as_seconds_f32","as_seconds_f64","assume_offset","assume_utc","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add_std","checked_div","checked_mul","checked_seconds_f32","checked_seconds_f64","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub_std","checked_to_offset","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","convert","current_local_offset","date","date","day","day","day","days","default","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","elapsed","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","ext","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","format","format","format","format","format","format_description","format_into","format_into","format_into","format_into","format_into","formatting","from","from","from","from","from","from","from","from","from","from","from","from_calendar_date","from_hms","from_hms","from_hms_micro","from_hms_milli","from_hms_nano","from_iso_week_date","from_julian_day","from_ordinal_date","from_str","from_str","from_unix_timestamp","from_unix_timestamp_nanos","from_whole_seconds","hash","hash","hash","hash","hash","hash","hash","hash","hash","hour","hour","hour","hours","into","into","into","into","into","into","into","into","into","into_inner","is_negative","is_negative","is_positive","is_positive","is_utc","is_zero","iso_week","iso_week","iso_week","local_offset_at","macros","metadata","metadata","metadata","metadata","metadata","metadata","metadata","microsecond","microsecond","microsecond","microseconds","midnight","millisecond","millisecond","millisecond","milliseconds","minute","minute","minute","minutes","minutes_past_hour","monday_based_week","monday_based_week","monday_based_week","month","month","month","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","nanosecond","nanosecond","nanosecond","nanoseconds","neg","neg","new","new","next","next","next_day","next_occurrence","now","now_local","now_utc","nth_next","nth_next","nth_next_occurrence","nth_prev","nth_prev","nth_prev_occurrence","number_days_from_monday","number_days_from_sunday","number_from_monday","number_from_sunday","offset","ordinal","ordinal","ordinal","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","prev_occurrence","previous","previous","previous_day","replace_date","replace_date","replace_date_time","replace_day","replace_day","replace_day","replace_hour","replace_hour","replace_hour","replace_microsecond","replace_microsecond","replace_microsecond","replace_millisecond","replace_millisecond","replace_millisecond","replace_minute","replace_minute","replace_minute","replace_month","replace_month","replace_month","replace_nanosecond","replace_nanosecond","replace_nanosecond","replace_offset","replace_second","replace_second","replace_second","replace_time","replace_time","replace_year","replace_year","replace_year","saturating_add","saturating_add","saturating_add","saturating_add","saturating_mul","saturating_seconds_f32","saturating_seconds_f64","saturating_sub","saturating_sub","saturating_sub","saturating_sub","second","second","second","seconds","seconds_f32","seconds_f64","seconds_past_minute","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","subsec_microseconds","subsec_milliseconds","subsec_nanoseconds","sum","sum","sunday_based_week","sunday_based_week","sunday_based_week","time","time","time_fn","to_calendar_date","to_calendar_date","to_calendar_date","to_hms","to_hms_micro","to_hms_milli","to_hms_nano","to_iso_week_date","to_iso_week_date","to_iso_week_date","to_julian_day","to_julian_day","to_julian_day","to_offset","to_ordinal_date","to_ordinal_date","to_ordinal_date","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unix_timestamp","unix_timestamp_nanos","unsigned_abs","util","weekday","weekday","weekday","weeks","whole_days","whole_hours","whole_hours","whole_microseconds","whole_milliseconds","whole_minutes","whole_minutes","whole_nanoseconds","whole_seconds","whole_seconds","whole_weeks","with_hms","with_hms_micro","with_hms_milli","with_hms_nano","with_time","year","year","year","Day","Hour","Microsecond","Millisecond","Minute","Nanosecond","Second","Week","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","per","per","per","per","per","per","per","per","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ComponentRange","ComponentRange","ConversionRange","ConversionRange","DifferentVariant","DifferentVariant","Error","Expected","Format","Format","IndeterminateOffset","IndeterminateOffset","InsufficientTypeInformation","InvalidComponent","InvalidComponentName","InvalidFormatDescription","InvalidFormatDescription","InvalidModifier","InvalidVariant","InvalidVariant","MissingComponentName","MissingRequiredModifier","NotSupported","StdIo","UnclosedOpeningBracket","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","into","into","into","into","into","into","into","into","is_conditional","name","source","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","context","index","index","index","index","index","index","index","name","name","value","what","what","NumericalDuration","NumericalStdDuration","days","hours","microseconds","milliseconds","minutes","nanoseconds","seconds","std_days","std_hours","std_microseconds","std_milliseconds","std_minutes","std_nanoseconds","std_seconds","std_weeks","weeks","Component","Component","Component","Compound","Compound","Day","End","First","First","FormatItem","Hour","Ignore","Literal","Literal","Minute","Month","OffsetHour","OffsetMinute","OffsetSecond","Optional","Optional","Ordinal","OwnedFormatItem","Period","Second","Subsecond","UnixTimestamp","WeekNumber","Weekday","Year","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","modifier","parse","parse_borrowed","parse_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","well_known","Day","Eight","End","Five","Four","Full","Hour","Ignore","Iso","LastTwo","Long","Long","Microsecond","Millisecond","Minute","Monday","Monday","Month","MonthRepr","Nanosecond","Nine","None","Numerical","OffsetHour","OffsetMinute","OffsetSecond","One","OneOrMore","Ordinal","Padding","Period","Second","Second","Seven","Short","Short","Six","Space","Subsecond","SubsecondDigits","Sunday","Sunday","Three","Two","UnixTimestamp","UnixTimestampPrecision","WeekNumber","WeekNumberRepr","Weekday","WeekdayRepr","Year","YearRepr","Zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","case_sensitive","case_sensitive","case_sensitive","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","digits","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_12_hour_clock","is_uppercase","iso_week_based","one_indexed","padding","padding","padding","padding","padding","padding","padding","padding","padding","padding","padding","precision","repr","repr","repr","repr","sign_is_mandatory","sign_is_mandatory","sign_is_mandatory","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Iso8601","Rfc2822","Rfc3339","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","into","into","into","iso8601","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Calendar","Config","DATE","DATE_TIME","DATE_TIME_OFFSET","DEFAULT","DEFAULT","Date","DateKind","DateTime","DateTimeOffset","EncodedConfig","FormattedComponents","Hour","Hour","Iso8601","Minute","Minute","None","OFFSET","Offset","OffsetPrecision","Ordinal","PARSING","Second","TIME","TIME_OFFSET","Time","TimeOffset","TimePrecision","Week","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","encode","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","set_date_kind","set_formatted_components","set_offset_precision","set_time_precision","set_use_separators","set_year_is_six_digits","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","decimal_digits","decimal_digits","decimal_digits","Formattable","date","datetime","format_description","offset","time","days_in_year","days_in_year_month","is_leap_year","local_offset","weeks_in_year","Sound","Soundness","Unsound","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","get_soundness","into","set_soundness","to_owned","try_from","try_into","type_id"],"q":[[0,"time"],[563,"time::convert"],[667,"time::error"],[822,"time::error::InvalidFormatDescription"],[835,"time::ext"],[853,"time::format_description"],[944,"time::format_description::modifier"],[1377,"time::format_description::well_known"],[1420,"time::format_description::well_known::iso8601"],[1518,"time::format_description::well_known::iso8601::TimePrecision"],[1521,"time::formatting"],[1522,"time::macros"],[1527,"time::util"],[1532,"time::util::local_offset"]],"d":["","","Equivalent to <code>1.days()</code>.","Date in the proleptic Gregorian calendar.","","A span of time with nanosecond precision.","","","","Equivalent to <code>1.hours()</code>.","A measurement of a monotonically non-decreasing clock. …","","","","The maximum valid <code>Date</code>.","The maximum possible duration. Adding any positive …","The largest value that can be represented by …","Equivalent to <code>1.microseconds()</code>.","Create a <code>Time</code> that is exactly midnight.","Equivalent to <code>1.milliseconds()</code>.","The minimum valid <code>Date</code>.","The minimum possible duration. Adding any negative …","The smallest value that can be represented by …","Equivalent to <code>1.minutes()</code>.","","","","Months of the year.","Equivalent to <code>1.nanoseconds()</code>.","","","A <code>PrimitiveDateTime</code> with a <code>UtcOffset</code>.","Combined date and time.","An alias for <code>std::result::Result</code> with a generic error from …","Equivalent to <code>1.seconds()</code>.","","","","","The clock time within a given date. Nanosecond precision.","","Midnight, 1 January, 1970 (UTC).","A <code>UtcOffset</code> that is UTC.","An offset from UTC.","Equivalent to <code>1.weeks()</code>.","","Days of the week.","Equivalent to <code>0.seconds()</code>.","Get the absolute value of the duration.","","","","","","Panics","","","","","Add the sub-day time of the <code>Duration</code> to the <code>Time</code>. Wraps on …","Add the sub-day time of the <code>std::time::Duration</code> to the <code>Time</code>…","","","","","","","","","","","","","Get the clock hour, minute, and second.","Get the clock hour, minute, and second.","Obtain the UTC offset as its hours, minutes, and seconds. …","Get the clock hour, minute, second, and microsecond.","Get the clock hour, minute, second, and microsecond.","Get the clock hour, minute, second, and millisecond.","Get the clock hour, minute, second, and millisecond.","Get the clock hour, minute, second, and nanosecond.","Get the clock hour, minute, second, and nanosecond.","","Get the number of fractional seconds in the duration.","Get the number of fractional seconds in the duration.","Assuming that the existing <code>PrimitiveDateTime</code> represents a …","Assuming that the existing <code>PrimitiveDateTime</code> represents a …","","","","","","","","","","","","","","","","","","","","Computes <code>self + duration</code>, returning <code>None</code> if an overflow …","Computes <code>self + rhs</code>, returning <code>None</code> if an overflow …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …","Computes <code>self + duration</code>, returning <code>None</code> if an overflow …","Computes <code>self + duration</code>, returning <code>None</code> if an overflow …","Computes <code>self + duration</code>, returning <code>None</code> if an overflow …","Computes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code> or if the …","Computes <code>self * rhs</code>, returning <code>None</code> if an overflow …","Creates a new <code>Duration</code> from the specified number of seconds","Creates a new <code>Duration</code> from the specified number of seconds","Computes <code>self - duration</code>, returning <code>None</code> if an overflow …","Computes <code>self - rhs</code>, returning <code>None</code> if an overflow …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …","Computes <code>self - duration</code>, returning <code>None</code> if an overflow …","Computes <code>self - duration</code>, returning <code>None</code> if an overflow …","Computes <code>self - duration</code>, returning <code>None</code> if an overflow …","Convert the <code>OffsetDateTime</code> from the current <code>UtcOffset</code> to …","","","","","","","","","","","","","","","","","","","","","","","","","","Conversion between units of time.","Attempt to obtain the system’s current UTC offset. If …","Get the <code>Date</code> in the stored offset.","Get the <code>Date</code> component of the <code>PrimitiveDateTime</code>.","Get the day of the month.","Get the day of the date in the stored offset.","Get the day of the date.","Create a new <code>Duration</code> with the given number of days. …","","","","","","","","","","","","","","","","","","","","Returns the amount of time elapsed since this instant was …","","","","","","","","","","","","","","","","","","","","","","Various error types returned by methods in the time crate.","Extension traits.","","","","","","","","","","","","","","","","","","","","","","","","","Format the <code>Date</code> using the provided format description.","Format the <code>OffsetDateTime</code> using the provided format …","Format the <code>PrimitiveDateTime</code> using the provided format …","Format the <code>Time</code> using the provided format description.","Format the <code>UtcOffset</code> using the provided format description.","Description of how types should be formatted and parsed.","Format the <code>Date</code> using the provided format description.","Format the <code>OffsetDateTime</code> using the provided format …","Format the <code>PrimitiveDateTime</code> using the provided format …","Format the <code>Time</code> using the provided format description.","Format the <code>UtcOffset</code> using the provided format description.","Formatting for various types.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Attempt to create a <code>Date</code> from the year, month, and day.","Attempt to create a <code>Time</code> from the hour, minute, and second.","Create a <code>UtcOffset</code> representing an offset by the number of …","Attempt to create a <code>Time</code> from the hour, minute, second, …","Attempt to create a <code>Time</code> from the hour, minute, second, …","Attempt to create a <code>Time</code> from the hour, minute, second, …","Attempt to create a <code>Date</code> from the ISO year, week, and …","Create a <code>Date</code> from the Julian day.","Attempt to create a <code>Date</code> from the year and ordinal day …","","","Create an <code>OffsetDateTime</code> from the provided Unix timestamp. …","Construct an <code>OffsetDateTime</code> from the provided Unix …","Create a <code>UtcOffset</code> representing an offset by the number of …","","","","","","","","","","Get the clock hour in the stored offset.","Get the clock hour.","Get the clock hour.","Create a new <code>Duration</code> with the given number of hours. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Obtain the inner <code>std::time::Instant</code>.","Check if a duration is negative.","Check if the offset is negative, or west of UTC.","Check if a duration is positive.","Check if the offset is positive, or east of UTC.","Check if the offset is exactly UTC.","Check if a duration is exactly zero.","Get the ISO week number.","Get the ISO week number of the date in the stored offset.","Get the ISO week number.","Attempt to obtain the system’s UTC offset at a known …","Macros to construct statically known values.","","","","","","","","Get the microseconds within the second in the stored …","Get the microseconds within the second.","Get the microseconds within the second.","Create a new <code>Duration</code> with the given number of …","Create a <code>PrimitiveDateTime</code> using the existing date. The …","Get the milliseconds within the second in the stored …","Get the milliseconds within the second.","Get the milliseconds within the second.","Create a new <code>Duration</code> with the given number of …","Get the minute within the hour in the stored offset.","Get the minute within the hour.","Get the minute within the hour.","Create a new <code>Duration</code> with the given number of minutes. …","Obtain the number of minutes past the hour the offset is …","Get the week number where week 1 begins on the first …","Get the week number where week 1 begins on the first …","Get the week number where week 1 begins on the first …","Get the month.","Get the month of the date in the stored offset.","Get the month of the date.","","","","","","","","","","","","","","","","","Get the nanoseconds within the second in the stored offset.","Get the nanoseconds within the second.","Get the nanoseconds within the second.","Create a new <code>Duration</code> with the given number of nanoseconds.","","","Create a new <code>Duration</code> with the provided seconds and …","Create a new <code>PrimitiveDateTime</code> from the provided <code>Date</code> and …","Get the next month.","Get the next weekday.","Get the next calendar date.","Calculates the first occurrence of a weekday that is …","Returns an <code>Instant</code> corresponding to “now”.","Attempt to create a new <code>OffsetDateTime</code> with the current …","Create a new <code>OffsetDateTime</code> with the current date and time …","Get n-th next month.","Get n-th next day.","Calculates the <code>n</code>th occurrence of a weekday that is …","Get n-th previous month.","Get n-th previous day.","Calculates the <code>n</code>th occurrence of a weekday that is …","Get the zero-indexed number of days from Monday.","Get the zero-indexed number of days from Sunday.","Get the one-indexed number of days from Monday.","Get the one-indexed number of days from Sunday.","Get the <code>UtcOffset</code>.","Get the day of the year.","Get the day of the year of the date in the stored offset.","Get the day of the year.","","","","","","","","","","","Calculates the first occurrence of a weekday that is …","Get the previous month.","Get the previous weekday.","Get the previous calendar date.","Replace the date, which is assumed to be in the stored …","Replace the date, preserving the time.","Replace the date and time, which are assumed to be in the …","Replace the day of the month.","Replace the day of the month.","Replace the day of the month.","Replace the clock hour.","Replace the clock hour.","Replace the clock hour.","Replace the microseconds within the second.","Replace the microseconds within the second.","Replace the microseconds within the second.","Replace the milliseconds within the second.","Replace the milliseconds within the second.","Replace the milliseconds within the second.","Replace the minutes within the hour.","Replace the minutes within the hour.","Replace the minutes within the hour.","Replace the month of the year.","Replace the month of the year.","Replace the month of the year.","Replace the nanoseconds within the second.","Replace the nanoseconds within the second.","Replace the nanoseconds within the second.","Replace the offset. The date and time components remain …","Replace the seconds within the minute.","Replace the seconds within the minute.","Replace the seconds within the minute.","Replace the time, which is assumed to be in the stored …","Replace the time, preserving the date.","Replace the year. The month and day will be unchanged.","Replace the year. The month and day will be unchanged.","Replace the year. The month and day will be unchanged.","Computes <code>self + duration</code>, saturating value on overflow.","Computes <code>self + rhs</code>, saturating if an overflow occurred.","Computes <code>self + duration</code>, saturating value on overflow.","Computes <code>self + duration</code>, saturating value on overflow.","Computes <code>self * rhs</code>, saturating if an overflow occurred.","Creates a new <code>Duration</code> from the specified number of seconds","Creates a new <code>Duration</code> from the specified number of seconds","Computes <code>self - duration</code>, saturating value on overflow.","Computes <code>self - rhs</code>, saturating if an overflow occurred.","Computes <code>self - duration</code>, saturating value on overflow.","Computes <code>self - duration</code>, saturating value on overflow.","Get the second within the minute in the stored offset.","Get the second within the minute.","Get the second within the minute.","Create a new <code>Duration</code> with the given number of seconds.","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Obtain the number of seconds past the minute the offset is …","","","","","","","Panics","","Panics","","","","","","","","Subtract two <code>Time</code>s, returning the <code>Duration</code> between. This …","Subtract the sub-day time of the <code>Duration</code> from the <code>Time</code>. …","Subtract the sub-day time of the <code>std::time::Duration</code> from …","","","","","","","","","","","","","Get the number of microseconds past the number of whole …","Get the number of milliseconds past the number of whole …","Get the number of nanoseconds past the number of whole …","","","Get the week number where week 1 begins on the first …","Get the week number where week 1 begins on the first …","Get the week number where week 1 begins on the first …","Get the <code>Time</code> in the stored offset.","Get the <code>Time</code> component of the <code>PrimitiveDateTime</code>.","Runs a closure, returning the duration of time it took to …","Get the year, month, and day.","Get the year, month, and day.","Get the year, month, and day.","Get the clock hour, minute, and second.","Get the clock hour, minute, second, and microsecond.","Get the clock hour, minute, second, and millisecond.","Get the clock hour, minute, second, and nanosecond.","Get the ISO 8601 year, week number, and weekday.","Get the ISO 8601 year, week number, and weekday.","Get the ISO 8601 year, week number, and weekday.","Get the Julian day for the date.","Get the Julian day for the date. The time is not taken …","Get the Julian day for the date. The time is not taken …","Convert the <code>OffsetDateTime</code> from the current <code>UtcOffset</code> to …","Get the year and ordinal day number.","Get the year and ordinal day number.","Get the year and ordinal day number.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the Unix timestamp.","Get the Unix timestamp in nanoseconds.","Convert the existing <code>Duration</code> to a <code>std::time::Duration</code> and …","Utility functions.","Get the weekday.","Get the weekday of the date in the stored offset.","Get the weekday.","Create a new <code>Duration</code> with the given number of weeks. …","Get the number of whole days in the duration.","Get the number of whole hours in the duration.","Obtain the number of whole hours the offset is from UTC. A …","Get the number of whole microseconds in the duration.","Get the number of whole milliseconds in the duration.","Get the number of whole minutes in the duration.","Obtain the number of whole minutes the offset is from UTC. …","Get the number of nanoseconds in the duration.","Get the number of whole seconds in the duration.","Obtain the number of whole seconds the offset is from UTC. …","Get the number of whole weeks in the duration.","Attempt to create a <code>PrimitiveDateTime</code> using the existing …","Attempt to create a <code>PrimitiveDateTime</code> using the existing …","Attempt to create a <code>PrimitiveDateTime</code> using the existing …","Attempt to create a <code>PrimitiveDateTime</code> using the existing …","Create a <code>PrimitiveDateTime</code> using the existing date and the …","Get the year of the date.","Get the year of the date in the stored offset.","Get the year of the date.","A unit of time representing exactly one day.","A unit of time representing exactly one hour.","A unit of time representing exactly one microsecond.","A unit of time representing exactly one millisecond.","A unit of time representing exactly one minute.","A unit of time representing exactly one nanosecond.","A unit of time representing exactly one second.","A unit of time representing exactly one week.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Obtain the number of times <code>Nanosecond</code> can fit into <code>T</code>. If <code>T</code> …","Obtain the number of times <code>Microsecond</code> can fit into <code>T</code>. If <code>T</code>…","Obtain the number of times <code>Millisecond</code> can fit into <code>T</code>. If <code>T</code>…","Obtain the number of times <code>Second</code> can fit into <code>T</code>. If <code>T</code> is …","Obtain the number of times <code>Minute</code> can fit into <code>T</code>. If <code>T</code> is …","Obtain the number of times <code>Hour</code> can fit into <code>T</code>. If <code>T</code> is …","Obtain the number of times <code>Day</code> can fit into <code>T</code>. If <code>T</code> is …","Obtain the number of times <code>Week</code> can fit into <code>T</code>. If <code>T</code> is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An error type indicating that a component provided to a …","","An error type indicating that a conversion failed because …","","An error type indicating that a <code>TryFrom</code> call failed …","","A unified error type for anything returned by a method in …","Something was expected, but not found.","An error occurred when formatting.","","The system’s UTC offset could not be determined at the …","","The type being formatted does not contain sufficient …","The component named has a value that cannot be formatted …","A component name is not valid.","The format description provided was not valid.","","A modifier is not valid.","An error type indicating that a <code>FromStr</code> call failed …","","A component name is missing.","A required modifier is missing.","Certain behavior is not supported in the given context.","A value of <code>std::io::Error</code> was returned internally.","There was a bracket pair that was opened but not closed.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether the value’s permitted range is conditional, i.e. …","Obtain the name of the component whose value was out of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The context in which the behavior is not supported.","The zero-based index of the opening bracket.","The zero-based index the component name starts at.","The zero-based index the modifier starts at.","The zero-based index where the component name should start.","The zero-based index of the component.","The zero-based index the item was expected to be found at.","The zero-based index the error occurred at.","The name of the invalid component name.","The name of the modifier that is missing.","The value of the invalid modifier.","What was expected to be present, but wasn’t.","The behavior that is not supported.","Create <code>Duration</code>s from numeric literals.","Create <code>std::time::Duration</code>s from numeric literals.","Create a <code>Duration</code> from the number of days.","Create a <code>Duration</code> from the number of hours.","Create a <code>Duration</code> from the number of microseconds.","Create a <code>Duration</code> from the number of milliseconds.","Create a <code>Duration</code> from the number of minutes.","Create a <code>Duration</code> from the number of nanoseconds.","Create a <code>Duration</code> from the number of seconds.","Create a <code>std::time::Duration</code> from the number of days.","Create a <code>std::time::Duration</code> from the number of hours.","Create a <code>std::time::Duration</code> from the number of …","Create a <code>std::time::Duration</code> from the number of …","Create a <code>std::time::Duration</code> from the number of minutes.","Create a <code>std::time::Duration</code> from the number of …","Create a <code>std::time::Duration</code> from the number of seconds.","Create a <code>std::time::Duration</code> from the number of weeks.","Create a <code>Duration</code> from the number of weeks.","A component of a larger format description.","A minimal representation of a single non-literal item.","A minimal representation of a single non-literal item.","A series of literals or components that collectively form …","A series of literals or components that collectively form …","Day of the month.","The end of input. Parsing this component will fail if …","A series of <code>FormatItem</code>s where, when parsing, the first …","A series of <code>FormatItem</code>s where, when parsing, the first …","A complete description of how to format and parse a type.","Hour of the day.","A number of bytes to ignore when parsing. This has no …","Bytes that are formatted as-is.","Bytes that are formatted as-is.","Minute within the hour.","Month of the year.","Hour of the UTC offset.","Minute within the hour of the UTC offset.","Second within the minute of the UTC offset.","A <code>FormatItem</code> that may or may not be present when parsing. …","A <code>FormatItem</code> that may or may not be present when parsing. …","Ordinal day of the year.","A complete description of how to format and parse a type.","AM/PM part of the time.","Second within the minute.","Subsecond within the second.","A Unix timestamp.","Week within the year.","Day of the week.","Year of the date.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Various modifiers for components.","Parse a sequence of items from the format description.","Parse a sequence of items from the format description.","Parse a sequence of items from the format description.","","","","","","","","","","","","","","","Well-known formats, typically standards.","Day of the month.","Exactly eight digits.","The end of input.","Exactly five digits.","Exactly four digits.","The full value of the year.","Hour of the day.","Ignore some number of bytes.","Week 1 is the week that contains January 4.","Only the last two digits of the year.","The long form of the month name (e.g. “January”).","The long form of the weekday (e.g. “Monday”).","Microseconds since the Unix epoch.","Milliseconds since the Unix epoch.","Minute within the hour.","A numerical representation using Monday as the first day …","Week 1 begins on the first Monday of the calendar year.","Month of the year.","The representation of a month.","Nanoseconds since the Unix epoch.","Exactly nine digits.","There is no padding. This can result in a width below the …","The number of the month (January is 1, December is 12).","Hour of the UTC offset.","Minute within the hour of the UTC offset.","Second within the minute of the UTC offset.","Exactly one digit.","Any number of digits (up to nine) that is at least one. …","Ordinal day of the year.","Type of padding to ensure a minimum width.","AM/PM part of the time.","Second within the minute.","Seconds since the Unix epoch.","Exactly seven digits.","The short form of the month name (e.g. “Jan”).","The short form of the weekday (e.g. “Mon”).","Exactly six digits.","A space character (<code> </code>) should be used as padding.","Subsecond within the second.","The number of digits present in a subsecond representation.","A numerical representation using Sunday as the first day …","Week 1 begins on the first Sunday of the calendar year.","Exactly three digits.","Exactly two digits.","A Unix timestamp.","The precision of a Unix timestamp.","Week within the year.","The representation used for the week number.","Day of the week.","The representation used for the day of the week.","Year of the date.","The representation used for a year value.","A zero character (<code>0</code>) should be used as padding.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Is the value case sensitive when parsing?","Is the value case sensitive when parsing?","Is the value case sensitive when parsing?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an instance of <code>Ignore</code> with the provided number of …","The number of bytes to ignore.","Creates a modifier that indicates the value is padded with …","","","Creates an instance of this type that indicates the value …","","","Creates a modifier that indicates the value is padded with …","","","Creates a modifier that indicates the value uses the <code>Long</code> …","","Creates a modifier that indicates that the value is padded …","","","Creates a modifier that indicates the value uses the <code>Full</code> …","","","Creates a modifier that indicates the value is padded with …","","Creates a modifier that indicates the value is padded with …","","Creates a modifier that indicates the value uses the …","","Creates a modifier that indicates the value is padded with …","","","Creates a modifier that indicates the stringified value …","Creates a modifier that indicates the value only uses a …","","Creates a modifier that indicates the value is padded with …","","","Creates a modifier that indicates the value is padded with …","","","Creates a modifier that indicates the value represents the …","","Creates a modifier used to represent the end of input.","","How many digits are present in the component?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is the hour displayed using a 12 or 24-hour clock?","Is the period uppercase or lowercase?","Whether the value is based on the ISO week number or the …","When using a numerical representation, should it be zero …","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The precision of the timestamp.","What form of representation should be used?","What form of representation should be used?","What kind of representation should be used?","What kind of representation should be used?","Whether the <code>+</code> sign is present when a positive year …","Whether the <code>+</code> sign is present on positive values.","Whether the <code>+</code> sign must be present for a non-negative …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The format described in ISO 8601.","The format described in RFC 2822.","The format described in RFC 3339.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The format described in ISO 8601.","","","","","","","","","","","","","Use the year-month-day format.","Configuration for <code>Iso8601</code>.","An <code>Iso8601</code> that handles only the date, but is otherwise …","An <code>Iso8601</code> that handles the date and time, but is …","An <code>Iso8601</code> that handles the date, time, and UTC offset. …","An <code>Iso8601</code> with the default configuration.","A configuration for the <code>Iso8601</code> format.","Format only the date.","Which format to use for the date.","Format the date and time.","Format the date, time, and UTC offset.","An encoded <code>Config</code> that can be used as a const parameter to …","Which components to format.","Format the hour only. Minutes, seconds, and nanoseconds …","Format only the offset hour. Requires the offset minute to …","The format described in ISO 8601.","Format the hour and minute. Seconds and nanoseconds will …","Format both the offset hour and minute.","The configuration can only be used for parsing. Using this …","An <code>Iso8601</code> that handles only the UTC offset, but is …","Format only the UTC offset.","The precision for the UTC offset.","Use the week-ordinal format.","An <code>Iso8601</code> that can only be used for parsing. Using this …","Format the hour, minute, and second. Nanoseconds will be …","An <code>Iso8601</code> that handles only the time, but is otherwise …","An <code>Iso8601</code> that handles the time and UTC offset, but is …","Format only the time.","Format the time and UTC offset.","The precision and number of decimal digits present for the …","Use the year-week-weekday format.","","","","","","","","","","","","","","","","","","","Encode the configuration, permitting it to be used as a …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set the format used for the date.","Set whether the format the date, time, and/or UTC offset.","Set the precision for the UTC offset.","Set the precision and number of decimal digits present for …","Set whether the format contains separators (such as <code>-</code> or <code>:</code>…","Set whether the year is six digits.","","","","","","","","","","","","","","","","","","","","","","","A type that describes a format.","Construct a <code>Date</code> with a statically known value.","Construct a <code>PrimitiveDateTime</code> or <code>OffsetDateTime</code> with a …","Equivalent of performing <code>format_description::parse()</code> at …","Construct a <code>UtcOffset</code> with a statically known value.","Construct a <code>Time</code> with a statically known value.","Get the number of calendar days in a given year.","Get the number of days in the month of a given year.","Returns if the provided year is a leap year in the …","Utility functions relating to the local UTC offset.","Get the number of weeks in the ISO year.","Obtaining the local UTC offset is required to be sound. …","The soundness of obtaining the local UTC offset.","Obtaining the local UTC offset is allowed to invoke …","","","","","","","","Returns the argument unchanged.","Obtains the soundness of obtaining the local UTC offset. …","Calls <code>U::from(self)</code>.","Set whether obtaining the local UTC offset is allowed to …","","","",""],"i":[14,14,1,0,14,0,0,14,15,1,0,14,14,14,2,1,6,1,7,1,2,1,6,1,14,14,15,0,1,14,14,0,0,0,1,15,14,15,15,0,15,5,8,0,1,15,0,1,1,2,2,1,1,4,4,5,5,6,6,7,7,2,2,1,1,4,4,5,5,6,6,7,7,6,7,8,6,7,6,7,6,7,4,1,1,6,6,2,1,4,4,14,5,6,7,8,15,2,1,4,14,5,6,7,8,15,2,1,4,5,6,2,1,1,1,1,2,1,4,5,6,2,5,2,1,4,14,5,6,7,8,15,2,1,4,14,5,6,7,8,15,2,1,4,5,6,7,8,0,8,5,6,2,5,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,2,1,1,4,4,14,5,5,6,7,8,15,2,1,4,14,5,6,7,8,15,0,0,2,2,1,1,4,14,14,14,5,5,6,6,7,7,8,8,15,15,15,2,5,6,7,8,2,5,6,7,8,0,2,5,6,7,8,0,2,1,4,4,14,5,5,6,7,8,15,2,7,8,7,7,7,2,2,2,14,15,5,5,8,2,1,4,14,5,6,7,8,15,5,6,7,1,2,1,4,14,5,6,7,8,15,4,1,8,1,8,8,1,2,5,6,8,0,2,14,5,6,7,8,15,5,6,7,1,2,5,6,7,1,5,6,7,1,8,2,5,6,2,5,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,6,7,1,1,8,1,6,14,15,2,2,4,5,5,14,15,2,14,15,2,15,15,15,15,5,2,5,6,2,1,1,4,4,5,5,6,7,8,2,14,15,2,5,6,5,2,5,6,5,6,7,5,6,7,5,6,7,5,6,7,2,5,6,5,6,7,5,5,6,7,5,6,2,5,6,2,1,5,6,1,1,1,2,1,5,6,5,6,7,1,1,1,8,2,2,2,1,1,4,4,4,4,5,5,5,5,6,6,6,7,7,7,2,2,1,1,4,4,5,5,6,6,7,7,1,1,1,1,1,2,5,6,5,6,1,2,5,6,5,5,5,5,2,5,6,2,5,6,5,2,5,6,2,1,4,14,5,6,7,8,15,2,1,14,5,6,7,8,15,2,1,1,4,14,14,5,6,7,8,15,2,1,4,14,5,6,7,8,15,2,1,4,14,5,6,7,8,15,5,5,1,0,2,5,6,1,1,1,8,1,1,1,8,1,1,8,1,2,2,2,2,2,2,5,6,0,0,0,0,0,0,0,0,46,47,48,49,50,51,52,53,46,47,48,49,50,51,52,53,46,47,48,49,50,51,52,53,46,47,48,49,50,51,52,53,46,47,48,49,50,51,52,53,46,47,48,49,50,51,52,53,46,47,48,49,50,51,52,53,46,47,48,49,50,51,52,53,46,47,48,49,50,51,52,53,46,47,48,49,50,51,52,53,46,47,48,49,50,51,52,53,46,47,48,49,50,51,52,53,0,58,0,58,0,58,0,56,0,58,0,58,34,34,56,0,58,56,0,58,56,56,56,34,56,37,44,55,34,17,56,57,58,37,44,55,34,17,56,57,58,37,44,55,17,56,57,37,44,55,17,56,57,37,44,55,17,56,57,37,44,55,17,56,57,37,37,44,44,55,55,34,34,17,17,56,56,57,57,58,58,37,44,55,34,34,17,56,57,58,58,58,58,58,58,58,58,37,37,44,55,34,17,56,57,58,37,37,34,58,37,44,55,17,56,57,37,44,55,34,17,56,57,58,37,37,44,44,55,55,34,34,17,17,56,56,57,57,58,37,44,55,34,17,56,57,58,37,44,55,34,17,56,57,58,103,104,105,106,107,108,109,103,105,108,106,109,103,0,0,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,110,0,61,63,61,63,62,62,61,63,0,62,62,61,63,62,62,62,62,62,61,63,62,0,62,62,62,62,62,62,62,61,62,63,61,62,63,61,62,63,61,62,63,61,61,61,62,62,62,63,63,63,61,62,63,61,62,63,61,61,61,62,63,63,63,63,63,63,63,63,61,62,63,0,0,0,0,61,62,63,61,62,62,62,63,61,62,63,61,62,63,0,0,82,0,82,82,76,0,0,74,76,69,72,89,89,0,72,74,0,0,89,82,87,69,0,0,0,82,82,0,0,0,0,89,82,69,72,82,87,0,0,72,74,82,82,0,0,0,0,0,0,0,0,87,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,70,73,80,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,88,88,68,68,69,70,70,71,71,72,73,73,74,75,75,76,77,77,78,78,79,79,80,80,81,81,82,83,83,84,84,85,85,86,86,87,89,90,90,91,91,83,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,78,80,77,73,68,70,71,75,77,78,79,81,84,85,86,90,70,73,75,77,77,84,90,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,0,0,0,93,94,95,93,94,95,93,94,95,93,94,95,93,94,95,93,94,95,93,94,95,93,94,95,93,94,95,0,93,94,95,93,94,95,93,94,95,93,94,95,97,0,93,93,93,93,100,96,0,96,96,0,0,98,99,0,98,99,96,93,96,0,97,93,98,93,93,96,96,0,97,96,97,98,99,100,96,97,98,99,100,96,97,98,99,96,97,98,99,100,96,97,98,99,96,97,98,99,96,97,98,99,100,96,97,98,99,100,96,97,98,99,100,100,100,100,100,100,100,96,97,98,99,96,97,98,99,100,96,97,98,99,100,96,97,98,99,100,112,113,114,0,0,0,0,0,0,0,0,0,0,0,102,0,102,102,102,102,102,102,102,102,102,0,102,0,102,102,102,102],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[[2,1]],[[2,3]],[[1,1]],[[1,3]],[[4,3]],[[4,1]],[[5,3]],[[5,1]],[[6,3]],[[6,1]],[[7,1]],[[7,3]],[[2,3]],[[2,1]],[[1,1]],[[1,3]],[[4,1]],[[4,3]],[[5,3]],[[5,1]],[[6,3]],[[6,1]],[[7,3]],[[7,1]],[6],[7],[8],[6],[7],[6],[7],[6],[7],[4,9],[1,10],[1,11],[[6,8],5],[6,5],[[]],[[]],[4,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,1],[[12,[2]]]],[[1,1],[[12,[1]]]],[[4,1],[[12,[4]]]],[[5,1],[[12,[5]]]],[[6,1],[[12,[6]]]],[[2,3],[[12,[2]]]],[[1,13],[[12,[1]]]],[[1,13],[[12,[1]]]],[10,[[12,[1]]]],[11,[[12,[1]]]],[[2,1],[[12,[2]]]],[[1,1],[[12,[1]]]],[[4,1],[[12,[4]]]],[[5,1],[[12,[5]]]],[[6,1],[[12,[6]]]],[[2,3],[[12,[2]]]],[[5,8],[[12,[5]]]],[2,2],[1,1],[4,4],[14,14],[5,5],[6,6],[7,7],[8,8],[15,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,2],16],[[1,1],16],[[4,4],16],[[5,5],16],[[6,6],16],[[7,7],16],[[8,8],16],0,[[],[[18,[8,17]]]],[5,2],[6,2],[2,19],[5,19],[6,19],[20,1],[[],1],[[1,3]],[[1,11]],[[1,21]],[[1,22]],[[1,13]],[[1,10]],[[1,23]],[[1,24]],[[1,19]],[[1,1]],[[1,22]],[[1,13]],[[1,24]],[[1,10]],[[1,21]],[[1,23]],[[1,11]],[[1,19]],[4,1],[[2,2],25],[[1,1],25],[[1,3],25],[[4,4],25],[[4,9],25],[[14,14],25],[[5,5],25],[[5,26],25],[[6,6],25],[[7,7],25],[[8,8],25],[[15,15],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],0,0,[[2,27],28],[[2,27],[[18,[29]]]],[[1,27],28],[[1,27],28],[[4,27],28],[[14,27],28],[[14,27],28],[[14,27],28],[[5,27],28],[[5,27],28],[[6,27],28],[[6,27],28],[[7,27],28],[[7,27],28],[[8,27],28],[[8,27],28],[[15,27],28],[[15,27],28],[[15,27],28],[[2,27,[30,[2]]],28],[[5,27,[30,[5]]],28],[[6,27,[30,[6]]],28],[[7,27,[30,[7]]],28],[[8,27,[30,[8]]],28],[[2,[0,[31,32]]],[[18,[33,34]]]],[[5,[0,[31,32]]],[[18,[33,34]]]],[[6,[0,[31,32]]],[[18,[33,34]]]],[[7,[0,[31,32]]],[[18,[33,34]]]],[[8,[0,[31,32]]],[[18,[33,34]]]],0,[[2,35,[0,[31,32]]],[[18,[36,34]]]],[[5,35,[0,[31,32]]],[[18,[36,34]]]],[[6,35,[0,[31,32]]],[[18,[36,34]]]],[[7,35,[0,[31,32]]],[[18,[36,34]]]],[[8,35,[0,[31,32]]],[[18,[36,34]]]],0,[[]],[[]],[9,4],[[]],[[]],[26,5],[[]],[[]],[[]],[[]],[[]],[[13,14,19],[[18,[2,37]]]],[[19,19,19],[[18,[7,37]]]],[[24,24,24],[[18,[8,37]]]],[[19,19,19,23],[[18,[7,37]]]],[[19,19,19,22],[[18,[7,37]]]],[[19,19,19,23],[[18,[7,37]]]],[[13,19,15],[[18,[2,37]]]],[13,[[18,[2,37]]]],[[13,22],[[18,[2,37]]]],[38,[[18,[14]]]],[38,[[18,[15]]]],[20,[[18,[5,37]]]],[39,[[18,[5,37]]]],[13,[[18,[8,37]]]],[[2,40]],[[1,40]],[[4,40]],[[14,40]],[[5,40]],[[6,40]],[[7,40]],[[8,40]],[[15,40]],[5,19],[6,19],[7,19],[20,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,9],[1,25],[8,25],[1,25],[8,25],[8,25],[1,25],[2,19],[5,19],[6,19],[5,[[18,[8,17]]]],0,[[2,41],[[30,[2]]]],[[14,41],[[30,[14]]]],[[5,41],[[30,[5]]]],[[6,41],[[30,[6]]]],[[7,41],[[30,[7]]]],[[8,41],[[30,[8]]]],[[15,41],[[30,[15]]]],[5,23],[6,23],[7,23],[20,1],[2,6],[5,22],[6,22],[7,22],[20,1],[5,19],[6,19],[7,19],[20,1],[8,24],[2,19],[5,19],[6,19],[2,14],[5,14],[6,14],[[1,10]],[[1,21]],[[1,24]],[[1,22]],[[1,11]],[[1,13]],[[1,19]],[[1,23]],[[1,21]],[[1,22]],[[1,24]],[[1,13]],[[1,11]],[[1,10]],[[1,23]],[[1,19]],[5,23],[6,23],[7,23],[20,1],[1],[8],[[20,13],1],[[2,7],6],[14,14],[15,15],[2,[[12,[2]]]],[[2,15],2],[[],4],[[],[[18,[5,17]]]],[[],5],[[14,19],14],[[15,19],15],[[2,15,19],2],[[14,19],14],[[15,19],15],[[2,15,19],2],[15,19],[15,19],[15,19],[15,19],[5,8],[2,22],[5,22],[6,22],[[2,2],[[12,[16]]]],[[1,3],[[12,[16]]]],[[1,1],[[12,[16]]]],[[4,4],[[12,[16]]]],[[4,9],[[12,[16]]]],[[5,26],[[12,[16]]]],[[5,5],[[12,[16]]]],[[6,6],[[12,[16]]]],[[7,7],[[12,[16]]]],[[8,8],[[12,[16]]]],[[2,15],2],[14,14],[15,15],[2,[[12,[2]]]],[[5,2],5],[[6,2],6],[[5,6],5],[[2,19],[[18,[2,37]]]],[[5,19],[[18,[5,37]]]],[[6,19],[[18,[6,37]]]],[[5,19],[[18,[5,37]]]],[[6,19],[[18,[6,37]]]],[[7,19],[[18,[7,37]]]],[[5,23],[[18,[5,37]]]],[[6,23],[[18,[6,37]]]],[[7,23],[[18,[7,37]]]],[[5,22],[[18,[5,37]]]],[[6,22],[[18,[6,37]]]],[[7,22],[[18,[7,37]]]],[[5,19],[[18,[5,37]]]],[[6,19],[[18,[6,37]]]],[[7,19],[[18,[7,37]]]],[[2,14],[[18,[2,37]]]],[[5,14],[[18,[5,37]]]],[[6,14],[[18,[6,37]]]],[[5,23],[[18,[5,37]]]],[[6,23],[[18,[6,37]]]],[[7,23],[[18,[7,37]]]],[[5,8],5],[[5,19],[[18,[5,37]]]],[[6,19],[[18,[6,37]]]],[[7,19],[[18,[7,37]]]],[[5,7],5],[[6,7],6],[[2,13],[[18,[2,37]]]],[[5,13],[[18,[5,37]]]],[[6,13],[[18,[6,37]]]],[[2,1],2],[[1,1],1],[[5,1],5],[[6,1],6],[[1,13],1],[10,1],[11,1],[[2,1],2],[[1,1],1],[[5,1],5],[[6,1],6],[5,19],[6,19],[7,19],[20,1],[10,1],[11,1],[8,24],[[2,3]],[[2,1]],[[2,2]],[[1,3]],[[1,1]],[[4,4]],[[4,3]],[[4,9]],[[4,1]],[[5,3]],[[5,26]],[[5,5]],[[5,1]],[[6,6]],[[6,3]],[[6,1]],[[7,7]],[[7,1]],[[7,3]],[[2,3]],[[2,1]],[[1,3]],[[1,1]],[[4,3]],[[4,1]],[[5,3]],[[5,1]],[[6,1]],[[6,3]],[[7,1]],[[7,3]],[1,13],[1,21],[1,13],[42,1],[42,1],[2,19],[5,19],[6,19],[5,7],[6,7],[43],[2],[5],[6],[5],[5],[5],[5],[2],[5],[6],[2,13],[5,13],[6,13],[[5,8],5],[2],[5],[6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],18],[[],18],[3,[[18,[1,44]]]],[[],18],[[],18],[19,[[18,[14]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[5,20],[5,39],[1,3],0,[2,15],[5,15],[6,15],[20,1],[1,20],[1,20],[8,24],[1,39],[1,39],[1,20],[8,21],[1,39],[1,20],[8,13],[1,20],[[2,19,19,19],[[18,[6,37]]]],[[2,19,19,19,23],[[18,[6,37]]]],[[2,19,19,19,22],[[18,[6,37]]]],[[2,19,19,19,23],[[18,[6,37]]]],[[2,7],6],[2,13],[5,13],[6,13],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[46,27],[[18,[29]]]],[[47,27],[[18,[29]]]],[[48,27],[[18,[29]]]],[[49,27],[[18,[29]]]],[[50,27],[[18,[29]]]],[[51,27],[[18,[29]]]],[[52,27],[[18,[29]]]],[[53,27],[[18,[29]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[54],[54],[54],[54],[54],[54],[54],[54],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[37,37],[44,44],[55,55],[17,17],[56,56],[57,57],[[]],[[]],[[]],[[]],[[]],[[]],[[37,37],25],[[44,44],25],[[55,55],25],[[17,17],25],[[56,56],25],[[57,57],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[37,27],28],[[37,27],28],[[44,27],28],[[44,27],28],[[55,27],28],[[55,27],28],[[34,27],28],[[34,27],28],[[17,27],28],[[17,27],28],[[56,27],28],[[56,27],28],[[57,27],28],[[57,27],28],[[58,27],28],[[58,27],28],[[]],[[]],[[]],[[]],[59,34],[[]],[[]],[[]],[37,58],[57,58],[[]],[34,58],[55,58],[56,58],[17,58],[44,58],[[37,40]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[37,25],[37,38],[34,[[12,[60]]]],[58,[[12,[60]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],18],[58,[[18,[37]]]],[[],18],[58,[[18,[44]]]],[[],18],[58,[[18,[55]]]],[58,[[18,[34]]]],[[],18],[[],18],[58,[[18,[17]]]],[[],18],[58,[[18,[56]]]],[58,[[18,[57]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[61,61],[62,62],[63,63],[[]],[[]],[[]],[[61,[64,[61]]],25],[[61,62],25],[[61,61],25],[[62,61],25],[[62,63],25],[[62,62],25],[[63,62],25],[[63,[64,[63]]],25],[[63,63],25],[[],25],[[],25],[[],25],[[61,27],28],[[62,27],28],[[63,27],28],[62,61],[[]],[[[64,[61]]],61],[[]],[61,63],[[[65,[63]]],63],[62,63],[[[65,[61]]],63],[61,63],[[[66,[[64,[0]]]]],63],[[[0,[[67,[[64,[61]]]],32]]],63],[[]],[[]],[[]],[[]],0,[38,[[18,[[65,[61]],56]]]],[38,[[18,[[65,[61]],56]]]],[38,[[18,[63,56]]]],[[]],[[]],[[]],[[],18],[[],18],[63,[[18,[62]]]],[61,[[18,[62]]]],[[],18],[[],18],[[],18],[[],18],[[],45],[[],45],[[],45],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[92,88],0,[[],68],[[],68],[[],69],[[],70],[[],70],[[],71],[[],71],[[],72],[[],73],[[],73],[[],74],[[],75],[[],75],[[],76],[[],77],[[],77],[[],78],[[],78],[[],79],[[],79],[[],80],[[],80],[[],81],[[],81],[[],82],[[],83],[[],83],[[],84],[[],84],[[],85],[[],85],[[],86],[[],86],[[],87],[[],89],[[],90],[[],90],[[],91],[[],91],0,[[68,68],25],[[69,69],25],[[70,70],25],[[71,71],25],[[72,72],25],[[73,73],25],[[74,74],25],[[75,75],25],[[76,76],25],[[77,77],25],[[78,78],25],[[79,79],25],[[80,80],25],[[81,81],25],[[82,82],25],[[83,83],25],[[84,84],25],[[85,85],25],[[86,86],25],[[87,87],25],[[88,88],25],[[89,89],25],[[90,90],25],[[91,91],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[68,27],28],[[69,27],28],[[70,27],28],[[71,27],28],[[72,27],28],[[73,27],28],[[74,27],28],[[75,27],28],[[76,27],28],[[77,27],28],[[78,27],28],[[79,27],28],[[80,27],28],[[81,27],28],[[82,27],28],[[83,27],28],[[84,27],28],[[85,27],28],[[86,27],28],[[87,27],28],[[88,27],28],[[89,27],28],[[90,27],28],[[91,27],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[93,93],[94,94],[95,95],[[]],[[]],[[]],[[93,93],25],[[94,94],25],[[95,95],25],[[],25],[[],25],[[],25],[[93,27],28],[[94,27],28],[[95,27],28],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],45],[[],45],[[],45],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[96,96],[97,97],[98,98],[99,99],[[]],[[]],[[]],[[]],[100,101],[[96,96],25],[[97,97],25],[[98,98],25],[[99,99],25],[[],25],[[],25],[[],25],[[],25],[[96,27],28],[[97,27],28],[[98,27],28],[[99,27],28],[[100,27],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[100,97],100],[[100,96],100],[[100,99],100],[[100,98],100],[[100,25],100],[[100,25],100],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],45],[[],45],[[],45],[[],45],[[],45],0,0,0,0,0,0,0,0,0,[13,22],[[13,14],19],[13,25],0,[13,19],0,0,0,[[]],[[]],[102,102],[[]],[[102,102],25],[[],25],[[102,27],28],[[]],[[],102],[[]],[102],[[]],[[],18],[[],18],[[],45]],"c":[],"p":[[3,"Duration"],[3,"Date"],[3,"Duration"],[3,"Instant"],[3,"OffsetDateTime"],[3,"PrimitiveDateTime"],[3,"Time"],[3,"UtcOffset"],[3,"Instant"],[15,"f32"],[15,"f64"],[4,"Option"],[15,"i32"],[4,"Month"],[4,"Weekday"],[4,"Ordering"],[3,"IndeterminateOffset"],[4,"Result"],[15,"u8"],[15,"i64"],[15,"i16"],[15,"u16"],[15,"u32"],[15,"i8"],[15,"bool"],[3,"SystemTime"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"Metadata"],[8,"Formattable"],[8,"Sized"],[3,"String"],[4,"Format"],[8,"Write"],[15,"usize"],[3,"ComponentRange"],[15,"str"],[15,"i128"],[8,"Hasher"],[3,"FormatterOptions"],[8,"Iterator"],[8,"FnOnce"],[3,"ConversionRange"],[3,"TypeId"],[3,"Nanosecond"],[3,"Microsecond"],[3,"Millisecond"],[3,"Second"],[3,"Minute"],[3,"Hour"],[3,"Day"],[3,"Week"],[8,"Copy"],[3,"DifferentVariant"],[4,"InvalidFormatDescription"],[3,"InvalidVariant"],[4,"Error"],[3,"Error"],[8,"Error"],[4,"FormatItem"],[4,"Component"],[4,"OwnedFormatItem"],[15,"slice"],[3,"Vec"],[3,"Box"],[8,"AsRef"],[3,"Day"],[4,"MonthRepr"],[3,"Month"],[3,"Ordinal"],[4,"WeekdayRepr"],[3,"Weekday"],[4,"WeekNumberRepr"],[3,"WeekNumber"],[4,"YearRepr"],[3,"Year"],[3,"Hour"],[3,"Minute"],[3,"Period"],[3,"Second"],[4,"SubsecondDigits"],[3,"Subsecond"],[3,"OffsetHour"],[3,"OffsetMinute"],[3,"OffsetSecond"],[4,"Padding"],[3,"Ignore"],[4,"UnixTimestampPrecision"],[3,"UnixTimestamp"],[3,"End"],[3,"NonZeroU16"],[3,"Iso8601"],[3,"Rfc2822"],[3,"Rfc3339"],[4,"FormattedComponents"],[4,"DateKind"],[4,"TimePrecision"],[4,"OffsetPrecision"],[3,"Config"],[6,"EncodedConfig"],[4,"Soundness"],[13,"NotSupported"],[13,"UnclosedOpeningBracket"],[13,"InvalidComponentName"],[13,"InvalidModifier"],[13,"MissingComponentName"],[13,"MissingRequiredModifier"],[13,"Expected"],[8,"NumericalDuration"],[8,"NumericalStdDuration"],[13,"Hour"],[13,"Minute"],[13,"Second"]],"a":{"encodedconfig":[1421],"from_julian_date":[253],"iso_weekday_number":[360]}},\
"time_core":{"doc":"Core items for <code>time</code>.","t":"AADDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFF","n":["convert","util","Day","Hour","Microsecond","Millisecond","Minute","Nanosecond","Second","Week","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","per","per","per","per","per","per","per","per","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","days_in_year","is_leap_year","weeks_in_year"],"q":[[0,"time_core"],[2,"time_core::convert"],[90,"time_core::util"]],"d":["Conversion between units of time.","Utility functions.","A unit of time representing exactly one day.","A unit of time representing exactly one hour.","A unit of time representing exactly one microsecond.","A unit of time representing exactly one millisecond.","A unit of time representing exactly one minute.","A unit of time representing exactly one nanosecond.","A unit of time representing exactly one second.","A unit of time representing exactly one week.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Obtain the number of times <code>Nanosecond</code> can fit into <code>T</code>. If <code>T</code> …","Obtain the number of times <code>Microsecond</code> can fit into <code>T</code>. If <code>T</code>…","Obtain the number of times <code>Millisecond</code> can fit into <code>T</code>. If <code>T</code>…","Obtain the number of times <code>Second</code> can fit into <code>T</code>. If <code>T</code> is …","Obtain the number of times <code>Minute</code> can fit into <code>T</code>. If <code>T</code> is …","Obtain the number of times <code>Hour</code> can fit into <code>T</code>. If <code>T</code> is …","Obtain the number of times <code>Day</code> can fit into <code>T</code>. If <code>T</code> is …","Obtain the number of times <code>Week</code> can fit into <code>T</code>. If <code>T</code> is …","","","","","","","","","","","","","","","","","","","","","","","","","Get the number of calendar days in a given year.","Returns if the provided year is a leap year in the …","Get the number of weeks in the ISO year."],"i":[0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[[1,9],10],[[2,9],10],[[3,9],10],[[4,9],10],[[5,9],10],[[6,9],10],[[7,9],10],[[8,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11],[11],[11],[11],[11],[11],[11],[11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[14,15],[14,16],[14,17]],"c":[],"p":[[3,"Nanosecond"],[3,"Microsecond"],[3,"Millisecond"],[3,"Second"],[3,"Minute"],[3,"Hour"],[3,"Day"],[3,"Week"],[3,"Formatter"],[6,"Result"],[8,"Copy"],[4,"Result"],[3,"TypeId"],[15,"i32"],[15,"u16"],[15,"bool"],[15,"u8"]]},\
"time_macros":{"doc":"","t":"OOOOO","n":["date","datetime","format_description","offset","time"],"q":[[0,"time_macros"]],"d":["","","","",""],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[]},\
"typenum":{"doc":"This crate provides type-level numbers evaluated at …","t":"CCCDCDDCCCCCCCCCCCCCCAOOALLLLLLLLLLLLOALLLLLLLLLLLLLLLALLLAOALLLOLLLLLLLLLLLLAADDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGCLLLCDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSISSSSSSSSSSIIIIISSSSSSIIKKKKKKKKKKKKKKKKKKKGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGIIISIIIIIIIIIIQQQQQQQQQQQQQQQQQIIIIIKKKKKKKKKKKKIGQQCIGDDCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ATerm","B0","B1","Equal","False","Greater","Less","N1","N2","NInt","P1","P2","PInt","TArr","True","U0","U1","U2","UInt","UTerm","Z0","array","assert_type","assert_type_eq","bit","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","cmp","consts","default","default","default","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","int","into","into","into","marker_traits","op","operator_aliases","partial_cmp","partial_cmp","partial_cmp","tarr","to_ordering","to_ordering","to_ordering","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_operators","uint","ATerm","TArr","add","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","div","div","eq","eq","fmt","fmt","from","from","hash","hash","into","into","len","len","mul","mul","neg","neg","partial_cmp","partial_cmp","partial_div","partial_div","rem","rem","sub","sub","try_from","try_from","try_into","try_into","type_id","type_id","B0","B1","Bit","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","hash","hash","into","into","max","max","max","max","min","min","min","min","new","new","new","new","not","not","partial_cmp","partial_cmp","to_bool","to_bool","to_u8","to_u8","try_from","try_from","try_into","try_into","type_id","type_id","B0","B1","False","N1","N10","N100","N1000","N10000","N100000","N1000000","N10000000","N100000000","N1000000000","N10000000000","N100000000000","N1000000000000","N10000000000000","N100000000000000","N1000000000000000","N10000000000000000","N100000000000000000","N1000000000000000000","N1001","N1002","N1003","N1004","N1005","N1006","N1007","N1008","N1009","N101","N1010","N1011","N1012","N1013","N1014","N1015","N1016","N1017","N1018","N1019","N102","N1020","N1021","N1022","N1023","N1024","N103","N104","N1048576","N105","N106","N107","N1073741824","N108","N109","N1099511627776","N11","N110","N111","N112","N1125899906842624","N113","N114","N115","N1152921504606846976","N116","N117","N118","N119","N12","N120","N121","N122","N123","N124","N125","N126","N127","N128","N129","N13","N130","N131","N131072","N132","N133","N134","N134217728","N135","N136","N137","N137438953472","N138","N139","N14","N140","N140737488355328","N141","N142","N143","N144","N144115188075855872","N145","N146","N147","N148","N149","N15","N150","N151","N152","N153","N154","N155","N156","N157","N158","N159","N16","N160","N161","N162","N163","N16384","N164","N165","N166","N167","N16777216","N168","N169","N17","N170","N171","N17179869184","N172","N173","N174","N175","N17592186044416","N176","N177","N178","N179","N18","N180","N18014398509481984","N181","N182","N183","N184","N185","N186","N187","N188","N189","N19","N190","N191","N192","N193","N194","N195","N196","N197","N198","N199","N2","N20","N200","N201","N202","N203","N204","N2048","N205","N206","N207","N208","N209","N2097152","N21","N210","N211","N212","N213","N214","N2147483648","N215","N216","N217","N218","N219","N2199023255552","N22","N220","N221","N222","N223","N224","N225","N2251799813685248","N226","N227","N228","N229","N23","N230","N2305843009213693952","N231","N232","N233","N234","N235","N236","N237","N238","N239","N24","N240","N241","N242","N243","N244","N245","N246","N247","N248","N249","N25","N250","N251","N252","N253","N254","N255","N256","N257","N258","N259","N26","N260","N261","N262","N262144","N263","N264","N265","N266","N267","N268","N268435456","N269","N27","N270","N271","N272","N273","N274","N274877906944","N275","N276","N277","N278","N279","N28","N280","N281","N281474976710656","N282","N283","N284","N285","N286","N287","N288","N288230376151711744","N289","N29","N290","N291","N292","N293","N294","N295","N296","N297","N298","N299","N3","N30","N300","N301","N302","N303","N304","N305","N306","N307","N308","N309","N31","N310","N311","N312","N313","N314","N315","N316","N317","N318","N319","N32","N320","N321","N322","N323","N324","N325","N326","N327","N32768","N328","N329","N33","N330","N331","N332","N333","N334","N335","N33554432","N336","N337","N338","N339","N34","N340","N341","N342","N343","N34359738368","N344","N345","N346","N347","N348","N349","N35","N350","N351","N35184372088832","N352","N353","N354","N355","N356","N357","N358","N359","N36","N360","N36028797018963968","N361","N362","N363","N364","N365","N366","N367","N368","N369","N37","N370","N371","N372","N373","N374","N375","N376","N377","N378","N379","N38","N380","N381","N382","N383","N384","N385","N386","N387","N388","N389","N39","N390","N391","N392","N393","N394","N395","N396","N397","N398","N399","N4","N40","N400","N401","N402","N403","N404","N405","N406","N407","N408","N409","N4096","N41","N410","N411","N412","N413","N414","N415","N416","N417","N418","N419","N4194304","N42","N420","N421","N422","N423","N424","N425","N426","N427","N428","N429","N4294967296","N43","N430","N431","N432","N433","N434","N435","N436","N437","N438","N439","N4398046511104","N44","N440","N441","N442","N443","N444","N445","N446","N447","N448","N449","N45","N450","N4503599627370496","N451","N452","N453","N454","N455","N456","N457","N458","N459","N46","N460","N461","N4611686018427387904","N462","N463","N464","N465","N466","N467","N468","N469","N47","N470","N471","N472","N473","N474","N475","N476","N477","N478","N479","N48","N480","N481","N482","N483","N484","N485","N486","N487","N488","N489","N49","N490","N491","N492","N493","N494","N495","N496","N497","N498","N499","N5","N50","N500","N501","N502","N503","N504","N505","N506","N507","N508","N509","N51","N510","N511","N512","N513","N514","N515","N516","N517","N518","N519","N52","N520","N521","N522","N523","N524","N524288","N525","N526","N527","N528","N529","N53","N530","N531","N532","N533","N534","N535","N536","N536870912","N537","N538","N539","N54","N540","N541","N542","N543","N544","N545","N546","N547","N548","N549","N549755813888","N55","N550","N551","N552","N553","N554","N555","N556","N557","N558","N559","N56","N560","N561","N562","N562949953421312","N563","N564","N565","N566","N567","N568","N569","N57","N570","N571","N572","N573","N574","N575","N576","N576460752303423488","N577","N578","N579","N58","N580","N581","N582","N583","N584","N585","N586","N587","N588","N589","N59","N590","N591","N592","N593","N594","N595","N596","N597","N598","N599","N6","N60","N600","N601","N602","N603","N604","N605","N606","N607","N608","N609","N61","N610","N611","N612","N613","N614","N615","N616","N617","N618","N619","N62","N620","N621","N622","N623","N624","N625","N626","N627","N628","N629","N63","N630","N631","N632","N633","N634","N635","N636","N637","N638","N639","N64","N640","N641","N642","N643","N644","N645","N646","N647","N648","N649","N65","N650","N651","N652","N653","N654","N655","N65536","N656","N657","N658","N659","N66","N660","N661","N662","N663","N664","N665","N666","N667","N668","N669","N67","N670","N671","N67108864","N672","N673","N674","N675","N676","N677","N678","N679","N68","N680","N681","N682","N683","N684","N685","N686","N687","N68719476736","N688","N689","N69","N690","N691","N692","N693","N694","N695","N696","N697","N698","N699","N7","N70","N700","N701","N702","N703","N70368744177664","N704","N705","N706","N707","N708","N709","N71","N710","N711","N712","N713","N714","N715","N716","N717","N718","N719","N72","N720","N72057594037927936","N721","N722","N723","N724","N725","N726","N727","N728","N729","N73","N730","N731","N732","N733","N734","N735","N736","N737","N738","N739","N74","N740","N741","N742","N743","N744","N745","N746","N747","N748","N749","N75","N750","N751","N752","N753","N754","N755","N756","N757","N758","N759","N76","N760","N761","N762","N763","N764","N765","N766","N767","N768","N769","N77","N770","N771","N772","N773","N774","N775","N776","N777","N778","N779","N78","N780","N781","N782","N783","N784","N785","N786","N787","N788","N789","N79","N790","N791","N792","N793","N794","N795","N796","N797","N798","N799","N8","N80","N800","N801","N802","N803","N804","N805","N806","N807","N808","N809","N81","N810","N811","N812","N813","N814","N815","N816","N817","N818","N819","N8192","N82","N820","N821","N822","N823","N824","N825","N826","N827","N828","N829","N83","N830","N831","N832","N833","N834","N835","N836","N837","N838","N8388608","N839","N84","N840","N841","N842","N843","N844","N845","N846","N847","N848","N849","N85","N850","N851","N852","N853","N854","N855","N856","N857","N858","N8589934592","N859","N86","N860","N861","N862","N863","N864","N865","N866","N867","N868","N869","N87","N870","N871","N872","N873","N874","N875","N876","N877","N878","N879","N8796093022208","N88","N880","N881","N882","N883","N884","N885","N886","N887","N888","N889","N89","N890","N891","N892","N893","N894","N895","N896","N897","N898","N899","N9","N90","N900","N9007199254740992","N901","N902","N903","N904","N905","N906","N907","N908","N909","N91","N910","N911","N912","N913","N914","N915","N916","N917","N918","N919","N92","N920","N921","N922","N923","N924","N925","N926","N927","N928","N929","N93","N930","N931","N932","N933","N934","N935","N936","N937","N938","N939","N94","N940","N941","N942","N943","N944","N945","N946","N947","N948","N949","N95","N950","N951","N952","N953","N954","N955","N956","N957","N958","N959","N96","N960","N961","N962","N963","N964","N965","N966","N967","N968","N969","N97","N970","N971","N972","N973","N974","N975","N976","N977","N978","N979","N98","N980","N981","N982","N983","N984","N985","N986","N987","N988","N989","N99","N990","N991","N992","N993","N994","N995","N996","N997","N998","N999","P1","P10","P100","P1000","P10000","P100000","P1000000","P10000000","P100000000","P1000000000","P10000000000","P100000000000","P1000000000000","P10000000000000","P100000000000000","P1000000000000000","P10000000000000000","P100000000000000000","P1000000000000000000","P1001","P1002","P1003","P1004","P1005","P1006","P1007","P1008","P1009","P101","P1010","P1011","P1012","P1013","P1014","P1015","P1016","P1017","P1018","P1019","P102","P1020","P1021","P1022","P1023","P1024","P103","P104","P1048576","P105","P106","P107","P1073741824","P108","P109","P1099511627776","P11","P110","P111","P112","P1125899906842624","P113","P114","P115","P1152921504606846976","P116","P117","P118","P119","P12","P120","P121","P122","P123","P124","P125","P126","P127","P128","P129","P13","P130","P131","P131072","P132","P133","P134","P134217728","P135","P136","P137","P137438953472","P138","P139","P14","P140","P140737488355328","P141","P142","P143","P144","P144115188075855872","P145","P146","P147","P148","P149","P15","P150","P151","P152","P153","P154","P155","P156","P157","P158","P159","P16","P160","P161","P162","P163","P16384","P164","P165","P166","P167","P16777216","P168","P169","P17","P170","P171","P17179869184","P172","P173","P174","P175","P17592186044416","P176","P177","P178","P179","P18","P180","P18014398509481984","P181","P182","P183","P184","P185","P186","P187","P188","P189","P19","P190","P191","P192","P193","P194","P195","P196","P197","P198","P199","P2","P20","P200","P201","P202","P203","P204","P2048","P205","P206","P207","P208","P209","P2097152","P21","P210","P211","P212","P213","P214","P2147483648","P215","P216","P217","P218","P219","P2199023255552","P22","P220","P221","P222","P223","P224","P225","P2251799813685248","P226","P227","P228","P229","P23","P230","P2305843009213693952","P231","P232","P233","P234","P235","P236","P237","P238","P239","P24","P240","P241","P242","P243","P244","P245","P246","P247","P248","P249","P25","P250","P251","P252","P253","P254","P255","P256","P257","P258","P259","P26","P260","P261","P262","P262144","P263","P264","P265","P266","P267","P268","P268435456","P269","P27","P270","P271","P272","P273","P274","P274877906944","P275","P276","P277","P278","P279","P28","P280","P281","P281474976710656","P282","P283","P284","P285","P286","P287","P288","P288230376151711744","P289","P29","P290","P291","P292","P293","P294","P295","P296","P297","P298","P299","P3","P30","P300","P301","P302","P303","P304","P305","P306","P307","P308","P309","P31","P310","P311","P312","P313","P314","P315","P316","P317","P318","P319","P32","P320","P321","P322","P323","P324","P325","P326","P327","P32768","P328","P329","P33","P330","P331","P332","P333","P334","P335","P33554432","P336","P337","P338","P339","P34","P340","P341","P342","P343","P34359738368","P344","P345","P346","P347","P348","P349","P35","P350","P351","P35184372088832","P352","P353","P354","P355","P356","P357","P358","P359","P36","P360","P36028797018963968","P361","P362","P363","P364","P365","P366","P367","P368","P369","P37","P370","P371","P372","P373","P374","P375","P376","P377","P378","P379","P38","P380","P381","P382","P383","P384","P385","P386","P387","P388","P389","P39","P390","P391","P392","P393","P394","P395","P396","P397","P398","P399","P4","P40","P400","P401","P402","P403","P404","P405","P406","P407","P408","P409","P4096","P41","P410","P411","P412","P413","P414","P415","P416","P417","P418","P419","P4194304","P42","P420","P421","P422","P423","P424","P425","P426","P427","P428","P429","P4294967296","P43","P430","P431","P432","P433","P434","P435","P436","P437","P438","P439","P4398046511104","P44","P440","P441","P442","P443","P444","P445","P446","P447","P448","P449","P45","P450","P4503599627370496","P451","P452","P453","P454","P455","P456","P457","P458","P459","P46","P460","P461","P4611686018427387904","P462","P463","P464","P465","P466","P467","P468","P469","P47","P470","P471","P472","P473","P474","P475","P476","P477","P478","P479","P48","P480","P481","P482","P483","P484","P485","P486","P487","P488","P489","P49","P490","P491","P492","P493","P494","P495","P496","P497","P498","P499","P5","P50","P500","P501","P502","P503","P504","P505","P506","P507","P508","P509","P51","P510","P511","P512","P513","P514","P515","P516","P517","P518","P519","P52","P520","P521","P522","P523","P524","P524288","P525","P526","P527","P528","P529","P53","P530","P531","P532","P533","P534","P535","P536","P536870912","P537","P538","P539","P54","P540","P541","P542","P543","P544","P545","P546","P547","P548","P549","P549755813888","P55","P550","P551","P552","P553","P554","P555","P556","P557","P558","P559","P56","P560","P561","P562","P562949953421312","P563","P564","P565","P566","P567","P568","P569","P57","P570","P571","P572","P573","P574","P575","P576","P576460752303423488","P577","P578","P579","P58","P580","P581","P582","P583","P584","P585","P586","P587","P588","P589","P59","P590","P591","P592","P593","P594","P595","P596","P597","P598","P599","P6","P60","P600","P601","P602","P603","P604","P605","P606","P607","P608","P609","P61","P610","P611","P612","P613","P614","P615","P616","P617","P618","P619","P62","P620","P621","P622","P623","P624","P625","P626","P627","P628","P629","P63","P630","P631","P632","P633","P634","P635","P636","P637","P638","P639","P64","P640","P641","P642","P643","P644","P645","P646","P647","P648","P649","P65","P650","P651","P652","P653","P654","P655","P65536","P656","P657","P658","P659","P66","P660","P661","P662","P663","P664","P665","P666","P667","P668","P669","P67","P670","P671","P67108864","P672","P673","P674","P675","P676","P677","P678","P679","P68","P680","P681","P682","P683","P684","P685","P686","P687","P68719476736","P688","P689","P69","P690","P691","P692","P693","P694","P695","P696","P697","P698","P699","P7","P70","P700","P701","P702","P703","P70368744177664","P704","P705","P706","P707","P708","P709","P71","P710","P711","P712","P713","P714","P715","P716","P717","P718","P719","P72","P720","P72057594037927936","P721","P722","P723","P724","P725","P726","P727","P728","P729","P73","P730","P731","P732","P733","P734","P735","P736","P737","P738","P739","P74","P740","P741","P742","P743","P744","P745","P746","P747","P748","P749","P75","P750","P751","P752","P753","P754","P755","P756","P757","P758","P759","P76","P760","P761","P762","P763","P764","P765","P766","P767","P768","P769","P77","P770","P771","P772","P773","P774","P775","P776","P777","P778","P779","P78","P780","P781","P782","P783","P784","P785","P786","P787","P788","P789","P79","P790","P791","P792","P793","P794","P795","P796","P797","P798","P799","P8","P80","P800","P801","P802","P803","P804","P805","P806","P807","P808","P809","P81","P810","P811","P812","P813","P814","P815","P816","P817","P818","P819","P8192","P82","P820","P821","P822","P823","P824","P825","P826","P827","P828","P829","P83","P830","P831","P832","P833","P834","P835","P836","P837","P838","P8388608","P839","P84","P840","P841","P842","P843","P844","P845","P846","P847","P848","P849","P85","P850","P851","P852","P853","P854","P855","P856","P857","P858","P8589934592","P859","P86","P860","P861","P862","P863","P864","P865","P866","P867","P868","P869","P87","P870","P871","P872","P873","P874","P875","P876","P877","P878","P879","P8796093022208","P88","P880","P881","P882","P883","P884","P885","P886","P887","P888","P889","P89","P890","P891","P892","P893","P894","P895","P896","P897","P898","P899","P9","P90","P900","P9007199254740992","P901","P902","P903","P904","P905","P906","P907","P908","P909","P91","P910","P911","P912","P913","P914","P915","P916","P917","P918","P919","P92","P920","P921","P922","P923","P924","P925","P926","P927","P928","P929","P93","P930","P931","P932","P933","P934","P935","P936","P937","P938","P939","P94","P940","P941","P942","P943","P944","P945","P946","P947","P948","P949","P95","P950","P951","P952","P953","P954","P955","P956","P957","P958","P959","P96","P960","P961","P962","P963","P964","P965","P966","P967","P968","P969","P97","P970","P971","P972","P973","P974","P975","P976","P977","P978","P979","P98","P980","P981","P982","P983","P984","P985","P986","P987","P988","P989","P99","P990","P991","P992","P993","P994","P995","P996","P997","P998","P999","True","U0","U1","U10","U100","U1000","U10000","U100000","U1000000","U10000000","U100000000","U1000000000","U10000000000","U100000000000","U1000000000000","U10000000000000","U100000000000000","U1000000000000000","U10000000000000000","U100000000000000000","U1000000000000000000","U10000000000000000000","U1001","U1002","U1003","U1004","U1005","U1006","U1007","U1008","U1009","U101","U1010","U1011","U1012","U1013","U1014","U1015","U1016","U1017","U1018","U1019","U102","U1020","U1021","U1022","U1023","U1024","U103","U104","U1048576","U105","U106","U107","U1073741824","U108","U109","U1099511627776","U11","U110","U111","U112","U1125899906842624","U113","U114","U115","U1152921504606846976","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U128","U129","U13","U130","U131","U131072","U132","U133","U134","U134217728","U135","U136","U137","U137438953472","U138","U139","U14","U140","U140737488355328","U141","U142","U143","U144","U144115188075855872","U145","U146","U147","U148","U149","U15","U150","U151","U152","U153","U154","U155","U156","U157","U158","U159","U16","U160","U161","U162","U163","U16384","U164","U165","U166","U167","U16777216","U168","U169","U17","U170","U171","U17179869184","U172","U173","U174","U175","U17592186044416","U176","U177","U178","U179","U18","U180","U18014398509481984","U181","U182","U183","U184","U185","U186","U187","U188","U189","U19","U190","U191","U192","U193","U194","U195","U196","U197","U198","U199","U2","U20","U200","U201","U202","U203","U204","U2048","U205","U206","U207","U208","U209","U2097152","U21","U210","U211","U212","U213","U214","U2147483648","U215","U216","U217","U218","U219","U2199023255552","U22","U220","U221","U222","U223","U224","U225","U2251799813685248","U226","U227","U228","U229","U23","U230","U2305843009213693952","U231","U232","U233","U234","U235","U236","U237","U238","U239","U24","U240","U241","U242","U243","U244","U245","U246","U247","U248","U249","U25","U250","U251","U252","U253","U254","U255","U256","U257","U258","U259","U26","U260","U261","U262","U262144","U263","U264","U265","U266","U267","U268","U268435456","U269","U27","U270","U271","U272","U273","U274","U274877906944","U275","U276","U277","U278","U279","U28","U280","U281","U281474976710656","U282","U283","U284","U285","U286","U287","U288","U288230376151711744","U289","U29","U290","U291","U292","U293","U294","U295","U296","U297","U298","U299","U3","U30","U300","U301","U302","U303","U304","U305","U306","U307","U308","U309","U31","U310","U311","U312","U313","U314","U315","U316","U317","U318","U319","U32","U320","U321","U322","U323","U324","U325","U326","U327","U32768","U328","U329","U33","U330","U331","U332","U333","U334","U335","U33554432","U336","U337","U338","U339","U34","U340","U341","U342","U343","U34359738368","U344","U345","U346","U347","U348","U349","U35","U350","U351","U35184372088832","U352","U353","U354","U355","U356","U357","U358","U359","U36","U360","U36028797018963968","U361","U362","U363","U364","U365","U366","U367","U368","U369","U37","U370","U371","U372","U373","U374","U375","U376","U377","U378","U379","U38","U380","U381","U382","U383","U384","U385","U386","U387","U388","U389","U39","U390","U391","U392","U393","U394","U395","U396","U397","U398","U399","U4","U40","U400","U401","U402","U403","U404","U405","U406","U407","U408","U409","U4096","U41","U410","U411","U412","U413","U414","U415","U416","U417","U418","U419","U4194304","U42","U420","U421","U422","U423","U424","U425","U426","U427","U428","U429","U4294967296","U43","U430","U431","U432","U433","U434","U435","U436","U437","U438","U439","U4398046511104","U44","U440","U441","U442","U443","U444","U445","U446","U447","U448","U449","U45","U450","U4503599627370496","U451","U452","U453","U454","U455","U456","U457","U458","U459","U46","U460","U461","U4611686018427387904","U462","U463","U464","U465","U466","U467","U468","U469","U47","U470","U471","U472","U473","U474","U475","U476","U477","U478","U479","U48","U480","U481","U482","U483","U484","U485","U486","U487","U488","U489","U49","U490","U491","U492","U493","U494","U495","U496","U497","U498","U499","U5","U50","U500","U501","U502","U503","U504","U505","U506","U507","U508","U509","U51","U510","U511","U512","U513","U514","U515","U516","U517","U518","U519","U52","U520","U521","U522","U523","U524","U524288","U525","U526","U527","U528","U529","U53","U530","U531","U532","U533","U534","U535","U536","U536870912","U537","U538","U539","U54","U540","U541","U542","U543","U544","U545","U546","U547","U548","U549","U549755813888","U55","U550","U551","U552","U553","U554","U555","U556","U557","U558","U559","U56","U560","U561","U562","U562949953421312","U563","U564","U565","U566","U567","U568","U569","U57","U570","U571","U572","U573","U574","U575","U576","U576460752303423488","U577","U578","U579","U58","U580","U581","U582","U583","U584","U585","U586","U587","U588","U589","U59","U590","U591","U592","U593","U594","U595","U596","U597","U598","U599","U6","U60","U600","U601","U602","U603","U604","U605","U606","U607","U608","U609","U61","U610","U611","U612","U613","U614","U615","U616","U617","U618","U619","U62","U620","U621","U622","U623","U624","U625","U626","U627","U628","U629","U63","U630","U631","U632","U633","U634","U635","U636","U637","U638","U639","U64","U640","U641","U642","U643","U644","U645","U646","U647","U648","U649","U65","U650","U651","U652","U653","U654","U655","U65536","U656","U657","U658","U659","U66","U660","U661","U662","U663","U664","U665","U666","U667","U668","U669","U67","U670","U671","U67108864","U672","U673","U674","U675","U676","U677","U678","U679","U68","U680","U681","U682","U683","U684","U685","U686","U687","U68719476736","U688","U689","U69","U690","U691","U692","U693","U694","U695","U696","U697","U698","U699","U7","U70","U700","U701","U702","U703","U70368744177664","U704","U705","U706","U707","U708","U709","U71","U710","U711","U712","U713","U714","U715","U716","U717","U718","U719","U72","U720","U72057594037927936","U721","U722","U723","U724","U725","U726","U727","U728","U729","U73","U730","U731","U732","U733","U734","U735","U736","U737","U738","U739","U74","U740","U741","U742","U743","U744","U745","U746","U747","U748","U749","U75","U750","U751","U752","U753","U754","U755","U756","U757","U758","U759","U76","U760","U761","U762","U763","U764","U765","U766","U767","U768","U769","U77","U770","U771","U772","U773","U774","U775","U776","U777","U778","U779","U78","U780","U781","U782","U783","U784","U785","U786","U787","U788","U789","U79","U790","U791","U792","U793","U794","U795","U796","U797","U798","U799","U8","U80","U800","U801","U802","U803","U804","U805","U806","U807","U808","U809","U81","U810","U811","U812","U813","U814","U815","U816","U817","U818","U819","U8192","U82","U820","U821","U822","U823","U824","U825","U826","U827","U828","U829","U83","U830","U831","U832","U833","U834","U835","U836","U837","U838","U8388608","U839","U84","U840","U841","U842","U843","U844","U845","U846","U847","U848","U849","U85","U850","U851","U852","U853","U854","U855","U856","U857","U858","U8589934592","U859","U86","U860","U861","U862","U863","U864","U865","U866","U867","U868","U869","U87","U870","U871","U872","U873","U874","U875","U876","U877","U878","U879","U8796093022208","U88","U880","U881","U882","U883","U884","U885","U886","U887","U888","U889","U89","U890","U891","U892","U893","U894","U895","U896","U897","U898","U899","U9","U90","U900","U9007199254740992","U901","U902","U903","U904","U905","U906","U907","U908","U909","U91","U910","U911","U912","U913","U914","U915","U916","U917","U918","U919","U92","U920","U921","U922","U9223372036854775808","U923","U924","U925","U926","U927","U928","U929","U93","U930","U931","U932","U933","U934","U935","U936","U937","U938","U939","U94","U940","U941","U942","U943","U944","U945","U946","U947","U948","U949","U95","U950","U951","U952","U953","U954","U955","U956","U957","U958","U959","U96","U960","U961","U962","U963","U964","U965","U966","U967","U968","U969","U97","U970","U971","U972","U973","U974","U975","U976","U977","U978","U979","U98","U980","U981","U982","U983","U984","U985","U986","U987","U988","U989","U99","U990","U991","U992","U993","U994","U995","U996","U997","U998","U999","Z0","powi","powi","powi","Integer","NInt","PInt","Z0","add","add","add","add","add","add","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","default","default","default","div","div","div","div","div","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","max","max","max","max","max","max","max","max","max","min","min","min","min","min","min","min","min","min","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","neg","neg","neg","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_div","partial_div","partial_div","powi","powi","powi","powi","powi","powi","powi","powi","rem","rem","rem","rem","rem","sub","sub","sub","sub","sub","sub","sub","sub","sub","to_i16","to_i16","to_i16","to_i32","to_i32","to_i32","to_i64","to_i64","to_i64","to_i8","to_i8","to_i8","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_isize","to_isize","to_isize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BOOL","Bit","I16","I16","I32","I32","I64","I64","I8","I8","ISIZE","ISIZE","Integer","NonZero","Ord","PowerOfTwo","TypeArray","U16","U32","U64","U8","U8","USIZE","Unsigned","Zero","new","to_bool","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i8","to_i8","to_isize","to_isize","to_ordering","to_u16","to_u32","to_u64","to_u8","to_u8","to_usize","AbsVal","Add1","And","Compare","Cube","Diff","Double","Eq","Exp","Gcf","Gr","GrEq","Le","LeEq","Length","Log2","Maximum","Minimum","Mod","Negate","NotEq","Or","PartialQuot","Prod","Quot","Shleft","Shright","Sqrt","Square","Sub1","Sum","Xor","Abs","Cmp","Gcd","INT","IsEqual","IsGreater","IsGreaterOrEqual","IsLess","IsLessOrEqual","IsNotEqual","Len","Logarithm2","Max","Min","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","PartialDiv","Pow","Same","SquareRoot","ToInt","is_equal","is_greater","is_greater_or_equal","is_less","is_less_or_equal","is_not_equal","len","max","min","partial_div","powi","to_int","GetBit","GetBitOut","Output","Output","PowerOfTwo","SetBit","SetBitOut","UInt","UTerm","Unsigned","add","add","add","add","add","add","add","add","add","add","add","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","div","div","eq","eq","fmt","fmt","from","from","hash","hash","into","into","len","len","max","max","min","min","mul","mul","mul","mul","mul","mul","mul","mul","new","new","partial_cmp","partial_cmp","partial_div","partial_div","powi","powi","rem","rem","set_bit","set_bit","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","sub","sub","sub","sub","sub","sub","sub","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i8","to_i8","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_isize","to_isize","to_u16","to_u16","to_u32","to_u32","to_u64","to_u64","to_u8","to_u8","to_usize","to_usize","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"typenum"],[79,"typenum::array"],[123,"typenum::bit"],[182,"typenum::consts"],[3466,"typenum::int"],[3613,"typenum::marker_traits"],[3657,"typenum::operator_aliases"],[3689,"typenum::type_operators"],[3737,"typenum::uint"]],"d":["","","","A potential output from <code>Cmp</code>, this is the type equivalent …","","A potential output from <code>Cmp</code>, this is the type equivalent …","A potential output from <code>Cmp</code>, this is the type equivalent …","","","","","","","","","","","","","","","A type-level array of type-level numbers.","Asserts that a type is <code>True</code>, aka <code>B1</code>.","Asserts that two types are the same.","Type-level bits.","","","","","","","","","","","","","A convenience macro for comparing type numbers. Use <code>op!</code> …","Type aliases for many constants.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Type-level signed integers.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","All of the <strong>marker traits</strong> used in typenum.","Convenient type operations.","Aliases for the type operators used in this crate. Their …","","","","Create a new type-level array. Only usable on Rust 1.13.0 …","","","","","","","","","","","","","Useful <strong>type operators</strong> that are not defined in <code>core::ops</code>.","Type-level unsigned integers.","The terminating type for type arrays.","<code>TArr</code> is a type that acts as an array of types. It is …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","The type-level bit 0.","The type-level bit 1.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Instantiates a singleton representing this bit.","","Instantiates a singleton representing this bitype-level signed integers with negative sign.","Type-level signed integers with positive sign.","The type-level signed integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this strictly …","Instantiates a singleton representing this strictly …","Instantiates a singleton representing the integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <strong>marker trait</strong> for compile time bits.","","","","","","","","","","","The <strong>marker trait</strong> for compile time signed integers.","A <strong>marker trait</strong> to designate that a type is not zero. All …","A <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.","The <strong>marker trait</strong> for type-level numbers which are a power …","The <strong>marker trait</strong> for type-level arrays of type-level …","","","","","","","The <strong>marker trait</strong> for compile time unsigned integers.","A <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, …","Instantiates a singleton representing this bit.","","","","","","","","","","","","","","","","","","","Alias for the associated type of <code>Abs</code>: …","Alias to make it easy to add 1: …","Alias for the associated type of <code>BitAnd</code>: …","Alias for the associated type of <code>Cmp</code>: …","Alias to make it easy to cube. …","Alias for the associated type of <code>Sub</code>: …","Alias to make it easy to multiply by 2. …","Alias for the associated type of <code>IsEqual</code>: …","Alias for the associated type of <code>Pow</code>: …","Alias for the associated type of <code>Gcd</code>: …","Alias for the associated type of <code>IsGreater</code>: …","Alias for the associated type of <code>IsGreaterOrEqual</code>: …","Alias for the associated type of <code>IsLess</code>: …","Alias for the associated type of <code>IsLessOrEqual</code>: …","Alias for the associated type of <code>Len</code>: …","Alias for the associated type of <code>Logarithm2</code>: …","Alias for the associated type of <code>Max</code>: …","Alias for the associated type of <code>Min</code>: …","Alias for the associated type of <code>Rem</code>: …","Alias for the associated type of <code>Neg</code>: …","Alias for the associated type of <code>IsNotEqual</code>: …","Alias for the associated type of <code>BitOr</code>: …","Alias for the associated type of <code>PartialDiv</code>: …","Alias for the associated type of <code>Mul</code>: …","Alias for the associated type of <code>Div</code>: …","Alias for the associated type of <code>Shl</code>: …","Alias for the associated type of <code>Shr</code>: …","Alias for the associated type of <code>SquareRoot</code>: …","Alias to make it easy to square. …","Alias to make it easy to subtract 1: …","Alias for the associated type of <code>Add</code>: …","Alias for the associated type of <code>BitXor</code>: …","A <strong>type operator</strong> that returns the absolute value.","A <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …","A <strong>type operator</strong> that computes the greatest common divisor …","The concrete value for the type. Can be used in <code>const</code> …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt; Rhs</code>, otherwise …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt;= Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt; Rhs</code>, otherwise …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt;= Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …","A <strong>type operator</strong> that gives the length of an <code>Array</code> or the …","A <strong>type operator</strong> for taking the integer binary logarithm of …","A <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.","A <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.","Should always be <code>Self</code>","The absolute value.","The result of the exponentiation.","The result of the comparison. It should only ever be one …","The length as a type-level unsigned integer.","The type of the result of the division","The type of the minimum of <code>Self</code> and <code>Rhs</code>","The type of the maximum of <code>Self</code> and <code>Rhs</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The result of the integer square root.","The result of the integer binary logarithm.","The greatest common divisor.","Division as a partial function. This <strong>type operator</strong> …","A <strong>type operator</strong> that provides exponentiation by repeated …","A <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>, …","A <strong>type operator</strong> for taking the integer square root of <code>Self</code>.","A <strong>type operator</strong> for taking a concrete integer value from a …","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","This function isn’t used in this crate, but may be …","Method returning the maximum","Method returning the minimum","Method for performing the division","This function isn’t used in this crate, but may be …","Method returning the concrete value for the type.","","","","","","A <strong>type operator</strong> that, when implemented for unsigned …","Alias for the result of calling <code>SetBit</code>: …","<code>UInt</code> is defined recursively, where <code>B</code> is the least …","The terminating type for <code>UInt</code>; it always comes after the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Instantiates a singleton representing this unsigned …","Instantiates a singleton representing this unsigned …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,1,2,3,0,0,0,1,2,3,0,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,12,14,0,0,0,29,31,31,29,29,31,29,29,31,31,29,31,29,31,29,31,29,31,29,31,29,31,29,31,29,31,29,31,29,31,29,29,31,31,29,29,31,31,29,29,31,31,29,31,29,31,29,31,29,31,29,31,29,31,29,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,37,37,0,0,0,0,40,40,40,36,36,36,41,40,36,41,40,36,41,40,36,41,40,36,41,40,36,41,40,40,36,36,41,40,36,41,40,36,41,40,36,41,40,36,41,40,36,41,40,40,40,36,36,36,41,41,41,40,40,40,36,36,36,41,41,41,40,40,40,40,40,36,36,36,36,36,41,41,41,40,36,41,40,36,41,40,36,41,40,36,41,40,40,36,36,36,41,41,41,40,40,36,36,41,40,40,40,36,36,36,41,41,41,40,36,41,40,36,41,40,36,41,40,36,41,40,40,40,40,36,36,36,36,41,41,41,41,40,36,41,40,36,41,40,36,41,40,36,41,30,0,34,42,34,42,34,42,34,42,34,42,0,0,0,0,0,34,34,34,30,34,34,0,0,30,30,34,42,34,42,34,42,34,42,34,42,60,34,34,34,30,34,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,0,0,0,0,0,0,0,0,0,62,63,46,39,22,26,45,44,64,65,66,67,68,69,70,71,72,0,0,0,0,0,65,66,69,64,67,68,22,44,45,26,46,61,0,0,73,74,0,0,0,0,0,0,38,38,38,38,38,38,38,38,56,56,56,38,56,38,38,38,38,38,56,38,56,38,56,38,56,38,56,38,56,38,56,38,56,38,56,38,56,38,56,38,56,38,56,38,56,38,56,38,56,38,38,38,38,38,56,56,56,38,56,38,56,38,56,38,56,38,56,38,56,38,38,38,38,56,56,56,38,38,38,38,56,56,56,38,38,38,38,38,56,56,38,56,38,56,38,56,38,56,38,38,38,38,38,38,38,38,38,56,56,56,56,56,56,56,56,56,38,56,38,56,38,56,38,56,38,56,38,56,38,56,38,56,38,56],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[[1,1],4],[[2,2],4],[[3,3],4],0,0,[[],1],[[],2],[[],3],[[1,1],5],[[2,2],5],[[3,3],5],[[1,6],7],[[2,6],7],[[3,6],7],[[]],[[]],[[]],[[1,8]],[[2,8]],[[3,8]],0,[[]],[[]],[[]],0,0,0,[[1,1],[[9,[4]]]],[[2,2],[[9,[4]]]],[[3,3],[[9,[4]]]],0,[[],4],[[],4],[[],4],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],0,0,0,0,[[12,12]],[[[14,[13,13]],14]],[[]],[[]],[[]],[[]],[12,12],[[[14,[15,15]]],[[14,[15,15]]]],[[12,12],4],[[[14,[16,16]],[14,[16,16]]],4],[12],[[[14,[[18,[17]],[18,[17]]]],17]],[[12,12],5],[[[14,[19,19]],[14,[19,19]]],5],[[12,6],7],[[[14,[20,20]],6],7],[[]],[[]],[[12,8]],[[[14,[21,21]],8]],[[]],[[]],[12],[[[14,[22]]]],[12],[[[14,[[23,[17]],[23,[17]]]],17]],[12],[[[14,[24,24]]]],[[12,12],[[9,[4]]]],[[[14,[25,25]],[14,[25,25]]],[[9,[4]]]],[12],[[[14,[[26,[17]],[26,[17]]]],17]],[12],[[[14,[[27,[17]],[27,[17]]]],17]],[[12,12]],[[[14,[28,28]],14]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,0,0,[[29,30]],[[31,31]],[[31,29]],[[29,31]],[[29,29]],[[31,30]],[[29,29]],[[29,31]],[[31,29]],[[31,31]],[[]],[[]],[[]],[[]],[29,29],[31,31],[[29,29],4],[[31,31],4],[[],29],[[],31],[[29,29],5],[[31,31],5],[[29,6],7],[[31,6],7],[[]],[[]],[[29,8]],[[31,8]],[[]],[[]],[[29,29],29],[[29,31],31],[[31,31],31],[[31,29],31],[[29,29],29],[[29,31],29],[[31,31],31],[[31,29],29],[[],29],[[],29],[[],31],[[],31],[29],[31],[[29,29],[[9,[4]]]],[[31,31],[[9,[4]]]],[[],5],[[],5],[[],32],[[],32],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[33,[36,[[0,[34,35]]]]]],[[37,[36,[[38,[34,31]]]]]],[[37,[36,[[38,[34,29]]]]]],0,0,0,0,[[[40,[[0,[[39,[[0,[34,35]]]],[0,[[0,[34,35]]]],34,35]]]],[36,[[0,[34,35]]]]]],[[[40,[[0,[[13,[[0,[34,35]]]],34,35]]]],[40,[[0,[34,35]]]]]],[[[40,[[0,[34,35]]]],41]],[[[36,[[0,[34,35]]]],41]],[[[36,[[0,[[13,[[0,[34,35]]]],34,35]]]],[36,[[0,[34,35]]]]]],[[[36,[[0,[34,35]]]],[40,[[0,[[39,[[0,[34,35]]]],[0,[[0,[34,35]]]],34,35]]]]]],[[41,42]],[[]],[[]],[[]],[[]],[[]],[[]],[[[40,[[0,[15,34,35]]]]],[[40,[[0,[15,34,35]]]]]],[[[36,[[0,[15,34,35]]]]],[[36,[[0,[15,34,35]]]]]],[41,41],[[[40,[[0,[16,34,35]]]],[40,[[0,[16,34,35]]]]],4],[[[36,[[0,[16,34,35]]]],[36,[[0,[16,34,35]]]]],4],[[41,41],4],[[],[[40,[[0,[43,34,35]]]]]],[[],[[36,[[0,[43,34,35]]]]]],[[],41],[[[40,[[0,[[39,[[0,[34,35]]]],34,35]]]],[36,[[0,[34,35]]]]]],[[[40,[[0,[[39,[[0,[34,35]]]],34,35]]]],[40,[[0,[34,35]]]]]],[[[36,[[0,[[39,[[0,[34,35]]]],34,35]]]],[36,[[0,[34,35]]]]]],[[[36,[[0,[[39,[[0,[34,35]]]],34,35]]]],[40,[[0,[34,35]]]]]],[[41,[0,[42,35]]]],[[[40,[[0,[19,34,35]]]],[40,[[0,[19,34,35]]]]],5],[[[36,[[0,[19,34,35]]]],[36,[[0,[19,34,35]]]]],5],[[41,41],5],[[[40,[[0,[20,34,35]]]],6],7],[[[36,[[0,[20,34,35]]]],6],7],[[41,6],7],[[]],[[]],[[]],[[[40,[[0,[21,34,35]]]],8]],[[[36,[[0,[21,34,35]]]],8]],[[41,8]],[[]],[[]],[[]],[[[40,[[0,[34,35]]]],41]],[[[40,[[0,[34,35]]]],[36,[[0,[34,35]]]]]],[[[40,[[0,[34,35,[44,[[0,[34,35]]]]]]]],[40,[[0,[34,35]]]]]],[[[36,[[0,[34,35]]]],[40,[[0,[34,35]]]]]],[[[36,[[0,[34,35]]]],41]],[[[36,[[0,[34,35,[45,[[0,[34,35]]]]]]]],[36,[[0,[34,35]]]]]],[[41,[40,[[0,[34,35]]]]]],[[41,[36,[[0,[34,35]]]]]],[[41,41]],[[[40,[[0,[34,35]]]],41]],[[[40,[[0,[34,35]]]],[36,[[0,[34,35]]]]]],[[[40,[[0,[34,35,[45,[[0,[34,35]]]]]]]],[40,[[0,[34,35]]]]]],[[[36,[[0,[34,35]]]],41]],[[[36,[[0,[34,35,[44,[[0,[34,35]]]]]]]],[36,[[0,[34,35]]]]]],[[[36,[[0,[34,35]]]],[40,[[0,[34,35]]]]]],[[41,[40,[[0,[34,35]]]]]],[[41,[36,[[0,[34,35]]]]]],[[41,41]],[[[40,[[0,[34,35]]]],14]],[[[40,[[0,[34,35]]]],41]],[[[40,[[0,[34,35]]]],12]],[[[40,[[0,[[23,[[0,[34,35]]]],34,35]]]],[40,[[0,[34,35]]]]]],[[[40,[[0,[[23,[[0,[34,35]]]],34,35]]]],[36,[[0,[34,35]]]]]],[[[36,[[0,[[23,[[0,[34,35]]]],34,35]]]],[36,[[0,[34,35]]]]]],[[[36,[[0,[[23,[[0,[34,35]]]],34,35]]]],[40,[[0,[34,35]]]]]],[[[36,[[0,[34,35]]]],41]],[[[36,[[0,[34,35]]]],12]],[[[36,[[0,[34,35]]]],14]],[[41,14]],[[41,12]],[[41,42]],[[[40,[[0,[34,35]]]]]],[[[36,[[0,[34,35]]]]]],[41],[[],[[40,[[0,[34,35]]]]]],[[],[[36,[[0,[34,35]]]]]],[[],41],[[[40,[[0,[25,34,35]]]],[40,[[0,[25,34,35]]]]],[[9,[4]]]],[[[36,[[0,[25,34,35]]]],[36,[[0,[25,34,35]]]]],[[9,[4]]]],[[41,41],[[9,[4]]]],[[]],[[]],[[]],[[[40,[[0,[34,35]]]],41]],[[[40,[[0,[[46,[[0,[34,35]]]],34,35]]]],[40,[[0,[34,35]]]]]],[[[36,[[0,[34,35]]]],41]],[[[36,[[0,[[46,[[38,[34,29]]]],34,35]]]],[40,[[38,[34,29]]]]]],[[[36,[[0,[[46,[[38,[34,31]]]],34,35]]]],[40,[[38,[34,31]]]]]],[[41,[40,[[0,[34,35]]]]]],[[41,[36,[[0,[34,35]]]]]],[[41,41]],[[[40,[[0,[[27,[[0,[34,35]]]],34,35]]]],[40,[[0,[34,35]]]]]],[[[40,[[0,[[27,[[0,[34,35]]]],34,35]]]],[36,[[0,[34,35]]]]]],[[[36,[[0,[[27,[[0,[34,35]]]],34,35]]]],[40,[[0,[34,35]]]]]],[[[36,[[0,[[27,[[0,[34,35]]]],34,35]]]],[36,[[0,[34,35]]]]]],[[41,[0,[42,35]]]],[[[40,[[0,[[39,[[0,[34,35]]]],[0,[[0,[34,35]]]],34,35]]]],[40,[[0,[34,35]]]]]],[[[40,[[0,[34,35]]]],41]],[[[40,[[0,[[13,[[0,[34,35]]]],34,35]]]],[36,[[0,[34,35]]]]]],[[[36,[[0,[34,35]]]],[36,[[0,[[39,[[0,[34,35]]]],[0,[[0,[34,35]]]],34,35]]]]]],[[[36,[[0,[[13,[[0,[34,35]]]],34,35]]]],[40,[[0,[34,35]]]]]],[[[36,[[0,[34,35]]]],41]],[[41,41]],[[41,[40,[[0,[34,35]]]]]],[[41,[36,[[0,[34,35]]]]]],[[],47],[[],47],[[],47],[[],48],[[],48],[[],48],[[],49],[[],49],[[],49],[[],50],[[],50],[[],50],[[],50],[[],47],[[],49],[[],48],[[],50],[[],49],[[],48],[[],47],[[],49],[[],47],[[],48],[[],50],[[],51],[[],51],[[],51],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],5],[[],47],[[],47],[[],48],[[],48],[[],49],[[],49],[[],50],[[],50],[[],51],[[],51],[[],4],[[],52],[[],53],[[],54],[[],32],[[],32],[[],55],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[[38,[34,29]],31]],[[[38,[34,30]],29]],[[[38,[[0,[[13,[34]],34]],29]],[38,[34,31]]]],[[[38,[[0,[[13,[34]],34]],31]],[38,[34,31]]]],[[[38,[[0,[[13,[34]],34]],29]],[38,[34,29]]]],[[[38,[[0,[[13,[34]],34]],31]],[38,[34,29]]]],[[[38,[34,30]],56]],[[[38,[[0,[[13,[31]],34]],31]],31]],[[56,29]],[[56,31]],[[56,34]],[[[38,[34,30]],34]],[[56,34]],[[[38,[[0,[[57,[34]],34]],31]],[38,[34,29]]]],[[[38,[34,30]],56]],[[[38,[[0,[[57,[34]],34]],29]],[38,[34,29]]]],[[[38,[[0,[[57,[34]],34]],31]],[38,[34,31]]]],[[[38,[[0,[[57,[34]],34]],29]],[38,[34,31]]]],[[56,34]],[[[38,[34,30]],34]],[[56,34]],[[]],[[]],[[]],[[]],[[[38,[15,15]]],[[38,[15,15]]]],[56,56],[[[38,[16,16]],[38,[16,16]]],4],[[56,56],4],[[],[[38,[43,43]]]],[[],56],[[[38,[34,30]],[38,[34,30]]]],[[56,[38,[34,30]]]],[[[38,[19,19]],[38,[19,19]]],5],[[56,56],5],[[[38,[20,20]],6],7],[[56,6],7],[[]],[[]],[[[38,[21,21]],8]],[[56,8]],[[]],[[]],[[[38,[[0,[22,34]],30]]]],[56],[[[38,[34,30]],34]],[[56,34]],[[[38,[34,30]],34]],[[56,34]],[[[38,[34,30]],56]],[[[38,[[0,[[23,[[38,[34,30]]]],34]],31]],[38,[34,30]]]],[[[38,[[0,[[23,[[38,[34,30]]]],34]],29]],[38,[34,30]]]],[[[38,[34,30]],31]],[[[38,[34,30]],29]],[[56,31]],[[56,34]],[[56,29]],[[],[[38,[34,30]]]],[[],56],[[[38,[25,25]],[38,[25,25]]],[[9,[4]]]],[[56,56],[[9,[4]]]],[[[38,[34,30]],[38,[34,30]]]],[[56,[38,[34,30]]]],[[]],[[]],[[[38,[34,30]],[38,[34,30]]]],[[56,[38,[34,30]]]],[[]],[[]],[[[38,[34,30]],31]],[[[38,[34,30]],[38,[34,30]]]],[[[38,[34,30]],56]],[[[38,[34,30]],29]],[[56,29]],[[56,34]],[[56,31]],[[[38,[34,30]],29]],[[[38,[[0,[[59,[[58,[[38,[34,30]]]]]],34]],30]],[38,[34,30]]]],[[[38,[34,30]],56]],[[[38,[34,30]],31]],[[56,29]],[[56,31]],[[56,34]],[[[38,[56,31]],31]],[[[38,[34,30]],29]],[[[38,[[0,[[28,[31]],34]],29]],31]],[[[38,[[38,[34,30]],31]],31]],[[[38,[34,30]],34]],[[56,56]],[[56,29]],[[],47],[[],47],[[],48],[[],48],[[],49],[[],49],[[],50],[[],50],[[],47],[[],52],[[],53],[[],49],[[],50],[[],32],[[],54],[[],48],[[],55],[[],47],[[],32],[[],52],[[],49],[[],50],[[],53],[[],55],[[],54],[[],48],[[],51],[[],51],[[],52],[[],52],[[],53],[[],53],[[],54],[[],54],[[],32],[[],32],[[],55],[[],55],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11]],"c":[37],"p":[[3,"Greater"],[3,"Less"],[3,"Equal"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"ATerm"],[8,"Add"],[3,"TArr"],[8,"Clone"],[8,"Ord"],[8,"Copy"],[8,"Div"],[8,"PartialEq"],[8,"Debug"],[8,"Hash"],[8,"Len"],[8,"Mul"],[8,"Neg"],[8,"PartialOrd"],[8,"PartialDiv"],[8,"Rem"],[8,"Sub"],[3,"B0"],[8,"Bit"],[3,"B1"],[15,"u8"],[6,"P1"],[8,"Unsigned"],[8,"NonZero"],[3,"NInt"],[6,"N1"],[3,"UInt"],[8,"Cmp"],[3,"PInt"],[3,"Z0"],[8,"Integer"],[8,"Default"],[8,"Max"],[8,"Min"],[8,"Pow"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"usize"],[3,"UTerm"],[8,"BitOr"],[6,"Sub1"],[8,"Shr"],[8,"Ord"],[8,"ToInt"],[8,"Same"],[8,"Abs"],[8,"IsLess"],[8,"IsEqual"],[8,"IsGreater"],[8,"IsLessOrEqual"],[8,"IsNotEqual"],[8,"IsGreaterOrEqual"],[8,"SquareRoot"],[8,"Logarithm2"],[8,"Gcd"],[8,"GetBit"],[8,"SetBit"]]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":"FF","n":["is_xid_continue","is_xid_start"],"q":[[0,"unicode_ident"]],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"c":[],"p":[[15,"char"],[15,"bool"]]},\
"wide":{"doc":"A crate to help you go wide.","t":"SSSSSSSSSSSSSSIIIIIISSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSQQQQQQSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLKLLLLLLLLLLLLLLLLLLLLKLLLLLLLLKLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDD","n":["BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","CmpEq","CmpGe","CmpGt","CmpLe","CmpLt","CmpNe","E","E","E","E","FRAC_1_PI","FRAC_1_PI","FRAC_1_PI","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_1_SQRT_2","FRAC_1_SQRT_2","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_PI","FRAC_2_PI","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_2_SQRT_PI","FRAC_2_SQRT_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_2","FRAC_PI_2","FRAC_PI_2","FRAC_PI_3","FRAC_PI_3","FRAC_PI_3","FRAC_PI_3","FRAC_PI_4","FRAC_PI_4","FRAC_PI_4","FRAC_PI_4","FRAC_PI_6","FRAC_PI_6","FRAC_PI_6","FRAC_PI_6","FRAC_PI_8","FRAC_PI_8","FRAC_PI_8","FRAC_PI_8","HALF","HALF","HALF","HALF","LANES","LANES","LANES","LANES","LANES","LANES","LANES","LANES","LANES","LANES","LANES","LANES","LANES","LANES","LN_10","LN_10","LN_10","LN_10","LN_2","LN_2","LN_2","LN_2","LOG10_2","LOG10_2","LOG10_2","LOG10_2","LOG10_E","LOG10_E","LOG10_E","LOG10_E","LOG2_10","LOG2_10","LOG2_10","LOG2_10","LOG2_E","LOG2_E","LOG2_E","LOG2_E","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","Output","Output","Output","Output","Output","Output","PI","PI","PI","PI","SQRT_2","SQRT_2","SQRT_2","SQRT_2","TAU","TAU","TAU","TAU","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","acos","acos","acos","acos","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","all","all","all","all","all","all","all","all","all","all","any","any","any","any","any","any","any","any","any","any","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_mut","as_array_ref","as_array_ref","as_array_ref","as_array_ref","as_array_ref","as_array_ref","as_array_ref","as_array_ref","as_array_ref","as_array_ref","as_array_ref","as_array_ref","as_array_ref","as_array_ref","as_array_ref","as_array_ref","as_array_ref","as_array_ref","asin","asin","asin","asin","asin_acos","asin_acos","asin_acos","asin_acos","atan","atan","atan","atan","atan2","atan2","atan2","atan2","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","blend","blend","blend","blend","blend","blend","blend","blend","blend","blend","blend","blend","blend","blend","blend","blend","blend","blend","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_eq","cmp_ge","cmp_ge","cmp_ge","cmp_ge","cmp_ge","cmp_ge","cmp_ge","cmp_ge","cmp_ge","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_gt","cmp_le","cmp_le","cmp_le","cmp_le","cmp_le","cmp_le","cmp_le","cmp_le","cmp_le","cmp_lt","cmp_lt","cmp_lt","cmp_lt","cmp_lt","cmp_lt","cmp_lt","cmp_lt","cmp_lt","cmp_lt","cmp_lt","cmp_lt","cmp_lt","cmp_lt","cmp_lt","cmp_lt","cmp_lt","cmp_lt","cmp_lt","cmp_ne","cmp_ne","cmp_ne","cmp_ne","cmp_ne","cmp_ne","cmp_ne","cmp_ne","cmp_ne","copysign","copysign","copysign","copysign","cos","cos","cos","cos","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dot","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","exp","exp","exp","exp","f32x4","f32x8","f64x2","f64x4","fast_max","fast_max","fast_max","fast_max","fast_min","fast_min","fast_min","fast_min","fast_round_int","fast_round_int","fast_trunc_int","fast_trunc_int","flip_signs","flip_signs","flip_signs","flip_signs","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i16x16_saturate","from_i16x16_truncate","from_i16x8","from_i32x8_saturate","from_i32x8_truncate","from_i8x16","from_slice_unaligned","from_slice_unaligned","from_u8x16_low","i16x16","i16x8","i32x4","i32x8","i64x2","i64x4","i8x16","i8x32","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_finite","is_finite","is_finite","is_finite","is_inf","is_inf","is_inf","is_inf","is_nan","is_nan","is_nan","is_nan","is_negative","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","ln","ln","ln","ln","log10","log10","log10","log10","log2","log2","log2","log2","max","max","max","max","max","max","max","max","max","max","max","max","max","max","min","min","min","min","min","min","min","min","min","min","min","min","min","min","move_mask","move_mask","move_mask","move_mask","move_mask","move_mask","move_mask","move_mask","move_mask","move_mask","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_neg_add","mul_neg_add","mul_neg_add","mul_neg_add","mul_neg_sub","mul_neg_sub","mul_neg_sub","mul_neg_sub","mul_scale_round","mul_scale_round","mul_scale_round_n","mul_scale_round_n","mul_sub","mul_sub","mul_sub","mul_sub","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","none","none","none","none","none","none","none","none","none","none","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","pow_f32x4","pow_f32x8","pow_f64x2","pow_f64x4","powf","powf","powf","powf","product","product","product","product","product","product","product","recip","recip","recip_sqrt","recip_sqrt","reduce_add","reduce_add","reduce_add","reduce_add","reduce_add","reduce_add","reduce_add","reduce_add","reduce_max","reduce_max","reduce_max","reduce_max","reduce_min","reduce_min","reduce_min","reduce_min","round","round","round","round","round_float","round_float","round_float","round_float","round_int","round_int","round_int","round_int","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","sign_bit","sign_bit","sin","sin","sin","sin","sin_cos","sin_cos","sin_cos","sin_cos","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","sqrt","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","tan","tan","tan","tan","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_degrees","to_degrees","to_degrees","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","to_radians","to_radians","to_radians","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","transpose","transpose","transpose","trunc_int","trunc_int","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u16x8","u32x4","u32x8","u64x2","u64x4","u8x16"],"q":[[0,"wide"]],"d":["The size of this SIMD vector in bits.","The size of this SIMD vector in bits.","The size of this SIMD vector in bits.","The size of this SIMD vector in bits.","The size of this SIMD vector in bits.","The size of this SIMD vector in bits.","The size of this SIMD vector in bits.","The size of this SIMD vector in bits.","The size of this SIMD vector in bits.","The size of this SIMD vector in bits.","The size of this SIMD vector in bits.","The size of this SIMD vector in bits.","The size of this SIMD vector in bits.","The size of this SIMD vector in bits.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of lanes in this SIMD vector.","The number of lanes in this SIMD vector.","The number of lanes in this SIMD vector.","The number of lanes in this SIMD vector.","The number of lanes in this SIMD vector.","The number of lanes in this SIMD vector.","The number of lanes in this SIMD vector.","The number of lanes in this SIMD vector.","The number of lanes in this SIMD vector.","The number of lanes in this SIMD vector.","The number of lanes in this SIMD vector.","The number of lanes in this SIMD vector.","The number of lanes in this SIMD vector.","The number of lanes in this SIMD vectoralculates partial dot product. Multiplies packed signed …","Calculates partial dot product. Multiplies packed signed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculate the exponent of a packed f32x8","Calculate the exponent of a packed f32x4","Calculate the exponent of a packed f64x4","Calculate the exponent of a packed f64x2","","","","","Calculates the lanewise maximum of both vectors. This is a …","Calculates the lanewise maximum of both vectors. This is a …","Calculates the lanewise maximum of both vectors. This is a …","Calculates the lanewise maximum of both vectors. This is a …","Calculates the lanewise minimum of both vectors. This is a …","Calculates the lanewise minimum of both vectors. This is a …","Calculates the lanewise minimum of both vectors. This is a …","Calculates the lanewise minimum of both vectors. This is a …","Rounds each lane into an integer. This is a faster …","Rounds each lane into an integer. This is a faster …","Truncates each lane into an integer. This is a faster …","Truncates each lane into an integer. This is a faster …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Splats the single value given across all lanes.","","Returns the argument unchanged.","","","","Splats the single value given across all lanes.","Returns the argument unchanged.","Splats the single value given across all lanes.","Returns the argument unchanged.","","","Returns the argument unchanged.","Splats the single value given across all lanes.","","","","Splats the single value given across all lanes.","Returns the argument unchanged.","Returns the argument unchanged.","","","Splats the single value given across all lanes.","Splats the single value given across all lanes.","","Returns the argument unchanged.","","Splats the single value given across all lanes.","Returns the argument unchanged.","","","Returns the argument unchanged.","Splats the single value given across all lanes.","Splats the single value given across all lanes.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Splats the single value given across all lanes.","","","","Splats the single value given across all lanes.","Returns the argument unchanged.","","Splats the single value given across all lanes.","","Returns the argument unchanged.","Splats the single value given across all lanes.","","Returns the argument unchanged.","","Splats the single value given across all lanes.","Returns the argument unchanged.","Returns the argument unchanged.","Splats the single value given across all lanes.","","Splats the single value given across all lanes.","","Returns the argument unchanged.","Returns the argument unchanged.","","Splats the single value given across all lanes.","","converts i16 to i8, saturating values that are too large","converts i16 to i8, truncating the upper bits if they are …","widens and sign extends to i32x8","returns low i16 of i32, saturating values that are too …","returns low i16 of i32, truncating the upper bits if they …","widens and sign extends to i16x16","","","Unpack the lower half of the input and expand it to <code>i16</code> …","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Natural log (ln(x))","Natural log (ln(x))","Natural log (ln(x))","","","","","","","","","","Calculates the lanewise maximum of both vectors. This doesn…","Calculates the lanewise maximum of both vectors. If either …","Calculates the lanewise maximum of both vectors. If either …","Calculates the lanewise maximum of both vectors. If either …","","","","","","","","","","","Calculates the lanewise minimum of both vectors. If either …","Calculates the lanewise minimum of both vectors. If either …","Calculates the lanewise minimum of both vectors. If either …","Calculates the lanewise minimum of both vectors. If either …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multiply and scale equivilent to ((self * rhs) + 0x4000) …","Multiply and scale equivilent to ((self * rhs) + 0x4000) …","Multiply and scale equivilent to ((self * rhs) + 0x4000) …","Multiply and scale, equivalent to ((self * rhs) + 0x4000) …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","horizontal add of all the elements of the vector","horizontal add of all the elements of the vector","horizontal add of all the elements of the vector","horizontal add of all the elements of the vector","horizontal add of all the elements of the vector","horizontal add of all the elements of the vector","horizontal add of all the elements of the vector","horizontal add of all the elements of the vector","horizontal max of all the elements of the vector","horizontal max of all the elements of the vector","horizontal max of all the elements of the vector","horizontal max of all the elements of the vector","horizontal min of all the elements of the vector","horizontal min of all the elements of the vector","horizontal min of all the elements of the vector","horizontal min of all the elements of the vector","","","","","","","","","Rounds each lane into an integer. This saturates out of …","Rounds each lane into an integer. This saturates out of …","","","","","","","","","","","","","","","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value given.","Shifts all lanes by the value givenranspose matrix of 8x8 f32 matrix. Currently only …","transpose matrix of 8x8 i16 matrix","Transpose matrix of 8x8 i32 matrix. Currently only …","Truncates each lane into an integer. This saturates out of …","Truncates each lane into an integer. This saturates out of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[5,6,7,8,9,10,16,18,19,21,23,25,26,28,0,0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,40,41,42,43,44,45,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,2,3,4,5,6,7,8,9,10,1,2,3,4,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,16,16,16,18,18,19,19,19,21,21,21,23,23,23,25,25,26,26,26,28,28,28,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,16,16,19,19,21,21,23,23,25,25,26,26,28,28,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,16,16,18,19,19,21,21,23,23,25,25,26,26,28,28,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,16,16,19,19,21,21,23,23,25,25,26,26,28,28,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,16,16,18,19,19,21,21,23,23,25,25,26,26,28,28,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,16,16,19,19,21,21,23,23,25,25,26,26,28,28,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,16,16,18,19,19,21,21,23,23,25,25,26,26,28,28,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,16,16,19,19,21,21,23,23,25,25,26,26,28,28,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,40,1,1,2,2,3,3,4,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,42,1,1,2,2,3,3,4,4,41,1,1,2,2,3,3,4,4,5,6,7,8,9,10,16,18,23,25,26,28,45,1,1,2,2,3,3,4,4,44,1,1,2,2,3,3,4,4,5,6,7,8,9,10,16,18,23,25,43,1,1,2,2,3,3,4,4,1,2,3,4,1,2,3,4,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,1,1,2,2,2,3,3,3,4,4,4,1,1,2,2,3,3,4,4,6,8,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,2,3,4,0,0,0,0,1,2,3,4,1,2,3,4,1,2,1,2,1,2,3,4,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,16,16,16,16,16,16,16,16,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,21,21,21,21,21,21,21,21,23,23,23,23,23,23,23,23,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,28,28,28,28,28,28,28,28,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,9,9,9,10,10,10,10,10,16,16,16,18,18,18,18,19,19,19,19,21,21,21,23,23,23,25,25,25,26,26,26,28,28,28,28,5,5,10,8,8,6,5,8,8,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,2,3,4,1,2,3,4,1,2,3,4,8,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,6,7,8,9,10,19,21,23,25,1,2,3,4,5,6,7,8,9,10,19,21,23,25,1,2,3,4,5,6,7,8,9,10,1,1,1,2,2,2,3,3,3,4,4,4,6,6,6,8,8,8,9,9,9,10,10,10,16,16,18,18,21,21,23,23,25,26,26,28,28,1,2,3,4,1,1,2,2,3,3,4,4,6,6,8,8,9,9,10,10,1,2,3,4,1,2,3,4,6,8,6,8,1,2,3,4,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,16,16,18,18,19,19,21,21,23,23,25,25,26,26,28,28,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,2,3,4,5,6,7,8,9,10,1,2,2,3,4,5,5,6,6,7,7,8,8,9,9,10,16,16,18,19,19,21,21,23,23,25,26,26,28,2,1,4,3,1,2,3,4,1,2,3,4,8,9,10,1,2,1,2,1,2,3,4,6,8,9,10,6,8,9,10,6,8,9,10,1,2,3,4,9,10,16,18,1,2,3,4,5,6,7,8,19,21,5,6,7,8,19,21,6,6,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,16,16,16,16,16,16,16,16,16,16,18,18,18,18,18,18,18,18,18,18,21,21,21,21,21,21,21,21,21,21,23,23,23,23,23,23,23,23,23,23,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,28,28,28,28,28,28,28,28,28,28,6,6,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,16,16,16,16,16,16,16,16,16,16,18,18,18,18,18,18,18,18,18,18,21,21,21,21,21,21,21,21,21,21,23,23,23,23,23,23,23,23,23,23,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,28,28,28,28,28,28,28,28,28,28,1,2,1,2,3,4,1,2,3,4,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,2,3,4,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,16,16,16,18,18,19,19,19,21,21,21,23,23,23,25,25,26,26,26,28,28,28,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,16,16,19,19,21,21,23,23,25,25,26,26,28,28,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,2,3,4,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,2,3,4,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,2,3,4,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,8,10,1,2,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,1,2,3,4,5,6,7,8,9,10,16,18,19,21,23,25,26,28,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[1,1],[2,2],[3,3],[4,4],[[1,1]],[[1,11]],[[1,1]],[[2,11]],[[2,2]],[[2,2]],[[3,12]],[[3,3]],[[3,3]],[[4,4]],[[4,12]],[[4,4]],[[5,13]],[[5,5]],[[5,5]],[[6,6]],[[6,14]],[[6,6]],[[7,13]],[[7,7]],[[7,7]],[[8,14]],[[8,8]],[[8,8]],[[9,9]],[[9,15]],[[9,9]],[[10,10]],[[10,10]],[[10,15]],[[16,16]],[[16,17]],[[16,16]],[[18,17]],[[18,18]],[[19,19]],[[19,20]],[[19,19]],[[21,21]],[[21,21]],[[21,22]],[[23,23]],[[23,24]],[[23,23]],[[25,25]],[[25,25]],[[26,26]],[[26,27]],[[26,26]],[[28,28]],[[28,27]],[[28,28]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[3,3]],[[3,3]],[[4,4]],[[4,4]],[[5,5]],[[5,5]],[[6,6]],[[6,6]],[[7,7]],[[7,7]],[[8,8]],[[8,8]],[[9,9]],[[9,9]],[[10,10]],[[10,10]],[[16,16]],[[16,16]],[[19,19]],[[19,19]],[[21,21]],[[21,21]],[[23,23]],[[23,23]],[[25,25]],[[25,25]],[[26,26]],[[26,26]],[[28,28]],[[28,28]],[1,29],[2,29],[3,29],[4,29],[5,29],[6,29],[7,29],[8,29],[9,29],[10,29],[1,29],[2,29],[3,29],[4,29],[5,29],[6,29],[7,29],[8,29],[9,29],[10,29],[1,[[30,[11]]]],[2,[[30,[11]]]],[3,[[30,[12]]]],[4,[[30,[12]]]],[5,[[30,[13]]]],[6,[[30,[14]]]],[7,[[30,[13]]]],[8,[[30,[14]]]],[9,[[30,[15]]]],[10,[[30,[15]]]],[16,[[30,[17]]]],[18,[[30,[17]]]],[19,[[30,[20]]]],[21,[[30,[22]]]],[23,[[30,[24]]]],[25,[[30,[24]]]],[26,[[30,[27]]]],[28,[[30,[27]]]],[1,[[30,[11]]]],[2,[[30,[11]]]],[3,[[30,[12]]]],[4,[[30,[12]]]],[5,[[30,[13]]]],[6,[[30,[14]]]],[7,[[30,[13]]]],[8,[[30,[14]]]],[9,[[30,[15]]]],[10,[[30,[15]]]],[16,[[30,[17]]]],[18,[[30,[17]]]],[19,[[30,[20]]]],[21,[[30,[22]]]],[23,[[30,[24]]]],[25,[[30,[24]]]],[26,[[30,[27]]]],[28,[[30,[27]]]],[1,1],[2,2],[3,3],[4,4],[1],[2],[3],[4],[1,1],[2,2],[3,3],[4,4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[3,3]],[[3,3]],[[4,4]],[[4,4]],[[5,5]],[[5,5]],[[6,6]],[[6,6]],[[7,7]],[[7,7]],[[8,8]],[[8,8]],[[9,9]],[[9,9]],[[10,10]],[[10,10]],[[16,16]],[[16,16]],[[18,18]],[[19,19]],[[19,19]],[[21,21]],[[21,21]],[[23,23]],[[23,23]],[[25,25]],[[25,25]],[[26,26]],[[26,26]],[[28,28]],[[28,28]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[3,3]],[[3,3]],[[4,4]],[[4,4]],[[5,5]],[[5,5]],[[6,6]],[[6,6]],[[7,7]],[[7,7]],[[8,8]],[[8,8]],[[9,9]],[[9,9]],[[10,10]],[[10,10]],[[16,16]],[[16,16]],[[19,19]],[[19,19]],[[21,21]],[[21,21]],[[23,23]],[[23,23]],[[25,25]],[[25,25]],[[26,26]],[[26,26]],[[28,28]],[[28,28]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[3,3]],[[3,3]],[[4,4]],[[4,4]],[[5,5]],[[5,5]],[[6,6]],[[6,6]],[[7,7]],[[7,7]],[[8,8]],[[8,8]],[[9,9]],[[9,9]],[[10,10]],[[10,10]],[[16,16]],[[16,16]],[[18,18]],[[19,19]],[[19,19]],[[21,21]],[[21,21]],[[23,23]],[[23,23]],[[25,25]],[[25,25]],[[26,26]],[[26,26]],[[28,28]],[[28,28]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[3,3]],[[3,3]],[[4,4]],[[4,4]],[[5,5]],[[5,5]],[[6,6]],[[6,6]],[[7,7]],[[7,7]],[[8,8]],[[8,8]],[[9,9]],[[9,9]],[[10,10]],[[10,10]],[[16,16]],[[16,16]],[[19,19]],[[19,19]],[[21,21]],[[21,21]],[[23,23]],[[23,23]],[[25,25]],[[25,25]],[[26,26]],[[26,26]],[[28,28]],[[28,28]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[3,3]],[[3,3]],[[4,4]],[[4,4]],[[5,5]],[[5,5]],[[6,6]],[[6,6]],[[7,7]],[[7,7]],[[8,8]],[[8,8]],[[9,9]],[[9,9]],[[10,10]],[[10,10]],[[16,16]],[[16,16]],[[18,18]],[[19,19]],[[19,19]],[[21,21]],[[21,21]],[[23,23]],[[23,23]],[[25,25]],[[25,25]],[[26,26]],[[26,26]],[[28,28]],[[28,28]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[3,3]],[[3,3]],[[4,4]],[[4,4]],[[5,5]],[[5,5]],[[6,6]],[[6,6]],[[7,7]],[[7,7]],[[8,8]],[[8,8]],[[9,9]],[[9,9]],[[10,10]],[[10,10]],[[16,16]],[[16,16]],[[19,19]],[[19,19]],[[21,21]],[[21,21]],[[23,23]],[[23,23]],[[25,25]],[[25,25]],[[26,26]],[[26,26]],[[28,28]],[[28,28]],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[7,7,7],7],[[8,8,8],8],[[9,9,9],9],[[10,10,10],10],[[16,16,16],16],[[18,18,18],18],[[19,19,19],19],[[21,21,21],21],[[23,23,23],23],[[25,25,25],25],[[26,26,26],26],[[28,28,28],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[16,16],[18,18],[19,19],[21,21],[23,23],[25,25],[26,26],[28,28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,11]],[[1,1]],[[2,2]],[[2,11]],[[3,12]],[[3,3]],[[4,4]],[[4,12]],[[5,5]],[[6,6]],[[7,7]],[[8,8]],[[9,9]],[[10,10]],[[16,16]],[[18,18]],[[19,19],19],[[21,21],21],[[23,23],23],[[25,25],25],[[26,26],26],[[28,28],28],[[]],[[1,1]],[[1,11]],[[2,11]],[[2,2]],[[3,3]],[[3,12]],[[4,12]],[[4,4]],[[]],[[1,1]],[[1,11]],[[2,11]],[[2,2]],[[3,12]],[[3,3]],[[4,4]],[[4,12]],[[5,5]],[[6,6]],[[7,7]],[[8,8]],[[9,9]],[[10,10]],[[16,16]],[[18,18]],[[23,23],23],[[25,25],25],[[26,26],26],[[28,28],28],[[]],[[1,1]],[[1,11]],[[2,2]],[[2,11]],[[3,12]],[[3,3]],[[4,4]],[[4,12]],[[]],[[1,1]],[[1,11]],[[2,2]],[[2,11]],[[3,3]],[[3,12]],[[4,12]],[[4,4]],[[5,5]],[[6,6]],[[7,7]],[[8,8]],[[9,9]],[[10,10]],[[16,16]],[[18,18]],[[23,23],23],[[25,25],25],[[]],[[1,1]],[[1,11]],[[2,2]],[[2,11]],[[3,3]],[[3,12]],[[4,12]],[[4,4]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[1,1],[2,2],[3,3],[4,4],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],9],[[],10],[[],16],[[],18],[[],19],[[],21],[[],23],[[],25],[[],26],[[],28],[[1,1]],[[1,11]],[[1,1]],[[2,2]],[[2,2]],[[2,11]],[[3,3]],[[3,12]],[[3,3]],[[4,12]],[[4,4]],[[4,4]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[3,3]],[[3,3]],[[4,4]],[[4,4]],[[6,6],10],[[8,8],9],[[1,1],29],[[2,2],29],[[3,3],29],[[4,4],29],[[5,5],29],[[6,6],29],[[7,7],29],[[8,8],29],[[9,9],29],[[10,10],29],[[16,16],29],[[18,18],29],[[19,19],29],[[21,21],29],[[23,23],29],[[25,25],29],[[26,26],29],[[28,28],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[1,1],[2,2],[3,3],[4,4],0,0,0,0,[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[1,10],[2,9],[1,10],[2,9],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,31],32],[[1,31],32],[[1,31],32],[[1,31],32],[[1,31],32],[[1,31],32],[[1,31],32],[[1,31],32],[[2,31],32],[[2,31],32],[[2,31],32],[[2,31],32],[[2,31],32],[[2,31],32],[[2,31],32],[[2,31],32],[[3,31],32],[[3,31],32],[[3,31],32],[[3,31],32],[[3,31],32],[[3,31],32],[[3,31],32],[[3,31],32],[[4,31],32],[[4,31],32],[[4,31],32],[[4,31],32],[[4,31],32],[[4,31],32],[[4,31],32],[[4,31],32],[[5,31],32],[[5,31],32],[[5,31],32],[[5,31],32],[[5,31],32],[[5,31],32],[[5,31],32],[[5,31],32],[[6,31],32],[[6,31],32],[[6,31],32],[[6,31],32],[[6,31],32],[[6,31],32],[[6,31],32],[[6,31],32],[[7,31],32],[[7,31],32],[[7,31],32],[[7,31],32],[[7,31],32],[[7,31],32],[[7,31],32],[[7,31],32],[[8,31],32],[[8,31],32],[[8,31],32],[[8,31],32],[[8,31],32],[[8,31],32],[[8,31],32],[[8,31],32],[[9,31],32],[[9,31],32],[[9,31],32],[[9,31],32],[[9,31],32],[[9,31],32],[[9,31],32],[[9,31],32],[[10,31],32],[[10,31],32],[[10,31],32],[[10,31],32],[[10,31],32],[[10,31],32],[[10,31],32],[[10,31],32],[[16,31],32],[[16,31],32],[[16,31],32],[[16,31],32],[[16,31],32],[[16,31],32],[[16,31],32],[[16,31],32],[[18,31],32],[[18,31],32],[[18,31],32],[[18,31],32],[[18,31],32],[[18,31],32],[[18,31],32],[[18,31],32],[[19,31],32],[[19,31],32],[[19,31],32],[[19,31],32],[[19,31],32],[[19,31],32],[[19,31],32],[[19,31],32],[[21,31],32],[[21,31],32],[[21,31],32],[[21,31],32],[[21,31],32],[[21,31],32],[[21,31],32],[[21,31],32],[[23,31],32],[[23,31],32],[[23,31],32],[[23,31],32],[[23,31],32],[[23,31],32],[[23,31],32],[[23,31],32],[[25,31],32],[[25,31],32],[[25,31],32],[[25,31],32],[[25,31],32],[[25,31],32],[[25,31],32],[[25,31],32],[[26,31],32],[[26,31],32],[[26,31],32],[[26,31],32],[[26,31],32],[[26,31],32],[[26,31],32],[[26,31],32],[[28,31],32],[[28,31],32],[[28,31],32],[[28,31],32],[[28,31],32],[[28,31],32],[[28,31],32],[[28,31],32],[11,1],[[[30,[11]]],1],[[]],[[[33,[11]]],1],[[[30,[11]]],2],[[[33,[11]]],2],[11,2],[[]],[12,3],[[]],[[[33,[12]]],3],[[[30,[12]]],3],[[]],[12,4],[[[30,[12]]],4],[[[30,[13]]],5],[[[33,[13]]],5],[13,5],[[]],[[]],[[[33,[14]]],6],[[[30,[14]]],6],[14,6],[13,7],[[[33,[13]]],7],[[]],[[[30,[13]]],7],[14,8],[[]],[[[30,[14]]],8],[[[30,[15]]],9],[[]],[15,9],[15,10],[[[33,[15]]],10],[[]],[[[33,[13]]],10],[[[30,[15]]],10],[[]],[17,16],[[[30,[17]]],16],[[[33,[17]]],18],[[[30,[17]]],18],[17,18],[[]],[[[30,[20]]],19],[20,19],[[[33,[20]]],19],[[]],[22,21],[[[30,[22]]],21],[[]],[[[30,[24]]],23],[24,23],[[]],[[]],[24,25],[[[30,[24]]],25],[27,26],[[[30,[27]]],26],[[]],[[]],[[[30,[27]]],28],[27,28],[[[33,[27]]],28],[6,5],[6,5],[8,10],[10,8],[10,8],[5,6],[[[33,[13]]],5],[[[33,[14]]],8],[19,8],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[1,1],[2,2],[3,3],[4,4],[1,1],[2,2],[3,3],[4,4],[8,8],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[1,1],[2,2],[3,3],[4,4],[1,1],[2,2],[3,3],[4,4],[1,1],[2,2],[3,3],[4,4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[19,19],19],[[21,21],21],[[23,23],23],[[25,25],25],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[19,19],19],[[21,21],21],[[23,23],23],[[25,25],25],[1,15],[2,15],[3,15],[4,15],[5,15],[6,15],[7,15],[8,15],[9,15],[10,15],[[1,1]],[[1,11]],[[1,1]],[[2,2]],[[2,2]],[[2,11]],[[3,12]],[[3,3]],[[3,3]],[[4,12]],[[4,4]],[[4,4]],[[6,6]],[[6,14]],[[6,6]],[[8,14]],[[8,8]],[[8,8]],[[9,15]],[[9,9]],[[9,9]],[[10,10]],[[10,15]],[[10,10]],[[16,16]],[[16,17]],[[18,17]],[[18,18]],[[21,21]],[[21,22]],[[23,23]],[[23,24]],[[25,25]],[[26,27]],[[26,26]],[[28,28]],[[28,27]],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[3,3]],[[3,3]],[[4,4]],[[4,4]],[[6,6]],[[6,6]],[[8,8]],[[8,8]],[[9,9]],[[9,9]],[[10,10]],[[10,10]],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[6,6],6],[[8,8],8],[[6,14],6],[[8,14],8],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[1],[1],[2],[2],[3],[3],[4],[4],[5],[5],[6],[6],[7],[7],[8],[8],[9],[9],[10],[10],[16],[16],[18],[18],[19],[19],[21],[21],[23],[23],[25],[25],[26],[26],[28],[28],[[[30,[11]]],1],[[[30,[11]]],2],[[[30,[12]]],3],[[[30,[12]]],4],[[[30,[13]]],5],[[[30,[14]]],6],[[[30,[13]]],7],[[[30,[14]]],8],[[[30,[15]]],9],[[[30,[15]]],10],[[[30,[17]]],16],[[[30,[17]]],18],[[[30,[20]]],19],[[[30,[22]]],21],[[[30,[24]]],23],[[[30,[24]]],25],[[[30,[27]]],26],[[[30,[27]]],28],[1,29],[2,29],[3,29],[4,29],[5,29],[6,29],[7,29],[8,29],[9,29],[10,29],[1,1],[2],[2],[3,3],[4,4],[5],[5],[6],[6],[7],[7],[8],[8],[9],[9],[10,10],[16],[16],[18,18],[19],[19],[21],[21],[23],[23],[25,25],[26],[26],[28,28],[[2,2],2],[[1,1],1],[[4,4],4],[[3,3],3],[[1,11],1],[[2,11],2],[[3,12],3],[[4,12],4],[34,1],[34,2],[34,3],[34,4],[34,8],[34,9],[34,10],[1,1],[2,2],[1,1],[2,2],[1,11],[2,11],[3,12],[4,12],[6,14],[8,14],[9,15],[10,15],[6,14],[8,14],[9,15],[10,15],[6,14],[8,14],[9,15],[10,15],[1,1],[2,2],[3,3],[4,4],[9,2],[10,1],[16,4],[18,3],[1,10],[2,9],[3,18],[4,16],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[19,19],19],[[21,21],21],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[19,19],19],[[21,21],21],[[6,35]],[[6,14]],[[6,20]],[[6,24]],[[6,15]],[[6,22]],[[6,17]],[[6,13]],[[6,36]],[[6,27]],[[8,35]],[[8,14]],[[8,15]],[[8,13]],[[8,20]],[[8,22]],[[8,17]],[[8,36]],[[8,24]],[[8,27]],[[9,35]],[[9,20]],[[9,17]],[[9,24]],[[9,13]],[[9,27]],[[9,36]],[[9,14]],[[9,22]],[[9,15]],[[10,36]],[[10,24]],[[10,20]],[[10,14]],[[10,22]],[[10,15]],[[10,13]],[[10,17]],[[10,27]],[[10,35]],[[16,36]],[[16,20]],[[16,15]],[[16,24]],[[16,17]],[[16,13]],[[16,35]],[[16,27]],[[16,22]],[[16,14]],[[18,14]],[[18,22]],[[18,35]],[[18,13]],[[18,24]],[[18,36]],[[18,15]],[[18,20]],[[18,27]],[[18,17]],[[21,22]],[[21,36]],[[21,15]],[[21,17]],[[21,24]],[[21,35]],[[21,13]],[[21,27]],[[21,20]],[[21,14]],[[23,27]],[[23,15]],[[23,24]],[[23,13]],[[23,36]],[[23,22]],[[23,20]],[[23,14]],[[23,35]],[[23,17]],[[25,17]],[[25,22]],[[25,36]],[[25,14]],[[25,13]],[[25,35]],[[25,24]],[[25,15]],[[25,27]],[[25,20]],[[26,24]],[[26,13]],[[26,27]],[[26,36]],[[26,22]],[[26,17]],[[26,15]],[[26,35]],[[26,20]],[[26,14]],[[28,20]],[[28,36]],[[28,14]],[[28,22]],[[28,15]],[[28,13]],[[28,35]],[[28,24]],[[28,27]],[[28,17]],[[6,35]],[[6,20]],[[6,27]],[[6,17]],[[6,22]],[[6,24]],[[6,14]],[[6,15]],[[6,13]],[[6,36]],[[8,36]],[[8,35]],[[8,24]],[[8,15]],[[8,17]],[[8,27]],[[8,22]],[[8,20]],[[8,13]],[[8,14]],[[9,20]],[[9,13]],[[9,14]],[[9,15]],[[9,22]],[[9,35]],[[9,24]],[[9,17]],[[9,36]],[[9,27]],[[10,14]],[[10,24]],[[10,13]],[[10,20]],[[10,36]],[[10,22]],[[10,15]],[[10,35]],[[10,27]],[[10,17]],[[16,20]],[[16,15]],[[16,17]],[[16,13]],[[16,24]],[[16,22]],[[16,36]],[[16,35]],[[16,27]],[[16,14]],[[18,13]],[[18,36]],[[18,27]],[[18,20]],[[18,24]],[[18,17]],[[18,15]],[[18,14]],[[18,35]],[[18,22]],[[21,22]],[[21,15]],[[21,14]],[[21,24]],[[21,27]],[[21,35]],[[21,36]],[[21,13]],[[21,20]],[[21,17]],[[23,14]],[[23,13]],[[23,27]],[[23,36]],[[23,15]],[[23,35]],[[23,22]],[[23,17]],[[23,20]],[[23,24]],[[25,24]],[[25,27]],[[25,22]],[[25,15]],[[25,35]],[[25,14]],[[25,36]],[[25,13]],[[25,20]],[[25,17]],[[26,22]],[[26,13]],[[26,35]],[[26,27]],[[26,20]],[[26,14]],[[26,17]],[[26,15]],[[26,24]],[[26,36]],[[28,13]],[[28,22]],[[28,36]],[[28,35]],[[28,24]],[[28,20]],[[28,17]],[[28,15]],[[28,27]],[[28,14]],[1,1],[2,2],[1,1],[2,2],[3,3],[4,4],[1],[2],[3],[4],[11,1],[11,2],[12,3],[12,4],[13,5],[14,6],[13,7],[14,8],[15,9],[15,10],[17,16],[17,18],[20,19],[22,21],[24,23],[24,25],[27,26],[27,28],[1,1],[2,2],[3,3],[4,4],[[1,11]],[[1,1]],[[1,1]],[[2,2]],[[2,11]],[[2,2]],[[3,3]],[[3,3]],[[3,12]],[[4,12]],[[4,4]],[[4,4]],[[5,5]],[[5,5]],[[5,13]],[[6,6]],[[6,14]],[[6,6]],[[7,7]],[[7,13]],[[7,7]],[[8,8]],[[8,8]],[[8,14]],[[9,9]],[[9,9]],[[9,15]],[[10,10]],[[10,15]],[[10,10]],[[16,16]],[[16,17]],[[16,16]],[[18,18]],[[18,17]],[[19,20]],[[19,19]],[[19,19]],[[21,21]],[[21,21]],[[21,22]],[[23,24]],[[23,23]],[[23,23]],[[25,25]],[[25,25]],[[26,26]],[[26,27]],[[26,26]],[[28,28]],[[28,28]],[[28,27]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[3,3]],[[3,3]],[[4,4]],[[4,4]],[[5,5]],[[5,5]],[[6,6]],[[6,6]],[[7,7]],[[7,7]],[[8,8]],[[8,8]],[[9,9]],[[9,9]],[[10,10]],[[10,10]],[[16,16]],[[16,16]],[[19,19]],[[19,19]],[[21,21]],[[21,21]],[[23,23]],[[23,23]],[[25,25]],[[25,25]],[[26,26]],[[26,26]],[[28,28]],[[28,28]],[34,2],[34,3],[34,4],[34,5],[34,6],[34,7],[34,8],[34,9],[34,10],[34,16],[34,18],[34,19],[34,21],[34,23],[34,25],[34,26],[34,28],[1,1],[2,2],[3,3],[4,4],[1,[[30,[11]]]],[2,[[30,[11]]]],[3,[[30,[12]]]],[4,[[30,[12]]]],[5,[[30,[13]]]],[6,[[30,[14]]]],[7,[[30,[13]]]],[8,[[30,[14]]]],[9,[[30,[15]]]],[10,[[30,[15]]]],[16,[[30,[17]]]],[18,[[30,[17]]]],[19,[[30,[20]]]],[21,[[30,[22]]]],[23,[[30,[24]]]],[25,[[30,[24]]]],[26,[[30,[27]]]],[28,[[30,[27]]]],[1,1],[2,2],[3,3],[4,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[[30,[1]]],[[30,[1]]]],[[[30,[8]]],[[30,[8]]]],[[[30,[10]]],[[30,[10]]]],[1,10],[2,9],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],0,0,0,0,0,0],"c":[],"p":[[3,"f32x8"],[3,"f32x4"],[3,"f64x4"],[3,"f64x2"],[3,"i8x16"],[3,"i16x16"],[3,"i8x32"],[3,"i16x8"],[3,"i32x4"],[3,"i32x8"],[15,"f32"],[15,"f64"],[15,"i8"],[15,"i16"],[15,"i32"],[3,"i64x2"],[15,"i64"],[3,"i64x4"],[3,"u8x16"],[15,"u8"],[3,"u16x8"],[15,"u16"],[3,"u32x4"],[15,"u32"],[3,"u32x8"],[3,"u64x2"],[15,"u64"],[3,"u64x4"],[15,"bool"],[15,"array"],[3,"Formatter"],[6,"Result"],[15,"slice"],[8,"Iterator"],[15,"u128"],[15,"i128"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"CmpEq"],[8,"CmpGt"],[8,"CmpGe"],[8,"CmpNe"],[8,"CmpLt"],[8,"CmpLe"]]},\
"zerocopy":{"doc":"<em>Want to help improve zerocopy? Fill out our user survey!</em>","t":"IIIIIDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKOOOLLLLLLLLLLLLLL","n":["AsBytes","ByteSlice","ByteSliceMut","FromBytes","FromZeroes","Ref","Unalign","Unaligned","as_bytes","as_bytes_mut","as_mut_ptr","as_ptr","borrow","borrow","borrow_mut","borrow_mut","bytes","bytes_mut","clone","cmp","cmp","cmp","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut_unchecked","deref_unchecked","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","get","get_mut_ptr","get_ptr","hash","include_value","into","into","into_inner","into_mut","into_mut_slice","into_ref","into_slice","mut_from","mut_from_prefix","mut_from_suffix","mut_slice_from","mut_slice_from_prefix","mut_slice_from_suffix","new","new","new_from_prefix","new_from_prefix_zeroed","new_from_suffix","new_from_suffix_zeroed","new_slice","new_slice_from_prefix","new_slice_from_prefix_zeroed","new_slice_from_suffix","new_slice_from_suffix_zeroed","new_slice_unaligned","new_slice_unaligned_from_prefix","new_slice_unaligned_from_prefix_zeroed","new_slice_unaligned_from_suffix","new_slice_unaligned_from_suffix_zeroed","new_slice_unaligned_zeroed","new_slice_zeroed","new_unaligned","new_unaligned_from_prefix","new_unaligned_from_prefix_zeroed","new_unaligned_from_suffix","new_unaligned_from_suffix_zeroed","new_unaligned_zeroed","new_zeroed","new_zeroed","partial_cmp","partial_cmp","partial_cmp","read","read_from","read_from_prefix","read_from_suffix","ref_from","ref_from_prefix","ref_from_suffix","set","slice_from","slice_from_prefix","slice_from_suffix","split_at","transmute","transmute_mut","transmute_ref","try_deref","try_deref_mut","try_from","try_from","try_into","try_into","type_id","type_id","update","write","write_to","write_to_prefix","write_to_suffix","zero"],"q":[[0,"zerocopy"]],"d":["Types which are safe to treat as an immutable byte slice.","A mutable or immutable reference to a byte slice.","A mutable reference to a byte slice.","Types for which any byte pattern is valid.","Types for which a sequence of bytes all set to zero …","A typed reference derived from a byte slice.","A type with no alignment requirement.","Types with no alignment requirement.","Gets the bytes of this value.","Gets the bytes of this value mutably.","Gets a mutable raw pointer to the first byte in the slice.","Gets a raw pointer to the first byte in the slice.","","","","","Gets the underlying bytes.","Gets the underlying bytes mutably.","","","","","","","","","","","","Returns a mutable reference to the wrapped <code>T</code> without …","Returns a reference to the wrapped <code>T</code> without checking …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Gets a copy of the inner <code>T</code>.","Gets an unaligned mutable raw pointer to the inner <code>T</code>.","Gets an unaligned raw pointer to the inner <code>T</code>.","","Includes a file and safely transmutes it to a value of an …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes <code>self</code>, returning the inner <code>T</code>.","Converts this <code>Ref</code> into a mutable reference.","Converts this <code>Ref</code> into a mutable slice reference.","Converts this <code>Ref</code> into a reference.","Converts this <code>Ref</code> into a slice reference.","Interprets the given <code>bytes</code> as a <code>&amp;mut Self</code> without copying.","Interprets the prefix of the given <code>bytes</code> as a <code>&amp;mut Self</code> …","Interprets the suffix of the given <code>bytes</code> as a <code>&amp;mut Self</code> …","Interprets the given <code>bytes</code> as a <code>&amp;mut [Self]</code> without …","Interprets the prefix of the given <code>bytes</code> as a <code>&amp;mut [Self]</code> …","Interprets the suffix of the given <code>bytes</code> as a <code>&amp;mut [Self]</code> …","Constructs a new <code>Ref</code>.","Constructs a new <code>Unalign</code>.","Constructs a new <code>Ref</code> from the prefix of a byte slice.","Constructs a new <code>Ref</code> from the prefix of a byte slice, …","Constructs a new <code>Ref</code> from the suffix of a byte slice.","Constructs a new <code>Ref</code> from the suffix of a byte slice, …","Constructs a new <code>Ref</code> of a slice type.","Constructs a new <code>Ref</code> of a slice type from the prefix of a …","Constructs a new <code>Ref</code> of a slice type from the prefix of a …","Constructs a new <code>Ref</code> of a slice type from the suffix of a …","Constructs a new <code>Ref</code> of a slice type from the prefix of a …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> for a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type after zeroing the …","Constructs a new <code>Ref</code> for a type with no alignment …","Constructs a new <code>Ref</code> from the prefix of a byte slice for a …","Constructs a new <code>Ref</code> from the prefix of a byte slice for a …","Constructs a new <code>Ref</code> from the suffix of a byte slice for a …","Constructs a new <code>Ref</code> from the suffix of a byte slice for a …","Constructs a new <code>Ref</code> for a type with no alignment …","Creates an instance of <code>Self</code> from zeroed bytes.","Constructs a new <code>Ref</code> after zeroing the bytes.","","","","Reads a copy of <code>T</code>.","Reads a copy of <code>Self</code> from <code>bytes</code>.","Reads a copy of <code>Self</code> from the prefix of <code>bytes</code>.","Reads a copy of <code>Self</code> from the suffix of <code>bytes</code>.","Interprets the given <code>bytes</code> as a <code>&amp;Self</code> without copying.","Interprets the prefix of the given <code>bytes</code> as a <code>&amp;Self</code> …","Interprets the suffix of the given <code>bytes</code> as a <code>&amp;Self</code> …","Sets the inner <code>T</code>, dropping the previous value.","Interprets the given <code>bytes</code> as a <code>&amp;[Self]</code> without copying.","Interprets the prefix of the given <code>bytes</code> as a <code>&amp;[Self]</code> with …","Interprets the suffix of the given <code>bytes</code> as a <code>&amp;[Self]</code> with …","Splits the slice at the midpoint.","Safely transmutes a value of one type to a value of …","Safely transmutes a mutable reference of one type to an …","Safely transmutes a mutable or immutable reference of one …","Attempts to return a reference to the wrapped <code>T</code>, failing …","Attempts to return a mutable reference to the wrapped <code>T</code>, …","","","","","","","Updates the inner <code>T</code> by calling a function on it.","Writes the bytes of <code>t</code> and then forgets <code>t</code>.","Writes a copy of <code>self</code> to <code>bytes</code>.","Writes a copy of <code>self</code> to the prefix of <code>bytes</code>.","Writes a copy of <code>self</code> to the suffix of <code>bytes</code>.","Overwrites <code>self</code> with zeroes."],"i":[0,0,0,0,0,0,0,0,14,14,7,4,6,9,6,9,6,6,9,6,6,9,9,6,6,9,6,6,9,9,9,6,6,9,6,6,6,6,9,9,6,9,9,9,9,9,0,6,9,9,6,6,6,6,3,3,3,3,3,3,6,9,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,29,6,6,6,9,6,3,3,3,3,3,3,9,3,3,3,4,0,0,0,9,9,6,9,6,9,6,9,9,6,14,14,14,29],"f":[0,0,0,0,0,0,0,0,[[],[[2,[1]]]],[3,[[2,[1]]]],[[],1],[[],1],[[]],[[]],[[]],[[]],[[[6,[4,5]]],[[2,[1]]]],[[[6,[7,5]]],[[2,[1]]]],[[[9,[8]]],[[9,[8]]]],[[[6,[4,[0,[3,10]]]],[6,[4,[0,[3,10]]]]],11],[[[6,[4,[2,[[0,[3,10]]]]]],[6,[4,[2,[[0,[3,10]]]]]]],11],[[[9,[[0,[12,10]]]],[9,[[0,[12,10]]]]],11],[[],[[9,[13]]]],[[[6,[4,3]]],3],[[[6,[4,[2,[3]]]]],[[2,[3]]]],[[[9,[12]]],12],[[[6,[7,[0,[3,14]]]]],[[0,[3,14]]]],[[[6,[7,[2,[[0,[3,14]]]]]]],[[2,[[0,[3,14]]]]]],[[[9,[12]]],12],[9],[9],[[[6,[4,[0,[3,15]]]],[6,[4,[0,[3,15]]]]],16],[[[6,[4,[2,[[0,[3,15]]]]]],[6,[4,[2,[[0,[3,15]]]]]]],16],[[[9,[[0,[12,15]]]],[9,[[0,[12,15]]]]],16],[[[6,[4,[0,[3,17]]]],18],19],[[[6,[4,[2,[[0,[3,20]]]]]],18],19],[[[6,[4,[2,[3]]]],18],19],[[[6,[4,[0,[3,20]]]],18],19],[[[9,[[0,[12,17]]]],18],19],[[[9,[[0,[12,20]]]],18],19],[[]],[[]],[[[9,[8]]],8],[9],[9],[[[9,[[0,[12,21]]]],22]],0,[[]],[[]],[9],[[[6,[7,[0,[3,14]]]]],[[0,[3,14]]]],[[[6,[7,[2,[[0,[3,14]]]]]]],[[2,[[0,[3,14]]]]]],[[[6,[4,3]]],3],[[[6,[4,[2,[3]]]]],[[2,[3]]]],[[[2,[1]]],[[23,[[0,[5,14]]]]]],[[[2,[1]]],[[23,[[0,[5,14]]]]]],[[[2,[1]]],[[23,[[0,[5,14]]]]]],[[[2,[1]]],[[23,[[2,[[0,[5,14]]]]]]]],[[[2,[1]],24],23],[[[2,[1]],24],23],[4,[[23,[[6,[4]]]]]],[[],9],[4,23],[7,23],[4,23],[7,23],[4,[[23,[[6,[4,2]]]]]],[[4,24],23],[[7,24],23],[[4,24],23],[[7,24],23],[4,[[23,[[6,[4,[2,[12]]]]]]]],[[4,24],23],[[7,24],23],[[4,24],23],[[7,24],23],[7,[[23,[[6,[7,[2,[12]]]]]]]],[7,[[23,[[6,[7,2]]]]]],[4,[[23,[[6,[4,12]]]]]],[4,23],[7,23],[4,23],[7,23],[7,[[23,[[6,[7,12]]]]]],[[],5],[7,[[23,[[6,[7]]]]]],[[[6,[4,[0,[3,25]]]],[6,[4,[0,[3,25]]]]],[[23,[11]]]],[[[6,[4,[2,[[0,[3,25]]]]]],[6,[4,[2,[[0,[3,25]]]]]]],[[23,[11]]]],[[[9,[[0,[12,25]]]],[9,[[0,[12,25]]]]],[[23,[11]]]],[[[6,[4,3]]],3],[[[2,[1]]],[[23,[5]]]],[[[2,[1]]],[[23,[5]]]],[[[2,[1]]],[[23,[5]]]],[[[2,[1]]],[[23,[5]]]],[[[2,[1]]],[[23,[5]]]],[[[2,[1]]],[[23,[5]]]],[9],[[[2,[1]]],[[23,[[2,[5]]]]]],[[[2,[1]],24],23],[[[2,[1]],24],23],[24],0,0,0,[9,23],[9,23],[[],26],[[],26],[[],26],[[],26],[[],27],[[],27],[[9,28]],[[[6,[7,14]],14]],[[[2,[1]]],23],[[[2,[1]]],23],[[[2,[1]]],23],[[]]],"c":[],"p":[[15,"u8"],[15,"slice"],[8,"FromBytes"],[8,"ByteSlice"],[8,"Sized"],[3,"Ref"],[8,"ByteSliceMut"],[8,"Copy"],[3,"Unalign"],[8,"Ord"],[4,"Ordering"],[8,"Unaligned"],[8,"Default"],[8,"AsBytes"],[8,"PartialEq"],[15,"bool"],[8,"Display"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"Hash"],[8,"Hasher"],[4,"Option"],[15,"usize"],[8,"PartialOrd"],[4,"Result"],[3,"TypeId"],[8,"FnOnce"],[8,"FromZeroes"]],"a":{"include_bytes":[46],"include_data":[46],"include_type":[46]}}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
