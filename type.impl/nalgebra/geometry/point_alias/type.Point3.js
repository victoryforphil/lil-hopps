(function() {var type_impls = {
"parry3d":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-OPoint%3CN,+Const%3C3%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/parry3d/utils/as_bytes.rs.html#29\">source</a><a href=\"#impl-AsBytes-for-OPoint%3CN,+Const%3C3%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N: <a class=\"trait\" href=\"simba/scalar/real/trait.RealField.html\" title=\"trait simba::scalar::real::RealField\">RealField</a>&gt; <a class=\"trait\" href=\"parry3d/utils/trait.AsBytes.html\" title=\"trait parry3d::utils::AsBytes\">AsBytes</a> for <a class=\"type\" href=\"nalgebra/geometry/point_alias/type.Point3.html\" title=\"type nalgebra::geometry::point_alias::Point3\">Point3</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/parry3d/utils/as_bytes.rs.html#29\">source</a><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"parry3d/utils/trait.AsBytes.html#tymethod.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Converts <code>self</code> to a slice of bytes.</div></details></div></details>","AsBytes","parry3d::math::Point"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()